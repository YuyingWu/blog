<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伍酱</title>
  
  <subtitle>吾悠杂货铺</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://wuyuying.com/"/>
  <updated>2018-07-05T05:35:06.000Z</updated>
  <id>http://wuyuying.com/</id>
  
  <author>
    <name>Yuying Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS自定义属性 —— 别说你懂CSS相对单位</title>
    <link href="http://wuyuying.com/archives/css-in-depth-css-variables/"/>
    <id>http://wuyuying.com/archives/css-in-depth-css-variables/</id>
    <published>2018-07-05T05:28:04.000Z</published>
    <updated>2018-07-05T05:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href="https://github.com/YuyingWu/blog/tree/dev/source/_posts" target="_blank" rel="noopener">Github PR</a> ^_^）</p><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a> [本文]</li></ul><p>本文对应的章节目录：</p><ul><li>2.6 自定义属性（也叫“CSS变量”）<ul><li>2.6.1 动态改变自定义属性的值</li><li>2.6.2 通过JavaScript改变自定义属性的值</li><li>2.6.3 初探自定义属性</li></ul></li><li>总结</li></ul><hr><h2 id="2-6-自定义属性（也叫“CSS变量”）"><a href="#2-6-自定义属性（也叫“CSS变量”）" class="headerlink" title="2.6 自定义属性（也叫“CSS变量”）"></a>2.6 自定义属性（也叫“CSS变量”）</h2><p>在2015年，一个大家期待已久的名为“用作层叠式变量的自定义属性”（Custom Properties for Cascading Variables）的CSS规范终于发布为“候选推荐标准”（Candidate Recommendation）。这套规范引入了CSS中“变量”的概念，支持一种新的基于上下文的动态样式定义方式。你可以声明一个变量，再给它赋值，然后就可以在样式表的任何地方引用它。你可以通过这样的方式，减少样式表中的重复代码，以及后续你会看到的一些有用的应用场景。</p><p>在写这本书的时候，自定义属性已经被大多数主流浏览器支持了，除了IE。查看最新的浏览器支持情况，可以查看Can I Use的<a href="http://caniuse.com/#feat=css-variables" target="_blank" rel="noopener">http://caniuse.com/#feat=css-variables</a>。</p><blockquote><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>如果你刚好在用支持自定义变量的CSS预处理器，如Sass（syntactically awesome stylesheets）或Less，你可能会下意识拒绝CSS变量。千万别这么做。因为原生的CSS变量比任何一个预处理器能实现的功能都要强大和灵活。为了强调它们之间（原生CSS变量和预处理器自定义变量）的差异，我会把它叫作“自定义属性”，而不用“CSS变量”。</p></blockquote><p>声明一个自定义属性，跟声明其他属性类似。代码片段2.23是自定义属性声明的例子。新建一个页面和样式表吧，然后添加以下的CSS代码。</p><p>[ 代码片段 2.23 声明一个自定义属性 ]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--main-font</span>: Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码片段中，定义了一个名叫<code>--main-font</code>的变量，然后把它的值设定为普通的字体sans-serif。为了和其他属性区分开，命名的前缀必须是两道横杠（<code>--</code>），然后写上你想要的名字。</p><p>变量一定要声明在一个声明区块内。在这里，我使用了<code>:root</code>选择器，那么这个变量就可以在整个页面的样式里使用 —— 后面我会简单解释这个问题。</p><p>变量的声明，就它本身而言，不会做任何事情，直到我们在代码里引用它。我们在一个段落中使用它吧，做成像图2.13那样的效果。</p><p>[ 图 2.13 对一个简单段落使用用变量声明的字体sans-serif ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig13_alt.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530702338&amp;ssig=vODl2nMC4F" alt="&quot;图 2.13&quot;"></p><p>我们可以用一个叫作<code>var()</code>的函数去引用自定义属性的值。现在，你可以利用这个函数去引用我们刚才声明的变量<code>--main-font</code>。把下面展示的代码片段添加到你的样式表中吧，把变量用起来。</p><p>[ 代码片段 2.24 使用一个自定义属性 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  --main-<span class="attribute">font</span>: Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;                                    1</span><br><span class="line">  <span class="attribute">font-family</span>: var(--main-font);       1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 把段落的字体定义为 Helvetica, Arial, sans-serif</li></ul><p>自定义属性可以让你在一个地方声明它的值，作为一个“单一数据源”（single source of truth），然后在样式表的任意一个地方引用。这一点对一些反复出现的值特别有用，譬如颜色。下一个代码片段添加了一个名叫<code>brand-color</code>的自定义属性。你可以在样式表中多次使用这个变量，但假如你需要（全局）修改它的值，只需要在一行代码中编辑它的值就可以了。</p><p>[ 代码片段 2.25 对color使用自定义属性 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  --main-<span class="attribute">font</span>: Helvetica, Arial, sans-serif;</span><br><span class="line">  --brand-<span class="attribute">color</span>: <span class="number">#369</span>;                           1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: var(--main-font);</span><br><span class="line">  <span class="attribute">color</span>: var(--brand-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 声明一个蓝色的<code>brand-color</code>变量</li></ul><p><code>var()</code>函数支持第二个参数，代表一个默认值。假如一个变量被声明的时候，第一个参数没有被声明，那么第二个参数值就会被引用。</p><p>[ 代码片段 2.26 提供回退默认值 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  --main-<span class="attribute">font</span>: Helvetica, Arial, sans-serif;</span><br><span class="line">  --brand-<span class="attribute">color</span>: <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: var(--main-font, sans-serif);         1</span><br><span class="line">  <span class="attribute">color</span>: var(--secondary-color, blue);               2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 声明一个默认值 sans-serif</li><li>2 变量 secondary-color 没有被声明，于是默认值 blue 会被使用</li></ul><p>这段代码在两个不同的声明中，定义了默认值。第一个声明里，<code>--main-font</code>被声明，值为<code>Helvetica, Arial,sans-serif</code>，于是这个值就会被用到了。第二个声明里，<code>--secondary-color</code>是一个没有声明过的变量，所以默认值 blue 被用到了。</p><blockquote><p>笔记<br>如果<code>var()</code>被定义为一个无效值，这个属性会被定义为它的初始值。举个例子，如果在<code>padding: var(--brand-color)</code>中，变量是一个色号，那对于padding来说这就是一个无效值。在这个情况下，padding的值会被定义为0。</p></blockquote><h3 id="2-6-1-动态改变自定义属性的值"><a href="#2-6-1-动态改变自定义属性的值" class="headerlink" title="2.6.1 动态改变自定义属性的值"></a>2.6.1 动态改变自定义属性的值</h3><p>从这些例子可以看到，自定义属性只是更方便了一点，也可以帮助你减少很多的重复代码。但让自定义属性更有意思的是，自定义属性的声明是可以层叠和继承的。你可以在多个选择器中声明同一个变量，这些变量在页面的不同部分可以有着不一样的值。</p><p>你可以声明一个变量是黑色的，举个例子，然后在一个特定的容器里把它重新定义为白色的。于是，在这个容器以外的所有依赖这个变量的颜色是黑色，而在容器内的就是白色。通过这样的方式，我们来实现一个像图2.14这样的效果。</p><p>[ 图 2.14 自定义属性基于不同域下的值，生成两个颜色不一样的面板 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig14_alt.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530702410&amp;ssig=dvHaP8yL6X" alt="&quot;图 2.14&quot;"></p><p>这个面板类似你之前看到的那个（图2.7），HTML在代码片段2.27。这个面板有两个实例，一个在body下，另一个在一个深色的区块。来，更新下你的代码。</p><p>[ 代码片段 2.27 页面上不同上下文的两个面板 ]</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"panel"</span>&gt;                               <span class="number">1</span></span><br><span class="line">    &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"body"</span>&gt;</span><br><span class="line">      We have built partnerships <span class="keyword">with</span> small farms</span><br><span class="line">      <span class="keyword">around</span> <span class="keyword">the</span> world <span class="keyword">to</span> hand-select beans <span class="keyword">at</span> <span class="keyword">the</span></span><br><span class="line">      peak <span class="keyword">of</span> season. We <span class="keyword">then</span> careful roast <span class="keyword">in</span></span><br><span class="line">      small batches <span class="keyword">to</span> maximize their potential.</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;aside <span class="built_in">class</span>=<span class="string">"dark"</span>&gt;                              <span class="number">2</span></span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"panel"</span>&gt;                             <span class="number">2</span></span><br><span class="line">      &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"body"</span>&gt;</span><br><span class="line">        We have built partnerships <span class="keyword">with</span> small farms</span><br><span class="line">        <span class="keyword">around</span> <span class="keyword">the</span> world <span class="keyword">to</span> hand-select beans <span class="keyword">at</span> <span class="keyword">the</span></span><br><span class="line">        peak <span class="keyword">of</span> season. We <span class="keyword">then</span> careful roast <span class="keyword">in</span></span><br><span class="line">        small batches <span class="keyword">to</span> maximize their potential.</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/aside&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>1 页面上一个普通的面板</li><li>2 第二个面板在深色容器里</li></ul><p>我们用变量重新改写一下面板中的文字和背景颜色。把下面的代码片段加进你的样式表。这里把背景颜色设成白色，文字颜色设成黑色。在你添加深色主题之前，我会解释这段代码的工作原理。</p><p>[ 代码片段 2.28 利用变量定义面板的颜色 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  --main-bg: <span class="number">#fff</span>;                       1</span><br><span class="line">  --main-<span class="attribute">color</span>: <span class="number">#000</span>;                    1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: var(--main-bg);      2</span><br><span class="line">  <span class="attribute">color</span>: var(--main-color);              2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &gt; <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 分别把背景色和文字颜色定义为白色和黑色</li><li>2 在面板样式中使用变量</li></ul><p>你再一次把变量声明在<code>:root</code>选择器里。很明显，这样的话我们就可以在根元素（整个页面）下的任何元素中引用这个变量了。当根元素下的子元素使用这些变量时，它们就能拿到这些变量对应的值。</p><p>你有两个面板，不过它们仍然看起来是一样的。现在，再一次定义这些变量，但这次是在一个不同的选择器中。下一个代码片段是深色容器的，它有深灰色的背景色，以及小小的padding和margin。同时，它也重写了两个变量。添加到你的样式表吧。</p><p>[ 代码片段 2.29 设置深色容器的样式 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dark</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">2em</span>;                   1</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#999</span>;            2</span><br><span class="line">  --main-bg: <span class="number">#333</span>;                   3</span><br><span class="line">  --main-<span class="attribute">color</span>: <span class="number">#fff</span>;                3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 在深色容器和上一个容器间设定一个margin</li><li>2 给深色容器设定深灰色的背景色</li><li>3 在当前容器的作用域下，重新定义–main-bg 和 –main-color的值</li></ul><p>刷新页面，第二个面板就会有深色背景和白色文字。这是因为当这个面板去调用这些变量时，拿到的是深色容器作用域下的值，而不是根元素域下的值。注意，你并不需要修改这个容器里的样式或者添加额外的类名。</p><p>在这个例子里，你两次定义了自定义属性，第一次在根元素作用域上（<code>--main-color</code>是黑色的），第二次在深色容器作用域（<code>--main-color</code>是白色的）。自定义属性表现得像作用域变量，因为值会被后代元素继承。在深色容器中，<code>--main-color</code>是白色的，而在页面的其他位置，它是黑色的。</p><h3 id="2-6-2-通过JavaScript改变自定义属性的值"><a href="#2-6-2-通过JavaScript改变自定义属性的值" class="headerlink" title="2.6.2 通过JavaScript改变自定义属性的值"></a>2.6.2 通过JavaScript改变自定义属性的值</h3><p>在浏览器中，自定义属性还可以被JavaScript访问和动态地修改。毕竟这不是一本讲JavaScript的书，我会告诉你足够多的基本概念，然后你再把这些融入到自己的JavaScript项目中。</p><p>[ 代码片段 2.30 在JavaScript里访问一个自定义变量 ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> rootElement = <span class="built_in">document</span>.documentElement;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> styles = getComputedStyle(rootElement);                 <span class="number">1</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> mainColor = styles.getPropertyValue(<span class="string">'--main-bg'</span>);       <span class="number">2</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="built_in">String</span>(mainColor).trim());                      <span class="number">3</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>1 获取元素的样式对象（style object）</li><li>2 从样式对象中获得 –main-bg 的值</li><li>3 确认 mainColor 是一个字符串以及把空格去掉，输出“#fff”</li></ul><p>因为你可以随手修改自定义属性的值，你可以用JavaScript给<code>--main-bg</code>动态地定义一个新的值。如果你把它定义为浅蓝色，它就是展示成这样（图2.15）。</p><p>[ 图 2.15 JavaScript可以通过改变变量–main-bg的值改变面板的背景色 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig15_alt.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530702490&amp;ssig=8YBzWhhoQ6" alt="&quot;图 2.15&quot;"></p><p>下面的代码片段，会在根元素下给<code>--main-bg</code>定义一个新的值，在<code>&lt;script&gt;</code>标签的最下面，加上这些的代码。</p><p>[ 代码片段 2.31 在JavaScript定义一个自定义变量的值 ]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rootElement = <span class="built_in">document</span>.documentElement;</span><br><span class="line">rootElement.style.setProperty(<span class="string">'--main-bg'</span>, <span class="string">'#cdf'</span>);            <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>1 把根元素下的 –main-bg 定义为浅蓝色</li></ul><p>如果你执行这段代码，任何继承了<code>--main-bg</code>属性的元素都会发生改变，对应的值会变成新的。在你的页面上，这会把第一个面板的背景色变成浅蓝色。第二个面板保持不变，因为它继承的还是在深色容器里定义的值。</p><p>利用这项技术，你可以在浏览器里用JavaScript给你的站点换主题。或者你可以高亮页面上的某些部分，又或者随手就可以做一些改变。只需要少量几行JavaScript代码，你做的改变就可以影响到页面上大量的元素。</p><h3 id="2-6-3-初探自定义属性"><a href="#2-6-3-初探自定义属性" class="headerlink" title="2.6.3 初探自定义属性"></a>2.6.3 初探自定义属性</h3><p>自定义属性是一个全新的CSS领域，开发者才刚刚开始探索。因为目前浏览器的支持比较有限，所以还没有到使用它的“黄金时间”。我相信，一段时间之后，你会看到很多关于自定义属性的最佳实践和新颖的玩法。这是你需要留意的。尝试使用自定义属性，看看你可以做出些什么吧。</p><p>需要关注的一点，如果你使用<code>var()</code>声明，低版本浏览器不能识别就会忽略它。如果可以的话，给那些浏览器提供一个回退（fallback）方案。</p><p>[ 代码片段（没有编号） ]</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">color</span>: black;</span><br><span class="line"><span class="built_in">color</span>: <span class="built_in">var</span>(--main-<span class="built_in">color</span>);</span><br></pre></td></tr></table></figure><p>自定义属性原生的动态特性，并不是总是可以使用的，可以关注它的浏览器支持情况<a href="http://caniuse.com" target="_blank" rel="noopener">http://caniuse.com</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>拥抱和使用相对单位，让页面的结构去定义样式代码的含义</li><li>个人喜欢对字号大小使用rem，选择性地对页面组件的一些简单缩放效果使用em</li><li>你可以让整个页面实现响应式缩放，而不需要任何的媒体查询</li><li>在声明行高时，使用不带单位的数值</li><li>开始了解和使用CSS最新的特性之一——自定义属性吧！</li></ul><hr><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a> [本文]</li></ul><p>章节：</p><ul><li>2.1 相对单位值的魔力<ul><li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li><li>2.1.2 完美像素网页的终结</li><li>像素（pixel）、点（point）和pc（pica）</li></ul></li><li>2.2 em和rem<ul><li>2.2.1 对font-size使用em<ul><li>当我们在一个元素内用em同时声明font-size和其他属性</li><li>字号收缩问题</li></ul></li><li>2.2.2 对font-size使用rem<ul><li>可用性：对font-size使用相对长度单位</li></ul></li></ul></li><li>2.3 停止使用像素思维去思考<ul><li>2.3.1 设置一个合理的字号默认值</li><li>2.3.3 让这个面板变得“响应式”</li><li>2.3.3 调整单个组件的大小</li></ul></li><li>2.4 视口相关单位（viewport-relative units）<ul><li>CSS3</li><li>2.4.1 在font-size上使用vw</li><li>2.4.2 在font-size上使用calc()</li></ul></li><li>2.5 不带单位的数字（unitless number）和行高（line-height）</li><li>2.6 自定义属性（也叫“CSS变量”）<ul><li>2.6.1 动态改变自定义属性的值</li><li>2.6.2 通过JavaScript改变自定义属性的值</li><li>2.6.3 初探自定义属性</li></ul></li><li>总结</li></ul><hr><p>原著版权信息：</p><p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href="https://livebook.manning.com/#!/book/css-in-depth/chapter-2" target="_blank" rel="noopener">Working with relative units</a>  </p><hr><p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p><p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p><p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p><p>独立博客：<a href="http://wuyuying.com/">wuyuying.com</a><br>知乎ID：<a href="https://www.zhihu.com/people/yuying_wu/posts" target="_blank" rel="noopener">@Yuying Wu</a><br>Github：<a href="https://github.com/YuyingWu" target="_blank" rel="noopener">Yuying Wu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="css" scheme="http://wuyuying.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>无单位数字和行高 —— 别说你懂CSS相对单位</title>
    <link href="http://wuyuying.com/archives/css-in-depth-unitless-number/"/>
    <id>http://wuyuying.com/archives/css-in-depth-unitless-number/</id>
    <published>2018-07-05T05:28:03.000Z</published>
    <updated>2018-07-05T05:28:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href="https://github.com/YuyingWu/blog/tree/dev/source/_posts" target="_blank" rel="noopener">Github PR</a> ^_^）</p><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a> [本文]</li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>本文对应的章节目录：</p><ul><li>2.5 不带单位的数字（unitless number）和行高（line-height）</li></ul><hr><h2 id="2-5-无单位数字（unitless-number）和行高（line-height）"><a href="#2-5-无单位数字（unitless-number）和行高（line-height）" class="headerlink" title="2.5 无单位数字（unitless number）和行高（line-height）"></a>2.5 无单位数字（unitless number）和行高（line-height）</h2><p>有一些属性可以接收不带单位的数值（意思就是一个不带长度单位的数字），如<code>line-height</code>、<code>z-index</code>和<code>font-weight</code>（700等于bold，400等于normal，如此类推）。你也可以在需要长度单位的地方（如px、em、rem）使用一个不带单位的<code>0</code>，因为长度已经是0了，带不带单位也无所谓了 —— 0px 等于 0% 等于 0em。</p><blockquote><p>警告</p><p>不带单位的0只可以表示长度单位和百分比的值，譬如padding、border和width。而对于一些特殊的情况，如度数（degrees）或者像秒这样基于时间的值（time-based values），是不可以使用不带单位的0的。</p></blockquote><p><code>line-height</code>属性最特别的地方，在于同时支持带单位和不带单位的值。你应该保持使用不带单位的数值，因为这样就可以从父元素继承。我们在页面上写点文字，看看它是怎么表现的吧。把下面代码添加到你的样式表。</p><p>[ 代码片段 2.20 继承<code>line-height</code>的模板 ]</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p <span class="built_in">class</span>=<span class="string">"about-us"</span>&gt;</span><br><span class="line">    We have built partnerships <span class="keyword">with</span> small farms <span class="keyword">around</span> <span class="keyword">the</span> world <span class="keyword">to</span></span><br><span class="line">    hand-select beans <span class="keyword">at</span> <span class="keyword">the</span> peak <span class="keyword">of</span> season. We <span class="keyword">then</span> carefully roast <span class="keyword">in</span></span><br><span class="line">    small batches <span class="keyword">to</span> maximize their potential.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>给body声明一个line-height，然后文档的其他元素会从这里继承。页面的展示符合预期，不管你对页面的其他元素的字号大小做了什么改变。</p><p>[ 图 2.11 不带单位的行高，会在每个后代元素下重新计算出实际值 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig11.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530702088&amp;ssig=2WgcfHJiZT" alt="&quot;图 2.11&quot;"></p><p>把代码片段2.21的内容添加到你的样式表。段落（<code>&lt;p&gt;</code>）继承了1.2的行高。因为字号是32px（2em <em> 16px，浏览器默认字号大小），所以本地的行高计算值是38.4px（32px </em> 1.2）。这会给段落的行间距留下比较合适的空间。</p><p>[ 代码片段 2.21 对line-height使用不带单位的值 ]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;               <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about-us</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 后代元素继承不带单位的值</li></ul><p>如果你给行高设定了一个带单位的值，你可能会得到意想不到的结果，如图2.12那样，行间文字互相重叠了，代码片段2.22则是造成这个结果的CSS代码。</p><p>[ 图 2.12 继承行高造成的行间互叠 ]<br><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig12.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530702131&amp;ssig=vjrNtToK7C" alt="&quot;图 2.12&quot;"></p><p>[ 代码片段 2.22 带单位的行高值造成意外的结果 ]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2em</span>;             <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about-us</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;                 <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 后代元素继承了计算值（19.2px）</li><li>2 等于32px</li></ul><p>这样的结果源于一次奇怪的继承：当一个元素是用带单位的值声明的，那么它的后代元素会继承计算结果值。当行高属性是用类似em来声明时，它的值会先被计算，然后计算后的值会传到任何继承它的后代元素。对于<code>line-height</code>这个属性来说，如果子元素有跟父元素不一样字号大小的情况，就会导致意想不到的结果，譬如文字间的遮挡。</p><blockquote><p>长度 —— CSS中用来描述距离测量的正式用语。它是一个带单位的数字，如5px。长度有两种类型：绝对的和相对的。百分比跟长度很类似，但严格来说，百分比不能叫长度。</p></blockquote><p>当你（对某个属性）使用不带单位的数字，声明的值会被继承，也就是说这个值会在子元素中用来重新计算子元素域下的值，而这个通常是你想要的效果。使用不带单位的数字，可以让你在body上设定一个行高，然后什么都不用管，页面上其他元素会默认继承，除非在某个特定的地方你想要做一个额外的样式。</p><hr><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a> [本文]</li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>章节：</p><ul><li>2.1 相对单位值的魔力<ul><li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li><li>2.1.2 完美像素网页的终结</li><li>像素（pixel）、点（point）和pc（pica）</li></ul></li><li>2.2 em和rem<ul><li>2.2.1 对font-size使用em<ul><li>当我们在一个元素内用em同时声明font-size和其他属性</li><li>字号收缩问题</li></ul></li><li>2.2.2 对font-size使用rem<ul><li>可用性：对font-size使用相对长度单位</li></ul></li></ul></li><li>2.3 停止使用像素思维去思考<ul><li>2.3.1 设置一个合理的字号默认值</li><li>2.3.3 让这个面板变得“响应式”</li><li>2.3.3 调整单个组件的大小</li></ul></li><li>2.4 视口相关单位（viewport-relative units）<ul><li>CSS3</li><li>2.4.1 在font-size上使用vw</li><li>2.4.2 在font-size上使用calc()</li></ul></li><li>2.5 不带单位的数字（unitless number）和行高（line-height）</li><li>2.6 自定义属性（也叫“CSS变量”）<ul><li>2.6.1 动态改变自定义属性的值</li><li>2.6.2 通过JavaScript改变自定义属性的值</li><li>2.6.3 初探自定义属性</li></ul></li><li>总结</li></ul><hr><p>原著版权信息：</p><p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href="https://livebook.manning.com/#!/book/css-in-depth/chapter-2" target="_blank" rel="noopener">Working with relative units</a>  </p><hr><p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p><p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p><p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p><p>独立博客：<a href="http://wuyuying.com/">wuyuying.com</a><br>知乎ID：<a href="https://www.zhihu.com/people/yuying_wu/posts" target="_blank" rel="noopener">@Yuying Wu</a><br>Github：<a href="https://github.com/YuyingWu" target="_blank" rel="noopener">Yuying Wu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="css" scheme="http://wuyuying.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>视口相关单位的应用 —— 别说你懂CSS相对单位</title>
    <link href="http://wuyuying.com/archives/css-in-depth-viewport-relative-units/"/>
    <id>http://wuyuying.com/archives/css-in-depth-viewport-relative-units/</id>
    <published>2018-07-05T05:28:02.000Z</published>
    <updated>2018-07-05T05:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href="https://github.com/YuyingWu/blog/tree/dev/source/_posts" target="_blank" rel="noopener">Github PR</a> ^_^）</p><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a> [本文]</li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>本文对应的章节目录：</p><ul><li>2.4 视口相关单位（viewport-relative units）<ul><li>CSS3</li><li>2.4.1 在font-size上使用vw</li><li>2.4.2 在font-size上使用calc()</li></ul></li></ul><hr><h2 id="2-4-视口相关单位（viewport-relative-units）"><a href="#2-4-视口相关单位（viewport-relative-units）" class="headerlink" title="2.4 视口相关单位（viewport-relative units）"></a>2.4 视口相关单位（viewport-relative units）</h2><p>你已经学完em和rem了，它们都是以<code>font-size</code>为基准值的，但相对单位不只它们。还有视口相关单位，依赖浏览器的视口大小来定义长度的。</p><blockquote><p>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。</p></blockquote><p>如果你不熟悉视口相关单位的话，在这里简单介绍一下。</p><ul><li>vh —— 视口高度的1/100</li><li>vw —— 视口宽度的1/100</li><li>vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）</li><li>vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）</li></ul><p>举个例子，50vw等于视口宽度的一半，而25vh等于视口高度的25%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。</p><p>图2.10展示了一个正方形的元素在不同屏幕尺寸下的视口的情况。宽和高的值都声明为90vmin，也就是宽高较小值的90%。边长的值等于，横屏情况下高度的90%，或者竖屏情况下宽度的90%。</p><p>[ 图 2.10 如果把一个元素的宽高定义成90vmin，它总会展示成一个正方形，边长稍小于屏幕的视口，不管它的尺寸或方向怎样。 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig10_alt.jpg" alt="&quot;图 2.10&quot;"></p><p>在代码片段2.18可以看到这个元素的样式，渲染了一个适应屏幕尺寸的大正方形，不管浏览器的尺寸是多少。你可以通过添加<code>&lt;div class=&quot;square&quot;&gt;</code>，再看看页面效果。</p><p>[ 代码片段 2.18 边长使用<code>vmin</code>的正方形元素 ]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90vmin</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90vmin</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想做一个大英雄图片充满屏幕的效果，视口相关长度最合适不过。你的图片可以在一个长条形的容器内，把图片的高度设为100vh，那它的高度就会跟视口高度一样。</p><blockquote><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>视口相关单位对于大多数浏览器还是一项比较新的特性，所以当你试图把这个特性和其他样式混搭时，有可能会有一些很奇怪的bug。详情参考<a href="http://caniuse.com/#feat=viewport-units列表中的“已知问题（Known" target="_blank" rel="noopener">http://caniuse.com/#feat=viewport-units列表中的“已知问题（Known</a> Issues）”</p></blockquote><blockquote><h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><p>本章提到的很多单位类型，其实并不在早期的CSS版本里（尤其是rem和视口相关单位）。在这门语言一系列的更新迭代过程中，它们慢慢被加进来，我们将最新的版本称作CSS3。  </p><p>在二十世纪末二十一世纪初，在CSS规范的初版发布之后的很长一段时间，只有很小的改动。在1998年5月份，W3C（World Wide Web Consortium）发布了CSS 2规范。不久之后，修正版本2中问题和缺陷的2.1版本开始了，CSS 2.1的工作持续了好多年，但并没有添加什么令人印象深刻的特性。直到2011年4月份，版本2.1终于被确认为“提议推荐标准”（Proposed Recommendation）。到这个时候，大多数浏览器对CSS 2.1的特性已经支持得很好了，在此基础上，浏览器又努力地添加一些新的特性。这就是新规范CSS 3。  </p><p>“3”是个非正式的版本号，实际上并没有CSS3规范。相反，这个规范被拆成多个独立的模块，分别有独立的版本号。background和border的规范已经从盒模型（box model）以及层叠与继承（cascading and inheritance）规范中独立出来。通过这种方式，W3C就可以针对CSS某个模块进行更新迭代，而不用同时更新其他不相关的模块的内容。在这些模块规范里，很多还停留在第3版本（现在叫“第3级”），但有的模块（比如选择器规范（selectors specification））已经到第4级，而其他的模块（比如flexbox）还在第1级。  </p><p>这些新特性进入了人们的视野。我们可以看到在2009到2013年间，大量新的CSS特性涌进浏览器中。其中有现在比较出名的rem和视口相关单位，以及新的选择器（new selectors）、媒体查询（media queries）、网页文字（web fonts）、圆形边框（rounded borders）、动画（animation）、变换（transitions）、变形（transformations）以及定义颜色的不同方式。然而，每年的新特性的数量还在逐年稳定增长。  </p><p>这意味着，我们不再只跟一个特定版本的CSS规范打交道。这是一套有生命的标准，每个浏览器也在持续地支持新的特性，开发者会开始使用然后渐渐习惯它们。CSS4大概不会出现了，如果有的话，应该也只是个用于市场营销的名词。尽管这本书也会提到CSS3的新特性，但没有必要把它们都搬出来，就整个网页而言，这些都是CSS。</p></blockquote><h3 id="2-4-1-在font-size上使用vw"><a href="#2-4-1-在font-size上使用vw" class="headerlink" title="2.4.1 在font-size上使用vw"></a>2.4.1 在font-size上使用vw</h3><p>一个应用如果使用了视口相关单位，可能效果最不明显的地方就是用在字号大小上。事实上，我发现把vh和vw用在字号上比元素的宽或者高更实用。</p><p>试想一下，如果把元素的font-size声明为2vm，会怎么样？台式机屏幕宽是1200px，2vm等于24px（1200 <em> 2%）。而平板电脑的屏幕宽768px，2vm约等于15px（768 </em> 2%）。很棒的是，元素在两个尺寸下缩放自如。这意味着这里并没有一个突然的断点，元素会随着视口尺寸的增大而平滑增大。</p><p>不幸的是，24px对于大屏幕来说有点太大了。而更糟糕的是，在iPhone6它直接缩小到7.5px。好消息是缩放生效了，而坏消息是极限情况的处理有点差。你可以通过CSS的方法<code>calc()</code>解决这个问题。</p><h3 id="2-4-2-在font-size上使用calc"><a href="#2-4-2-在font-size上使用calc" class="headerlink" title="2.4.2 在font-size上使用calc()"></a>2.4.2 在font-size上使用calc()</h3><p><code>calc()</code>函数支持对2个或者更多个数值进行基础的运算。这个函数对不同类型的单位间的运算尤其有用。这个函数支持加（+）、减（-）、乘（*）和除以（/）。其中，加和减运算符左右必须留有空格，所以我建议我们来培养一个习惯，总是在四个运算符的两侧都写上空格，譬如<code>calc(1em + 10px)</code>。</p><p>你会在下一个代码片段中，使用<code>calc()</code>来计算vh单位和em单位的值。把你的样式表中的上一段设定基础字号大小的代码去掉（及相关的媒体查询代码），添加以下代码。</p><p>[ 代码片段 2.19 在font-size中使用em和vh单位进行calc()运算 ]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(0.5em + 1vw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，打开页面，缓慢地改变浏览器的大小。你会发现，字号改变的过渡很平滑。0.5em在这里代表的是字号的最小值，1vm则代表着响应式地往上累加。这样基础字号大小就在iPhone6的11.75px和1200px宽浏览器窗口的20px间缩放。你可以根据自己的喜好改变这些值。</p><p>你现在可以实现响应式策略的核心逻辑而不需要添加一行媒体查询的代码。页面上的所有元素可以根据视口大小平滑缩放，不再需要3或4个硬编码的断点。</p><h2 id="2-5-不带单位的数字（unitless-number）和行高（line-height）"><a href="#2-5-不带单位的数字（unitless-number）和行高（line-height）" class="headerlink" title="2.5 不带单位的数字（unitless number）和行高（line-height）"></a>2.5 不带单位的数字（unitless number）和行高（line-height）</h2><p>有一些属性可以接收不带单位的数值（意思就是一个不带长度单位的数字），如<code>line-height</code>、<code>z-index</code>和<code>font-weight</code>（700等于bold，400等于normal，如此类推）。你也可以在需要长度单位的地方（如px、em、rem）使用一个不带单位的<code>0</code>，因为长度已经是0了，带不带单位也无所谓了 —— 0px 等于 0% 等于 0em。</p><blockquote><p>警告</p><p>不带单位的0只可以表示长度单位和百分比的值，譬如padding、border和width。而对于一些特殊的情况，如度数（degrees）或者像秒这样基于时间的值（time-based values），是不可以使用不带单位的0的。</p></blockquote><p><code>line-height</code>属性最特别的地方，在于同时支持带单位和不带单位的值。你应该保持使用不带单位的数值，因为这样就可以从父元素继承。我们在页面上写点文字，看看它是怎么表现的吧。把下面代码添加到你的样式表。</p><p>[ 代码片段 2.20 继承<code>line-height</code>的模板 ]</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p <span class="built_in">class</span>=<span class="string">"about-us"</span>&gt;</span><br><span class="line">    We have built partnerships <span class="keyword">with</span> small farms <span class="keyword">around</span> <span class="keyword">the</span> world <span class="keyword">to</span></span><br><span class="line">    hand-select beans <span class="keyword">at</span> <span class="keyword">the</span> peak <span class="keyword">of</span> season. We <span class="keyword">then</span> carefully roast <span class="keyword">in</span></span><br><span class="line">    small batches <span class="keyword">to</span> maximize their potential.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>给body声明一个line-height，然后文档的其他元素会从这里继承。页面的展示符合预期，不管你对页面的其他元素的字号大小做了什么改变。</p><p>[ 图 2.11 不带单位的行高，会在每个后代元素下重新计算出实际值 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig11.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530702088&amp;ssig=2WgcfHJiZT" alt="&quot;图 2.11&quot;"></p><p>把代码片段2.21的内容添加到你的样式表。段落（<code>&lt;p&gt;</code>）继承了1.2的行高。因为字号是32px（2em <em> 16px，浏览器默认字号大小），所以本地的行高计算值是38.4px（32px </em> 1.2）。这会给段落的行间距留下比较合适的空间。</p><p>[ 代码片段 2.21 对line-height使用不带单位的值 ]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;               <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about-us</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 后代元素继承不带单位的值</li></ul><p>如果你给行高设定了一个带单位的值，你可能会得到意想不到的结果，如图2.12那样，行间文字互相重叠了，代码片段2.22则是造成这个结果的CSS代码。</p><p>[ 图 2.12 继承行高造成的行间互叠 ]<br><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig12.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530702131&amp;ssig=vjrNtToK7C" alt="&quot;图 2.12&quot;"></p><p>[ 代码片段 2.22 带单位的行高值造成意外的结果 ]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2em</span>;             <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about-us</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;                 <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 后代元素继承了计算值（19.2px）</li><li>2 等于32px</li></ul><p>这样的结果源于一次奇怪的继承：当一个元素是用带单位的值声明的，那么它的后代元素会继承计算结果值。当行高属性是用类似em来声明时，它的值会先被计算，然后计算后的值会传到任何继承它的后代元素。对于<code>line-height</code>这个属性来说，如果子元素有跟父元素不一样字号大小的情况，就会导致意想不到的结果，譬如文字间的遮挡。</p><blockquote><p>长度 —— CSS中用来描述距离测量的正式用语。它是一个带单位的数字，如5px。长度有两种类型：绝对的和相对的。百分比跟长度很类似，但严格来说，百分比不能叫长度。</p></blockquote><p>当你（对某个属性）使用不带单位的数字，声明的值会被继承，也就是说这个值会在子元素中用来重新计算子元素域下的值，而这个通常是你想要的效果。使用不带单位的数字，可以让你在body上设定一个行高，然后什么都不用管，页面上其他元素会默认继承，除非在某个特定的地方你想要做一个额外的样式。</p><hr><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a> [本文]</li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>章节：</p><ul><li>2.1 相对单位值的魔力<ul><li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li><li>2.1.2 完美像素网页的终结</li><li>像素（pixel）、点（point）和pc（pica）</li></ul></li><li>2.2 em和rem<ul><li>2.2.1 对font-size使用em<ul><li>当我们在一个元素内用em同时声明font-size和其他属性</li><li>字号收缩问题</li></ul></li><li>2.2.2 对font-size使用rem<ul><li>可用性：对font-size使用相对长度单位</li></ul></li></ul></li><li>2.3 停止使用像素思维去思考<ul><li>2.3.1 设置一个合理的字号默认值</li><li>2.3.3 让这个面板变得“响应式”</li><li>2.3.3 调整单个组件的大小</li></ul></li><li>2.4 视口相关单位（viewport-relative units）<ul><li>CSS3</li><li>2.4.1 在font-size上使用vw</li><li>2.4.2 在font-size上使用calc()</li></ul></li><li>2.5 不带单位的数字（unitless number）和行高（line-height）</li><li>2.6 自定义属性（也叫“CSS变量”）<ul><li>2.6.1 动态改变自定义属性的值</li><li>2.6.2 通过JavaScript改变自定义属性的值</li><li>2.6.3 初探自定义属性</li></ul></li><li>总结</li></ul><hr><p>原著版权信息：</p><p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href="https://livebook.manning.com/#!/book/css-in-depth/chapter-2" target="_blank" rel="noopener">Working with relative units</a>  </p><hr><p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p><p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p><p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p><p>独立博客：<a href="http://wuyuying.com/">wuyuying.com</a><br>知乎ID：<a href="https://www.zhihu.com/people/yuying_wu/posts" target="_blank" rel="noopener">@Yuying Wu</a><br>Github：<a href="https://github.com/YuyingWu" target="_blank" rel="noopener">Yuying Wu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="css" scheme="http://wuyuying.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>停止使用像素思维去思考 —— 别说你懂CSS相对单位</title>
    <link href="http://wuyuying.com/archives/css-in-depth-stop-thinking-in-px/"/>
    <id>http://wuyuying.com/archives/css-in-depth-stop-thinking-in-px/</id>
    <published>2018-07-05T05:28:01.000Z</published>
    <updated>2018-07-05T05:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href="https://github.com/YuyingWu/blog/tree/dev/source/_posts" target="_blank" rel="noopener">Github PR</a> ^_^）</p><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a> [本文]</li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>本文对应的章节目录：</p><ul><li>2.3 停止使用像素思维去思考<ul><li>2.3.1 设置一个合理的字号默认值</li><li>2.3.3 让这个面板变得“响应式”</li><li>2.3.3 调整单个组件的大小</li></ul></li></ul><hr><h2 id="2-3-停止使用像素思维去思考"><a href="#2-3-停止使用像素思维去思考" class="headerlink" title="2.3 停止使用像素思维去思考"></a>2.3 停止使用像素思维去思考</h2><p>把页面的根元素字号大小定义为0.625em或者62.5%，在最近几年来，这样的用法很常见，这是一种模式，或者更贴切地说，这是一种反模式。</p><p>[ 代码片段 2.11 反模式：全局地把font-size定义为10px ]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">625em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我并不推荐这种用法。这个用法把浏览器默认的字号大小16px缩小到10px。这样做的好处是简化了计算，如果设计师告诉你字号大小应该是14px，那你可以很轻易地计算出1.4rem，毕竟我们还是在使用相对单位。</p><p>一开始，这看起来很方便，但事实上这样的实现方式有两个问题。第一，强制你写了很多重复的样式代码。10px对于大多数文本来说太小了，你需要在整个页面中，来来回回地覆盖它。你会发现，自己把一段段落（</p><p>）的字号大小声明为1.4rem，然后又把导航（<nav>）的链接字号大小声明为1.4rem，样式代码中还有很多这样的用法。这样引入了更高的错误风险，当你需要修改时发现代码耦合程度比较高，同时也会让样式文件变大。</nav></p><p>第二个问题是，你这么做的时候，其实你还是在用像素的思维在思考。虽然在代码里写的是1.4rem，但是在你的脑子里，其实还是想的是“14px”。在响应式网页开发中，你应该学会适应那些“模糊”的值。1.2em实际等于多少像素，并不重要，你只需要知道这是比继承的字号大一点点，那就足够了。而且，如果在屏幕上这不是你想要的效果，那就改吧。这是需要时间实验和试错的，但事实上，使用px的时候我们也需要这样做。（在第13章，我们会有更具体的方式来优化这个实现方式。）</p><p>当使用em时，我们很容易陷入纠结，这个值转化成像素值会是多少呢？尤其对于字号大小。你一直在乘和除以em值，这样你很快就会疯掉了。相反，我希望你可以接受一项挑战，尝试培养先开始使用em的习惯。如果你习惯使用像素，那转成em是需要一定时间和练习的，但相信我，这很值得。</p><p>这不是在说你再也不使用像素了。如果你跟一个设计师合作，你可能需要用更精确的像素值去沟通，这没问题的。在项目的开始，你需要声明一个基础的字号大小（通常是对标题或者标注的常用字号）。使用绝对值去描述大小，往往会更加容易。</p><p>转换成rem会有计算环节，那就让计算器去忙吧（通常我会在Mac电脑上按cmd+空格，在Spotlight里计算）。首先在根元素上声明根字号大小，从那开始，使用像素应该是例外的情况，而不是常态。</p><p>在这章内容里，我还是会持续地聊起像素。这会有助于我解释相对单位的工作原理，同时也能帮助你培养计算em值的习惯。在这章之后，我基本会使用相对单位来讨论字号的大小。</p><h3 id="2-3-1-设置一个合理的字号默认值"><a href="#2-3-1-设置一个合理的字号默认值" class="headerlink" title="2.3.1 设置一个合理的字号默认值"></a>2.3.1 设置一个合理的字号默认值</h3><p>先假设你想把默认字号设定为14px。把10px设定为基准值，再在页面中去覆盖它的写法，我们不推荐这种写法，相反，你应该在根元素上直接声明一个值。<br>在这个代码片段里，目标字号值是继承的，浏览器的默认值16px，那么14/16 = 0.875。</p><p>把下面的代码添加到一个新的样式表的最上面，我们会在这上面添加其他代码。这里设定根元素（<html>）的默认字号大小。</html></p><p>[ 代码片段 2.12 设定正确的默认字号大小 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;                    1</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.875em</span>;      2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 或者使用 HTML 选择器</li><li>2 14/16（期望值px / 继承值px）等于0.875</li></ul><p>现在，你的期望基准字号14px对整个页面的元素有效，你不需要在其他地方重新声明了。你只需要在设计不一样的地方修改成新的字号，譬如标题。</p><p>我们一起来创建图2.7那样的面板吧！你创建的这个面板，基于14px字号，使用相对单位。</p><p>[ 图 2.7 使用相对单位和继承字号的面板 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig07_alt.jpg" alt="&quot;图 2.7&quot;"></p><p>下面是模板，加到你的页面吧。</p><p>[ 代码片段 2.13 面板的模板 ]</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> class=<span class="string">"panel"</span>&gt;</span><br><span class="line">  &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> class=<span class="string">"panel-body"</span>&gt;</span><br><span class="line">    We have built partnerships <span class="keyword">with</span> small farms around <span class="keyword">the</span> world <span class="built_in">to</span></span><br><span class="line">    hand-select beans <span class="keyword">at</span> <span class="keyword">the</span> peak <span class="keyword">of</span> season. We <span class="keyword">then</span> carefully roast</span><br><span class="line">    <span class="keyword">in</span> &lt;<span class="keyword">a</span> href=<span class="string">"/batch-size"</span>&gt;small batches&lt;/<span class="keyword">a</span>&gt; <span class="built_in">to</span> maximize their</span><br><span class="line">    potential.</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>下一段代码是样式的。你会在padding和border-radius使用em，标题的字号使用rem，以及border使用px。把下面代码添加到你的样式表吧。</p><p>[ 代码片段 2.14 使用相对单位的面板 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;                    1</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5em</span>;            1</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;          2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &gt; <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;                   3</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;               4</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;               4</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;       4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 对padding和border-radius使用em</li><li>2 用1px定义细边框</li><li>3 把面板上面多余的空间去掉，更多解释看第3章</li><li>4 用rem控制标题的字号大小</li></ul><p>这段代码给面板添加了一个细边框以及定义了标题的样式。我希望标题的字号小一点，但要加粗和全是大写。（你可以根据自己的设计，把字号改大点或者使用不同的排版方式）</p><p>第二个选择器<code>&gt;</code>是一个直接后代组合选择符（direct descendant combinator），它代表的是.panel下的子元素h2。更完整的选择器和组合选择符的索引可以看附录A。</p><p>在代码片段2.13中，为了更清晰看到效果，我给body添加了一个类<code>panel-body</code>，不过你会发现，在你自己的代码里是不需要的。因为这个元素从根元素上继承了字号大小，它已经是你想要看到的那样。</p><h3 id="2-3-3-让这个面板变得“响应式”"><a href="#2-3-3-让这个面板变得“响应式”" class="headerlink" title="2.3.3 让这个面板变得“响应式”"></a>2.3.3 让这个面板变得“响应式”</h3><p>我们再更深入地看看这个问题。你可以根据屏幕尺寸的变化，添加媒体查询来改变基础字号大小，这可以令面板在不同尺寸的屏幕下，有不同的大小变化。（见图2.8）</p><p>[ 图 2.8 在不同屏幕大小的响应式面板：300px（左上角），800px（右上角），1440px（下面） ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig08_alt.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530701353&amp;ssig=Sh6qYei7bh" alt="&quot;图 2.8&quot;"></p><blockquote><p>媒体查询（media query） —— 通过<code>@media</code>规则来声明样式，在不同的屏幕尺寸或者媒体类型（如打印机或显示器）下，触发对应的样式控制。这是响应式设计的关键要素。详情看代码片段2.15的这个例子，我在第8章会更深入的讨论媒体查询这个话题。</p></blockquote><p>为了实现上面说的效果，把你的样式代码改成这样。</p><p>[ 代码片段 2.15 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;                            1</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.75em</span>;               1</span><br><span class="line">&#125;                                  1</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: 800px) &#123;        2</span><br><span class="line">  :root &#123;                          2</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.875em</span>;            2</span><br><span class="line">  &#125;                                2</span><br><span class="line">&#125;                                  2</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: 1200px) &#123;       3</span><br><span class="line">  :root &#123;                          3</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;                3</span><br><span class="line">  &#125;                                3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 针对所有屏幕，但是在更大的屏幕会被覆盖</li><li>2 针对比800px更宽的屏幕，覆盖默认样式代码</li><li>3 针对比1200px更宽的屏幕，覆盖以上两套样式代码</li></ul><p>第一套样式规则，声明了小屏幕中的默认字号大小，这是我们想要在较小的屏幕上看到的字号大小。然后使用媒体查询，把800px和1200px分别作为两个分水岭逐级增加字号的大小，覆盖掉默认的代码。</p><p>针对页面的根元素使用这些字号大小，响应式地重新定义em和rem对应的值，从而达到响应改变整个页面的效果。尽管你没有直接对这个面板做任何的修改，它现在是响应式的。在小屏幕上，譬如一台手机，字号大小会被渲染成更小的（12px）。然后，在更大的屏幕上，宽大于800px和大于1200px的，组件的字号会分别放大到14px和16px。改变你的浏览器窗口，看看组件是怎么变化的吧。</p><p>如果你在整个页面中像这样严格使用相对单位，整个页面会随着视窗大小放大和缩小。这会是你的响应式策略里很重要的一部分。上面的2套媒体查询声明代码，可以帮助你节省在页面的其他部分使用媒体查询的额外代码。不过，如果你在元素中声明的字号大小是以像素为单位的，那就不会产生任何效果了。</p><p>类似地，如果你的老板或者客户觉得现在网站的字号太小或者太大，你随时可以做到通过修改一行代码影响到全局的元素，这项改变会影响到页面上的其他元素，不费吹灰之力。</p><h3 id="2-3-3-调整单个组件的大小"><a href="#2-3-3-调整单个组件的大小" class="headerlink" title="2.3.3 调整单个组件的大小"></a>2.3.3 调整单个组件的大小</h3><p>你也可以通过使用em缩放页面上的一个独立组件。有时，你可能会需要界面上的某些组件可以有个大号的版本。在我们的面板上这么做吧，首先你需要给面板添加一个类名<code>large</code>：<code>&lt;div class=&quot;panel large&quot;&gt;</code>。</p><p>在图2.9，我们看到了面板的普通版和大号版的比较。效果类似响应式面板，但是两种尺寸是可以同时在同一个页面中使用的。</p><p>[ 图 2.9 在一个页面上的普通尺寸面板和大号面板 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig09_alt.jpg" alt="&quot;图 2.9&quot;"></p><p>我们来对面板的字号声明方式做一些小的修改。你还是在使用相对单位，但需要调整它们的基准值。第一点，给每个面板的父元素字号大小的定义<code>font-size: 1rem</code>。这里指的是，不管在什么地方使用这个面板，每个面板的字号大小是一个确定值。</p><p>第二点，使用rem重新声明标题的字号大小，而不使用em，这样标题就可以和刚才声明的父元素字号1rem关联起来。下面是对应的代码，更新下你的样式表代码吧。</p><p>[ 代码片段 2.16 创建一个面板的大号版本 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;               1</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &gt; <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8em</span>;              2</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 给组件声明确定的字号大小</li><li>2 其他元素的字号大小用em和父元素字号关联</li></ul><p>这些修改看起来并没有影响面板的样式，但是现在你已经准备好了，做一个大号的面板只需要修改一小行代码。你需要做的，就是把父元素字号大小改写成1rem以外的一个值。因为其他元素的计算方式都依赖父元素的字号大小，只要修改它，整个面板的相关尺寸都会发生改变。添加下一个CSS代码片段到你的样式表，定义一个大号面板吧。</p><p>[ 代码片段 2.17 利用一行代码放大整个面板 ]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span><span class="selector-class">.large</span> &#123;               <span class="number">1</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 组合选择器指向同时有panel类和large类的元素</li></ul><p>现在，你可以给普通面板添加<code>class=&quot;panel&quot;</code>和给大号面板添加<code>class=&quot;panel large&quot;</code>。类似地，你也可以定义一个小号版本，只需要把父元素的字号设得比1rem小。如果这个面板是一个更复杂的组件，包含多种字号大小或padding，也只需要一个声明就可以重置大小，只要所有的子元素都是使用em声明的。</p><hr><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a></li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a> [本文]</li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>章节：</p><ul><li>2.1 相对单位值的魔力<ul><li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li><li>2.1.2 完美像素网页的终结</li><li>像素（pixel）、点（point）和pc（pica）</li></ul></li><li>2.2 em和rem<ul><li>2.2.1 对font-size使用em<ul><li>当我们在一个元素内用em同时声明font-size和其他属性</li><li>字号收缩问题</li></ul></li><li>2.2.2 对font-size使用rem<ul><li>可用性：对font-size使用相对长度单位</li></ul></li></ul></li><li>2.3 停止使用像素思维去思考<ul><li>2.3.1 设置一个合理的字号默认值</li><li>2.3.3 让这个面板变得“响应式”</li><li>2.3.3 调整单个组件的大小</li></ul></li><li>2.4 视口相关单位（viewport-relative units）<ul><li>CSS3</li><li>2.4.1 在font-size上使用vw</li><li>2.4.2 在font-size上使用calc()</li></ul></li><li>2.5 不带单位的数字（unitless number）和行高（line-height）</li><li>2.6 自定义属性（也叫“CSS变量”）<ul><li>2.6.1 动态改变自定义属性的值</li><li>2.6.2 通过JavaScript改变自定义属性的值</li><li>2.6.3 初探自定义属性</li></ul></li><li>总结</li></ul><hr><p>原著版权信息：</p><p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href="https://livebook.manning.com/#!/book/css-in-depth/chapter-2" target="_blank" rel="noopener">Working with relative units</a>  </p><hr><p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p><p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p><p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p><p>独立博客：<a href="http://wuyuying.com/">wuyuying.com</a><br>知乎ID：<a href="https://www.zhihu.com/people/yuying_wu/posts" target="_blank" rel="noopener">@Yuying Wu</a><br>Github：<a href="https://github.com/YuyingWu" target="_blank" rel="noopener">Yuying Wu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="css" scheme="http://wuyuying.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>如何更愉快地使用em和rem —— 别说你懂CSS相对单位</title>
    <link href="http://wuyuying.com/archives/css-in-depth-relative-units/"/>
    <id>http://wuyuying.com/archives/css-in-depth-relative-units/</id>
    <published>2018-07-05T05:28:00.000Z</published>
    <updated>2018-07-05T05:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href="https://github.com/YuyingWu/blog/tree/dev/source/_posts" target="_blank" rel="noopener">Github PR</a> ^_^）</p><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a> [本文]</li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>本文对应的章节目录：</p><ul><li>2.1 相对单位值的魔力<ul><li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li><li>2.1.2 完美像素网页的终结</li><li>像素（pixel）、点（point）和pc（pica）</li></ul></li><li>2.2 em和rem<ul><li>2.2.1 对font-size使用em<ul><li>当我们在一个元素内用em同时声明font-size和其他属性</li><li>字号收缩问题</li></ul></li><li>2.2.2 对font-size使用rem<ul><li>可用性：对font-size使用相对长度单位</li></ul></li></ul></li></ul><hr><p>CSS提供了很多种方式去定义一个值。大家最熟悉的可能也是最容易使用的就是像素（pixel），这被称做“绝对单位”。也就是说，5px在不同的场景下是一样的值。而其他的单位，如em和rem，不是绝对的而是相对的。相对单位的值会根据外部影响因素的变化而变化。例如，2em的值取决于你在哪个元素使用它（有时甚至是哪个属性）。很自然，相对单位使用起来会比较困难。</p><p>开发人员，甚至有经验的CSS开发人员，往往不喜欢跟相对单位打交道，其中包括臭名昭著的em。em的值可以被改变的方式似乎难以预测，没有px那么清晰。在本章中，我将揭开相对单位的神秘面纱。首先，我会解释它们为CSS带来的独特价值，然后我会帮助你更好地理解它们。我会解释它们的工作原理，也会告诉你怎么征服它们那看似不可预测的特性。你可以让相对单位为你所用，正确地运行，它们将让你的代码变得更加简单、灵活和容易使用。</p><h2 id="2-1-相对单位值的魔力"><a href="#2-1-相对单位值的魔力" class="headerlink" title="2.1 相对单位值的魔力"></a>2.1 相对单位值的魔力</h2><p>CSS是通过迟邦定（late-binding）的方式把样式渲染到web页面上的：内容和它的样式会在各自的渲染完成之后再合并到一起。比起其他类型的图形设计，这给设计过程添加了它们没有的复杂程度，同时也赋予CSS更强大的能力 —— 一个样式表可供成百上千个页面使用。此外，用户可以直接改变页面的最终呈现方式。举个例子，用户可以更改默认字号大小或者调整浏览器窗口的大小。</p><p>在早期的计算机应用程序开发以及传统出版行业中，开发人员或出版商清楚知道所在的媒介存在哪些限制。对于一个特定的应用程序，窗口可能是400px宽，300px高，或者一个版面可能是4英寸宽，6½英寸高。因此，当开发人员布局应用程序的按钮和文本时，他们很清楚这些元素可以做成什么尺寸，以及在屏幕上还有多少空间可以留给他们用来处理其他元素。然而在网页上，情况却不是这样的。</p><h3 id="2-1-1-完美像素设计（pixel-perfect-design）的挣扎"><a href="#2-1-1-完美像素设计（pixel-perfect-design）的挣扎" class="headerlink" title="2.1.1 完美像素设计（pixel-perfect design）的挣扎"></a>2.1.1 完美像素设计（pixel-perfect design）的挣扎</h3><p>在web环境下，用户可以将浏览器窗口设置为任意大小，且CSS需要去适应它。另外，用户可以在一个页面打开后，再调整它的大小，CSS也需要去适应这些新的约束条件。这说明了在你创建页面时样式还没有被调用，而是当页面在屏幕上渲染时，浏览器才会去计算样式的规则。</p><p>这给CSS增加了一层抽象的概念。我们不应该根据理想的情境来设计元素，而是应该声明一些样式规则，可以让该元素在任何场景下都能跑通。对于现在的互联网，你的页面可能要在一个4英寸的手机屏幕上展示，也可能在一个30英寸的大屏幕上。</p><p>长久以来，设计师大量使用“完美像素”设计，缓解了这个问题带来的复杂性。他们会创建一个有着严格定义的容器，通常是一个大约800px宽的居中的纵向列。然后在这些限制下他们再进行设计，这跟他们的前辈在原生应用程序或印刷出版物中做的设计或多或少有点类似。</p><h3 id="2-1-2-完美像素网页的终结"><a href="#2-1-2-完美像素网页的终结" class="headerlink" title="2.1.2 完美像素网页的终结"></a>2.1.2 完美像素网页的终结</h3><p>随着技术的进步和制造商推出更高分辨率的显示器，像素完美的设计方式慢慢开始崩溃。在21世纪初期，把页面设计成1024px宽还是800px宽，哪个是更保险的展示策略？开发者针对这个问题讨论得很多。然后，我们又针对能否改成1280px宽有类似的讨论。是时候做个决定了。把我们网站的内容宽度做得宽一点（相对于落伍的小电脑屏幕），还是做得窄一点（相对于新出的大屏幕），哪个选择更好呢？</p><p>当智能手机出现的时候，开发人员终于要（被迫）要停止假装每个人都可以在他们的网站上获得相同的体验了。不管我们喜不喜欢，我们都得放弃已知的多栏定宽（px）布局，并开始考虑响应式设计。我们再也不能逃避CSS所带来的抽象概念（abstraction），相反，我们要去拥抱这项特性。</p><blockquote><p>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在<a href="https://livebook.manning.com/#!/book/css-in-depth/chapter-8/ch08" target="_blank" rel="noopener">第8章</a>中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。</p></blockquote><p>增加的抽象概念意味着额外的复杂性。如果我设定一个宽度为800px的元素，那么它在一个更小的窗口中会怎么显示呢？如果一个横向菜单不能全部在一行展示完，它又会怎么展示？在编写CSS时，你需要能够同时考虑具体情况以及普适性的问题。如果针对一个特定的问题，你有多种方式可以解决，那么你应该选那个在多种不同场景下更通用的解决方案。</p><p>在抽象概念这个问题上，相对单位是CSS提供的工具之一。与其把字号大小设置为14px，你可以把它设置为与窗口大小成比例缩放。或者，你可以设置页面上所有元素是依赖基础字号大小的变化而变化的，然后用一行代码就可以达到调整整个页面的目的。接下来，我们来看看CSS提供了哪些方式来实现以上的效果。</p><blockquote><h3 id="像素（pixel）、点（point）和pc（pica）"><a href="#像素（pixel）、点（point）和pc（pica）" class="headerlink" title="像素（pixel）、点（point）和pc（pica）"></a>像素（pixel）、点（point）和pc（pica）</h3><p>CSS支持一些绝对长度单位，其中最常见也最基本的是像素（px）。较不常见的绝对单位有毫米（mm，millimeter）、厘米（cm，centimeter）、英寸（in.，inch）、点（pt，point，印刷术语，长度为1/72 inch）以及pc（pica，印刷术语，长度为12 points）。如果你想了解其中的计算方式，以上的长度单位都可以直接转换成另一个单位：1 inch = 25.4 mm = 2.54 cm = 6 pc = 72 pt = 96 px。因此，16px与12pt（16/96×72）是等价的。设计师通常更熟悉点（point）的使用，而开发人员更习惯于像素，因此在和设计师沟通时，你可能需要在两者之间做一些计算工作。  </p><p>像素这个名字有点误导性 —— 1 CSS像素并不严格等同于显示器的1像素，在高分辨率显示器（如“Retina显示屏”）上尤其明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。（尽管有可能会因某些设备或用户设置而异。）</p></blockquote><h2 id="2-2-em和rem"><a href="#2-2-em和rem" class="headerlink" title="2.2 em和rem"></a>2.2 em和rem</h2><p>em是最常见的相对长度单位，这是排版中使用的一种度量方式，基准值是当前元素的字号大小。 在CSS中，1em表示当前元素的字号大小，实际值取决于在哪个元素上应用。图2.1展示了一个padding为1em的<code>div</code>。</p><p>[ 图 2.1：padding为1em的元素（添加虚线是为了让padding更明显）]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig01_alt.jpg" alt="&quot;图 2.1&quot;"></p><p>模板代码片段如下。这套样式规则定义字号为16px，也就是元素本身1em代表的值，然后再使用em来声明元素的padding。 把这段代码添加到一个新的样式表里，在<code>&lt;div class =&quot;padded&quot;&gt;</code>下随手写些文字，然后到浏览器看看效果吧。</p><p>代码片段 2.1：在padding上使用em</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.padded</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;          1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 把各个方向的padding的值设置为字号大小</li></ul><p>把padding赋值为1em，乘以字号，得到一个值为16px的padding渲染值。重点来了，使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为计算值。</p><p>在这个例子里，将padding改为2em会生成一个32px的计算值。如果同一个元素的另一个选择器，用一个不一样的字号值去覆盖它，这会改变em在这个域下的基准值，那么padding的计算值也会相应变化。</p><p>在设置<code>padding、height、width或border-radius</code>等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。</p><p>图2.2展示了两个不同大小的盒子。盒子内的font-size、padding和border-radius各不相同。</p><p>[ 图 2.2：有相对大小的padding和border-radius的元素 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig02.jpg?KID=sina,sy81111wENh9pWSnk4Ev&amp;Expires=1530699214&amp;ssig=A5BuadHq6E" alt="&quot;图 2.2&quot;"></p><p>你可以通过用em声明padding和border-radius来给这些盒子声明样式规则。首先给每个元素设定padding和border-radius为1em，然后给每个盒子指定不同的字号，那么其他属性会跟着字号缩放。</p><p>在你的HTML代码里，创建如下的两个盒子，类名分别是<code>box-small</code>和<code>box-large</code>，代表两个字号修饰符。</p><p>[ 代码片段 2.2：在不同元素上使用em（HTML）]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"box box-small"</span>&gt;</span>Small<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"box box-large"</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，添加下面的样式到你的样式表。这里使用了em声明了一个盒子。还定义了小字号和大字号的修饰符，指定不同的字号大小。</p><p>[ 代码片段 2.3：在不同元素上使用em（CSS）]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;              <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-large</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;              <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 不同的字号大小，这会改变元素的em实际值的大小。</li></ul><p>这是em一个强大的功能。你可以定义一个元素的字号大小，然后使用一句简单的声明，就可以通过改变字号大小从而控制整个元素大小缩放。你后面将会创建另外一个这样的例子，不过首先，我们来讨论一下em和字号大小。</p><h3 id="2-2-1-对font-size使用em"><a href="#2-2-1-对font-size使用em" class="headerlink" title="2.2.1 对font-size使用em"></a>2.2.1 对font-size使用em</h3><p>当font-size使用em作为单位时，它的表现会有点不一样。我之前说过，em是以当前元素的字号大小作为基准值的。但是，如果你把一个元素的字号设为1.2em的时候，这是什么意思呢？一个元素的字号大小是不能等于它自己的1.2倍的。相反，在font-size上的em会先从继承到的字号大小衍生出来。</p><p>举个简单的例子，见图2.3。以下展示了一些不同字号大小的文字。在代码片段2.4，你会用到em来实现。</p><p>[ 图 2.3 以em为单位的两种不同的字号大小 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig03.jpg" alt="&quot;图 2.3&quot;"></p><p>在你的页面添加以下代码片段。第一行文字，在<code>&lt;body&gt;</code>标签里面，它会按body的字号大小渲染。第二部分，口号（slogan），继承父元素的字号大小。</p><p>[ 代码片段 2.4 相对<code>font-size</code>的模板 ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  We love coffee</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"slogan"</span>&gt;</span>We love coffee<span class="tag">&lt;/<span class="name">p</span>&gt;</span>          1</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>1 slogan从<body>继承了字号大小。</body></li></ul><p>代码片段中，CSS代码片段声明了body的字号大小。为了更加清晰，在这里我用了px来声明。下一步，你可以用em来放大slogan的字号大小。</p><p>[ 代码片段 2.5：在font-size上使用em ]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slogan</span> &#123;                  <span class="number">1</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;        <span class="number">1</span></span><br><span class="line">&#125;                          <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>1 计算：这个元素继承到字号，乘以1.2</li></ul><p>slogan声明的字号大小是1.2em，为了计算转换成像素值，你需要引用继承的字号16px，16 * 1.2 = 19.2，所以计算字号值是19.2px。</p><blockquote><p>提示 </p><p>如果你已经知道以px为单位的基础字号大小，但希望把它改用em声明，下面有个简单的计算公式：目标em值 = 目标像素值 / 父元素（被继承元素）像素值。举个例子，如果你想要一个10px的字号大小，父元素的字号是12px，10 / 12 = 0.8333em。如果你想要16px的字号大小，父元素字号是12px，那么 16 / 12 = 1.3333em。我们会在这章里多次用到这个计算公式。</p></blockquote><p>有一点对你很有帮助，对于大多数浏览器，默认字号大小是16px。技术上，关键字medium会被计算转换为16px。</p><h4 id="当我们在一个元素内用em同时声明font-size和其他属性"><a href="#当我们在一个元素内用em同时声明font-size和其他属性" class="headerlink" title="当我们在一个元素内用em同时声明font-size和其他属性"></a>当我们在一个元素内用em同时声明font-size和其他属性</h4><p>你已经使用过em声明font-size了（基于一个继承的字号大小值）。以及，你也曾经使用em声明其他属性，如padding和border-radius（基于当前元素的字号大小值）。当你针对同一个元素使用em声明font-size和其他属性的时候，em会变得很神奇。此时浏览器必须先计算font-size，然后基于这个值再去计算其他值。这些属性声明的时候使用的是相同的em值，但很可能它们会有不同的计算值。</p><p>在之前的例子里，我们计算到字号大小是19.2px（继承的16px乘以1.2em）。图2.4是相同的slogan元素，但有额外的1.2em padding以及为了让padding大小更加明显的灰色背景。可以看出，padding比font-size稍微大一些，尽管它俩声明的时候em值是一样的。</p><p>[ 图2.4 一个font-size为1.2em以及padding为1.2em的元素 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig04_alt.jpg" alt="&quot;图 2.4&quot;"></p><p>现在的情况是，这个段落从body继承了16px的字号大小，通过计算得到值为19.2px的字号计算值。这意味着，19.2px是1em在当前域的基础值，而这个值会被用作计算padding的值。对应的CSS代码在下面，更新你的样式表并查看你的测试页面吧。</p><p>[ 代码片段 2.6 在font-size和padding上使用em ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slogan</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;             1</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.2em</span>;               2</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 赋值为 19.2 px</li><li>2 赋值为 23.04 px</li></ul><p>在这个例子里，padding的声明值为1.2em，乘以19.2px（当前元素的字号大小），计算出23.04px。我们可以看到，尽管font-size和padding声明时em值是一样的，但它们的计算值是不一样的。</p><h4 id="字号收缩问题"><a href="#字号收缩问题" class="headerlink" title="字号收缩问题"></a>字号收缩问题</h4><p>当你使用em声明多层嵌套的元素字号时，会产生意想不到的效果。要弄清楚每个元素的实际值，首先你需要知道它继承的父元素的字号大小，如果父元素的字号也是用em声明的，那么你需要知道它的父元素的字号大小，在dom树往上查，以此类推。</p><p>当你使用em声明列表的字号大小，列表嵌套了好几层，效果就更明显了。大多数web开发者会发现在他们的职业生涯里面，图2.5的列表嵌套形式有点眼熟。文字在逐步缩小！正是因为em带来的这一类烦人的问题，开发者才对em避而远之。</p><p>[ 图 2.5 嵌套列表中的字号缩小现象 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig05.jpg" alt="&quot;图 2.5&quot;"></p><p>当你多层嵌套列表，而每一层声明的字号大小以em为单位，字号收缩现象就会发生。在代码片段2.7和2.8的例子里，无序列表的字号是0.8em。这个选择器对页面上所有的ul有效，所以当一个列表从另外一个列表继承到字号大小的时候，em就产生复合效果。</p><p>[ 代码片段 2.7 在列表上使用em ]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">8em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[ 代码片段 2.8 多层嵌套的列表 ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Top level</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>                                    1</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Second level                      1</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>                                2</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Third level                   2</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span>                            3</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fourth level              3</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fifth level<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>1 这个列表嵌套在第一个列表里，继承了它的字号大小</li><li>2 然后这个列表又嵌套在另一个列表里，继承了第二个列表的字号大小</li><li>3 ……以此类推</li></ul><p>每一个列表的字号大小是0.8乘以父元素的字号大小。这代表第一个列表的字号大小是12.8px，嵌套的子列表字号大小是10.24px（12.8px * 0.8），第三层列表的是8.192px，如此类推。同样地，如果你给字号大小的赋值大于1em，相反，文字的字号会一层层变大。我们想要的效果是像图2.6一样，在顶层声明字号的大小，但下面嵌套层级的列表字号保持不变。</p><p>[ 图 2.6 字号正常的多层嵌套列表 ]</p><p><img src="http://sinacloud.net/woodysblog/css-in-depth/02fig06.jpg" alt="&quot;图 2.6&quot;"></p><p>其中一种实现的方式可以看看代码片段2.9。第一个列表的字号大小还是0.8 em（见示例2.7），第二个选择器对嵌套在无序列表的无序列表有效 —— 也就是除了第一个无序列表以外的所有无序列表。现在嵌套的列表设定了跟父元素一致的字号大小，正如图2.6一样。</p><p>代码片段 2.9 字号收缩现象的纠正</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ul &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .8em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul ul &#123;                1</span><br><span class="line">  <span class="attribute">font-size</span>: 1em;      1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 嵌套在列表里面的列表，应该把字号大小设定为跟父元素一样</li></ul><p>这可以解决问题，但不是最优方案。因为你设置了一个字号值，马上用另一个选择器重写了这个规则。如果你可以使用针对嵌套的列表声明一个特定的选择器，避免互相覆盖，会是一个更好的方案。</p><p>到现在我们清楚了，如果你不是一个比较小心的人，你应该远离em。使用em作为padding、margin和元素缩放效果的单位挺好的，但当em遇上font-size时，事情可以变得很复杂。感谢上天，我们有个更好的选择 —— rem。</p><h3 id="2-2-2-对font-size使用rem"><a href="#2-2-2-对font-size使用rem" class="headerlink" title="2.2.2 对font-size使用rem"></a>2.2.2 对font-size使用rem</h3><p>当浏览器解析HTML文档时，创建了一个用来代表页面元素的集合，叫做DOM（文档对象模型，Document Object Model）。树状结构，每一个节点代表一个元素。<html>就是顶层节点（根节点），在下面的是它的子节点<head>和</head><body>，再往下就是它们的子节点，还有后代节点，如此类推。</body></html></p><p>根节点是文档里所有其他元素的祖先。它有一个特别的伪类（pseudo-class）选择器（:root），在样式表里可以用这个选择器表示。使用带类名的类型选择器html，或者直接用标签选择器，效果是一样的。</p><p>rem是根em（root em）的缩写。rem是和根元素关联的，不依赖当前元素。不管你在文档中的什么地方使用这个单位，1.2rem的计算值是相等的，等于1.2倍的根元素的字号大小。下面的示例代码中，声明了根元素的字号大小，并在嵌套的无序列表中使用rem声明字号大小。</p><p>[ 代码片段 2.10 使用rem声明字号大小 ]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;                    1</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;          2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1 伪类 :root 等价于 html 选择器</li><li>2 使用浏览器的默认字号大小（16px）</li></ul><p>在这个示例里，根字号大小是浏览器的默认大小16px（根元素的1em等于浏览器的默认字号大小）。无序列表的字号大小为0.8rem，计算结果是12.8px。因为这只跟根元素相关，尽管你在列表里嵌套了列表，嵌套子列表的字号仍然保持不变。</p><blockquote><h4 id="可用性：对font-size使用相对长度单位"><a href="#可用性：对font-size使用相对长度单位" class="headerlink" title="可用性：对font-size使用相对长度单位"></a>可用性：对font-size使用相对长度单位</h4><p>一些浏览器会提供给用户2种方式定制文字的大小：缩放和设置一个默认的字号大小。通过按Ctrl+或者Ctrl-，用户可以对页面进行缩放。这在视觉上会把整个页面的文字或图片（其实是所有元素）都放大或缩小了。在一些浏览器，这个改变只针对当前的标签页且是临时的，不会影响到新开的标签页。 </p><p>设置默认字号大小，会有点不一样。不仅仅是设置的入口比较难找（一般在浏览器的设置页），而且这个设置是永久的，直到用户把默认值还原。值得注意的是，这个设置对使用px或其他绝对单位定义的字号大小无效。因为默认字号大小对一些用户是必要的，尤其是弱视的群体，你应该用相对单位或百分比来定义字号的大小。</p></blockquote><p>rem简化了很多em带来的复杂度。事实上，rem提供了一个在px和em间的相对单位折中解决方案，而且更易于使用。那么，是不是意味着你应该在对所有元素都使用rem，去掉其他长度单位呢？当然不是。</p><p>在CSS的世界里，这个答案通常是，看情况。rem只是你的工具箱中的其中一个。掌握CSS很重要的一点，就是学会分辨在什么场景下该使用什么工具。我的选择是，对font-size使用rem，对border使用px，对其他的度量方式如padding、margin、border-radius等使用em。然而在必要时，需要声明容器的宽度的话，我更喜欢使用百分比。</p><p>这样，字号大小就变得可预测，而当其他因素影响到元素的字号大小时，你也可以借助em去缩放元素的padding和margin。在border上使用像素是很合适的，尤其当你想要一根漂亮的线的时候。以上就是我对不同属性使用不同单位的理想方案，不过我要再次声明，这些都是工具，在某些特定场景下，利用不同的工具可能取到更好的效果。</p><blockquote><p>提示  </p><p>当你不确定的时候，对font-size使用rem，对border使用px，以及对其他大多数属性使用em。</p></blockquote><hr><p>《别说你懂CSS相对单位》系列译文：</p><ul><li><a href="/blog/archives/css-in-depth-relative-units/">如何更愉快地使用em和rem</a> [本文]</li><li><a href="/blog/archives/css-in-depth-stop-thinking-in-px/">停止使用像素思维去思考</a></li><li><a href="/blog/archives/css-in-depth-viewport-relative-units/">视口相关单位的应用</a></li><li><a href="/blog/archives/css-in-depth-unitless-number/">无单位数字和行高</a></li><li><a href="/blog/archives/css-in-depth-css-variables/">CSS自定义属性</a></li></ul><p>章节：</p><ul><li>2.1 相对单位值的魔力<ul><li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li><li>2.1.2 完美像素网页的终结</li><li>像素（pixel）、点（point）和pc（pica）</li></ul></li><li>2.2 em和rem<ul><li>2.2.1 对font-size使用em<ul><li>当我们在一个元素内用em同时声明font-size和其他属性</li><li>字号收缩问题</li></ul></li><li>2.2.2 对font-size使用rem<ul><li>可用性：对font-size使用相对长度单位</li></ul></li></ul></li><li>2.3 停止使用像素思维去思考<ul><li>2.3.1 设置一个合理的字号默认值</li><li>2.3.3 让这个面板变得“响应式”</li><li>2.3.3 调整单个组件的大小</li></ul></li><li>2.4 视口相关单位（viewport-relative units）<ul><li>CSS3</li><li>2.4.1 在font-size上使用vw</li><li>2.4.2 在font-size上使用calc()</li></ul></li><li>2.5 不带单位的数字（unitless number）和行高（line-height）</li><li>2.6 自定义属性（也叫“CSS变量”）<ul><li>2.6.1 动态改变自定义属性的值</li><li>2.6.2 通过JavaScript改变自定义属性的值</li><li>2.6.3 初探自定义属性</li></ul></li><li>总结</li></ul><hr><p>原著版权信息：</p><p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href="https://livebook.manning.com/#!/book/css-in-depth/chapter-2" target="_blank" rel="noopener">Working with relative units</a>  </p><hr><p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p><p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p><p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p><p>独立博客：<a href="http://wuyuying.com/">wuyuying.com</a><br>知乎ID：<a href="https://www.zhihu.com/people/yuying_wu/posts" target="_blank" rel="noopener">@Yuying Wu</a><br>Github：<a href="https://github.com/YuyingWu" target="_blank" rel="noopener">Yuying Wu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="css" scheme="http://wuyuying.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL小记</title>
    <link href="http://wuyuying.com/archives/graphql/"/>
    <id>http://wuyuying.com/archives/graphql/</id>
    <published>2018-06-26T13:32:09.000Z</published>
    <updated>2018-07-04T05:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://sinacloud.net/woodysblog/graphql/structure.png" alt="&quot;structure&quot;"></p><p>基于GraphQL、express、MongoDB、Apollo、React.js的小应用。<br>-&gt;&gt; 项目源码<a href="https://github.com/YuyingWu/playground/tree/master/graphql-playlist" target="_blank" rel="noopener">github传送门</a></p><p>内容包括：</p><ul><li>如何搭建基于GraphQL、express、MongoDB的后台服务器</li><li>如何定义数据模型</li><li>如何通过GraphiQL测试query和获取的数据结构，包括query（查询）和mutation（更新）</li><li>如何搭建可以跟graphql query通信的Apollo-React前端应用</li></ul><a id="more"></a><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>express<ul><li>express-graphql</li></ul></li><li>graphql</li><li>mongoose，连接server和数据库（mLab）</li><li><a href="https://mlab.com/" target="_blank" rel="noopener">mLab</a>，云端mongoDB</li></ul><h3 id="定义Book的Schema"><a href="#定义Book的Schema" class="headerlink" title="定义Book的Schema"></a>定义Book的Schema</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schema.js</span></span><br><span class="line"><span class="keyword">const</span> graphql = <span class="built_in">require</span>(<span class="string">'graphql'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; GraphQLObjectType, GraphQLString &#125; = graphql;</span><br><span class="line"><span class="keyword">const</span> BookType = <span class="keyword">new</span> GraphQLObjectType(&#123;</span><br><span class="line">  name: <span class="string">'Book'</span>,</span><br><span class="line">  fields: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    id: &#123; <span class="keyword">type</span>: GraphQLString &#125;,</span><br><span class="line">    genre: &#123; <span class="keyword">type</span>: GraphQLString &#125;,</span><br><span class="line">    name: &#123; <span class="keyword">type</span>: GraphQLString &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="定义RootQuery"><a href="#定义RootQuery" class="headerlink" title="定义RootQuery"></a>定义RootQuery</h3><ul><li>book的类型是一个Graphql对象类型<code>BookType</code>；</li><li>args是发起这个query时，需要传入什么参数，这里是<code>id</code>；</li><li>resolve是根据参数从数据库查询数据的逻辑。</li></ul><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schema.js</span></span><br><span class="line"><span class="keyword">const</span> RootQuery = <span class="keyword">new</span> GraphQLObjectType(&#123;</span><br><span class="line">  <span class="attribute">name</span>: <span class="string">'RootQueryType'</span>,</span><br><span class="line">  <span class="attribute">fields</span>: &#123;</span><br><span class="line">    <span class="attribute">book</span>: &#123;</span><br><span class="line">      <span class="attribute">type</span>: BookType,</span><br><span class="line">      <span class="attribute">args</span>: &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> &#123; type</span>: GraphQLString &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      resolve(<span class="built_in">parent</span>, args) &#123;</span><br><span class="line">        <span class="comment">// code to get data from db / other source</span></span><br><span class="line">        <span class="comment">// args.id</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="打开服务器的GraphiQL的面板"><a href="#打开服务器的GraphiQL的面板" class="headerlink" title="打开服务器的GraphiQL的面板"></a>打开服务器的GraphiQL的面板</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="comment">// 访问 http://127.0.0.1:5000/graphql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> graphqlHTTP = <span class="built_in">require</span>(<span class="string">'express-graphql'</span>);</span><br><span class="line"><span class="keyword">const</span> schema = <span class="built_in">require</span>(<span class="string">'./schema/schema'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/graphql'</span>, graphqlHTTP(&#123;</span><br><span class="line">  schema,</span><br><span class="line">  graphiql: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.listen(<span class="number">5000</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'now listening for requests on port 5000, http://127.0.0.1:5000/'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在GraphiQL面板，查询对应book的内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Graphiql的查询语句</span></span><br><span class="line">&#123;</span><br><span class="line">  book(id: "1") &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"data"</span>: &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    <span class="string">"book"</span>: &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">      <span class="string">"name"</span>: <span class="string">"Name of the Wind"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">     &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Graphql提供的类型-方法"><a href="#Graphql提供的类型-方法" class="headerlink" title="Graphql提供的类型/方法"></a>Graphql提供的类型/方法</h3><p><strong>GraphQLID</strong>，接受query中的字符串或数字类型的参数，转成JavaScript的string类型。<br><strong>GraphQLInt</strong>，number类型。<br><strong>GraphQLNonNull</strong>，使用方式<code>type: new GraphQLNonNull(GraphQLInt)</code>，说明该字段的数据类型为int且必填。</p><h3 id="关联类型（relative-type）"><a href="#关联类型（relative-type）" class="headerlink" title="关联类型（relative type）"></a>关联类型（relative type）</h3><p>把AuthorType作为BookType的关联类型（实现功能，每本书有个作者）</p><ul><li>声明一个字段<code>author</code>，类型为<code>AuthorType</code></li><li>在<code>resolve</code>中，参数<code>parent</code>带有当前query的返回结果，从数据库中查询<code>id</code>等于当前book的<code>authorId</code>的作者信息，作为<code>author</code>的返回值</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const <span class="type">BookType</span> = <span class="keyword">new</span> <span class="type">GraphQLObjectType</span>(&#123;</span><br><span class="line">  name: <span class="symbol">'Boo</span>k',</span><br><span class="line">  fields: () =&gt; (&#123;</span><br><span class="line">    id: &#123; <span class="class"><span class="keyword">type</span></span>: <span class="type">GraphQLID</span> &#125;,</span><br><span class="line">    genre: &#123; <span class="class"><span class="keyword">type</span></span>: <span class="type">GraphQLString</span> &#125;,</span><br><span class="line">    name: &#123; <span class="class"><span class="keyword">type</span></span>: <span class="type">GraphQLString</span> &#125;,</span><br><span class="line">    author: &#123;</span><br><span class="line">      <span class="class"><span class="keyword">type</span></span>: <span class="type">AuthorType</span>,</span><br><span class="line">      resolve(parent, args) &#123;</span><br><span class="line">        <span class="comment">// code to get data from db / other source</span></span><br><span class="line">        <span class="comment">// args.id</span></span><br><span class="line">        <span class="keyword">return</span> _.find(authors, &#123;</span><br><span class="line">          id: parent.authorId</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当关联类型需要返回一个数组</p><p>字段<code>books</code>返回<code>BookType</code>的数组，借助<code>GraphQLList</code>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const <span class="type">AuthorType</span> = <span class="keyword">new</span> <span class="type">GraphQLObjectType</span>(&#123;</span><br><span class="line">  name: <span class="symbol">'Autho</span>r',</span><br><span class="line">  fields: () =&gt; (&#123;</span><br><span class="line">    id: &#123; <span class="class"><span class="keyword">type</span></span>: <span class="type">GraphQLID</span> &#125;,</span><br><span class="line">    name: &#123; <span class="class"><span class="keyword">type</span></span>: <span class="type">GraphQLString</span> &#125;,</span><br><span class="line">    age: &#123; <span class="class"><span class="keyword">type</span></span>: <span class="type">GraphQLInt</span> &#125;,</span><br><span class="line">    books: &#123;</span><br><span class="line">      <span class="class"><span class="keyword">type</span></span>: <span class="keyword">new</span> <span class="type">GraphQLList</span>(<span class="type">BookType</span>),</span><br><span class="line">      resolve(parent, args) &#123;</span><br><span class="line">        <span class="comment">// code to get data from db / other source</span></span><br><span class="line">        <span class="comment">// args.id</span></span><br><span class="line">        <span class="keyword">return</span> _.filter(books, &#123;</span><br><span class="line">          authorId: parent.id</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>数据库model的声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/author.js</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">const</span> authorSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span>,</span><br><span class="line">  age: <span class="built_in">Number</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Author'</span>, authorSchema);</span><br></pre></td></tr></table></figure><p>在GraphQL schema中声明mutation<code>addAuthor</code>方法，把model<code>Author</code>的实例保存到数据库，且<code>return</code>相应数据。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schema.js</span></span><br><span class="line">const Mutation = <span class="keyword">new</span> GraphQLObjectType(&#123;</span><br><span class="line">  name: 'Mutation',</span><br><span class="line">  fields: &#123;</span><br><span class="line">    addAuthor: &#123;</span><br><span class="line">      <span class="class"><span class="keyword">type</span>: <span class="title">AuthorType</span>,</span></span><br><span class="line">      args: &#123;</span><br><span class="line">        name: &#123; <span class="class"><span class="keyword">type</span>: <span class="title">GraphQLString</span> &#125;,</span></span><br><span class="line">        age: &#123; <span class="class"><span class="keyword">type</span>: <span class="title">GraphQLInt</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      resolve(parent, args) &#123;</span><br><span class="line">        <span class="comment">// 创建mongoose model `Author` 实例</span></span><br><span class="line">        <span class="keyword">let</span> author = <span class="keyword">new</span> Author(&#123;</span><br><span class="line">          name: args.name,</span><br><span class="line">          age: args.age</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mongoose model 实例的方法</span></span><br><span class="line">        <span class="keyword">return</span> author.save();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在GraphiQL中调用该mutation，执行添加author的操作，且获取添加后的数据结果。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// GraphiQL</span><br><span class="line">mutation &#123;</span><br><span class="line">  addAuthor(name: <span class="string">"wyy"</span>, age: <span class="number">28</span>) &#123;</span><br><span class="line">    name</span><br><span class="line">    age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 返回结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"addAuthor"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"wyy"</span>,</span><br><span class="line">      <span class="string">"age"</span>: <span class="number">28</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><ul><li>React.js<ul><li>create-react-app</li></ul></li><li>Apollo系<ul><li>apollo-boost</li><li>graphql</li><li>react-apollo</li></ul></li></ul><h3 id="Step-1：连接React-component和Apollo-Provider"><a href="#Step-1：连接React-component和Apollo-Provider" class="headerlink" title="Step 1：连接React component和Apollo Provider"></a>Step 1：连接React component和Apollo Provider</h3><p>在整个React应用中，通过ApolloClient，打通graphql和react组件的连接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> ApolloClient <span class="keyword">from</span> <span class="string">'apollo-boost'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApolloProvider &#125; <span class="keyword">from</span> <span class="string">'react-apollo'</span>;</span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  uri: <span class="string">'http://localhost:5000/graphql'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ApolloProvider client=&#123;client&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;hello, world&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;BookList /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ApolloProvider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2：graphql-query和React组件的数据交互"><a href="#Step-2：graphql-query和React组件的数据交互" class="headerlink" title="Step 2：graphql query和React组件的数据交互"></a>Step 2：graphql query和React组件的数据交互</h3><h4 id="1-声明graphql-query"><a href="#1-声明graphql-query" class="headerlink" title="1.声明graphql query"></a>1.声明graphql query</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/BookList.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">'apollo-boost'</span>;</span><br><span class="line"><span class="keyword">const</span> getBooksQuery = gql<span class="string">`</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  books &#123;</span></span><br><span class="line"><span class="string">    id</span></span><br><span class="line"><span class="string">    name</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h4 id="2-利用Apollo连接gq-query和react-component"><a href="#2-利用Apollo连接gq-query和react-component" class="headerlink" title="2.利用Apollo连接gq query和react component"></a>2.利用Apollo连接<code>gq query</code>和react component</h4><p>结合<code>react-apollo</code>的<code>graphql</code>，以及刚才声明的query，把请求数据打进<code>BookList</code>的<code>props</code>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; graphql &#125; from <span class="symbol">'react</span>-apollo';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 具体组件实现 blah blah</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> graphql(getBooksQuery)(<span class="type">BookList</span>);</span><br></pre></td></tr></table></figure><p>假如，在一个组件内，需要注入多个query，可以利用<code>react-apollo</code>提供的<code>compose</code>方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; graphql, compose &#125; from <span class="symbol">'react</span>-apollo';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 具体组件实现 blah blah</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> compose(</span><br><span class="line">  graphql(gqlQuery1, &#123; name: <span class="symbol">'gqlQuery</span>1' &#125;),</span><br><span class="line">  graphql(gqlQuery2, &#123; name: <span class="symbol">'gqlQuery</span>2' &#125;),</span><br><span class="line">)(<span class="type">BookList</span>);</span><br></pre></td></tr></table></figure><p><img src="http://sinacloud.net/woodysblog/graphql/gql-compose.png" alt="&quot;graphql compose&quot;"></p><h4 id="3-通过this-props-data获取请求数据"><a href="#3-通过this-props-data获取请求数据" class="headerlink" title="3.通过this.props.data获取请求数据"></a>3.通过this.props.data获取请求数据</h4><p>在server的graphiQL查询的数据结构如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"books"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"5b374cdd5806e47eefce3734"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"test"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在render输出client的this.props.data，可以发现props更新了两次。区别在于<code>loading</code>这个字段，这也可以作为一个判断的flag，当<code>loading</code>为<code>true</code>时，再进一步分析接口返回的数据结构。</p><p>第一次，<code>loading</code>为<code>true</code>，没有<code>books</code>这个字段。</p><p><img src="http://sinacloud.net/woodysblog/graphql/apollo-loading.png" alt="&quot;loading&quot;"></p><p>第二次，<code>loading</code>为<code>false</code>，而<code>books</code>返回了一个数组。</p><p><img src="http://sinacloud.net/woodysblog/graphql/apollo-loaded.png" alt="&quot;loaded&quot;"></p><h4 id="4-Mutation"><a href="#4-Mutation" class="headerlink" title="4. Mutation"></a>4. Mutation</h4><p>i. query的声明</p><p>值得注意的是，当调用mutation时，我们可能需要传入参数，如何获取从react组件传入的参数？可以利用query variables（query变量）实现。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query.js</span></span><br><span class="line">const addBookMutation = gql`</span><br><span class="line"><span class="function"><span class="title">mutation</span><span class="params">(<span class="variable">$name</span>: String!, <span class="variable">$genre</span>: String!, <span class="variable">$authorId</span>: ID!)</span></span> &#123;</span><br><span class="line">  addBook(name: <span class="variable">$name</span>, genre: <span class="variable">$genre</span>, authorId: <span class="variable">$authorId</span>) &#123;</span><br><span class="line">    name</span><br><span class="line">    id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>ii. react component的数据交互</p><p>利用<code>react-apollo</code>的<code>compose</code>，把<code>addBookMutation</code>注入到<code>this.props</code>，通过<code>varibales</code>传入query变量。</p><p>而当我们希望在mutation之后重新获取某个query的数据时，可以在mutation操作中添加<code>refetchQueries</code>的回调。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addBook.js</span></span><br><span class="line"><span class="function"><span class="title">addBook</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// formData为点击表单提交后，获取各项input/select的数据对象</span></span><br><span class="line">  this<span class="selector-class">.props</span><span class="selector-class">.addBookMutation</span>(&#123;</span><br><span class="line">    variables: &#123;</span><br><span class="line">      name: formData<span class="selector-class">.name</span>,</span><br><span class="line">      genre: formData<span class="selector-class">.genre</span>,</span><br><span class="line">      authorId: formData<span class="selector-class">.authorId</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    refetchQueries: [&#123;</span><br><span class="line">      query: anotherQueryWantedToBeRefetched</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Query"><a href="#5-Query" class="headerlink" title="5. Query"></a>5. Query</h4><p>需要从组件传入参数，进行参数查询的gql query（引入query变量）。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query.js</span></span><br><span class="line"><span class="keyword">const</span> getBooksQuery = gql`</span><br><span class="line">query ($<span class="keyword">id</span>: ID!) &#123;</span><br><span class="line">  book(<span class="keyword">id</span>: $<span class="keyword">id</span>) &#123;</span><br><span class="line">    <span class="keyword">id</span></span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBook.js</span></span><br><span class="line"><span class="comment">// 在绑定组件和graphql数据前，把props.id注入到query的variables里</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> graphql(getBookQuery, &#123;</span><br><span class="line">  options: props =&gt; (&#123;</span><br><span class="line">    variables: &#123;</span><br><span class="line">      <span class="keyword">id</span>: props.id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(getBookComponentName);</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p><code>问</code> 为什么在声明GraphQLObjectType实例时，fields不直接使用对象，而使用了函数？<br><code>答</code> 因为js的执行时机，直接使用对象的话，代码从上往下执行，fields中引用别的类型，如BookType和AuthorType有互相引用，会报错BookType或者AuthorType undefined。而使用函数的话，执行到函数内部逻辑时，外部的声明已经完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://sinacloud.net/woodysblog/graphql/structure.png&quot; alt=&quot;&amp;quot;structure&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于GraphQL、express、MongoDB、Apollo、React.js的小应用。&lt;br&gt;-&amp;gt;&amp;gt; 项目源码&lt;a href=&quot;https://github.com/YuyingWu/playground/tree/master/graphql-playlist&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何搭建基于GraphQL、express、MongoDB的后台服务器&lt;/li&gt;
&lt;li&gt;如何定义数据模型&lt;/li&gt;
&lt;li&gt;如何通过GraphiQL测试query和获取的数据结构，包括query（查询）和mutation（更新）&lt;/li&gt;
&lt;li&gt;如何搭建可以跟graphql query通信的Apollo-React前端应用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="graphql" scheme="http://wuyuying.com/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Behavior Driven Development in ReactJS</title>
    <link href="http://wuyuying.com/archives/bdd-in-reactjs/"/>
    <id>http://wuyuying.com/archives/bdd-in-reactjs/</id>
    <published>2018-06-02T12:13:25.000Z</published>
    <updated>2018-06-06T02:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果想跳过前文，可以直接定位到<a href="/blog/archives/test-driven-dev/#我的实战">实战篇</a></p></blockquote><h2 id="What-is-Test-Driven-Development"><a href="#What-is-Test-Driven-Development" class="headerlink" title="What is Test Driven Development?"></a>What is Test Driven Development?</h2><p>Coding of features and tests go hand in hand.</p><ol><li>Write a unit test.</li><li>Run the test. See it fail.</li><li>Write the feature code to pass the test.</li><li>Refactor the code.</li></ol><h2 id="Why-TDD"><a href="#Why-TDD" class="headerlink" title="Why TDD?"></a>Why TDD?</h2><ul><li>It reduces errors and defects in the long run.</li><li>It leads to higher quality code.</li></ul><h2 id="What-is-Behavior-Driven-Development"><a href="#What-is-Behavior-Driven-Development" class="headerlink" title="What is Behavior Driven Development?"></a>What is Behavior Driven Development?</h2><ul><li>A variation of TDD that tests for user scenarios.</li><li>Given, when, then… [ pattern ]</li><li>Given notes, when deleting, then remove a note.</li><li>BDD consists of scenarios/specifications.</li></ul><a id="more"></a><h2 id="Test-Tools"><a href="#Test-Tools" class="headerlink" title="Test Tools"></a>Test Tools</h2><ul><li>Jest</li><li>Enzyme</li></ul><blockquote><p>如果想看create-react-app或jest/enzyme环境的配置，可以<a href="#Setup">定位到setup内容</a>。</p></blockquote><h2 id="我的实战"><a href="#我的实战" class="headerlink" title="我的实战"></a>我的实战</h2><p>项目中Jest and Enzyme的实战。</p><h3 id="1-第一个Unit-Test-toMatchSnapshot"><a href="#1-第一个Unit-Test-toMatchSnapshot" class="headerlink" title="1. 第一个Unit Test: toMatchSnapshot"></a>1. 第一个Unit Test: <code>toMatchSnapshot</code></h3><p>快照是Jest把调用时的component的结构记录下来，下次可以用来对比结构有没有差异。</p><p>如果不一样，Jest会报错，如果是预期内的展示，可以按<code>u</code>把当前快照更新为最新的snapshot。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'render correctly'</span>, () =&gt; &#123;</span><br><span class="line">  expect(app).toMatchSnapshot();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-测试component的state"><a href="#2-测试component的state" class="headerlink" title="2. 测试component的state"></a>2. 测试component的state</h3><p>state的初始化检测 —— 状态<code>gifts</code>的值为空数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'init `state` for gifts as an empty list'</span>, () =&gt; &#123;</span><br><span class="line">  expect(app.state().gifts).toEqual([]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：在jest中获得state是一个<code>state()</code>函数。</p><h3 id="3-点击交互的测试"><a href="#3-点击交互的测试" class="headerlink" title="3. 点击交互的测试"></a>3. 点击交互的测试</h3><p>通过className去查找交互元素，模拟用户行为，其中<code>simulate</code>是Enzyme提供的模拟函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'add a gift to `state` when click the `add` button'</span>, () =&gt; &#123;</span><br><span class="line">  app.find(<span class="string">'.btn-add'</span>).simulate(<span class="string">'click'</span>);</span><br><span class="line"></span><br><span class="line">  expect(app.state().gifts.length).not.toBe(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检验某个component（Gift）是否存在</span></span><br><span class="line">it(<span class="string">'create a Gift component'</span>, () =&gt; &#123;</span><br><span class="line">  expect(app.find(Gift).exists()).toBe(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-利用describe划分测试代码块"><a href="#4-利用describe划分测试代码块" class="headerlink" title="4. 利用describe划分测试代码块"></a>4. 利用describe划分测试代码块</h3><p>用<code>describe</code>把测试分组。也可以使用<code>describe</code>定义一个场景，把相似的操作合并。</p><p>以下的两个测试都需要先触发一次<code>add-gift</code>按钮的点击，再验证相应的测试逻辑。</p><p>下面有两个hook，<code>beforeEach</code>和<code>afterEach</code>，可以用来执行<strong>前置共同的action</strong>和<strong>结束之后的reset逻辑</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'when clicking the `add-gift` button'</span>, () =&gt; &#123;</span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      app.find(<span class="string">'.btn-add'</span>).simulate(<span class="string">'click'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reset state `gifts` to []</span></span><br><span class="line">      app.setState(&#123;</span><br><span class="line">        gifts: []</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'add a gift to `state`'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// app.find('.btn-add').simulate('click');</span></span><br><span class="line">      expect(app.state().gifts.length).not.toBe(<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    it(<span class="string">'display gifts on the rendered list'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// app.find('.btn-add').simulate('click');</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> stateListLength = app.state().gifts.length;</span><br><span class="line">      <span class="keyword">const</span> listItemLength = app.find(<span class="string">'.list-item'</span>).length;</span><br><span class="line">  </span><br><span class="line">      expect(stateListLength).toEqual(listItemLength);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="5-父子组件交互测试"><a href="#5-父子组件交互测试" class="headerlink" title="5. 父子组件交互测试"></a>5. 父子组件交互测试</h3><h4 id="1）背景"><a href="#1）背景" class="headerlink" title="1）背景"></a>1）背景</h4><p>在GiftGiver内，父组件<code>&lt;App /&gt;</code>根据<code>state</code>中的<code>gifts</code>数组渲染子组件<code>&lt;Gift /&gt;</code>，而子组件有一个删除按钮，点击后可以从父组件<code>state</code>中<code>gifts</code>去掉命中当前GiftID的数据项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">this</span>.state.gifts = [&#123;</span><br><span class="line">  id: xxx</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">removeGift(id) &#123;</span><br><span class="line">  <span class="comment">// this.state.gifts.filter(gift =&gt; gift.id !== id)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line">&#123; <span class="keyword">this</span>.state.gifts.map(<span class="function"><span class="params">gift</span> =&gt;</span> (</span><br><span class="line">  &lt;Gift gift=&#123;gift&#125; removeGift=&#123;removeGift&#125; /&gt;</span><br><span class="line">))&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gift.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line"><span class="comment">// const &#123; gift, removeGift &#125; = this.props;</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Button onClick=&#123; gift =&gt; removeGift(gift.id) &#125;&gt;remove&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h4 id="2）设计思路"><a href="#2）设计思路" class="headerlink" title="2）设计思路"></a>2）设计思路</h4><ol><li>把<code>removeGift</code>挂在父组件（<code>&lt;App /&gt;</code>）上，入参giftID</li><li>把<code>gift</code>的数据和<code>removeGift</code>作为props传给子组件（<code>&lt;Gift /&gt;</code>）</li><li>在子组件（<code>&lt;Gift /&gt;</code>），有一个删除按钮，点击后调用父组件的callback函数，入参giftID</li></ol><h4 id="3）写test-case的思路"><a href="#3）写test-case的思路" class="headerlink" title="3）写test case的思路"></a>3）写test case的思路</h4><h5 id="I-父组件的测试用例-App-test-js"><a href="#I-父组件的测试用例-App-test-js" class="headerlink" title="I. 父组件的测试用例 App.test.js"></a>I. 父组件的测试用例 App.test.js</h5><p><strong>涉及的核心逻辑或交互</strong>：负责从数据源<code>this.state.gifts</code>中干掉对应数据的函数<code>removeGift</code>。</p><p><strong>测试思路</strong>：<code>removeGift</code>入参giftID后，检查会不会正确地从<code>state</code>中去掉该项数组（giftID === item.id）。</p><p><strong>实现详情：</strong></p><p>a）前置操作：模拟调用行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// call the `removeGift` function in App.js</span></span><br><span class="line">  app.instance().removeGift(firstGiftID);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>b）断言逻辑：确定<code>this.state.gifts</code>中没有包含对应项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'gift with ID $&#123;firstGiftID&#125; is not in the state `gift`'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; gifts &#125; = app.state();</span><br><span class="line">  <span class="keyword">const</span> targetGiftList = gifts.find(<span class="function"><span class="params">gift</span> =&gt;</span> gift.id === firstGiftID) || [];</span><br><span class="line"></span><br><span class="line">  expect(targetGiftList.length).toBe(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="II-子组件的测试用例-Gift-test-js"><a href="#II-子组件的测试用例-Gift-test-js" class="headerlink" title="II. 子组件的测试用例 Gift.test.js"></a>II. 子组件的测试用例 Gift.test.js</h5><p><strong>涉及的核心逻辑或交互</strong>：</p><ul><li>点击一个删除按钮</li><li>调用父组件传过来的callback函数，并传入id</li></ul><p><strong>测试思路</strong>：</p><ul><li>在shallow时，模拟父元素传入对应的props</li><li>模拟用户行为，点击删除按钮</li><li>检查回调函数有没有被调用，以及传入的参数对不对</li></ul><p><strong>实现详情</strong>：</p><p>1）在shallow时，模拟父元素传入对应的props。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mockRemove = jest.fn(); <span class="comment">// 在第3点说明</span></span><br><span class="line"><span class="keyword">const</span> giftID = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> props = &#123;</span><br><span class="line">  gift: &#123;</span><br><span class="line">    id: giftID</span><br><span class="line">  &#125;,</span><br><span class="line">  removeGift: mockRemove</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> gift = shallow(&lt;Gift &#123; ...props &#125; /&gt;);</span><br></pre></td></tr></table></figure><p>2）<code>beforeEach</code>里模拟删除按钮的点击</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  gift.find(<span class="string">'.btn-delete'</span>).simulate(<span class="string">'click'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3）检查回调函数有没有被调用，以及传入的参数对不对</p><p>从第1点可以看到，shallow渲染传入props时，回调函数把原本的removeGift函数替换成jest的mock。(<code>const mockRemove = jest.fn();</code>)</p><p>因为该方法提供了一个断言检测方法，我们可以通过这个方式，检查回调函数有没有被调用以及传入的参数是否符合预期，实际的测试语句如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'calls the removeGift callback'</span>, () =&gt; &#123;</span><br><span class="line">  expect(mockRemove).toHaveBeenCalledWith(giftID);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="6-coverage-testing"><a href="#6-coverage-testing" class="headerlink" title="6. coverage testing"></a>6. coverage testing</h3><p>检测实际被调用代码的覆盖程度。（冗余代码检测）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run test -- --coverage</span><br></pre></td></tr></table></figure><p><img src="http://lc-wpyqjumv.cn-n1.lcfile.com/b79550c417506fb9c9c5.png" alt=""></p><p>指定<code>--coverage</code>目标文件：，在<code>package.json</code>下，添加以下语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line">  <span class="string">"collectCoverageFrom"</span>: [</span><br><span class="line">    <span class="string">"src/**.js"</span>,</span><br><span class="line">    <span class="string">"!src/index.js"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>如果存在某些函数/逻辑没有覆盖到，可以考虑新增一个和<code>component</code>同级的<code>helpers</code>文件夹，在里面单独写那些跟组件基本功能无关的逻辑，如用于生成ID的ID生成函数，可以单拎出来放进<code>helpers</code>及进行相应的单元测试。</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><ol><li>node, v8.x</li><li>npm, v5.x</li><li>create-react-app</li></ol><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><p>I. <code>create-react-app yourProjectName</code></p><p>II. install dependencies</p><ul><li>dependencies: react-dom &amp; react </li><li>devDependencies: enzyme &amp; jest-cli</li></ul><p>III. enzyme-adapter-react-16</p><p>In order to use the most current version of React &gt; 16, we now need to install “enzyme adapters” to provide full compatibility with React.</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i enzyme-adapter-react<span class="number">-16</span> --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>Next, add a src/tempPolyfills.js file to create the global request animation frame function that React now depends on.</p><p>src/tempPolyfills.js should contain the following contents:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> requestAnimationFrame = global.requestAnimationFrame = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(callback, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>export default requestAnimationFrame;<br>Finally, add a src/setupTests.js file to configure the enzmye adapter for our tests. The disableLifecyleMethods portion is needed to allow us to modify props through different tests.</p><p>src/setupTests.js should contain the following contents:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requestAnimationFrame <span class="keyword">from</span> <span class="string">'./tempPolyfills'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span>;</span><br><span class="line"></span><br><span class="line">configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter(), <span class="attr">disableLifecycleMethods</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果想跳过前文，可以直接定位到&lt;a href=&quot;/blog/archives/test-driven-dev/#我的实战&quot;&gt;实战篇&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;What-is-Test-Driven-Development&quot;&gt;&lt;a href=&quot;#What-is-Test-Driven-Development&quot; class=&quot;headerlink&quot; title=&quot;What is Test Driven Development?&quot;&gt;&lt;/a&gt;What is Test Driven Development?&lt;/h2&gt;&lt;p&gt;Coding of features and tests go hand in hand.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a unit test.&lt;/li&gt;
&lt;li&gt;Run the test. See it fail.&lt;/li&gt;
&lt;li&gt;Write the feature code to pass the test.&lt;/li&gt;
&lt;li&gt;Refactor the code.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Why-TDD&quot;&gt;&lt;a href=&quot;#Why-TDD&quot; class=&quot;headerlink&quot; title=&quot;Why TDD?&quot;&gt;&lt;/a&gt;Why TDD?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;It reduces errors and defects in the long run.&lt;/li&gt;
&lt;li&gt;It leads to higher quality code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;What-is-Behavior-Driven-Development&quot;&gt;&lt;a href=&quot;#What-is-Behavior-Driven-Development&quot; class=&quot;headerlink&quot; title=&quot;What is Behavior Driven Development?&quot;&gt;&lt;/a&gt;What is Behavior Driven Development?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A variation of TDD that tests for user scenarios.&lt;/li&gt;
&lt;li&gt;Given, when, then… [ pattern ]&lt;/li&gt;
&lt;li&gt;Given notes, when deleting, then remove a note.&lt;/li&gt;
&lt;li&gt;BDD consists of scenarios/specifications.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="testing" scheme="http://wuyuying.com/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>开箱即用，Hexo博客的github+server自动部署</title>
    <link href="http://wuyuying.com/archives/hexo-travis/"/>
    <id>http://wuyuying.com/archives/hexo-travis/</id>
    <published>2018-05-26T06:35:18.000Z</published>
    <updated>2018-06-02T12:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-wpyqjumv.cn-n1.lcfile.com/9fb19e9b112f127c1adc.jpg" alt="&quot;Travis CI&quot;"></p><p>用了一段时间HEXO搭建个人的博客，但每次发布文章，都需要打开电脑<code>hexo g</code>编译之后，再提交到服务器上，确实挺麻烦的，和小伙伴聊完他的日志发布方式之后，痛定思痛，<strong>快捷发布日志</strong>这个问题需要解决一下了！Travis CLI搞起来！</p><h2 id="闲聊日志的快捷发布"><a href="#闲聊日志的快捷发布" class="headerlink" title="闲聊日志的快捷发布"></a>闲聊日志的快捷发布</h2><p>前几天，跟小伙伴Pipe一起参加个分享会，看到他做了笔记，结束后我说你发给我呀，他说直接看我博客（<a href="https://zhoukekestar.github.io/notes/2018/05/25/better-me.html" target="_blank" rel="noopener">《工作思维方式简记》</a>）呀！我的天，写完瞬间就发到站点去了！Pipe非常高产，去看看他的<a href="https://zhoukekestar.github.io/notes" target="_blank" rel="noopener">博客</a>，用“高产似母猪”来描述都不足为过，5月份还没有过完，发布了7篇日志。</p><p>我问他，怎么做到那么高产？Pipe说，第一点是他的日志是碎片化的偏记录的，不一定要憋出大文章才发，然后就是博客系统要方便，随写随发。</p><p>反观我的博客，更新频率真的很低，一方面是喜欢憋专题文章，拖着拖着，然后就没有然后了。另一方面也是发布确实麻烦，电脑编辑好markdown，还要执行各种命令，最后push到github和自己的服务器，文章才能被大家看到，一开始觉得还好蛮geek的，但后来确实由于这些门槛，有打击到那些随时来的写作思绪。</p><p>By the way，Pipe用的是<code>jekyll</code>，跟github的持续集成是天生的，而HEXO没有这样的优势。从Hexo换到Jekyll吧，也不是很麻烦，但是我在Hexo生态做了一些东西，还是有点不舍哈。</p><ul><li><a href="https://github.com/YuyingWu/blog" target="_blank" rel="noopener">github blog</a>：我的博客分支</li><li><a href="https://github.com/YuyingWu/hexo-generator-index-plus/blob/master/README.md" target="_blank" rel="noopener">hexo-generator-index-plus</a>：hexo小插件，首页排序生成器，和原生的index-generator比较显著的区别是加了置顶功能，可以在front-matter添加<code>top</code>属性即可。</li><li><a href="https://github.com/YuyingWu/hexo-theme-fresh" target="_blank" rel="noopener">hexo-theme-fresh</a>：hexo博客主题，绿色小清新，Medium风格。</li></ul><p><img src="//lc-wpyqjumv.cn-n1.lcfile.com/3061dbf0241049f3b646.gif" alt="&quot;hexo-theme-fresh效果截屏&quot;"></p><h2 id="HEXO的开发分支与生产分支"><a href="#HEXO的开发分支与生产分支" class="headerlink" title="HEXO的开发分支与生产分支"></a>HEXO的开发分支与生产分支</h2><p>仓库分成2个分支，主开发开支dev，以及生产环境的gh-pages分支。<br>查看博客可以通过访问<a href="https://yuyingwu.github.io/blog/" target="_blank" rel="noopener">github pages</a>，又或者直接访问我的域名 <a href="http://www.wuyuying.com/blog/archives/hexo-travis/" target="_blank" rel="noopener">wuyuying.com/blog</a>。</p><h3 id="开发分支-dev"><a href="#开发分支-dev" class="headerlink" title="开发分支 dev"></a>开发分支 dev</h3><p>在我的博客里，开发分支是<code>dev</code>，目录结构就是一开始<code>hexo init</code>后的结构。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> scaffolds /<span class="regexp">/ 页面的模板，包括草稿（draft.md）、页面（page.md）、文章（post.md）以及其他自定义模板</span></span></span><br><span class="line"><span class="ruby">- source /<span class="regexp">/ 放页面和文章markdown文档</span></span></span><br><span class="line"><span class="ruby">- themes /<span class="regexp">/ 博客主题</span></span></span><br><span class="line"><span class="ruby">- _config.yml /<span class="regexp">/ 配置文件</span></span></span><br><span class="line"><span class="ruby">- package.json</span></span><br><span class="line"><span class="ruby">- .travis.yml /<span class="regexp">/ 持续集成服务travis的文件</span></span></span><br></pre></td></tr></table></figure><p>本地开发流程一般是这样。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> hexo server, 启动本地服务器，预览我的文章</span><br><span class="line">hexo s </span><br><span class="line"></span><br><span class="line"><span class="string">//</span> hexo generate，编译文章，把 `source` 里面的页面和文章编译成 `public` 里面的html文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> hexo <span class="keyword">deploy</span>，如果 _config.yml 有配置<span class="keyword">deploy</span>的内容，执行该命令是会执行相应的部署逻辑</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>HEXO的详细科普和指令在这里就不写了哈，官方文档里都有 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">&gt;&gt; 传送门</a>。</p><h3 id="生产分支-gh-pages"><a href="#生产分支-gh-pages" class="headerlink" title="生产分支 gh-pages"></a>生产分支 gh-pages</h3><p>在<code>dev</code>分支里，执行了<code>hexo g</code>编译之后，编译后的静态文件会存在<code>public</code>文件夹里，而我们就把里面的内容挪到最终的生产环境分支<code>gh-pages</code>里，也就是最终我们看到的静态博客。</p><p>当我们在github里把github-pages服务打开，并渲染<code>gh-pages</code>分支，我们就能访问自己的博客了（<a href="https://yuyingwu.github.io/blog/" target="_blank" rel="noopener">https://yuyingwu.github.io/blog/</a>）。</p><p><img src="//lc-wpyqjumv.cn-n1.lcfile.com/d3ebf243ea2b0dfd9dd1.png" alt="&quot;看看我的博客&quot;"></p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>在大致了解HEXO的开发流程之后，我们可以开始考虑，如果要实现快捷发布，是要做什么？<br><code>User Story</code>：<strong>希望可以在github上写一篇文章，提交之后，可以直接在我的线上博客看到</strong>。</p><p>在这里，我们用到了提供持续集成（CI, Continuous Integration）服务的<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>，但其实用到的不是它提供的CI服务，而更多的是通过监听分支提交的动态，在集成成功后去执行我们自定义的部署逻辑。</p><blockquote><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p></blockquote><p>噢，还有些事前准备：</p><ul><li>先在<code>dev</code>分支里，创建<code>.travis.yml</code></li><li>在<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CLI</a>平台上打开这个分支的CI开关</li></ul><h3 id="1-编译并同步到gh-pages"><a href="#1-编译并同步到gh-pages" class="headerlink" title="1. 编译并同步到gh-pages"></a>1. 编译并同步到gh-pages</h3><p>那直接上我的CI配置代码吧。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span> <span class="comment"># Travis CI建议加的，自动更新api</span></span><br><span class="line"><span class="attr">  apt:</span></span><br><span class="line"><span class="attr">    update:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">node_modules</span> <span class="comment"># 缓存 node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 初次安装，在CI环境中，执行安装npm依赖</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># before_script: </span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span> <span class="comment"># 执行 hexo generate，把文章编译到public中</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span> <span class="comment"># 执行script成功后，进入到public，把里面的代码提交到博客的gh-pages分支</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"Yuying Wu"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"wuyuying1128@gmail.com"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Update site"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">dev</span> <span class="comment"># CI 只针对分支 dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  global:</span> <span class="comment"># 全局变量，上面的提交到github的命令有用到</span></span><br><span class="line"><span class="attr">  - GH_REF:</span> <span class="string">github.com/YuyingWu/blog.git</span></span><br><span class="line"><span class="attr">  - secure:</span> </span><br><span class="line"><span class="comment"># secure是自动生成的，执行`travis encrypt 'GH_TOKEN=$&#123;your_github_personal_access_token&#125;' --add`</span></span><br></pre></td></tr></table></figure><p>相信代码和注释写得很清楚了，有个地方需要进一步解释的，github提交那part，涉及github access token的生成和加密。</p><ol><li>生成github的<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Tokens</a>（打开分支提交的权限）</li><li>安装Travis CLI <code>gem install travis</code>（如果登录遇到环境问题，可以看看下面参考文章里面的解决方案）</li><li>进入到本地<code>dev</code>目录下（带有<code>.travis.yml</code>），执行<code>travis login</code>登录，再执行<code>travis encrypt &#39;GH_TOKEN=${your_github_personal_access_token}&#39; --add</code>加密你的personal access token（也就是后来<code>.travis.yml</code>的<code>env.global.secure</code>的值）</li></ol><p>把<code>.travis.yml</code>提交之后，看看Travis CLI上，开始持续集成了哈。</p><p><img src="//lc-wpyqjumv.cn-n1.lcfile.com/cbf00765c8f94a151965.png" alt="&quot;开始准备&quot;"><br><img src="//lc-wpyqjumv.cn-n1.lcfile.com/b82303e0f85deb2088ce.png" alt="&quot;after_success把代码部署到gh-pages&quot;"></p><p>大功告成，集成之后，在github pages的页面上也能看到文章的更新。</p><h3 id="2-CI到我的服务器"><a href="#2-CI到我的服务器" class="headerlink" title="2. CI到我的服务器"></a>2. CI到我的服务器</h3><p>我的服务器是DO家（Digital Ocean）的，那一开始服务器初始化的过程，大家可以参考各个server商提供的setup文档哈，总的来说，在本地有个服务器信任的<code>id_rsa</code>的ssh文件，我们是可以通过<code>ssh user@ip_address</code>登录到服务器的。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个命令会自动把 id_rsa 加密传送到 .git 指定的仓库对应的 travis 中去（在我本地这个文件叫qq_rsa，不是默认的id_rsa）</span></span><br><span class="line">travis <span class="built_in">encrypt</span>-<span class="built_in">file</span> ~/.ssh/id_rsa <span class="comment">--add</span></span><br></pre></td></tr></table></figure><p>执行这个命令后，<code>.travis.yml</code>多了一行代码：（注意把其中的转义符<code>\</code>干掉哈），也会在分支目录下生成一个<code>id_rsa.enc</code>的加密文件，记得把这个文件也提交上去哟。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">-<span class="ruby"> openssl aes-<span class="number">256</span>-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv</span></span><br><span class="line"><span class="ruby">  -<span class="keyword">in</span> qq_rsa.enc -out ~<span class="regexp">/.ssh/id</span>_rsa -d</span></span><br></pre></td></tr></table></figure><p>然后为了保证在Travis里面能正常执行，我们处理下运行环境的rsa文件权限和输出提示信息，before_install如下。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">-<span class="ruby"> openssl aes-<span class="number">256</span>-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv</span></span><br><span class="line"><span class="ruby">  -<span class="keyword">in</span> qq_rsa.enc -out ~<span class="regexp">/.ssh/id</span>_rsa -d</span></span><br><span class="line"><span class="ruby">- chmod <span class="number">600</span> ~<span class="regexp">/.ssh/id</span>_rsa</span></span><br><span class="line"><span class="ruby">- echo -e <span class="string">"Host 主机IP地址\n\tStrictHostKeyChecking no\n"</span> <span class="meta">&gt;&gt; </span>~<span class="regexp">/.ssh/config</span></span></span><br></pre></td></tr></table></figure><p>最后，在<code>after_success</code>里添加<strong>拷贝目标文件到服务器目标目录</strong>的操作，就大功告成了！</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">after_success</span><br><span class="line"><span class="comment"># other actions</span></span><br><span class="line">- scp -o stricthostkeychecking=no -r ./* root<span class="variable">@138</span>.<span class="number">68.161</span>.<span class="number">48</span><span class="symbol">:/home/wyyNode/public/blog/</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://juejin.im/post/596e39916fb9a06baf2ed273" target="_blank" rel="noopener">如何快速搭建一个有域名且持续集成的hexo博客(2.0版)</a> - <a href="https://github.com/zytx121" target="_blank" rel="noopener">Eva-Yue</a></li><li><a href="http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/" target="_blank" rel="noopener">Hexo 自动部署到 Github</a> - <a href="http://lotabout.me/" target="_blank" rel="noopener">三点水</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html" target="_blank" rel="noopener">持续集成服务 Travis CI 教程</a> - 阮一峰</li><li><a href="https://github.com/travis-ci/travis.rb/issues/190" target="_blank" rel="noopener">“no implicit conversion of nil into String” when logging in</a> - 在执行<code>travis login</code>遇到的问题的解决方案</li><li><a href="https://iamstarkov.com/deploy-gh-pages-from-travis/" target="_blank" rel="noopener">Deploy to GitHub pages from Travis CI</a></li><li><a href="https://segmentfault.com/a/1190000009093621" target="_blank" rel="noopener">使用 Travis 将 GitHub 文件上传传至服务器</a> - <a href="https://github.com/Godi13" target="_blank" rel="noopener">Godi13</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://lc-wpyqjumv.cn-n1.lcfile.com/9fb19e9b112f127c1adc.jpg&quot; alt=&quot;&amp;quot;Travis CI&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;用了一段时间HEXO搭建个人的博客，但每次发布文章，都需要
      
    
    </summary>
    
    
      <category term="blog" scheme="http://wuyuying.com/tags/blog/"/>
    
      <category term="travisCI" scheme="http://wuyuying.com/tags/travisCI/"/>
    
      <category term="CI" scheme="http://wuyuying.com/tags/CI/"/>
    
      <category term="hexo" scheme="http://wuyuying.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[译] React性能优化-虚拟Dom原理浅析</title>
    <link href="http://wuyuying.com/archives/optimizing-react-virtual-dom-explained/"/>
    <id>http://wuyuying.com/archives/optimizing-react-virtual-dom-explained/</id>
    <published>2018-05-13T11:15:19.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文译自<a href="https://evilmartians.com/chronicles/optimizing-react-virtual-dom-explained" target="_blank" rel="noopener">《Optimizing React: Virtual DOM explained》</a>，作者是<a href="https://github.com/iAdramelk" target="_blank" rel="noopener">Alexey Ivanov</a>和<a href="https://github.com/progapandist" target="_blank" rel="noopener">Andy Barnov</a>，来自<a href="https://evilmartians.com/chronicles" target="_blank" rel="noopener">Evil Martians’ team</a>团队。</p><p>译者说：通过一些实际场景和demo，给大家描述React的Virtual Dom Diff一些核心的原理和规则，以及基于这些我们可以做些什么提高应用的性能，很棒的文章。</p><hr><p><strong>通过学习React的Virtual DOM的知识，去加速你们的应用吧。对框架内部实现的介绍，比较全面且适合初学者，我们会让JSX更加简单易懂，给你展示React是如何判断要不要重新render，解释如何找到应用的性能瓶颈，以及给大家一些小贴士，如何避免常见错误。</strong></p><p>React在前端圈内保持领先的原因之一，因为它的学习曲线非常平易近人：把你的模板包在<code>JSX</code>，了解一下<code>props</code>和<code>state</code>的概念之后，你就可以轻松写出React代码了。</p><p>如果你已经熟悉React的工作方式，可以直接跳至“优化我的代码”篇。</p><p>但要真正掌握React，你需要像React一样思考（think in React）。本文也会试图在这个方面帮助你。</p><p>下面看看我们其中一个项目中的React table：</p><p><img src="http://sinacloud.net/woodysblog/img/ebay_table.png" alt="&quot;eBay上的一个巨大的React表格  用于业务。&quot;"></p><p>这个表里有数百个动态（表格内容变化）和可过滤的选项，理解这个框架更精细的点，对于保证顺畅的用户体验至关重要。</p><hr><p><strong>当事情出错时，你一定能感觉到。输入字段变得迟缓，复选框需要检查一秒钟，弹窗一个世纪后才出现，等等。</strong></p><hr><p>为了能够解决这些问题，我们需要完成一个React组件的整个生命旅程，从一开始的声明定义到在页面上渲染（再然后可能会更新）。系好安全带，我们要发车了！</p><h2 id="JSX的背后"><a href="#JSX的背后" class="headerlink" title="JSX的背后"></a>JSX的背后</h2><p>这个过程一般在前端会称为“转译”，但其实“汇编”将是一个更精确的术语。</p><p>React开发人员敦促你在编写组件时使用一种称为JSX的语法，混合了HTML和JavaScript。但浏览器对JSX及其语法毫无头绪，浏览器只能理解纯碎的JavaScript，所以JSX必须转换成JavaScript。这里是一个div的JSX代码，它有一个class name和一些内容：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">'cn'</span>&gt;</span><br><span class="line">  Content!</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>以上的代码，被转换成“正经”的JavaScript代码，其实是一个带有一些参数的函数调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125;,</span><br><span class="line">  <span class="string">'Content!'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>让我们仔细看看这些参数。</p><ul><li>第一个是元素的<code>type</code>。对于HTML标签，它将是一个带有<code>标签名称</code>的字符串。</li><li>第二个参数是一个包含所有元素属性（<code>attributes</code>）的对象。如果没有，它也可以是空的对象。</li><li>剩下的参数都可以认为是元素的子元素（<code>children</code>）。元素中的文本也算作一个child，是个字符串’Content！’ 作为函数调用的第三个参数放置。</li></ul><p>你应该可以想象，当我们有更多的children时会发生什么：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">'cn'</span>&gt;</span><br><span class="line">  Content <span class="number">1</span>!</span><br><span class="line">  &lt;br /&gt;</span><br><span class="line">  Content <span class="number">2</span>!</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125;,</span><br><span class="line">  <span class="string">'Content 1!'</span>,              <span class="comment">// 1st child</span></span><br><span class="line">  React.createElement(<span class="string">'br'</span>), <span class="comment">// 2nd child</span></span><br><span class="line">  <span class="string">'Content 2!'</span>               <span class="comment">// 3rd child</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们的函数现在有五个参数：</p><ul><li>一个元素的类型</li><li>一个属性对象</li><li>三个子元素。</li></ul><p>因为其中一个child是一个React已知的HTML标签（<code>&lt;br/&gt;</code>），所以它也会被描述为一个函数调用（<code>React.createElement(&#39;br&#39;)</code>）。</p><p>到目前为止，我们已经涵盖了两种类型的children：</p><ul><li>简单的<code>String</code></li><li>另一种会调用<code>React.createElement</code>。</li></ul><p>然而，还有其他值可以作为参数：</p><ul><li>基本类型 <code>false, null, undefined, true</code></li><li>数组</li><li>React Components</li></ul><p>可以使用数组是因为可以将children分组并作为一个参数传递：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125;,</span><br><span class="line">  [<span class="string">'Content 1!'</span>, React.createElement(<span class="string">'br'</span>), <span class="string">'Content 2!'</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当然了，React的厉害之处，不仅仅因为我们可以把HTML标签直接放在JSX中使用，而是我们可以自定义自己的组件，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Table</span>(<span class="params">&#123; rows &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &#123;rows.map(<span class="function"><span class="params">row</span> =&gt;</span> (</span><br><span class="line">        &lt;tr key=&#123;row.id&#125;&gt;</span><br><span class="line">          &lt;td&gt;&#123;row.title&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>组件可以让我们把模板分解为多个可重用的块。在上面的“函数式”（functional）组件的例子里，我们接收一个包含表格行数据的对象数组，最后返回一个调用<code>React.createElement</code>方法的<code>&lt;table&gt;</code>元素，<code>rows</code>则作为children传进table。</p><p>无论什么时候，我们这样去声明一个组件时：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table rows=&#123;rows&#125; /&gt;</span><br></pre></td></tr></table></figure><p>从浏览器的角度来看，我们是这么写的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(Table, &#123; <span class="attr">rows</span>: rows &#125;);</span><br></pre></td></tr></table></figure><p>注意，这次我们的第一个参数不是<code>String</code>描述的<code>HTML标签</code>，而是一个引用，指向我们编写组件时编写的函数。组件的<code>attributes</code>现在是接收的<code>props</code>参数了。</p><h2 id="把组件（components）组合成页面（a-page）"><a href="#把组件（components）组合成页面（a-page）" class="headerlink" title="把组件（components）组合成页面（a page）"></a>把组件（components）组合成页面（a page）</h2><p>所以，我们已经将所有JSX组件转换为纯JavaScript，现在我们有一大堆函数调用，它的参数会被其他函数调用的，或者还有更多的其他函数调用这些参数……这些带参数的函数调用，是怎么转化成组成这个页面的实体DOM的呢？</p><p>为此，我们有一个<code>ReactDOM</code>库及其它的<code>render</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Table</span>(<span class="params">&#123; rows &#125;</span>) </span>&#123; <span class="comment">/* ... */</span> &#125; <span class="comment">// defining a component</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rendering a component</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(Table, &#123; <span class="attr">rows</span>: rows &#125;), <span class="comment">// "creating" a component</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'#root'</span>) <span class="comment">// inserting it on a page</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当<code>ReactDOM.render</code>被调用时，<code>React.createElement</code>最终也会被调用，返回以下对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// There are more fields, but these are most important to us</span></span><br><span class="line">&#123;</span><br><span class="line">  type: Table,</span><br><span class="line">  props: &#123;</span><br><span class="line">    rows: rows</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>这些对象，在React的角度上，构成了虚拟DOM。</strong></p><hr><p>他们将在所有进一步的渲染中相互比较，并最终转化为  真正的<code>DOM</code>（virtual VS real, 虚拟DOM VS 真实DOM）。</p><p>下面是另一个例子：这次div有一个class属性和几个children：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125;,</span><br><span class="line">  <span class="string">'Content 1!'</span>,</span><br><span class="line">  <span class="string">'Content 2!'</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>变成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'div'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: <span class="string">'cn'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      <span class="string">'Content 1!'</span>,</span><br><span class="line">      <span class="string">'Content 2!'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，那些除了<code>type</code>和<code>attribute</code>以外的属性，原本是单独传进来的，转换之后，会作为在<code>props.children</code>以一个数组的形式打包存在。也就是说，无论children是作为数组还是参数列表传递都没关系 —— 在生成的虚拟DOM对象的时候，它们最后都会被打包在一起的。</p><p>进一步说，我们可以直接在组件中把children作为一项属性传进去，结果还是一样的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">'cn'</span> children=&#123;[<span class="string">'Content 1!'</span>, <span class="string">'Content 2!'</span>]&#125; /&gt;</span><br></pre></td></tr></table></figure><p>在构建虚拟DOM对象完成之后，<code>ReactDOM.render</code>将会按下面的原则，尝试将其转换为浏览器可以识别和展示的DOM节点：</p><ul><li><p>如果<code>type</code>包含一个带有<code>String</code>类型的标签名称（<code>tag name</code>）—— 创建一个标签，附带上<code>props</code>下所有<code>attributes</code>。</p></li><li><p>如果<code>type</code>是一个函数（<code>function</code>）或者类（<code>class</code>），调用它，并对结果递归地重复这个过程。</p></li><li><p>如果<code>props</code>下有<code>children</code>属性 —— 在父节点下，针对每个child重复以上过程。</p></li></ul><p>最后，得到以下HTML（对于我们的表格示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="重新构建DOM（Rebuilding-the-DOM）"><a href="#重新构建DOM（Rebuilding-the-DOM）" class="headerlink" title="重新构建DOM（Rebuilding the DOM）"></a>重新构建DOM（Rebuilding the DOM）</h2><p>在实际应用场景，<code>render</code>通常在根节点调用一次，后续的更新会有<code>state</code>来控制和触发调用。</p><p>请注意，标题中的“重新”！当我们想更新一个页面而不是全部替换时，React中的魔法就开始了。我们有一些实现它的方式。我们先从最简单的开始 —— 在同一个node节点再次执行<code>ReactDOM.render</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Second call</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(Table, &#123; <span class="attr">rows</span>: rows &#125;),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'#root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这一次，上面的代码的表现，跟我们已经看到的有所不同。React将从头开始创建所有DOM节点并将其放在页面上，而不是从头开始创建所有DOM节点，React将启动其<code>diff</code>算法，来确定节点树的哪些部分必须更新，哪些可以保持不变。</p><p>那么，它是怎样工作的呢？其实只有少数几个简单的场景，理解它们将对我们的优化帮助很大。请记住，现在我们在看的，是在<code>React Virtual DOM</code>里面用来代表节点的<code>对象</code>。</p><h3 id="场景1：type是一个字符串，type在通话中保持不变，props也没有改变。"><a href="#场景1：type是一个字符串，type在通话中保持不变，props也没有改变。" class="headerlink" title="场景1：type是一个字符串，type在通话中保持不变，props也没有改变。"></a>场景1：<code>type</code>是一个字符串，<code>type</code>在通话中保持不变，<code>props</code>也没有改变。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before update</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'div'</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after update</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'div'</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>这是最简单的情况：DOM保持不变。</p><h3 id="场景2：type仍然是相同的字符串，props是不同的。"><a href="#场景2：type仍然是相同的字符串，props是不同的。" class="headerlink" title="场景2：type仍然是相同的字符串，props是不同的。"></a>场景2：<code>type</code>仍然是相同的字符串，<code>props</code>是不同的。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before update:</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'div'</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after update:</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'div'</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">'cnn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p><code>type</code>仍然代表HTML元素，React知道如何通过标准DOM API调用来更改元素的属性，而无需从DOM树中删除一个节点。</p><h3 id="场景3：type已更改为不同的String或从String组件。"><a href="#场景3：type已更改为不同的String或从String组件。" class="headerlink" title="场景3：type已更改为不同的String或从String组件。"></a>场景3：<code>type</code>已更改为不同的<code>String</code>或从<code>String</code>组件。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before update:</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'div'</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after update:</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'span'</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">'cn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>React看到的<code>type</code>是不同的，它甚至不会尝试更新我们的节点：old元素将和它的所有子节点一起被删除（unmounted卸载）。因此，将元素替换为完全不同于DOM树的东西代价会非常昂贵。幸运的是，这在现实世界中很少发生。</p><p>划重点，记住React使用<code>===</code>（triple equals）来比较<code>type</code>的值，所以这两个值需要是相同类或相同函数的相同实例。</p><p>下一个场景更加有趣，通常我们会这么使用React。</p><h3 id="场景4：type是一个component。"><a href="#场景4：type是一个component。" class="headerlink" title="场景4：type是一个component。"></a>场景4：<code>type</code>是一个<code>component</code>。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// before <span class="keyword">update</span>:</span><br><span class="line">&#123; <span class="keyword">type</span>: <span class="keyword">Table</span>, props: &#123; <span class="keyword">rows</span>: <span class="keyword">rows</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">after</span> <span class="keyword">update</span>:</span><br><span class="line">&#123; <span class="keyword">type</span>: <span class="keyword">Table</span>, props: &#123; <span class="keyword">rows</span>: <span class="keyword">rows</span> &#125; &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>你可能会说，“咦，但没有任何变化啊！”，但是你错了。</strong></p><hr><p>如果<code>type</code>是对函数或类的引用（即常规的React组件），并且我们启动了tree diff的过程，则React会持续地去检查组件的内部逻辑，以确保<code>render</code>返回的值不会改变（类似对副作用的预防措施）。对树中的每个组件进行遍历和扫描 —— 是的，在复杂的渲染场景下，成本可能会非常昂贵！</p><p>值得注意的是，一个<code>component</code>的<code>render</code>（只有类组件在声明时有这个函数）跟<code>ReactDom.render</code>不是同一个函数。</p><h2 id="关注子组件（children）的情况"><a href="#关注子组件（children）的情况" class="headerlink" title="关注子组件（children）的情况"></a>关注子组件（children）的情况</h2><p>除了上述四种常见场景之外，当一个元素有多个子元素时，我们还需要考虑React的行为。现在假设我们有这么一个元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">props: &#123;</span><br><span class="line">  children: [</span><br><span class="line">      &#123; <span class="attr">type</span>: <span class="string">'div'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">type</span>: <span class="string">'span'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">type</span>: <span class="string">'br'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>我们想要交换一下这些children的顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">props: &#123;</span><br><span class="line">  children: [</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'span'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'div'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'br'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>之后会发生什么呢？</p><p>当<code>diffing</code>的时候，如果React在检查<code>props.children</code>下的数组时，按顺序去对比数组内元素的话：index 0将与index 0进行比较，index 1和index 1，等等。对于每一次对比，React会使用之前提过的diff规则。在我们的例子里，它认为<code>div</code>成为一个<code>span</code>，那么就会运用到情景3。这样不是很有效率的：想象一下，我们已经从1000行中删除了第一行。React将不得不“更新”剩余的999个子项，因为按index去对比的话，内容从第一条开始就不相同了。</p><p>幸运的是，React有一个<code>内置的方法（built-in）</code>来解决这个问题。如果一个元素有一个<code>key</code>属性，那么元素将按<code>key</code>而不是<code>index</code>来比较。只要<code>key</code>是唯一的，React就会移动元素，而不是将它们从DOM树中移除然后再将它们放回（这个过程在React里叫mounting和unmounting）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">props: &#123;</span><br><span class="line">  children: [ <span class="comment">// Now React will look on key, not index</span></span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'div'</span>, <span class="attr">key</span>: <span class="string">'div'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'span'</span>, <span class="attr">key</span>: <span class="string">'span'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'br'</span>, <span class="attr">key</span>: <span class="string">'bt'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="当state发生了改变"><a href="#当state发生了改变" class="headerlink" title="当state发生了改变"></a>当state发生了改变</h2><p>到目前为止，我们只聊了下React哲学里面的<code>props</code>部分，却忽视了另外很重要的一部分<code>state</code>。下面是一个简单的<code>stateful</code>组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.state.counter + <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  render = <span class="function"><span class="params">()</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;'Counter: ' + this.state.counter&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>state</code>对象里，我们有一个key<code>counter</code>。点击按钮时，这个值会增加，然后按钮的文本也会发生相应的改变。但是，当我们这样做时，DOM中发生了什么？哪部分将被重新计算和更新？</p><p>调用<code>this.setState</code>会导致<code>re-render</code>（重新渲染），但不会影响到整个页面，而只会影响组件本身及其children组件。父母和兄弟姐妹都不会受到影响。当我们有一个层级很深的组件链时，这会让状态更新变得非常方便，因为我们只需要重绘(<code>redraw</code>)它的一部分。</p><h2 id="把问题说清楚"><a href="#把问题说清楚" class="headerlink" title="把问题说清楚"></a>把问题说清楚</h2><p>我们准备了一个<a href="https://iadramelk.github.io/optimizing-react-demo/dist/before.html" target="_blank" rel="noopener">小demo</a>，以便你可以在看到在“野蛮生长”的React编码方式下最常见的问题，后续我也告诉大家怎么去解决这些问题。你可以在<a href="https://github.com/iAdramelk/optimizing-react-demo" target="_blank" rel="noopener">这里看看它的源代码</a>。你还需要<a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">React Developer Tools</a>，请确保浏览器安装了它们。</p><p>我们首先要看看的是，哪些元素以及什么时候导致Virtual DOM的更新。在浏览器的开发工具中，打开React面板并选择“Highlight Updates”复选框：</p><p><img src="http://sinacloud.net/woodysblog/img/react_dev_tools.png" alt="&quot;在Chrome中使用“突出显示更新”复选框选中DevTools&quot;"></p><p>现在尝试在表格中添加一行。如你所见，页面上的每个元素周围都会显示一个边框。这意味着每次添加一行时，React都在计算和比较整个虚拟DOM树。现在尝试点击一行内的counter按钮。你将看到<code>state</code>更新后虚拟DOM如何更新 —— 只有引用了<code>state key</code>的元素及其children受到影响。</p><p>React DevTools会提示问题出在哪里，但不会告诉我们有关细节的信息：特别是所涉及的更新，是由<code>diffing</code>元素引起的？还是被挂载（<code>mounting</code>）或者被卸载（<code>unmounting</code>）了？要了解更多信息，我们需要使用React的内置<a href="https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab" target="_blank" rel="noopener">分析器</a>（注意它不适用于生产模式）。</p><p>添加<code>?react_perf</code>到应用的URL，然后转到Chrome DevTools中的“Performance”标签。点击“录制”（Record）并在表格上点击。添加一些row，更改一下counter，然后点击“停止”（Stop）。</p><p><img src="http://sinacloud.net/woodysblog/img/react_perf_tools.png" alt="&quot;React DevTools的“Performance”选项卡&quot;"></p><p>在输出的结果中，我们关注“User timing”这项指标。放大时间轴直到看到“React Tree Reconciliation”这个组及其子项。这些就是我们组件的名称，它们旁边都写着[update]或[mount]。</p><hr><p><strong>我们的大部分性能问题都属于这两类问题之一。</strong></p><hr><p>无论是组件（还是从它分支的其他组件）出于某种原因都会在每次更新时re-mounted（慢），又或者我们在大型应用上执行对每个分支做diff，尽管这些组件并没有发生改变，我们不希望这些情况的发生。</p><h2 id="优化我们的代码：Mounting-Unmounting"><a href="#优化我们的代码：Mounting-Unmounting" class="headerlink" title="优化我们的代码：Mounting / Unmounting"></a>优化我们的代码：Mounting / Unmounting</h2><p>现在，我们已经了解到当需要update Virtual Dom时，React是依据哪些规则去判断要不要更新，以及也知道了我们可以通过什么方式去追踪这些diff场景的背后发生了什么，我们终于准备好优化我们的代码了！首先，我们来看看mounts/unmounts。</p><p>如果你能够注意到当一个元素包含的多个children，他们是由array组成的话，你可以实现十分显著的速度优化。</p><p>我们来看看这个case：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Message /&gt;</span><br><span class="line">  &lt;Table /&gt;</span><br><span class="line">  &lt;Footer /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>在我们的Virtual DOM里这么表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">props: &#123;</span><br><span class="line">  children: [</span><br><span class="line">    &#123; <span class="attr">type</span>: Message &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: Table &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: Footer &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>这里有一个简单的<code>Message</code>例子，就是一个<code>div</code>写着一些简单的文本，和以及一个巨大的<code>Table</code>，比方说，超过1000行。它们（<code>Message</code>和<code>Table</code>）都是顶级<code>div</code>的子组件，所以它们被放置在父节点的<code>props.children</code>下，并且它们<code>key</code>都不会有。React甚至不会通过控制台警告我们要给每个<code>child</code>分配<code>key</code>，因为children正在<code>React.createElement</code>作为参数列表传递给父元素，而不是直接遍历一个数组。</p><p>现在我们的用户已读了一个通知，<code>Message</code>（譬如新通知按钮）从DOM上移除。<code>Table</code>和<code>Footer</code>是剩下的全部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">props: &#123;</span><br><span class="line">  children: [</span><br><span class="line">    &#123; <span class="attr">type</span>: Table &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: Footer &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>React会怎么处理呢？它会看作是一个array类型的children，现在少了第一项，从前第一项是<code>Message</code>现在是<code>Table</code>了，也没有<code>key</code>作为索引，比较<code>type</code>的时候又发现它们俩不是同一个function或者class的同一个实例，于是会把整个<code>Table</code>unmount，然后在mount回去，渲染它的1000+行子数据。</p><p>因此，你可以给每个component添加唯一的<code>key</code>（但在目特殊的case下，使用key并不是最佳选择），或者采用更聪明的小技巧：使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators" target="_blank" rel="noopener">短路求值</a>（又名“最小化求值”），这是JavaScript和许多其他现代语言的特性。看：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Using a boolean trick</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;isShown &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Table</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>虽然<code>Message</code>会离开屏幕，父元素<code>div</code>的<code>props.children</code>仍然会拥有三个元素，<code>children[0]</code>具有一个值<code>false</code>（一个布尔值）。请记住<code>true, false, null, undefined</code>是虚拟DOM对象<code>type</code>属性的允许值，我们最终得到了类似的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">props: &#123;</span><br><span class="line">  children: [</span><br><span class="line">    <span class="literal">false</span>, <span class="comment">//  isShown &amp;&amp; &lt;Message /&gt; evaluates to false</span></span><br><span class="line">    &#123; <span class="attr">type</span>: Table &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: Footer &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>因此，有没有<code>Message</code>组件，我们的索引值都不会改变，<code>Table</code>当然仍然会跟<code>Table</code>比较（当<code>type</code>是一个函数或类的引用时，diff比较的成本还是会有的），但仅仅比较虚拟DOM的成本，通常比“删除DOM节点”并“从0开始创建”它们要来得快。</p><p>现在我们来看看更多的东西。大家都挺喜欢用HOC的，高阶组件是一个将组件作为参数，执行某些操作，最后返回另外一个不同功能的组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withName</span>(<span class="params">SomeComponent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Computing name, possibly expensive...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SomeComponent</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>这是一种常见的模式，但你需要小心。如果我们这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>() </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// Creates a new instance on each render</span></span><br><span class="line">    <span class="keyword">const</span> ComponentWithName = withName(SomeComponent);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SomeComponentWithName</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>我们在父节点的<code>render</code>方法内部创建一个HOC。当我们重新渲染（<code>re-render</code>）树时，虚拟DOM是这样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// On first render:</span></span><br><span class="line">&#123;</span><br><span class="line">  type: ComponentWithName,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// On second render:</span></span><br><span class="line">&#123;</span><br><span class="line">  type: ComponentWithName, <span class="comment">// Same name, but different instance</span></span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，React会对<code>ComponentWithName</code>这个实例做diff，但由于此时同名引用了不同的实例，因此全等比较（triple equal）失败，一个完整的re-mount会发生（整个节点换掉），而不是调整属性值或顺序。注意它也会导致状态丢失，<a href="https://github.com/facebook/react/blob/044015760883d03f060301a15beef17909abbf71/docs/docs/higher-order-components.md#dont-use-hocs-inside-the-render-method" target="_blank" rel="noopener">如此处所述</a>。幸运的是，这很容易解决，你需要始终在<code>render</code>外面创建一个HOC：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates a new instance just once</span></span><br><span class="line"><span class="keyword">const</span> ComponentWithName = withName(Component);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>() </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ComponentWithName</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="优化我的代码：Updating"><a href="#优化我的代码：Updating" class="headerlink" title="优化我的代码：Updating"></a>优化我的代码：Updating</h2><p>现在我们可以确保在非必要的时候，不做re-mount的事情了。然而，对位于DOM树根部附近（层级越上面的元素）的组件所做的任何更改都会导致其所有children的diffing和调整（<code>reconciliation</code>）。在层级很多、结构复杂的应用里，这些成本很昂贵，但经常是可以避免的。</p><hr><p><strong>如果有一种方法可以告诉React你不用来检查这个分支了，因为我们可以肯定那个分支不会有更新，那就太棒了！</strong></p><hr><p>这种方式是真的有的哈，它涉及一个built-in方法叫<code>shouldComponentUpdate</code>，它也是<a href="https://reactjs.org/docs/react-component.html#the-component-lifecycle" target="_blank" rel="noopener">组件生命周期</a>的一部分。这个方法的调用时机：组件的<code>render</code>和组件接收到state或props的值的更新时。然后我们可以自由地将它们与我们当前的值进行比较，并决定是否更新我们的组件（返回<code>true</code>或<code>false</code>）。如果我们返回<code>false</code>，React将不会重新渲染组件，也不会检查它的所有子组件。</p><p>通常来说，比较两个集合（set）<code>props</code>和<code>state</code>一个简单的浅层比较（shallow comparison）就足够了：如果顶层的值不同，我们不必接着比较了。浅比较不是JavaScript的一个特性，但有很多<a href="https://github.com/dashed/shallowequal" target="_blank" rel="noopener">小而美的库</a>（<code>utilities</code>）可以让我们用上那么棒的功能。</p><p>现在可以像这样编写我们的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableRow</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// will return true if new props/state are different from old ones</span></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; props, state &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> !shallowequal(props, nextProps)</span><br><span class="line">           &amp;&amp; !shallowequal(state, nextState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是你甚至都不需要自己写代码，因为React把这个特性内置在一个类<code>React.PureComponent</code>里面。它类似于  <code>React.Component</code>，只是<code>shouldComponentUpdate</code>已经为你实施了一个浅的<code>props</code>/<code>state</code>比较。</p><p>这听起来很“不动脑”，在声明class继承（<code>extends</code>）的时候，把<code>Component</code>换成<code>PureComponent</code>就可以享受高效率。事实上，并不是这么“傻瓜”，看看这些例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table</span><br><span class="line">    <span class="comment">// map returns a new instance of array so shallow comparison will fail</span></span><br><span class="line">    rows=&#123;rows.map(<span class="comment">/* ... */</span>)&#125;</span><br><span class="line">    <span class="comment">// object literal is always "different" from predecessor</span></span><br><span class="line">    style=&#123; &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125; &#125;</span><br><span class="line">    <span class="comment">// arrow function is a new unnamed thing in the scope, so there will always be a full diffing</span></span><br><span class="line">    onUpdate=&#123;() =&gt; &#123; <span class="comment">/* ... */</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>上面的代码片段演示了三种最常见的反模式。尽量避免它们！</p><hr><p><strong>如果你能注意点，在render定义之外创建所有对象、数组和函数，并确保它们在各种调用间，不发生更改 —— 你是安全的。</strong></p><hr><p>你在<a href="https://iadramelk.github.io/optimizing-react-demo/dist/after.html" target="_blank" rel="noopener">updated demo</a>，所有table的rows都被“净化”（<code>purified</code>）过，你可以看到<code>PureComponent</code>的表现了。如果你在React DevTools中打开“Highlight Updates”，你会注意到只有表格本身和新行在插入时会触发<code>render</code>，其他的行保持不变。</p><p>[译者说：为了便于大家理解<code>purified</code>，译者在下面插入了原文demo的一段代码]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableRow</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> React.createElement(<span class="string">'tr'</span>, &#123; <span class="attr">className</span>: <span class="string">'row'</span> &#125;,</span><br><span class="line">      React.createElement(<span class="string">'td'</span>, &#123; <span class="attr">className</span>: <span class="string">'cell'</span> &#125;, <span class="keyword">this</span>.props.title),</span><br><span class="line">      React.createElement(<span class="string">'td'</span>, &#123; <span class="attr">className</span>: <span class="string">'cell'</span> &#125;, React.createElement(Button)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不过，如果你迫不及待地all in PureComponent，在应用里到处都用的话 —— 控制住你自己！</p><p>shallow比较两组<code>props</code>和<code>state</code>不是免费的，对于大多数基本组件来说，甚至都不值得：<code>shallowCompare</code>比<code>diffing</code>算法需要耗费更多的时间。</p><p>使用这个经验法则：pure component适用于复杂的表单和表格，但它们通常会减慢简单元素（按钮、图标）的效率。</p><hr><p>感谢你的阅读！现在你已准备好将这些见解应用到你的应用程序中。可以使用我们的小demo（<a href="https://iadramelk.github.io/optimizing-react-demo/dist/after.html" target="_blank" rel="noopener">用了</a>或<a href="https://iadramelk.github.io/optimizing-react-demo/dist/before.html" target="_blank" rel="noopener">没有用</a>PureComponent）的<a href="https://github.com/iAdramelk/optimizing-react-demo" target="_blank" rel="noopener">仓库</a>作为你的实验的起点。此外，请继续关注本系列的下一部分，我们计划涵盖Redux并优化你的数据，目标是提高整个应用的总体性能。</p><h2 id="译者说"><a href="#译者说" class="headerlink" title="译者说"></a>译者说</h2><p>正如原文末所说，Alex和Andy后续会继续写一个关于整体性能的系列，包括核心React和Redux等，我也会继续跟踪这个系列的文章，到时po到我的<a href="http://wuyuying.com/blog/">个人博客</a>和知乎专栏<a href="https://zhuanlan.zhihu.com/front-end-thinking" target="_blank" rel="noopener">《集异璧》</a>，感兴趣的同学们可以关注一下哈 ：）</p><p>欢迎对本文的翻译质量、内容的各种讨论。若有表述不当，欢迎斧正。</p><p>2018.05.13，晴，杭州滨江<br>Yuying Wu</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文译自&lt;a href=&quot;https://evilmartians.com/chronicles/optimizing-react-virtual-dom-explained&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Optimizing React
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="performance" scheme="http://wuyuying.com/tags/performance/"/>
    
      <category term="reactjs" scheme="http://wuyuying.com/tags/reactjs/"/>
    
      <category term="translation" scheme="http://wuyuying.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>关于「自由态职业」</title>
    <link href="http://wuyuying.com/archives/slash/"/>
    <id>http://wuyuying.com/archives/slash/</id>
    <published>2018-04-30T15:37:19.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了萧秋水和剽悍一只猫的<a href="https://book.douban.com/subject/27177491/" target="_blank" rel="noopener">《知识变现》</a>，准确的来说，这本书不全是讲如何变现你的知识，而是从多方面去解释什么是“斜杠青年”和“自由职业”，而“自由态职业”又是什么，个人觉得此书应该改名为《国内斜杠青年/自由工作者的生活/工作现状》。</p><a id="more"></a><p>想起在新西兰working holiday的时候，曾经遇到一个Airbnb的房东Chris，是个自由职业的程序员。一次偶然的机会看到他的书房，看到3个屏幕，我就问他是不是IT行业的，没想到Chris是为IBM远程工作的，他在新西兰，团队base在美国还是加拿大，做的是后端开发相关工作。</p><p>这次我第一次面基自由职业者的工程师，非常好奇，就趁机问了一直很感兴趣的几个问题。</p><p><code>WYY:</code> 为什么会选择自由职业？<br><code>Chris:</code> 我有两个孩子，希望多一点时间陪伴家人，如果出国工作的话，可能一年就没多少时间可以在家里陪伴家人了。（注：新西兰的IT工作机会一般在奥克兰、惠灵顿这样的大城市，不过相对没有像美国或者中国一样有各式各样的top IT companies哈）</p><p><code>WYY:</code> 那日常你是怎么工作的呢？<br><code>Chris:</code> 早上6点起床，趁着孩子们还没起床，就开始锻炼和工作，有个独立的书房，可以安静的做自己的事情。然后到点了送孩子们去上学，回来继续工作，那么到孩子们放学之后，我就有自由的时间可以陪伴他们了。</p><p><code>WYY:</code> remote的工作，是怎么找到工作的？不会沟通成本比较高吗？<br><code>Chris:</code> 我之前就在IBM工作的，比较熟悉工作流程，后来我因为家庭原因，选择回来新西兰，我的前老板问我有没有兴趣远程工作，我就答应了，跟团队的合作、沟通还算流畅。</p><p>其实从跟Chris的对话里面可以发现，自由职业者的生活有可能比正常朝九晚五还困难些，需要自律，也需要具备很好的时间管理的能力，才能在工作和生活的时间打乱的情况，还能做到很好的平衡。专业能力以外，你可能还需要做一些自我销售、运营等等的工作以外的事情，让更多人知道你和信任你。</p><p>“自由职业”不是一种职业，而是你本身具备专业能力，有选择的“自由”。</p><p>正如书中说的：</p><blockquote><p>成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。</p></blockquote><p>整体来说，如果想了解斜杠青年/自由职业者的工作生活状态的话，还是可以看看这本书哈。更多书摘如下。</p><h2 id="斜杠青年和自由职业，职业定位新趋势"><a href="#斜杠青年和自由职业，职业定位新趋势" class="headerlink" title="斜杠青年和自由职业，职业定位新趋势"></a>斜杠青年和自由职业，职业定位新趋势</h2><p>“斜杠青年”来源于英文“Slash”，《纽约时报》专栏作家麦瑞克·阿尔伯撰写了一本书，叫作《双重职业》（One Person/Multiple Careers: A New Model for Work/Life Success）。</p><h3 id="你认为普通人如何修炼才能成为斜杠青年？"><a href="#你认为普通人如何修炼才能成为斜杠青年？" class="headerlink" title="你认为普通人如何修炼才能成为斜杠青年？"></a>你认为普通人如何修炼才能成为斜杠青年？</h3><p>（from 吉吉）</p><h4 id="第一，知道自己为什么要成为斜杠青年再开始："><a href="#第一，知道自己为什么要成为斜杠青年再开始：" class="headerlink" title="第一，知道自己为什么要成为斜杠青年再开始："></a>第一，知道自己为什么要成为斜杠青年再开始：</h4><ol><li>不要赶流行，不要因为别人说斜杠青年好，就盲目地加入，这应该是一种有目标的主动选择，而且知道需要大量的投入，其实很辛苦；</li><li>有深层次的需求，像我说的安全感，还有一些契机，比如年龄、家庭变故、工作瓶颈等；</li><li>摆清斜杠和单杠的关系，斜杠不是单杠做不好就逃避，单杠没解决的问题没踩过的坑，斜杠一样会掉进去重补这一课，所以应该把单杠做好，打一个比较稳的地基，培养核心技能，就算不喜欢，单杠也可以修炼你把不喜欢的事做好的能力。</li></ol><h4 id="第二，斜杠青年的四阶段："><a href="#第二，斜杠青年的四阶段：" class="headerlink" title="第二，斜杠青年的四阶段："></a>第二，斜杠青年的四阶段：</h4><ol><li><p>照妖镜：认知自己，找到精进的方向。</p><ul><li><p>更多维度地去了解自己，通过各种各样的工具，比如性格测试、行为风格测试、生活态度取向测试、价值观梳理，去认知自己，知道自己是什么样的人，为什么同样是探索，速度、节奏、心态会有不同。</p></li><li><p>知道自己喜欢什么，找到兴趣和天命。排除钱、时间等因素，最想做什么，梳理过往成就事件，找到一些共性，发现自己真正喜欢的是什么。</p></li><li><p>认知现实、遥望理想，将愿景描绘出来并固化，找到差距和努力的方向。</p></li></ul></li><li><p>默练剑：通过持续行动，修炼技能</p><ul><li>划分能力矩阵，喜欢与擅长的优势区是核心技能，需要不断打磨；</li><li>喜欢但是不擅长的，是潜能的部分，应该加强，培育发芽的小种子；</li><li>不喜欢也不擅长的盲区，不要做，回避不了的，死磕到不扯后腿。</li></ul></li><li><p>等风来：外化自己，扩大圈子，告诉别人自己准备好了，积极地站在风口处等待机会的来临，甚至主动出击。</p></li><li><p>滚雪球：依托一个平台和身份，斜杠身份的数量会不断地拓展，然后要具有把多重身份整合在一起打组合拳的能力。</p></li></ol><h4 id="第三，斜杠青年要注意的："><a href="#第三，斜杠青年要注意的：" class="headerlink" title="第三，斜杠青年要注意的："></a>第三，斜杠青年要注意的：</h4><ol><li>要围绕个人品牌，这样单个身份或者平台如果失去了势能，大家还会因为认可这个人而追随。</li><li>所有的积累都有价值，不一定马上兑换成显性的名利，但是这当中积累的经验、可迁移的能力都是弥足珍贵的，人走的每一步，都有价值。</li><li>要有多个维度的平衡：阶段性专注、身体保障、家人情感的支持、时常审视初心。</li></ol><h2 id="你适合成为自由职业者吗"><a href="#你适合成为自由职业者吗" class="headerlink" title="你适合成为自由职业者吗"></a>你适合成为自由职业者吗</h2><p>成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。</p><p>自由职业的自由，不是辞职的自由，而是选择的自由，这个选择背后，是能力的自由。</p><p>要想在自己的自由职业生涯中最大限度地降低风险，有几项原则：</p><p>第一，要把握好“市场需要、我最擅长、能者不多”的定位原则，使自己或自己的产品具有市场性、竞争性和独特性；不要试图山寨别人，靠拷贝别人现买现卖是没有竞争力的。同样的道理，如果你的产品或服务能够被别人轻易拷贝，那也说明你并没有别人不能取代的核心竞争力。</p><p>第二，为了防止自己知识和技能的老化，你必须具有不断学习和创造的能力，而不是试图“一招鲜，吃遍天”。这在知识更新速度日益加快的今天，已经行不通了。学习能力已经演变成为新的生存能力。</p><p>第三，增强自己的法律意识和风险意识，在与人合作的过程中要有维权意识，注意用法律和规则保护自己，以防“客大欺店”和遭小人暗算。</p><p>第四，尽早地为自己在医疗、意外和养老方面投入必要的保险资金，做到晴天也防连阴雨。</p><h2 id="互联网时代的雇佣关系"><a href="#互联网时代的雇佣关系" class="headerlink" title="互联网时代的雇佣关系"></a>互联网时代的雇佣关系</h2><p>里德·霍夫曼的《联盟》开章明义，给出了这样的观点。</p><p>在里德看来，用联盟的方式重建雇主和员工的关系非常必要。“商业世界需要有利于相互信任、相互投资、共同受益的新雇佣关系框架。理想的雇佣关系框架鼓励员工发展个人人脉、勇于开拓实干，而不是成为唯利是图的跳槽专业户。”</p><p>如何建立联盟，书中有几个最重要的观点：</p><ol><li>相互坦诚</li><li>相互尊重对方的价值观和梦想，并一起努力。</li><li>制定互惠互利的任期计划，包含双方的权利、义务和利益，并有明确的目标和时间（据书中的意思，就好像足球俱乐部的模式一样，队员干满一个赛季就可以转会，也可以继续留在球队干）。</li><li>帮助员工个人的职业发展。</li><li>鼓励和支持员工发展个人人脉，并保持与离职员工的相互关注和长久合作。</li></ol><h2 id="K-K-的1000付费用户理论"><a href="#K-K-的1000付费用户理论" class="headerlink" title="K.K.的1000付费用户理论"></a>K.K.的1000付费用户理论</h2><p>读凯文·凯利的《技术元素》，里面提到了1000人付费理论。主要的观点是，如果有1000人愿意给你一天自己的收入，那独立手艺人就可以依靠这个专门生产工作。</p><h2 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h2><p>《搞定1》<br>《小强升职记》</p><h2 id="每个人都可以是自己的人生设计师"><a href="#每个人都可以是自己的人生设计师" class="headerlink" title="每个人都可以是自己的人生设计师"></a>每个人都可以是自己的人生设计师</h2><p>《游牧东京》：作者米田智彦做的“生活实践项目” —— 不住在家里，也没有固定的办公室里工作，而是仅依靠一个拉杆箱在东京游走，与他人共享大都市的所有功能。</p><h2 id="如何提升基础能力"><a href="#如何提升基础能力" class="headerlink" title="如何提升基础能力"></a>如何提升基础能力</h2><h3 id="一、如何锻炼阅读能力"><a href="#一、如何锻炼阅读能力" class="headerlink" title="一、如何锻炼阅读能力"></a>一、如何锻炼阅读能力</h3><p>《如何阅读一本书》<br>《这样读书就够了》<br>《拆出你的沟通力I》<br>《拆出你的沟通力II》</p><h3 id="二、如何锻炼思考能力"><a href="#二、如何锻炼思考能力" class="headerlink" title="二、如何锻炼思考能力"></a>二、如何锻炼思考能力</h3><p><a href="https://www.douban.com/doulist/44255360/" target="_blank" rel="noopener">豆瓣书单</a> from 萧秋水</p><ol><li>《麦肯锡入职培训第一课》</li><li>《轻松学会独立思考》</li><li>《思考的技术》</li><li>《思考，快与慢》</li><li>《比知识还多》（最后一本比较难，可以先从作者的另外一本书《六顶思考帽》开始）</li></ol><h3 id="三、如何提升写作能力"><a href="#三、如何提升写作能力" class="headerlink" title="三、如何提升写作能力"></a>三、如何提升写作能力</h3><p>刻意练习第一条就得确定你练习要达到的目标。</p><p>你写哪个方向？准备用怎样的类型写作？对标的高手是谁？你计划通过多少篇的练习达到何种水平的输出质量？达到怎样输出质量的文章你才对外分享？</p><p>想好写什么文章，可以先写，也可以看别人怎样写再模仿写，都可以。但无论如何一定要多看。</p><p>比方写影评，先想想自己怎样写，好选一个不同的点切入。然后带着构思去翻别人写的影评，看看别人的立意、切入点、选图、联系的案例，还有金句，包括整体的框架，对比后发现不足，然后就知道改进的方向。</p><p>看完你要能说出一篇文章好在哪里，不好在哪里，要能看出你和作者在阅读面、阅历面上的差距在哪里。这样的看才能帮助自己找到差距，进而通过有追赶目标的写作来提升自己的写作质量。</p><h4 id="多看还要解决两个问题"><a href="#多看还要解决两个问题" class="headerlink" title="多看还要解决两个问题"></a>多看还要解决两个问题</h4><p>第一，看真正好的文字，看真正优秀写作者的文字。<br>第二，看不同类型的写作者的好文字，避免形成写作路径的依赖，广义的多看也包括看电影、听音乐，一切艺术都可以激发写作的灵感。</p><p>这也是多看的另外一个价值，帮助自己找到写作灵感，打开写作思路。</p><h4 id="今天的问题"><a href="#今天的问题" class="headerlink" title="今天的问题"></a>今天的问题</h4><p>什么是写作？什么是有质量的写作？什么是长期保持有质量的写作？</p><p>要提升能力，只读书是不够的，需要反复训练，才能真正提升，比如阅读能力，如果阅读的速度和质量上不去，那么学习能力也谈不上很高。而思考和写作更是需要练习的事情，这些练习，其实可以结合工作一起进行，即：根据自己的职业生涯规划和人生目标来确定阅读范围，并注重实践。</p><p>除了读书训练以外，接受培训、包括系统的成人教育，比如MBA等也是有效的，现在在线课程和学习社群也很发达，系统地学习课程和参与课程也是吸收知识的好途径。</p><h3 id="四、如何提升专业能力"><a href="#四、如何提升专业能力" class="headerlink" title="四、如何提升专业能力"></a>四、如何提升专业能力</h3><p>构建专业知识地图（知识树）。</p><p>《全新思维》一书里讲过，未来最重要的六种技能是：</p><ul><li><p>设计感：每个人都必须培养一种艺术感，好的设计可以改变世界，不管从事什么样的工作，都可以像艺术家一样工作。</p></li><li><p>故事感：会讲故事，用故事的形式表达自己、与人沟通，故事性会越来越成为商品和服务在拥挤的市场中脱颖而出的一件法宝。如果你对故事感的理解还不够，可以去了解一下戚泽明的故事，他从故事里看到商机，自称“首席故事官”。</p></li><li><p>交响能力：可以理解为整合事物的能力、跨界能力，善于找出看上去毫不相干的领域之间的联系，善于组合别人所不在意的要素，实现创新。</p></li><li><p>共情能力：可以理解为同理心，能够设身处地体验他人处境，从而达到感受和理解他人情感的能力。</p></li><li><p>娱乐感：简单说来就是会玩，人需要具备适当的幽默感（可千万别误解为会说黄段子！），不仅会玩，更要玩出水平。</p></li><li><p>探寻意义：能够寻找生存的意义，认真对待精神追求，寻找真正的幸福。</p></li></ul><p>简单的来说，就是：</p><p>要有品位、懂艺术、要会讲故事，能跨界，有同理心，会玩出花样来，而且要有追求，会探寻事物的意义。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近读了萧秋水和剽悍一只猫的&lt;a href=&quot;https://book.douban.com/subject/27177491/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《知识变现》&lt;/a&gt;，准确的来说，这本书不全是讲如何变现你的知识，而是从多方面去解释什么是“斜杠青年”和“自由职业”，而“自由态职业”又是什么，个人觉得此书应该改名为《国内斜杠青年/自由工作者的生活/工作现状》。&lt;/p&gt;
    
    </summary>
    
      <category term="reading" scheme="http://wuyuying.com/categories/reading/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS Variables学习笔记</title>
    <link href="http://wuyuying.com/archives/css-var/"/>
    <id>http://wuyuying.com/archives/css-var/</id>
    <published>2018-01-11T09:32:16.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了下CSS Variables（CSS变量，又名CSS自定义属性），跟大家分享一下我的学习笔记。</p><h2 id="一、什么是CSS-Variables"><a href="#一、什么是CSS-Variables" class="headerlink" title="一、什么是CSS Variables"></a>一、什么是CSS Variables</h2><p>来，直接看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">MDN</a>上的描述：</p><blockquote><p>CSS 变量是由CSS作者定义的实体，其中包含要在整个文档中重复使用的特定值。使用自定义属性来设置变量名，并使用特定的 var() 来访问。</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">color</span>: <span class="built_in">var</span>(--main-<span class="built_in">color</span>);</span><br></pre></td></tr></table></figure><h2 id="二、学习笔记"><a href="#二、学习笔记" class="headerlink" title="二、学习笔记"></a>二、学习笔记</h2><h3 id="1-声明-amp-调用"><a href="#1-声明-amp-调用" class="headerlink" title="1. 声明 &amp; 调用"></a>1. 声明 &amp; 调用</h3><h4 id="i-声明方式"><a href="#i-声明方式" class="headerlink" title="i. 声明方式"></a>i. 声明方式</h4><p>CSS变量声明的方式非常简单，如下，声明了一个名叫<code>color</code>的CSS变量。</p><ul><li>在css文件中写</li><li>写在html标签的inline-style里</li><li>用JS给某个元素声明，方法<code>.style.setProperty</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"--color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].style.setProperty(<span class="string">'--color'</span>, <span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><h4 id="ii-调用方式"><a href="#ii-调用方式" class="headerlink" title="ii. 调用方式"></a>ii. 调用方式</h4><p>通过<code>var()</code>函数调用，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="iii-变量的命名"><a href="#iii-变量的命名" class="headerlink" title="iii. 变量的命名"></a>iii. 变量的命名</h4><p>说完声明和调用，还有个小问题。那么，CSS变量的命名，有什么限制么？下面我们来测试一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo-test</span>&#123;</span><br><span class="line">  <span class="attribute">--foo</span>:;</span><br><span class="line">  <span class="attribute">--ffoo</span>:;</span><br><span class="line">  <span class="attribute">--Foo</span>: red;</span><br><span class="line">  <span class="attribute">--FOo</span>: blue;</span><br><span class="line">  <span class="attribute">--FOO</span>: green;</span><br><span class="line">  <span class="comment">/* 以下省略测试className的代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://sinacloud.net/woodysblog/img/css-var-case-sensitive.png" alt=""></p><p>从以上测试代码可以看出：</p><ul><li>CSS变量的命名是大小写敏感的</li><li>不赋值或者赋值空格，都是无效的</li></ul><h3 id="2-作用域-amp-继承"><a href="#2-作用域-amp-继承" class="headerlink" title="2. 作用域 &amp; 继承"></a>2. 作用域 &amp; 继承</h3><p>CSS变量也有作用域一说，而最顶层的作用域就是<code>:root</code>，下面的所有的元素都可以共享相关CSS变量。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚才我们在<code>body</code>上，定义了<code>--color</code>，在<code>body</code>下的子元素，都会默认继承这个属性，随意使用。当然也可以重载，把<code>--color</code>定义为别的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>inherit color<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"css-var-text"</span>&gt;</span>overwrite color - hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.css-var-text</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.block</code>，作为<code>body</code>的子元素，继承了<code>--color</code>属性，所以边框出来就是<code>green</code>。</p><p>而<code>.css-var-text</code>在自己的作用域中，重写了<code>--color</code>，出来的字体颜色是overwrite后的<code>blue</code>。</p><p><img src="http://sinacloud.net/woodysblog/img/css-var-inherit.png" alt=""></p><h3 id="3-浏览器支持"><a href="#3-浏览器支持" class="headerlink" title="3. 浏览器支持"></a>3. 浏览器支持</h3><h4 id="i-浏览器支持现状"><a href="#i-浏览器支持现状" class="headerlink" title="i. 浏览器支持现状"></a>i. 浏览器支持现状</h4><p>来看看<a href="https://caniuse.com/#search=css%20variables" target="_blank" rel="noopener">caniuse</a>上CSS Variables (Custom Properties)的支持度：</p><p>PC的话，IE 11和Edge的支持度都很差，而Chrome（2016.3）、Firefox（2017.11）和Safari(2017.3)的一些新版本都是支持的，相信很快就能普及。</p><p>Mobile的话，Safari在2016年的版本已经支持CSS变量了，但Opera、Chrome、UC等的支持还不太好。</p><p><img src="http://sinacloud.net/woodysblog/img/css-var-browser-support.png" alt=""></p><h4 id="ii-fallbacks"><a href="#ii-fallbacks" class="headerlink" title="ii. fallbacks"></a>ii. fallbacks</h4><p>浏览器的支持度不太好，我们又想玩新东西的话，就需要考虑如果浏览器不支持CSS变量，怎么优雅降级。（嗷，两套代码是有点……）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当浏览器不支持CSS变量 */</span></span><br><span class="line"><span class="selector-class">.browser-support</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: red;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当浏览器支持CSS变量 */</span></span><br><span class="line">@<span class="keyword">supports</span> (--css: variables) &#123;</span><br><span class="line">  <span class="selector-class">.browser-support</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、代码习作"><a href="#三、代码习作" class="headerlink" title="三、代码习作"></a>三、代码习作</h2><h3 id="1-codepen"><a href="#1-codepen" class="headerlink" title="1. codepen"></a>1. codepen</h3><p>在学习CSS Variables的时候，有边写一些教程的demo，除了以上，还包括一些实际场景的应用，如像box-shadow复合属性的拆解，以及JS操作CSS变量等。</p><p></p><p data-height="500" data-theme-id="0" data-slug-hash="dZrYJg" data-default-tab="css,result" data-user="wuyuying" data-embed-version="2" data-pen-title="CSS Varibles Study Notes" class="codepen">See the Pen <a href="https://codepen.io/wuyuying/pen/dZrYJg/" target="_blank" rel="noopener">CSS Varibles Study Notes</a> by Y (<a href="https://codepen.io/wuyuying" target="_blank" rel="noopener">@wuyuying</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h3 id="2-flexbox属性的DEMO"><a href="#2-flexbox属性的DEMO" class="headerlink" title="2. flexbox属性的DEMO"></a>2. flexbox属性的DEMO</h3><p><img src="http://sinacloud.net/woodysblog/img/css-var-flexbox.png" alt=""></p><p>之前在团队也做过一下下flexbox的分享，大家也知道，flex属性和对应的值特别多，当时就很想做个可以随时变属性值看效果的playground。</p><p>但想了下传统的实现方式，貌似没有优雅的方法。</p><ul><li>CSS+JS实现：写一批classname，option切换时，通过JS修改classname改变样式；</li><li>纯JS实现，根据option的value用JS改写元素的inline style（一直修改dom）</li></ul><p>哎哟，换CSS Variables之后，一切就不一样了，可继承、可复用、易维护，目前实现比较简单，可能跟以上的传统方式差别不太大，不过后续要修改或者做更多优化，我相信优势就会凸显出来了。</p><p>demo传送门：<a href="http://wuyuying.com/flexbox-css-var/">wuyuying.com/flexbox-css-var</a><br><a href="https://github.com/YuyingWu/blog-modern/blob/master/pages/flexbox-css-var.js" target="_blank" rel="noopener">github传送门</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>哈哈，没想到小结写什么，如果大家有好玩的CSS Variables的应用，欢迎分享给我 ：）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看了下CSS Variables（CSS变量，又名CSS自定义属性），跟大家分享一下我的学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;一、什么是CSS-Variables&quot;&gt;&lt;a href=&quot;#一、什么是CSS-Variables&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="CSS" scheme="http://wuyuying.com/tags/CSS/"/>
    
      <category term="CSS Variables" scheme="http://wuyuying.com/tags/CSS-Variables/"/>
    
  </entry>
  
  <entry>
    <title>我的2017</title>
    <link href="http://wuyuying.com/archives/year-2017/"/>
    <id>http://wuyuying.com/archives/year-2017/</id>
    <published>2018-01-01T10:23:28.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://sinacloud.net/woodysblog/year-2017/DSC05035.jpg" alt="&quot;龙井路秋色&quot;"><br>（龙井路秋色 —— 摄于杭州龙井路 2017.12.03）</p><h2 id="Personal-Targets-for-2017"><a href="#Personal-Targets-for-2017" class="headerlink" title="Personal Targets for 2017"></a>Personal Targets for 2017</h2><ul><li>√ 找一份好工作</li><li>√ 运动</li><li>√ 理财（跑赢大盘）</li><li>× 读书（40本）</li></ul><p>在2017年的尾巴，汇总了下今年都做了什么，KPI达标了没？讲真，在我工作的这几年间，今年的达标程度算非常的高，还蛮开心的。</p><h3 id="找一份好工作"><a href="#找一份好工作" class="headerlink" title="找一份好工作"></a>找一份好工作</h3><p>找工作的故事，之前写过一篇<a href="/blog/archives/begin-again-2017/">《Begin again, 2017》</a>，在此就不再叙述了。</p><p>相信很多小伙伴们都知道的，今年5月份，我来了杭州，来到职业生涯中的第二家公司 —— 阿里巴巴，供职于国内第一大B2B平台<a href="https://www.1688.com" target="_blank" rel="noopener">1688</a>。简而言之，我现在做批发的，要是有想跟1688合作的朋友们，尤其是大新塘做牛仔的土豪们，欢迎联系我 :)</p><p>想入职阿里的靠谱前端朋友们，也欢迎把简历发给我：  </p><p><a href="mailto:`jiwu.wyy@alibaba-inc.com" target="_blank" rel="noopener">`jiwu.wyy@alibaba-inc.com</a>`</p><p><img src="http://sinacloud.net/woodysblog/year-2017/1688.jpg" alt=""></p><p>好啦，广告打完，说回这项KPI吧，个人认为，确实是找到一份<strong>好工作</strong>的。</p><p>我遇到了一个技术出身且很能talk、格局很高、EQ也非常高的老大 —— 重鱼，在融入新工作环境过程中，他给予我很多的帮助和建议。不过融入只是第一步，相信后续的发展，我能从他身上学到更多的东西。</p><p>我遇到了一群很nice很有能力的小伙伴们，在这就不一一点名，你们懂的，从大家身上我也get到很多新技能，不仅仅有技术或者业务能力的提高，还看到程序猿的另一面，不仅会敲代码，还玩得了狼人杀、可以一起去泡吧。</p><p><img src="http://sinacloud.net/woodysblog/year-2017/team1.jpg" alt=""></p><p><img src="http://sinacloud.net/woodysblog/year-2017/team2.jpg" alt=""></p><p><img src="http://sinacloud.net/woodysblog/year-2017/team3.jpg" alt=""></p><p>我看到了我想看到的阿里。我一直很想来阿里看看，想看看在马老师带领下的阿里巴巴是怎样的。我来的时间不长，且只在一个业务线，了解尚浅。</p><p>在新人培训（百年阿里）中，我认识了一些来自不同部门、各种岗位的同学们，有刚刚从学校步入职场的“小学鸡”，有在职场打滚多年、拥有若干创业经验的“老司机”。我从他们身上，一样的是，能看到大家对于新环境的憧憬和激情，这就是我想看到的阿里。</p><p>当然他们很多跟我一样，是马老师的粉丝，想来一睹马老师真容。在今年阿里巴巴B2B年会，还真看到马老师了，不过我是山顶的朋友，只能透过大屏幕远远的看他。</p><p><img src="http://sinacloud.net/woodysblog/year-2017/b2b-jack.jpg" alt=""></p><p><img src="http://sinacloud.net/woodysblog/year-2017/b2b.jpg" alt=""></p><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>运动这一项，一直没有确定的kpi，一切随风，这几年，基本没有达标过（捂脸）</p><p>今年在运动这一栏，万万没想到，居然有东西可以写：</p><blockquote><p>慢跑训练<br>从9.18开始，一周3次，持续了6周<br>最长时间 42 Mins，最远距离 4.82 KM，最快配速 8:02 min/KM</p></blockquote><p><img src="http://sinacloud.net/woodysblog/year-2017/running.jpg" alt=""></p><p>对于跑步，一开始我是拒绝的，哪有人喜欢这样的运动，累cry，又容易跑着跑着就肚子疼，简直懒得动，有木有！</p><p>第1周，在公司的健身房，跑1分钟，走2分钟，8个回合，共24分钟2.6公里；<br>第6周，在江边，跑5分钟，走1分钟，7个回合，共42分钟4.82公里。</p><p>在这几个礼拜训练之后，感觉还是很不一样的。从一开始的拒绝，在健身房磨蹭，到后来每周在江边定期打卡，除了更加健康和学会了“呼呼呼、吸吸吸”的呼吸小窍门以外，还多了一些跟自己相处的时间。</p><p>在跑步之后，和自己对话的场景加了一项：</p><ul><li>安静地看书</li><li>在上班路上听电台/音乐</li><li><strong>跑步</strong></li></ul><p>在日常生活/工作中，我的大部分时间在写代码/学习写代码、玩手机、看电视剧，做这些事情也许我是一个人在做，但手上、脑子里都被各式各样的东东侵占着，没时间去想。</p><p>还记得有一次跟同事们饭后遛弯，聊起“如何放松”。我们甚至聊到冥想，我就把慢跑介绍给他们，紧张的都市人尤其值得拥有。</p><p>确实是这样的，有时候越睡越困，身体在休息，但思绪并没有释放，精神压力没有得到释放，还是一样的累。记得有一天心情不太舒畅，去江边跑步，刚开始我还是一样的没心情，但跑着跑着，当我把所有注意力放在呼吸和沿途的人和景上面，整个人放空地前进前进前进，跑完之后，我有种满血复活的感觉。</p><p><img src="http://sinacloud.net/woodysblog/year-2017/running2.jpg" alt=""></p><p>最近杭州有点冷，最冷的时候零下了，实在没勇气出门，暖和点要继续跑起来，不要浪费杭州那么棒的江边跑道。</p><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p>理财这块，也是每年比较羞于启齿的，哈哈，因为这几年几乎每年都是跑输大盘的，没赢过。</p><p>每年的理财KPI也只有一个 —— 能够跑赢大盘。</p><p>感觉得跑赢大盘越来越难了，2017年大盘大概涨了6.56%（2016.12.25-2017.12.25），真是Holy Shxx!!!</p><p>说回我自己的篮子吧，货基、股基、A股、美股、p2p啥都有点，就不细说了，12月份上车数字货币世界，Cardano给我打了个神助攻，一年下来终于没白玩了，哈哈。</p><blockquote><p>整个篮子浮盈10.24%</p></blockquote><p>2018年开始，放弃A股啦，每年都要用小基金赚得那点钱来补贴，左手倒右手，被割韭菜，年年白玩，今年做了一个艰难的决定，把深套的全都割了，不玩了！</p><p>嘿嘿，不过我可以和新欢一起玩，指数基金和Bitcoin的一众后宫。</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>每年的目标是40本。</p><p>整理了一下，截至12.31，总共读了25本，其中跟工作/技术相关的有9本，经济/理财相关的4本。</p><p>今年技术书比较多，毕竟今年最大的目标是找工作，在投简历前几个月，为了让自己不要太out，只能多读书了，哈哈。</p><p>不过我的年度之书是这本，技术会过时，但经济概念不会，风趣易懂的经济故事书（其实后面概念理解起来也挺难的，哈哈，我打算二刷~）</p><blockquote><p><a href="https://book.douban.com/subject/26985299/" target="_blank" rel="noopener">《小岛经济学：鱼、美元和经济的故事》</a></p></blockquote><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>今年2月份开始，写的一个专栏，记录我的新西兰生活 —— <a href="https://read.douban.com/column/6032026/" target="_blank" rel="noopener">《中土世界漂流记》</a>。讲真，更新频率不是很稳定，今年就写了7篇，这么更新到2019年肯定还在连载。那在2018年，还是希望隔周更新的，哈哈，我努力。</p><p><img src="http://sinacloud.net/woodysblog/year-2017/column.png" alt=""></p><h3 id="2017小结"><a href="#2017小结" class="headerlink" title="2017小结"></a>2017小结</h3><p>以上都是常规的计划内的目标，今年也有一些“小意外”。</p><p>譬如遇见我家大王 —— 胖达。</p><p><img src="http://sinacloud.net/woodysblog/year-2017/pangda.jpg" alt="&quot;小时候&quot;"></p><p><img src="http://sinacloud.net/woodysblog/year-2017/pangda-july.jpg" alt="&quot;小学鸡&quot;"></p><p><img src="http://sinacloud.net/woodysblog/year-2017/pangda-sep.jpg" alt="&quot;一秒变大叔&quot;"></p><p>没错，他就是一只丑萌的田园猫。</p><h2 id="Personal-Targets-for-2018"><a href="#Personal-Targets-for-2018" class="headerlink" title="Personal Targets for 2018"></a>Personal Targets for 2018</h2><blockquote><p>Hi, 2018</p></blockquote><p>新的一年，个人目标的划分，还是类似的，不再这里铺开了，实现情况看明年show time ：）</p><ul><li>个人修养类</li><li>运动</li><li>理财（跑赢大盘）</li><li>读书（40本）</li><li>写作（专栏隔周更新）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://sinacloud.net/woodysblog/year-2017/DSC05035.jpg&quot; alt=&quot;&amp;quot;龙井路秋色&amp;quot;&quot;&gt;&lt;br&gt;（龙井路秋色 —— 摄于杭州龙井路 2017.12.03）&lt;/p&gt;
&lt;h2 id=&quot;P
      
    
    </summary>
    
    
      <category term="总结" scheme="http://wuyuying.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>当我在欧洲艺术馆遇到馆长</title>
    <link href="http://wuyuying.com/archives/eu-gallery/"/>
    <id>http://wuyuying.com/archives/eu-gallery/</id>
    <published>2017-10-05T12:15:45.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<figure><br><img alt="poster" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/eu-gallery/gallery-4.jpg"><br><figcaption>poster</figcaption><br></figure><p>原定今天的计划是去杭州图书馆借几本书，顺便去看个展，就是这个号称“不出杭州看遍欧洲艺术品”的展览哈，我之前也不太了解欧洲历史文化，纯粹去凑个热闹。</p><p>先来看镇店之宝之一 —— 《戴面纱的女人》by Giuseppe Croff，面纱做得特别薄特别真，女人闭眼的神情也刻画得惟妙惟肖。</p><figure><br><img alt="戴面纱的女人" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/eu-gallery/gallery-6.jpg"><br><figcaption>戴面纱的女人</figcaption><br></figure><p>看这个汉白玉《爷爷的喜悦》by DonatoBarcaglia，近距离看像真的一样，身上的细节特别清晰，爷爷老去的皮肤和身上的青筋，以及孙子的baby fat，栩栩如生。</p><figure><br><img alt="爷爷的喜悦" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/eu-gallery/gallery-2.jpg"><br><figcaption>爷爷的喜悦</figcaption><br></figure><p>这幅《哥伦布向天主教君主们敬献新大陆的宝藏》by Emanuel Gottlieb Leutze，超大一幅油画，配上一个无敌浮夸的画框，据闻每一角代表的是一块大陆，最后连在一起，象征和平。馆长说这幅画华盛顿美术馆馆长问她要了很久，希望结束这场展览之后，能转让给他，因为哥伦布是美洲大陆的英雄，这幅画在DC最合适了。</p><figure><br><img alt="哥伦布向天主教君主们敬献新大陆的宝藏" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/eu-gallery/gallery-3.jpg"><br><figcaption>哥伦布向天主教君主们敬献新大陆的宝藏</figcaption><br></figure><p>这位小姐姐太美了有木有，不仅仅是身上的衣服，如丝般顺滑还加透视，看她的眼睛，画的特别有神，无论走到哪，都感觉她在看着你~</p><figure><br><img alt="漂亮的小姐姐" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/eu-gallery/gallery-5.jpg"><br><figcaption>漂亮的小姐姐</figcaption><br></figure><p>万万没想到，非常有收获，不仅仅是了解了这些艺术品背后千回百转的故事，更多的是折服于馆长的个人魅力和情怀。</p><p>馆长的名字叫<strong>吴静</strong>，法籍华裔，是一个古董钟表鉴定师，也是一个收藏家。欧洲艺术馆从想法到落地实施，选场地、挑藏品、布展，她只用了一年左右的时间。非常了不起有木有，今天很幸运，刚好碰到她在现场解说，艺术品背后的故事很精彩，人特别亲切和有感染力，更重要的是，她在以自己的方式去做公益，给这个世界给将来留下些什么，就是这个艺术馆及其背后的精神。</p><p>下面是我在现场听到的忍不住鼓掌几个观点，分享给大家：</p><blockquote><p>我每天只睡4个小时，没有电话和微信的消息打扰，安静地鉴定古董钟表。很多朋友问我，为什么还要那么努力地工作，我已经不需要了。上天让我来到这个世界，是有任务的，我希望看到自己更多的可能性。</p></blockquote><p>想象一下，一个以个人名义开了个艺术馆的馆长，每一件艺术品都价值不菲，肯定是生活无忧。而每天只睡4个小时，她认为，睡眠不是算时间的，更重要的是大脑的休息，只要你觉得精神饱满，睡够了，就起来，不要在乎睡了多少个小时。也听得出来她对自己在做的事情（古董钟表鉴定师和收藏）的热爱，她微信封面和头像就特别帅气~</p><figure><br><img alt="古董钟表鉴定师" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/eu-gallery/IMG_7470.jpg"><br><figcaption>古董钟表鉴定师</figcaption><br></figure><blockquote><p>生前，为死后做事</p></blockquote><p>解说时呀，有不少市民问起，为什么要搞这个展览？</p><p>吴静馆长说，生前，为死后做事。她的回答，真心让我觉得敬佩，特别圈粉。</p><p>做公益，直接捐钱是最简单的方式，钱捐了然后被花光了，对个人的生活、发展或者对家庭、抑或对这个社会，可能就没有然后了。</p><p>而这个公益欧洲艺术馆，正是她对公益的理解和所付诸的行动，从idea到action，花了一年的时间，收集的这些展品、展品从法国到中国的运输（在海上漂了三个多月）、场馆的装修（罗浮宫的设计团队），到志愿者的招募（自己也会下场做解说员），再到将来的一些跟国外合作的艺术program/课程。</p><p>可以看得出来，是个大工程，工作量也非常庞大，令我们最惊讶的是，这个项目落地中国会遇到很多的难处，目前是没有得到政府的补贴和支持的，馆长自费开的一个艺术馆（也有越来越多受馆长的感染参与进来的民间朋友），进场免费，只是为了控制人数，需要提前预约。</p><p>馆长的想法简单而美好，希望这个公益艺术馆能把欧洲文化带到中国来，让市民们不用出国，就能看到这些艺术品的真品和感受到西方艺术文化。希望美院的学生，不再需要对着那些千篇一律从模子出来的、没有细节的雕塑写生，而是可以来杭州的欧洲艺术馆，坐在这些有几百年历史的汉白玉雕塑下，随便画。（馆里的艺术品会有绳子起简单的隔离作用，但大多都没有玻璃柜子，展品跟你只有一步之遥）</p><p>以上，就是我所看到的，一个充满正能量的女子，用自己的方式做公益，希望自己百年之后，在做的这件事情对这个世界带来一些不一样和价值。希望在国内推动欧洲艺术的发展，也是对祖国、对中法文化交流的回馈。真的让我觉得非常鼓舞和感动。</p><p>在过程中，有幸跟馆长有对话，关于数字化图书馆的。</p><p><code>小伍</code> 吴静女士，您刚提到希望更多人知道这里，以及想在国内普及欧洲艺术，但目前这个馆只在杭州有，您有考虑过把艺术馆线上化吗？譬如百度百科的数字博物馆。<br><code>馆长</code> 嗯，当然是有的，知道的人肯定越多越好。可惜我从小在法国长大，这个项目在中国落地很难，虽然我带来了很多的收藏品，这些收藏品都很有价值，可惜我太不认识这方面的朋友。<br><code>小伍</code> 刚好，我认识了解这个百科数字图书馆的同学，我可以介绍你们认识，看能不能达成合作，把这个公益艺术馆搬到线上，让更多的国民知道，传播效果也许会更好。<br><code>馆长</code> 太好了，我们很需要，先谢谢你，回头我让助理跟你留下联系信息。</p><p>万万没想到，解说结束之后，我加了吴静女士的微信，感觉超亲切，刷了一遍她的朋友圈，再次被圈粉，超正能量，很多事情亲力亲为，感觉看到了另一个世界，真是应验了那句话 —— </p><blockquote><p>比你有才华、比你有钱、比你美的人，还比你拼，你还有什么理由不努力！</p></blockquote><p>真心希望有一天能看到欧洲艺术馆在百科的数字图书馆出现，推广给更多人民群众，独乐乐不如众乐乐嘛，那我这个撮合的媒人也会觉得功德无量啦，哈哈，也感谢我女神<strong>阮瑜</strong>把一个这么棒的产品带到这个世上，和百科美女<strong>小文子</strong>给我提供的帮助。</p><p>互联网产品推动传统行业的进步~ 我在工作过程中，无论是百度还是阿里，遇到过很多这样有情怀对社会有贡献的产品，不管我有没有参与其中，这样的好东西，我会不遗余力的在合适的场景推荐给合适的人。</p><p>最后，据我所知，欧洲艺术馆<strong>紧缺志愿者</strong>，在杭州的同学们可以联系一下，艺术馆会开3年，一直都会招募志愿者的，在这也帮忙打个广告，希望如果周边有朋友有意愿的话，赶紧联系一下~ </p><p>其实尤其对于美院的学生，这样的机会非常难得和珍贵，如果你是美院学生，又或者是辅导员，可以合作个项目啥的，一方面解决馆里缺志愿者的问题，另一方面可以近距离的接触著名收藏家以及她的珍藏艺术品，双赢~</p><p><strong>那么好的欧洲艺术馆，在杭的朋友，怎么能不去捧场呢！？</strong></p><p>此处应该有艺术馆的相关信息：</p><p>电话：15988484200<br>邮箱：<a href="mailto:eupart@163.com" target="_blank" rel="noopener">eupart@163.com</a><br>地址：浙江省杭州市江干区　解放东路58号　杭州图书馆地下负一层</p><p>欧洲艺术馆的公众号（可以在上面预约参观）</p><figure><br><img alt="欧洲艺术馆公众号" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/eu-gallery/qrcode.jpg"><br><figcaption>欧洲艺术馆公众号</figcaption><br></figure><p>最后的最后，楼主丧心病狂的想发一则招聘广告：</p><p>上面有提到互联网推动传统行业的进步，其实阿里对社会也有非常多的贡献，其中我所在的团队CBU，就是这么个有情怀有理想有贡献的团队，我们的目标是 ——  让世界没有难做的生意。</p><p>总而言之，有理想有情怀有钱有面儿有我这么赞的同事，<strong>招2年或以上经验的靠谱前端</strong>，欢迎自荐或推荐朋友，很急，在线等！！！暂时没想法也欢迎来撩~</p><p>花名：姬无<br>EMAIL：<a href="mailto:jiwu.wyy@alibaba-inc.com" target="_blank" rel="noopener">jiwu.wyy@alibaba-inc.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure&gt;&lt;br&gt;&lt;img alt=&quot;poster&quot; src=&quot;http://sinacloud.net/woodysblog/blog/img-placeholder.jpg&quot; data-src=&quot;http://sinacloud.net/woodysblog/eu-ga
      
    
    </summary>
    
    
      <category term="life" scheme="http://wuyuying.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>年轻就要造起来</title>
    <link href="http://wuyuying.com/archives/taobao-maker-festival-2017/"/>
    <id>http://wuyuying.com/archives/taobao-maker-festival-2017/</id>
    <published>2017-07-11T14:48:07.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<figure><br><img alt="大门口" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/entry-1.jpg"><br><figcaption>大门口</figcaption><br></figure><p>2017淘宝造物节 —— 年轻就要造起来！</p><p>我之前不知道有造物节，可能是因为我不在杭州，又或者媒体报道得也不多。今年的邀请函太吸引了，还有阿里内网、朋友圈、淘宝多个渠道以及各种公号的报道，尤其是黑科技浓浓的Tao Cafe无人便利店（我老爸都来问我知不知道这个店，宣传得太到位了），想不感兴趣都不行，拿到今天的票，就请假跑来“造”一下。</p><p>一进来有种夜店feel有木有，恰逢汪涵过来主持，中间舞台被包围了，人超多，远远的拍照好了。</p><figure><br><img alt="舞台" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/entry-2.jpg"><br><figcaption>舞台</figcaption><br></figure><figure><br><img alt="地上投射的造物节logo" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/entry-3.jpg"><br><figcaption>地上投射的造物节logo</figcaption><br></figure><p>进来以后，走了半圈，找不到我最想去的无人店呀……路盲找小二问，才发现Tao Cafe在刚才检票入口的旁边，白排队进来了，还绕了大半圈，简直惊呆了，你们感受一下这条长龙，我在队尾。以前我看到排队买喜茶的人很傻，没有好喝到让我等N个小时，现在发现如果有我很想要的东西的时候，虽然不太乐意，但还是等一下吧，Tao Cafe，我来了。</p><figure><br><img alt="无人便利店的排队长龙" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting.jpg"><br><figcaption>无人便利店的排队长龙</figcaption><br></figure><p>半小时后，我在这~ 请看大屏幕，这个妹子在出门结账的时候，就是那么自信，自带光芒的，笑死 &gt;3&lt;</p><figure><br><img alt="无人便利店的排队长龙（半小时后）" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting-2.jpg"><br><figcaption>无人便利店的排队长龙（半小时后）</figcaption><br></figure><p>足足一小时，我终于要刷脸进来无人便利店，这个门禁，很犀利，除了刷淘宝二维码之外，可能还需要刷脸，我看有的妹子进来之前，要把头发扎起来，不然过不了。</p><figure><br><img alt="无人便利店的门禁" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/store-entry.jpg"><br><figcaption>无人便利店的门禁</figcaption><br></figure><p>进来后，直奔小卖部，这里招牌是”招牌淘咖啡“，呃，不推荐啦，我没有喝过混一点果酱（貌似是黄桃味）的咖啡，虽然味道还可以，但是总有种”黑暗料理“的感觉，还是点普通咖啡吧。</p><figure><br><img alt="搬砖的排队去买咖啡" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/store-wu.jpg"><br><figcaption>搬砖的排队去买咖啡</figcaption><br></figure><figure><br><img alt="淘公仔" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/store-figure.jpg"><br><figcaption>淘公仔</figcaption><br></figure><p>无人便利店的概念很好，门禁、进门后的用户信息都可以捕抓到，真的非常有科技感、未来感。不过貌似暂未满足商用需求，我去买咖啡时，虽然有刷脸有AR，但是最后我是用支付宝码付款的；小伙伴买了个环保袋，走了两次付款通道，第一次说订单没下，第二次还是没有订单，最后在出口人工结账。两个情况的理由都是人太多，网络响应比较慢。[ 以上谨属本次体验的个人观点。我相信不久的未来，阿里的无人店会推广落地，再一次改变我们的生活 ]</p><p>呼呼，等了半天，进去逛了十分钟就出来了，满足好奇心。出来之后，找到一只大型淘公仔，还是要求合照啦~</p><figure><br><img alt="淘公仔合照" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/tao-smile.jpg"><br><figcaption>淘公仔合照</figcaption><br></figure><p>再次进场，逛各种店噜。各种名店、潮店都装修得很有心思，比较有特色。</p><p>我来之前，以为只是个小集市（一个淘宝店铺的展览会），逛逛就完事了。事实上不是这样的，人手一本小册子，上面有各种任务，大家除了逛逛逛、买买买、拍拍怕，还可以到各个店做任务、集印章、拿奖品。个人感觉很好，明年还想再来。</p><p>废话不多说，上图。</p><p>天猫精灵，智能音箱，小二给我们演示，大致还是灵敏的，哈哈，感兴趣的大家可以上天猫看看。</p><figure><br><img alt="天猫精灵的平板支撑" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/tmall-plank.jpg"><br><figcaption>天猫精灵的平板支撑</figcaption><br></figure><figure><br><img alt="环保的快递盒" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/green-action.jpg"><br><figcaption>环保的快递盒</figcaption><br></figure><p>One的展台……木有发现这个展馆跟”一个“有啥关系。</p><figure><br><img alt="红" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/wu-hong.jpg"><br><figcaption>红</figcaption><br></figure><figure><br><img alt="卖包的小店" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/bag-store.jpg"><br><figcaption>卖包的小店</figcaption><br></figure><figure><br><img alt="卖书的小罐头" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/bookshop.jpg"><br><figcaption>卖书的小罐头</figcaption><br></figure><p>这位苏州的老奶奶说，黑布上的每一个图案，她都要绣一天，店里都是各种各样的刺绣品，真是不容易啊~</p><figure><br><img alt="刺绣的老奶奶" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/grandma.jpg"><br><figcaption>刺绣的老奶奶</figcaption><br></figure><figure><br><img alt="另外一个手工的小锦囊" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/little-bag.jpg"><br><figcaption>另外一个手工的小锦囊</figcaption><br></figure><figure><br><img alt="小灯" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/light.jpg"><br><figcaption>小灯</figcaption><br></figure><p>逛完西市，我们来到了北街，这边的店有比较科技感的也有比较怀旧的。</p><figure><br><img alt="北街" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/north-area.jpg"><br><figcaption>北街</figcaption><br></figure><figure><br><img alt="杂货铺" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/store-else.jpg"><br><figcaption>杂货铺</figcaption><br></figure><figure><br><img alt="匠心" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/workshop.jpg"><br><figcaption>匠心</figcaption><br></figure><figure><br><img alt="电影院" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/cinema.jpg"><br><figcaption>电影院</figcaption><br></figure><figure><br><img alt="猫大王" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/cat.jpg"><br><figcaption>猫大王</figcaption><br></figure><p>哎，由于时间关系，我们只逛了舞台左边的西市和北街，左边的东市和南街根本没逛……好可惜，最后被广播赶走了，才5点半，说好的开到6点呢~</p><p>最后，po两张我比较喜欢的比较有感觉的，再一次读一下今年造物节的slogan，这也应该是我们生活的态度：</p><blockquote><p>年轻就要造！！！</p></blockquote><figure><br><img alt="毒鸡汤" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/black-white.jpg"><br><figcaption>毒鸡汤</figcaption><br></figure><figure><br><img alt="造" src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/taobao-maker-festival/zao.jpg"><br><figcaption>造</figcaption><br></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure&gt;&lt;br&gt;&lt;img alt=&quot;大门口&quot; src=&quot;http://sinacloud.net/woodysblog/blog/img-placeholder.jpg&quot; data-src=&quot;http://sinacloud.net/woodysblog/taobao-m
      
    
    </summary>
    
    
      <category term="life" scheme="http://wuyuying.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Begin Again, 2017</title>
    <link href="http://wuyuying.com/archives/begin-again-2017/"/>
    <id>http://wuyuying.com/archives/begin-again-2017/</id>
    <published>2017-06-01T12:40:30.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://sinacloud.net/woodysblog/blog/img-placeholder.jpg" data-src="http://sinacloud.net/woodysblog/blog/begin-again-ali-day.jpg"></p><p>想跟大家分享我找工作的故事。</p><p>今天是2017年5月份的最后一个工作日，去年的这个时候，我在办理离职手续。从离职到重新回到工作中，真是整整一年呀，原来所谓的间隔年是这么回事。</p><p>去年5月底，我在杭州，玩了半个月，出国前来杭州，并不是偶然，当时我在想，一年后我会再回来的，来阿里巴巴，我想先来看看这个未来工作的城市。</p><p>去年6月中旬，坐上飞机去了南半球的新西兰，体验和收获了各种，今年1月中旬回来了，从开始到结束，跨度了大概8个月。这大半年里面，大部分时间都在玩，间断的有1个多月时间有做临时工，做kiwi fruit包装，上班不用带脑子，下班后也不需要把工作带回家，感觉非常神奇和放松，收入水平跟大家聊过了，最低工资大概2w RMB，会有种智商不用在线、站着就赚钱的感觉，是一种从来没有体验过的工作方式。</p><p>很多小伙伴问我，你过去是做专业对口的工作么？在这里再解释一下，打工度假签证有规定不能为一个老板工作超过3个月，这项就限制了一般只能打季节工。何况做临时工的好处是想干就干，想不干就不干，上半个月班，赚够钱了，接着玩3个月，完全ok，这样比较灵活，始终我是去玩的，不是为了用劳动力换钱的，对吧？</p><p>回来以后的生活，各种约约约，持续到过年。</p><p>好像也不能一直这么hea（不羁放纵）下去，那就找工作吧。我去翻查了下印象笔记的工作日志，原来从2017.1.31（年初四）我就开始准备了，直到5.2我才收到阿里的正式的offer邮件，找工作花4个月？这几个月我都在干嘛呀，哈哈，找工作需要那么长的时间么？当然并不需要，以下分享一下我的时间表。</p><h2 id="找回感觉的2月"><a href="#找回感觉的2月" class="headerlink" title="找回感觉的2月"></a>找回感觉的2月</h2><p>2月份，我给自己列了一个书单和学习计划，一个月的准备时间。这段时间是我感到心理压力最大的时候，真的好难好累，看吧，出来混，还是要还的。</p><p>作为一枚工作了近3年并断产了大半年的页面仔，我没有去看面经和一些剑指offer的书哈，说出来也不怕大家笑，我看了一大堆前端基础教科书，如《JavaScript高级程序设计》、《无懈可击的WEB设计》和《图解HTTP》等等，大概11本。<del>还有看了廖雪峰、阮一峰和Youtube上的Max、Wes、The Net Ninja等老师的视频教程，包括Vue.js 2、ReactJS、Webpack、ES6、CSS Flex、NodeJS/Express等等。</del>以上看的这些啊，都是浅尝即止，不精通，只追求“看过”。算是温故知新吧，这段时间也整理了以前的项目笔记。</p><p>开始调整生物钟嘛，每天生活规律，从9点开始，晚上11点左右结束，没有周末。看书，看累了写会代码，写累了看会儿教程，接着再写会儿代码……晚餐后出门散步1小时，日间不定期被我爸妈骚扰，陪聊和看电视剧，这样都能完成我的计划，需要很强的定力，有木有。</p><p>前端圈真是个坑，瞬息万变，我真是out太多了，永远有学不完的东西，知道得越多，发现自己知道的越少。不过声明一下哈，我并不觉得新技术不断出现，我们就得见一个爱一个，学到新东西后恨不得武装到自己写的每一行代码里。不是这样的，保持热情拥抱新技术，工作中只用合适的，不盲目追求最新的，始终技术转化成什么才是我们最关心的。</p><p>现在我回想，这个2月的学习计划对面试有帮助么？有一点帮助，但不大，看的都没有被问到好吗？因为面试问题太随机了，每个面试官关注点都不一样，抓着简历和项目问，我懂的就懂，不懂的还是不懂，所以2月份对于我来说，不能说是面试准备，应该算是个仪式，生活要有仪式感嘛，是一个重新开始的仪式，仅此而已。</p><h2 id="开始面试的3月"><a href="#开始面试的3月" class="headerlink" title="开始面试的3月"></a>开始面试的3月</h2><p>下面不写面经哈，只谈感受。</p><p>一般来说，老板要什么样的人啊？技术靠谱、有团队精神、能扛事有责任感的……</p><p>不管条件是什么，嘘~ 我就是。况且我还是个相貌气质佳、有故事的女同学，简直了，哪个boss看到我的简历，打电话来聊几句人生，就应该直接发offer了。要不是裸辞去了gap year，我肯定早就被某家棒棒的公司收了，好不好？磨叽什么呢~ 赶紧把我收了才对嘛！</p><p>以上是我的幻想，现实却是很骨感。</p><p>想起来也是搞笑，@唐工（曾任职百度、现任职腾讯的测试大神）在职想跳槽的时候，一天安排几家公司，密密麻麻地面试，我现在是全职求职的，但是投出去的简历少之又少，一周或者两周只面一个团队，低频到没朋友，所以求职时间拖得很长。</p><p>我的想法是这样的。投简历之前，我想先了解对方是做什么的，自己感不感兴趣，顺便控制台调试一下对方的页面，代码咋样，用得是什么技术栈、构建工具，基本上能摸个差不多，喜欢了才给简历。</p><p>整个求职过程，我给3家公司投过简历（捂脸），A创业公司、杭州猪厂和阿里。</p><p>A创业公司，有一个我喜欢的百度大神，做直播的，一面谈了15分钟，聊新老技术升级的坑。</p><p>猪厂，喜欢他家用心做的产品（情怀），一面谈了40分钟，第一次遇到纯跟我聊基础知识的，HTML/CSS/JS一题一题问的女面试官。</p><p>两家公司的一面我都过了，但对方邀请我去上海、杭州进行二面的时候，我怂了，我发现当下最爱的始终是阿里，你们可以得到了我的简历，但得不到我的心。害怕对方真的发offer（我应该是自作多情了，哈哈，人家没说会发offer）。我想对这两家公司的面试官说声抱歉，浪费了他们的时间，因此后来我再也没有给其他团队投过简历。</p><p>这段时间，我大概跟10位阿里前辈聊过，每一次的感觉不太一样，但能感受到阿里面试官的平均水平相当高。</p><p>遇到过，第一轮就对我压力面，面了一个多小时，花式吊打我的简历，问到我说不知道为止，但我非常佩服这位面试官，他在那么短的时间内问的问题的覆盖面能够那么深那么广；</p><p>遇到过，上来就吐槽我的自我介绍毫无信息量的主管，我说了答不出的问题，对方还是一再追问并质疑我的专业背景和技术能力，这也是唯一一次我不知道怎么接话，因为我feel到对方在发脾气，没法继续聊；[其实觉得我不合适，默默打个叉，尽快结束面试就可以了]</p><p>遇到过，四轮技术面，其中一轮我还开视频直播写了一小时代码；[其实每轮内容都差不多，感觉没必要四面技术]</p><p>遇到过，我花了很长时间回答一道题目，面试官说答得很全面，你是不是专门准备过的；[我确实准备过，不是因为这是常见面试题，而是我觉得里面涵盖自己应该了解的知识点]</p><p>遇到过，一面技术摸底，二三面看人品、聊人生的。[这是最符合我想象的面试场景]</p><p>万万没想到，差不多每次都聊得那么开心，前3个部门还是拒了我，拿到offer的是我面的第4个部门。</p><p>凭着迷之自信，我几乎不会怀疑自己行不行，何况面试那么多轮，没有挂在压力技术面，说明并不是技术问题。但是换谁被拒3次也会不开心的，当我有点心灰意冷的时候，@猩爷给我发了这么一段话，摘自《巨婴国》：</p><blockquote><p>成熟的心智，需要基本的信心——我相信持续的投入会转化出我想要的东西，虽然这事不一定会发生，但我越投入，可能性就越大，并且在投入过程中，我的心得到了淬炼。</p></blockquote><p>3月份大概收到过二十多个阿里团队的邀约，我在面第4个部门时，还有另外3个阿里的团队在内推系统等我的简历释放。是啊，屡战屡败，屡败屡战，但我没想放弃治疗，打算一直面阿里，直到加入合适的团队为止。</p><p>说起这事，@唐工说看到我这样，她问过自己，有没有一家公司能让她屡败屡战，被拒3遍还要接着面？并没有。</p><p>我呢，为什么我要那么执着？为了“梦想本人”马老师，为了盛名在外的阿里前端大神，为了圆大学没有完成的淘宝梦，还是仅仅为了兑现一年前自己的承诺？为什么要来，我也分不清了，我只知道我要来阿里，做我觉得对的事情 —— 做出更好的东西帮助/影响到更多的人。</p><h2 id="等待的4、5月"><a href="#等待的4、5月" class="headerlink" title="等待的4、5月"></a>等待的4、5月</h2><p>gap year后的求职季，止于我现在的团队 —— CBU，让大家见笑了，我的title是<code>新零售技术事业群-此处省略一万字-前端开发工程师</code>。</p><p>有个非常有趣的插曲，口头offer我足足等了两周，由于部门架构调整，原本的HR去了别的地方，我的offer被遗忘了，后来接到新HR姐姐的电话，我的团队、title都变了，所以入职之前，我对新工作一无所知，只知道自己要去阿里B站（1688.com），用@清姐的话说，我现在是搞批发的，哈哈，以后我会告诉你们我在做的是什么。</p><p>说实话，我从来没想过自己会加入大市场前端，真是缘分，我遇到了一个很特别的老大和一群很nice的小伙伴们，挺好的。我相信，一切便是最好的安排，这里会因我而不同，我也会在这里变成一个更好的自己。</p><p>辛苦您终于看完了，谨以此图聊表谢意，晚安 ：）</p><p><img src="http://sinacloud.net/woodysblog/blog/begin-again-ali-night.jpg" alt=""></p><p>2017.05.31<br>写于杭州滨江区江南大道魔方公寓</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://sinacloud.net/woodysblog/blog/img-placeholder.jpg&quot; data-src=&quot;http://sinacloud.net/woodysblog/blog/begin-again-ali-day.jp
      
    
    </summary>
    
    
      <category term="life" scheme="http://wuyuying.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>2017年Web开发者的技能蓝图</title>
    <link href="http://wuyuying.com/archives/2017-roadmap/"/>
    <id>http://wuyuying.com/archives/2017-roadmap/</id>
    <published>2017-04-22T13:54:29.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Medium看到一篇文章，分享了github网友<a href="https://github.com/kamranahmedse" target="_blank">@kamranahmedse</a>发布的<a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank">developer-roadmap</a>。</p><p>非常有意思，自己记录一下，也顺便跟大家分享~</p><p>大致分为3个发展方向，前端、后端和运维。<br>2017年，作为一枚web开发人员，roadmap提到的技术，你都了解么 ：）</p><p><img src="http://sinacloud.net/woodysblog/2017-web-dev-roadmap/web-developer.png" alt="&quot;web developer&quot;"></p><hr><h2 id="front-end"><a href="#front-end" class="headerlink" title="front-end"></a>front-end</h2><p><img src="http://sinacloud.net/woodysblog/2017-web-dev-roadmap/front-end.png" alt="&quot;front-end developer roadmap in 2017&quot;"></p><hr><h2 id="back-end"><a href="#back-end" class="headerlink" title="back-end"></a>back-end</h2><p><img src="http://sinacloud.net/woodysblog/2017-web-dev-roadmap/back-end.png" alt="&quot;back-end developer roadmap in 2017&quot;"></p><hr><h2 id="devOps"><a href="#devOps" class="headerlink" title="devOps"></a>devOps</h2><p><img src="http://sinacloud.net/woodysblog/2017-web-dev-roadmap/devOps.png" alt="&quot;dev-ops developer roadmap in 2017&quot;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Medium看到一篇文章，分享了github网友&lt;a href=&quot;https://github.com/kamranahmedse&quot; target=&quot;_blank&quot;&gt;@kamranahmedse&lt;/a&gt;发布的&lt;a href=&quot;https://github.com/kamr
      
    
    </summary>
    
    
      <category term="front-end" scheme="http://wuyuying.com/tags/front-end/"/>
    
      <category term="back-end" scheme="http://wuyuying.com/tags/back-end/"/>
    
      <category term="devops" scheme="http://wuyuying.com/tags/devops/"/>
    
      <category term="roadmap" scheme="http://wuyuying.com/tags/roadmap/"/>
    
  </entry>
  
  <entry>
    <title>悄悄发布一个hexo的npm模块</title>
    <link href="http://wuyuying.com/archives/npm-publish/"/>
    <id>http://wuyuying.com/archives/npm-publish/</id>
    <published>2017-04-03T03:52:02.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>hexo-generator-index-plus</strong>，这是什么东东？其实就是hexo博客生成器的一个文章排序插件，基于默认插件fork的，添加按文章<strong>置顶</strong>和<strong>二次编辑的更新时间</strong>排序的功能。</p><p>沙发留给github和npmjs~</p><p>Github: <a href="https://github.com/YuyingWu/hexo-generator-index-plus" target="_blank" rel="noopener">YuyingWu/hexo-generator-index-plus</a><br>npm: <a href="https://www.npmjs.com/package/hexo-generator-index-plus" target="_blank" rel="noopener">hexo-generator-index-plus</a></p><p>最简单粗暴的Installation：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span>-plus <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>当然要完全替换掉默认的index生成器还不止这一步啦，还要干掉默认的npm模块和更新hexo-cli里面assets的引用~具体还是看看<a href="https://www.npmjs.com/package/hexo-generator-index-plus#installation" target="_blank" rel="noopener">readMe</a>啰。</p><h2 id="怎么实现？"><a href="#怎么实现？" class="headerlink" title="怎么实现？"></a>怎么实现？</h2><p>基于默认的hexo-generator-index的fork~所以大致跟原生的一致，config不一样，内部实现不一样。</p><p>实现代码还是不聊了，原理是利用数组处理的sort函数来做升降序排列而已啦，献丑献丑。</p><p>而关键字的优先级是这么排的，让文章按照<code>top</code>（置顶） -&gt; <code>updateDate</code>（二次更新时间） -&gt; <code>date</code>的降序排列~ 为什么我们需要<code>top</code>或者<code>updateDate</code>呢？</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> Blog Log</span><br><span class="line"><span class="symbol">date:</span> <span class="number">2015</span><span class="number">-04</span><span class="number">-23</span> <span class="number">00</span>:<span class="number">35</span>:<span class="number">45</span></span><br><span class="line"><span class="symbol">updateDate:</span> <span class="number">2017</span><span class="number">-04</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">13</span>:<span class="number">00</span></span><br><span class="line"><span class="symbol">top:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="top【No-1-Priority】"><a href="#top【No-1-Priority】" class="headerlink" title="top【No.1 Priority】"></a>top【No.1 Priority】</h3><p>所谓的“置顶”，越大的数值排得越前，写了一篇棒棒的文章当然想让它永远在前排 ^0^</p><h3 id="updateDate【No-2-Priority】"><a href="#updateDate【No-2-Priority】" class="headerlink" title="updateDate【No.2 Priority】"></a>updateDate【No.2 Priority】</h3><p>默认按创建时间<code>date</code>排序，但达不到针对偶尔编辑的某篇文章，希望把它顶上来的需求（但不是置顶，还是按修改时间排序就好了）。</p><p>所以我添加了针对<strong>二次编辑更新时间</strong>的排序，添加了一个<code>updateDate</code>，跟原生的<code>updated</code>区分开。我看默认有个<code>updated</code>属性，但是貌似是系统记录文章编辑保存的时间，人肉编辑也没有效，所以还是自己加一个吧。</p><h3 id="date【Default】"><a href="#date【Default】" class="headerlink" title="date【Default】"></a>date【Default】</h3><p>原生generator支持的创建日期排序。</p><h3 id="more-to-do"><a href="#more-to-do" class="headerlink" title="more to do"></a>more to do</h3><ul><li>目前只按照各个关键属性的默认降序，后续会加一个order_by支持自定义升降序的配置。</li><li>完成代码测试</li></ul><h2 id="发布npm模块"><a href="#发布npm模块" class="headerlink" title="发布npm模块"></a>发布npm模块</h2><p>好惭愧，第一次在社区发布module，把这些步骤记录下来，方便以后给自己备忘，嘻嘻。</p><h3 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h3><ol><li>去<a href="https://www.npmjs.com" target="_blank" rel="noopener">npm社区</a>注册一个账号</li><li>github创建repository</li><li>初始化模块，执行<code>npm init</code>，系统会有很多提示的，不想输入一直按回车就可以，初始化成功后，会生成<code>package.json</code></li></ol><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>i. 设置npm用户</p><p>这个账号会被添加到npm本地的配置中，用来发布module用，成功后用户信息会被存到<code>~/.npmrc</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm adduser</span><br><span class="line"></span><br><span class="line"><span class="symbol">Username:</span> your name</span><br><span class="line"><span class="symbol">Password:</span> your password</span><br><span class="line"><span class="symbol">Email:</span> your email address</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行下面命令可以查看当前用户</span></span><br><span class="line">$ npm whoami</span><br></pre></td></tr></table></figure><p>ii. 设定版本号</p><p><code>package.json</code>里有个字段<code>version</code>，设定模块版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm publish</span></span><br></pre></td></tr></table></figure><p>那么版本号规则一般是怎样的呢？npm社区有语义化版本的规则的~</p><p>版本格式：<strong>主版号.次版号.修订号</strong>，递增规则如下：</p><blockquote><p>主版号：当你做了不相容的 API 修改，<br>次版号：当你做了向下相容的功能性新增，<br>修订号：当你做了向下相容的问题修正。</p></blockquote><p>由于时间关系，在<code>npm publish</code>后，我们的模块就发布成功了，快到没朋友，到<a href="https://www.npmjs.com" target="_blank" rel="noopener">npm社区</a>自己的主页上就能看到啦~ </p><p>还蛮好玩的有木有，大家积极分享自己的模块吧 ：）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;hexo-generator-index-plus&lt;/strong&gt;，这是什么东东？其实就是hexo博客生成器的一个文章排序插件，基于默认插件fork的，添加按文章&lt;strong&gt;置顶&lt;/strong&gt;和&lt;strong&gt;二次编辑的更新时间&lt;/strong&gt;排序的功能。&lt;/p&gt;
&lt;p&gt;沙发留给github和npmjs~&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/YuyingWu/hexo-generator-index-plus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YuyingWu/hexo-generator-index-plus&lt;/a&gt;&lt;br&gt;npm: &lt;a href=&quot;https://www.npmjs.com/package/hexo-generator-index-plus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-generator-index-plus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最简单粗暴的Installation：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; hexo-generator-&lt;span class=&quot;keyword&quot;&gt;index&lt;/span&gt;-plus &lt;span class=&quot;comment&quot;&gt;--save&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://wuyuying.com/tags/blog/"/>
    
      <category term="hexo-generator-index-plus" scheme="http://wuyuying.com/tags/hexo-generator-index-plus/"/>
    
      <category term="hexo-plugin" scheme="http://wuyuying.com/tags/hexo-plugin/"/>
    
      <category term="npm" scheme="http://wuyuying.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>谈谈怎么在不熟悉上下文的情况下debug</title>
    <link href="http://wuyuying.com/archives/debug-talk/"/>
    <id>http://wuyuying.com/archives/debug-talk/</id>
    <published>2017-02-27T13:56:02.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟大家分享一个最近调bug的故事，在不熟悉架构、业务上下文、编程语言、调试环境等等的情况下，遇到问题时，我们可以怎么解决。简单的来说，路过一个你喜欢的站点，发现页面有bug，想帮忙修，怎么办？<br><a id="more"></a></p><hr><p>偶然访问了阿里<a href="https://ant.design/" target="_blank" rel="noopener">Ant Design</a>，默认是英文版本，我看右上角有个切换到中文的按钮，就过去一点，咦，跳到错误页了~</p><p><img src="http://cdn.sinacloud.net/woodysblog/articles/en-to-zh.png" alt=""></p><p>职业习惯，我在chrome和Safari都测了一下，稳定浮现，bug~<br>恰好这个站点是开源的，那就去github fork一下，把这个bug修了吧。</p><p>原href：<a href="https://ant.design/" target="_blank" rel="noopener">https://ant.design/</a><br>正确跳转href：<a href="https://ant.design/index-cn" target="_blank" rel="noopener">https://ant.design/index-cn</a><br>Chrome下跳转到：<a href="https://ant.design/index-cn/ant.design/" target="_blank" rel="noopener">https://ant.design/index-cn/ant.design/</a><br>Safari下跳转到：<a href="https://index-cn/ant.design/" target="_blank" rel="noopener">https://index-cn/ant.design/</a></p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>咋眼一看，我以为是程序猿或者PM在配置时写错了，于是我打开console，检查这个按钮的元素，看有什么关键字（url、data-属性、id、特别的classname等）</p><p><img src="http://cdn.sinacloud.net/woodysblog/articles/antd-button.png" alt=""></p><p>没有链接，看来是js控制的，那就去翻源码吧~问题来了，怎么翻呢？</p><p>从上图看，这个<code>button</code>没什么特色，不过，仔细一看，有个不太普通的类名，<code>ant-btn-ghost</code>，那我们就去模板那搜<code>ghost</code>吧！</p><p><img src="http://cdn.sinacloud.net/woodysblog/articles/antd-folder.png" alt=""></p><p>从目录可以看出来，整个源是非常庞大的，除了官网页面、文档，还有Ant Design UI库的源码。凭”直觉“，到<code>site</code>文件夹搜<code>ghost</code>，因为那么多文件夹，就site比较像是放官网的。</p><p>Bingo!!!</p><p><img src="http://cdn.sinacloud.net/woodysblog/articles/antd-search.png" alt=""></p><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><p>看看<code>button</code>相关的代码，虽然我不太懂React.js，但不难看出来，<code>button</code>的<code>click</code>事件处理函数<code>handleLangChange</code>就是我们要找的逻辑~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button className=<span class="string">"lang"</span> type=<span class="string">"ghost"</span> size=<span class="string">"small"</span> onClick=&#123;<span class="keyword">this</span>.handleLangChange&#125; key=<span class="string">"lang"</span>&gt;</span><br><span class="line">    &lt;FormattedMessage id=<span class="string">"app.header.lang"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/Button&gt;</span></span><br></pre></td></tr></table></figure><h3 id="handleLangChange"><a href="#handleLangChange" class="headerlink" title="handleLangChange"></a>handleLangChange</h3><p>接下来去看<code>handleLangChange</code>函数，幸好代码不是很多，简单扫一眼~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handleLangChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pathname = <span class="keyword">this</span>.props.location.pathname;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (utils.isLocalStorageNameSupported()) &#123;</span><br><span class="line">    localStorage.setItem(<span class="string">'locale'</span>, utils.isZhCN(pathname) ? <span class="string">'en-US'</span> : <span class="string">'zh-CN'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  location.href = location.href.replace(</span><br><span class="line">    location.pathname,</span><br><span class="line">    utils.getLocalizedPathname(pathname, !utils.isZhCN(pathname)),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一句，变量声明，忽略；<br>第二段，localstorage，忽略；<br>第三段，replace，参数1是当前地址，参数2那段的<code>utils.getLocalizedPathname</code>是什么意思呢？</p><h3 id="getLocalizedPathname"><a href="#getLocalizedPathname" class="headerlink" title="getLocalizedPathname"></a>getLocalizedPathname</h3><p>在<code>site</code>文件夹再搜搜<code>getLocalizedPathname</code>，在<code>utils.jsx</code>找到了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLocalizedPathname</span>(<span class="params">path, zhCN</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pathname = path.startsWith(<span class="string">'/'</span>) ? path : <span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!zhCN) &#123; <span class="comment">// to enUS</span></span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/\/?index-cn/</span>.test(pathname) ? <span class="string">'/'</span> : pathname.replace(<span class="string">'-cn'</span>, <span class="string">''</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/index-cn'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.endsWith(<span class="string">'/'</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pathname.replace(<span class="regexp">/\/$/</span>, <span class="string">'-cn/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;pathname&#125;</span>-cn`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再轻轻扫一眼，可以发现函数<code>getLocalizedPathname</code>的作用是根据当前路径<code>path</code>与是否中文版本<code>zhCN</code>，返回对应path值。</p><p>经过上面的排查，我们基本定位切换中文的功能，涉及3个函数：</p><ul><li>handleLangChange</li><li>utils.isZhCN</li><li>utils.getLocalizedPathname</li></ul><p>上面只是跟大家分享<strong>问题定位</strong>的思路，当然不是看看就可以”盲调“啦，哪有辣么厉害，运行调试才是正解！下面开聊<strong>怎么调试和修bug</strong>。</p><h2 id="怎么调试和修bug"><a href="#怎么调试和修bug" class="headerlink" title="怎么调试和修bug"></a>怎么调试和修bug</h2><p>我在Github上看到有个<a href="https://github.com/ant-design/ant-design/wiki/Development" target="_blank" rel="noopener">开发指导</a>文档，上面写着这样可以预览调试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Fork and git clone.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><p>我clone到本地，执行<code>npm start</code>后，提示有个npm组件报错，导致编译失败~没办法在线预览和调试。</p><p>在这里我遇到两个问题：</p><ol><li>.jsx文件编译</li><li>运行环境不能在线调试 </li></ol><p>遇到事，咱不怕事，见招拆招就okay啦~</p><ol><li>把jsx编译成js（或者用babel，具体问题具体分析）</li><li>写好demo后，随便用fis或者webpack在线调试就好了</li></ol><p><strong>针对上面的问题，我的处理方法是，直接把涉及的几个函数串起来，写成demo，想怎么调就怎么调噜~</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 判断当前是否中文版本</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">isZhCN</span><span class="params">(pathname)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="regexp">/-cn\/?$/</span>.test(pathname));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 根据当前pathname和isZhCN()返回该跳转的相对路径</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getLocalizedPathname</span><span class="params">(path, zhCN)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> pathname = path.startsWith(<span class="string">'/'</span>) ? path : <span class="string">'/'</span> + path;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (!zhCN) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// to enUS</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="regexp">/\/?index-cn/</span>.test(pathname) ? <span class="string">'/'</span> : pathname.replace(<span class="string">'-cn'</span>, <span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">    );</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">'/index-cn'</span>;</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.endsWith(<span class="string">'/'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> pathname.replace(<span class="regexp">/\/$/</span>, <span class="string">'-cn/'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> pathname + <span class="string">'-cn'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// handleLangChange 的简写</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 由于当前环境不在https://ant.design域下，我是直接访问demo.html</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 原文中的location.pathname，这里使用硬编码替代</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> pathname = <span class="string">'/index-cn'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result = location.href.replace(</span></span><br><span class="line"><span class="undefined">    location.pathname,</span></span><br><span class="line"><span class="undefined">    getLocalizedPathname(pathname, isZhCN(pathname))</span></span><br><span class="line"><span class="undefined">);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 输出测试结果</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实这样也属于盲调，纯本地调试，修bug的原理没错，但是没有实时调试，加上我不了解业务逻辑（我以为只有首页有中英版本切换，没考虑到其他入口也有），导致我提交的第一个版本会丢失hash和query，后续我再PR了一版，修复的详细这里就不详述了。</p><p><a href="https://github.com/ant-design/ant-design/pull/5050" target="_blank" rel="noopener">第一版</a> <a href="https://github.com/YuyingWu/ant-design/commit/9c9c164617ec35d9c30e5518f94661601bcd736b" target="_blank" rel="noopener">第二版</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>不懂业务、不了解系统的架构和实现、不懂编程语言、没法实时调试，这些可能会变成我们在问题定位和修复时的拦路虎~但是，不要方，见招拆招，用自己的思路和方式解决 ：）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟大家分享一个最近调bug的故事，在不熟悉架构、业务上下文、编程语言、调试环境等等的情况下，遇到问题时，我们可以怎么解决。简单的来说，路过一个你喜欢的站点，发现页面有bug，想帮忙修，怎么办？&lt;br&gt;
    
    </summary>
    
    
      <category term="tech" scheme="http://wuyuying.com/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 - CSS网站布局实录</title>
    <link href="http://wuyuying.com/archives/css-layout/"/>
    <id>http://wuyuying.com/archives/css-layout/</id>
    <published>2017-02-07T04:42:07.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些书籍，就算内容赶不上潮流，经典始终是经典，无论什么时候看，总会觉得有些新的感受新的收获。</p><p><a href="https://book.douban.com/subject/2175995/" target="_blank" rel="noopener">《CSS网站布局实录》</a>，这本书不厚，关于布局、文件流、盒模型等等的基础知识，却讲得非常清晰明白。<br><a id="more"></a></p><h2 id="一、那些CSS布局的事儿"><a href="#一、那些CSS布局的事儿" class="headerlink" title="一、那些CSS布局的事儿"></a>一、那些CSS布局的事儿</h2><h3 id="一列固定宽度"><a href="#一列固定宽度" class="headerlink" title="一列固定宽度"></a>一列固定宽度</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一列宽度自适应"><a href="#一列宽度自适应" class="headerlink" title="一列宽度自适应"></a>一列宽度自适应</h3><p>宽度随着视窗宽度而改变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一列固定宽度居中"><a href="#一列固定宽度居中" class="headerlink" title="一列固定宽度居中"></a>一列固定宽度居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两列固定宽度"><a href="#两列固定宽度" class="headerlink" title="两列固定宽度"></a>两列固定宽度</h3><p>使用浮动，使文件流下两个块级元素流到同一行</p><blockquote><p>文件流：body下的任意元素，根据其前后顺序和元素类型（块级、行内），组成一个个上下关系</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两列宽度自适应"><a href="#两列宽度自适应" class="headerlink" title="两列宽度自适应"></a>两列宽度自适应</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意不要打满100%，会有两列之间的margin、padding、border等宽度影响</p><h3 id="两列右列宽度自适应"><a href="#两列右列宽度自适应" class="headerlink" title="两列右列宽度自适应"></a>两列右列宽度自适应</h3><p>左列宽度自适应同理。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">box</span><span class="number">-1</span>&#123;</span><br><span class="line">    <span class="built_in">width</span>: <span class="number">100</span>px;</span><br><span class="line">    <span class="built_in">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="built_in">box</span><span class="number">-2</span>&#123;</span><br><span class="line">    <span class="comment">// 自适应：不设宽度，不设定浮动属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两列固定宽度居中"><a href="#两列固定宽度居中" class="headerlink" title="两列固定宽度居中"></a>两列固定宽度居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: width1 + width2 (+ margin/borderWidth)</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    &amp;:after&#123;</span><br><span class="line">        <span class="attribute">clear</span>: both; <span class="comment">// 清除浮动，不影响后面的文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: width1;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: width2;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三列中间列宽度自适应"><a href="#三列中间列宽度自适应" class="headerlink" title="三列中间列宽度自适应"></a>三列中间列宽度自适应</h3><p><strong>左右列</strong>使用绝对定位，脱离文件流；<br><strong>中间列</strong>默认宽度100%，使用左右的margin来缩进左列和右列的宽度，达到自适应的效果。</p><p>如果定位不是针对整个视窗，父容器也用绝对定位，保证左右列绝对定位的参照元素是父元素。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>; <span class="comment">// 左对齐</span></span><br><span class="line">    <span class="attribute">width</span>: width1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>; <span class="comment">// 右对齐</span></span><br><span class="line">    <span class="attribute">width</span>: width2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-middle</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> width2 <span class="number">0</span> width1; <span class="comment">// margin: 上 右 下 左</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高度自适应"><a href="#高度自适应" class="headerlink" title="高度自适应"></a>高度自适应</h3><p>单独设置某个元素的<code>height: 100%;</code>有时候会无效。原来，根据浏览器解析规则，<strong>子元素的高度是否能按百分比显示，取决于父元素的高度</strong>。</p><p>假设我们要实现一个自适应视窗高度的效果：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE下，html元素默认高100%，但body不是</span></span><br><span class="line"><span class="comment">// Firefox下，html没有默认高100%</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.target</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、一些经典问题"><a href="#二、一些经典问题" class="headerlink" title="二、一些经典问题"></a>二、一些经典问题</h2><h3 id="1-上下margin叠加问题"><a href="#1-上下margin叠加问题" class="headerlink" title="1. 上下margin叠加问题"></a>1. 上下margin叠加问题</h3><p><strong>表现</strong><br>当上下对象均有<code>margin</code>属性时，外边距会出现叠加问题，取较大值。</p><p><strong>原因</strong><br>CSS原始设计问题。作者考虑到段落的样式控制，假如多个<code>p</code>之间形成段落，每个p都具有margin属性，为解决排版距离不一致问题，设计出外边距叠加规则。</p><p>例外情况，margin叠加只针对<strong>块级元素</strong>，对<code>inline</code>、<code>浮动</code>、<code>绝对定位</code>的元素无效。</p><h3 id="2-IE6下，float元素margin加倍"><a href="#2-IE6下，float元素margin加倍" class="headerlink" title="2. IE6下，float元素margin加倍"></a>2. IE6下，float元素margin加倍</h3><p>可通过设定目标元素的<code>display: inline;</code>解决。</p><h3 id="3-CSS效果：首字下沉"><a href="#3-CSS效果：首字下沉" class="headerlink" title="3. CSS效果：首字下沉"></a>3. CSS效果：首字下沉</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.first-character</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    &amp;:first-letter&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-图像裁剪问题"><a href="#4-图像裁剪问题" class="headerlink" title="4. 图像裁剪问题"></a>4. 图像裁剪问题</h3><ol><li>CSS的clip属性（对象需使用绝对定位）</li><li>父元素定宽高，使用<code>overflow:hidden</code>，局部展示子元素的图片内容</li><li>computed，通过计算，使图片自动水平、垂直居中</li><li>flex布局</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些书籍，就算内容赶不上潮流，经典始终是经典，无论什么时候看，总会觉得有些新的感受新的收获。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/2175995/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《CSS网站布局实录》&lt;/a&gt;，这本书不厚，关于布局、文件流、盒模型等等的基础知识，却讲得非常清晰明白。&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://wuyuying.com/tags/css/"/>
    
      <category term="reading" scheme="http://wuyuying.com/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题的置顶功能</title>
    <link href="http://wuyuying.com/archives/hexo-top/"/>
    <id>http://wuyuying.com/archives/hexo-top/</id>
    <published>2017-02-02T05:23:18.000Z</published>
    <updated>2018-05-26T06:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>忽然想要一个置顶功能，可惜原生的<code>hexo-generator-index</code>没有提供这样的方法，那只能自己搞一个了~</p><a id="more"></a><h2 id="一、hexo-generator-index修改"><a href="#一、hexo-generator-index修改" class="headerlink" title="一、hexo-generator-index修改"></a>一、hexo-generator-index修改</h2><p>Hexo排序编译组件，一般默认安装的，默认配置（按date排序）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">index_generator:</span></span><br><span class="line"><span class="symbol">  per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">  order_by:</span> -date</span><br></pre></td></tr></table></figure><p>如果没有安装的话，可执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure><p>在<code>node_modules/lib/generator.js</code>添加以下排序代码：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">  !a.<span class="built_in">top</span> &amp;&amp; (a.<span class="built_in">top</span> = <span class="number">0</span>);</span><br><span class="line">  !b.<span class="built_in">top</span> &amp;&amp; (b.<span class="built_in">top</span> = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  // 若<span class="built_in">top</span>值一样则按照文章日期降序排，否则按照<span class="built_in">top</span>值降序排</span><br><span class="line">  <span class="keyword">if</span>(a.<span class="built_in">top</span> == b.<span class="built_in">top</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> b.date - a.date; // </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.<span class="built_in">top</span> - a.<span class="built_in">top</span>; // </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="二、日志配置"><a href="#二、日志配置" class="headerlink" title="二、日志配置"></a>二、日志配置</h2><p>在Front-matter添加top属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的2016</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">总结</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-01</span><span class="bullet">-20</span> <span class="number">00</span><span class="string">:11:18</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="三、置顶文案-样式设定"><a href="#三、置顶文案-样式设定" class="headerlink" title="三、置顶文案/样式设定"></a>三、置顶文案/样式设定</h2><p><img src="http://cdn.sinacloud.net/woodysblog/articles/top.png" alt=""></p><p>简单在日期边上加了个“置顶”的箭头~</p><p>添加一个模板<code>theme/landscape/layout/_partial/post/top.ejs</code>，判断当前日志是否有top属性（<code>post.top</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.top</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-arrow-up article-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>然后在你想添加的位置，引用该模板组件</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">blah</span></span> blah ...</span><br><span class="line"></span><br><span class="line">&lt;%- partial(<span class="string">'post/top'</span>) %&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">blah</span></span> blah ...</span><br></pre></td></tr></table></figure><p>Reference:<br><a href="http://www.netcan666.com" target="_blank" rel="noopener">Netcan</a>的<a href="http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/" target="_blank" rel="noopener">《解决hexo置顶问题》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忽然想要一个置顶功能，可惜原生的&lt;code&gt;hexo-generator-index&lt;/code&gt;没有提供这样的方法，那只能自己搞一个了~&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://wuyuying.com/tags/blog/"/>
    
      <category term="theme" scheme="http://wuyuying.com/tags/theme/"/>
    
  </entry>
  
</feed>
