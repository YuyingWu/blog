{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/fresh/source/css/archive.scss","path":"css/archive.scss","modified":1,"renderable":1},{"_id":"themes/fresh/source/css/index.scss","path":"css/index.scss","modified":1,"renderable":1},{"_id":"themes/fresh/source/css/post.scss","path":"css/post.scss","modified":1,"renderable":1},{"_id":"themes/fresh/source/dist/base.js","path":"dist/base.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/dist/test.css","path":"dist/test.css","modified":1,"renderable":1},{"_id":"themes/fresh/source/dist/test.js","path":"dist/test.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/fresh/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/fresh/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/fresh/source/js/base.js","path":"js/base.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/fresh/source/js/comment.js","path":"js/comment.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/lib/mod.js","path":"lib/mod.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/lib/zepto.js","path":"lib/zepto.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/css/iconfont_201704181501.css","path":"build/css/iconfont_201704181501.css","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/fonts/iconfont.eot","path":"build/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/fonts/iconfont.svg","path":"build/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/fonts/iconfont.ttf","path":"build/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/fonts/iconfont.woff","path":"build/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/js/comment.js","path":"build/js/comment.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/js/modules/zoom.js","path":"js/modules/zoom.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/js/post/checkTocScroll.js","path":"js/post/checkTocScroll.js","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/css/pages/archive_201709301847.css","path":"build/css/pages/archive_201709301847.css","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/css/pages/index_201709301847.css","path":"build/css/pages/index_201709301847.css","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/css/pages/archive_201709301905.css","path":"build/css/pages/archive_201709301905.css","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/css/pages/index_201709301905.css","path":"build/css/pages/index_201709301905.css","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/css/pages/post_201709301847.css","path":"build/css/pages/post_201709301847.css","modified":1,"renderable":1},{"_id":"themes/fresh/source/build/css/pages/post_201709301905.css","path":"build/css/pages/post_201709301905.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"73a82675758adc4d2632b46b39c35a93c8f36dff","modified":1531033404000},{"_id":"source/about.md","hash":"2b9d729a75f809fbf45db38cecd90b4b4e27a6db","modified":1534774520000},{"_id":"source/donate.md","hash":"39b1a00b79bd8e495d211ea9f24d177132c25ce8","modified":1527317071000},{"_id":"source/whv.md","hash":"3b51d9ca9b36dc7a334359b6a38fb4e0ac699821","modified":1527317071000},{"_id":"source/favicon.ico","hash":"d9f39047d2333a6e74d72e429a7c697836c7e947","modified":1527317071000},{"_id":"themes/fresh/.babelrc","hash":"de7a43930ce5414b24f8a8164be289b158453412","modified":1527244999000},{"_id":"themes/fresh/.gitignore","hash":"371bccb1ff8e54203133ec6dcfb8bad82806d27d","modified":1527244999000},{"_id":"themes/fresh/LICENSE","hash":"39414feb8580af4d297c2945157df1524e313e1e","modified":1527244999000},{"_id":"themes/fresh/README.md","hash":"266abafcec3fb49569fc2ccbc0cd220775e3bd81","modified":1527244999000},{"_id":"themes/fresh/_config.yml","hash":"e12293d8fcbdf686dc337eb73aa2a949018c3051","modified":1535469659000},{"_id":"themes/fresh/package.json","hash":"beeb4f51aa692cb069e07c6995e4fbd7f75f1330","modified":1527244999000},{"_id":"source/_drafts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530768607000},{"_id":"source/_drafts/xiamen-2018.md","hash":"3570689ee72f6425513778ec5f130bd59af60758","modified":1530019871000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530019871000},{"_id":"source/_posts/2014-exp-xmas.md","hash":"5346edf9cbdb142e08ca5e074ca47079a8fce23c","modified":1527317071000},{"_id":"source/_posts/7cake.md","hash":"3273ca5d27bedfec9d9f47a8cf461c06a6b65381","modified":1527317071000},{"_id":"source/_posts/2017-roadmap.md","hash":"d6eeb491eb3b0fb3fc0b590eeaf1a09f2b7ab563","modified":1527317071000},{"_id":"source/_posts/bdd-in-reactjs.md","hash":"4afcf83db578139b88727dbce930f15a9a380c43","modified":1528252300000},{"_id":"source/_posts/blog-log.md","hash":"3b1ae65b9d9d2c7846f70e1d953ac153cfe0ffca","modified":1535469659000},{"_id":"source/_posts/begin-again-2017.md","hash":"e0c8edd8cc63bf594d23f62c01dc9cee105f9885","modified":1527317071000},{"_id":"source/_posts/blog-opt-wp-hexo.md","hash":"ed95ca9956259a5ac8fd2af95449515e4539f259","modified":1527317071000},{"_id":"source/_posts/css-in-depth-css-variables.md","hash":"612258c26a485600e60a1bbdbc9360c19427d3dc","modified":1531036743000},{"_id":"source/_posts/css-in-depth-stop-thinking-in-px.md","hash":"dc03ef6d6531e8c986fca697e30cc81b509e8d2c","modified":1534346507000},{"_id":"source/_posts/css-in-depth-relative-units.md","hash":"a9fa312c5b256358ee1154300f0e6fbebedb827c","modified":1534346603000},{"_id":"source/_posts/css-in-depth-unitless-number.md","hash":"3689fdff6076b44d1e6cb680ed3dcf04fb4af824","modified":1531036774000},{"_id":"source/_posts/css-in-depth-viewport-relative-units.md","hash":"f3c87b8bd8d5d0ca9d119632e6f840db16f9bd24","modified":1531036781000},{"_id":"source/_posts/css-var.md","hash":"0f8b300951fdaf6716b5720582f07196a827bd1c","modified":1527317071000},{"_id":"source/_posts/debug-talk.md","hash":"35cec07c178e240aefd36d0bfc58134ab0dad63f","modified":1527317071000},{"_id":"source/_posts/eu-gallery.md","hash":"fff5ab625ec0d374c0a75b8fd5822cc80285a2b4","modified":1527317071000},{"_id":"source/_posts/css-layout.md","hash":"a013bed31fc0d04666b063e8d660b53e0b0b4078","modified":1527317071000},{"_id":"source/_posts/fis3-node.md","hash":"76f4e85500561784660cbe1237fe422d8a5cd0bd","modified":1527317071000},{"_id":"source/_posts/git.md","hash":"b59124fb723771c387169bf0bdbdf2f8e968bbe9","modified":1535183023000},{"_id":"source/_posts/full-stack.md","hash":"d927416b0e566c3fd010f7e78bf180e0f4f68fdd","modified":1527317071000},{"_id":"source/_posts/fontmin.md","hash":"30cdc4a8fd682adf1e15ccea98c054292c23d239","modified":1527317071000},{"_id":"source/_posts/google-organization.md","hash":"ce41ed1b0dc886668dc3c54e173731ed9a4872a9","modified":1527317071000},{"_id":"source/_posts/gpx.md","hash":"1b645a9b561841633cc3631f00c4a946d40677d2","modified":1527317071000},{"_id":"source/_posts/graphql-in-action.md","hash":"3fa13739795f8345ec9d752d8bfca3c751310bbe","modified":1534778259000},{"_id":"source/_posts/graphql.md","hash":"0431053acce2960b139df1dcb781137d82c06f31","modified":1530682641000},{"_id":"source/_posts/growth-hacker.md","hash":"1ab6648de86025f2710aba678e1d342c275e116f","modified":1535470132000},{"_id":"source/_posts/hello-blog.md","hash":"50161a9ef2d6495dcffe39b3765b438badf1d057","modified":1527317071000},{"_id":"source/_posts/improve-ue-with-ab-testing.md","hash":"4a4b99c08800a51582c2ec9886a2646bd80837eb","modified":1537088875000},{"_id":"source/_posts/hexo-top.md","hash":"49d1cf33edff158c4a83e6a4bec4adfafe484c2a","modified":1527317071000},{"_id":"source/_posts/http.md","hash":"d3d4320941190568503bf13d856a3a808c5ccb74","modified":1527317071000},{"_id":"source/_posts/hexo-travis.md","hash":"93d1d84b17c7143ffd684285fda704491c47250c","modified":1527942008000},{"_id":"source/_posts/information-organize.md","hash":"39aed9f1c1124733fbb8771c27f987273f1a8965","modified":1527317071000},{"_id":"source/_posts/independent-coder.md","hash":"cb8a7cbec402c0ff08f28301608a9ceb90e76483","modified":1527317071000},{"_id":"source/_posts/inky.md","hash":"c8495ea568ca188b86fa7b13f7e8f394ccdf955c","modified":1527317071000},{"_id":"source/_posts/job-hunting-whv.md","hash":"682fe2c56832336d3de2f299ca1d7cc0e9c2ef0d","modified":1527317071000},{"_id":"source/_posts/kindle-duokan.md","hash":"5134d9d062e30654a0bb3e5c21bd10b177fa7b72","modified":1527317071000},{"_id":"source/_posts/mac-notes.md","hash":"37a11eb6e78f5d000a73e5caa5415775578a2dc0","modified":1527317071000},{"_id":"source/_posts/javascript-animation.md","hash":"1b66fbf96fa94ef94bed1003b827cdcc05b385a4","modified":1527317071000},{"_id":"source/_posts/mactalk.md","hash":"a1913b40543fde8b93cce8e8b5c283699bb860e5","modified":1527317071000},{"_id":"source/_posts/markdown.md","hash":"c80cf75f686035a18d3bd289adbd8bfd4a69829d","modified":1527317071000},{"_id":"source/_posts/mike-cafe.md","hash":"d0ce03de7c053aab118aab482b4aae12ea89df9e","modified":1527317071000},{"_id":"source/_posts/npm-publish.md","hash":"c68bfad3bc61d2d5ab6bfffff6b1937d2992e2e8","modified":1527317071000},{"_id":"source/_posts/method-of-happiness.md","hash":"18c6c09e68c74f5efda40200d8bbebdf53835c2b","modified":1527317071000},{"_id":"source/_posts/photography-note.md","hash":"3fbcfdc63d3c7f0f5b5ea10a35058a375b0cf96f","modified":1527317071000},{"_id":"source/_posts/resign-from-baidu.md","hash":"0a962c80d67fcb7a3133d9311848497589e38f01","modified":1527317071000},{"_id":"source/_posts/qrcode.md","hash":"823ef2ae3e5942aa88b7e2c607722aa4e66d446f","modified":1527317071000},{"_id":"source/_posts/optimizing-react-virtual-dom-explained.md","hash":"f17c807e5ea9036ade99adc373b1379a214ba467","modified":1531024310000},{"_id":"source/_posts/resume-tips.md","hash":"316f415c04c38b127bc9af4a30fe3b3f64da23bb","modified":1527317071000},{"_id":"source/_posts/rwd-first.md","hash":"45bdec080a78a3f2ccf30ee7b0d1999334793bfb","modified":1527317071000},{"_id":"source/_posts/puppeteer.md","hash":"fb5c7a0423089d2ef3dbbefa1cd4a826e8bca70e","modified":1532161967000},{"_id":"source/_posts/ryfeng-blog.md","hash":"9a9ca1a0034bd5dcfcb54c723e6b16cc1e5f27db","modified":1527317071000},{"_id":"source/_posts/safari-web-debug.md","hash":"34c383849658835d6d16a98a27c60148e9b7a580","modified":1527317071000},{"_id":"source/_posts/shifu.md","hash":"ba7a4a5c962a293e07481b3a17a0fb82f5b1fc28","modified":1527317071000},{"_id":"source/_posts/simplify-work.md","hash":"5f5b47f48d0fd96cc9935b05e22df6cb42d2872c","modified":1527317071000},{"_id":"source/_posts/summary-2014.md","hash":"dbb345b172e24220e630de3d68e936008e11153a","modified":1527317071000},{"_id":"source/_posts/slash.md","hash":"e35dc8b6b89a7d083da0ec37db45aacd587dd4b0","modified":1527317071000},{"_id":"source/_posts/taobao-maker-festival-2017.md","hash":"e3df94e34e1a0b2ca1e61626482fbbd01dc78679","modified":1527317071000},{"_id":"source/_posts/travel-with-love.md","hash":"a64687f4236b7f0808b7f030b6eb07fbe8a4d580","modified":1527317071000},{"_id":"source/_posts/uc-web-debug.md","hash":"d33f2cda11aae755bdfe9cca190dc5871bf7e079","modified":1527317071000},{"_id":"source/_posts/value-investing.md","hash":"38593b7ccd01e85de0f2d50558a119d9390623d0","modified":1527317071000},{"_id":"source/_posts/work-whv.md","hash":"501f9cb21ff999aa230430d647e665a92d27e9f9","modified":1527317071000},{"_id":"source/_posts/wx-developer.md","hash":"fe79e70bc95845c180c2f955164a51709fa7ee20","modified":1527317071000},{"_id":"source/_posts/year-2015.md","hash":"502bdbb06bfa9162c7dd6981f61c06f0e0214c50","modified":1527317071000},{"_id":"source/_posts/year-2016.md","hash":"909c23cad95c195807ea022af7edcf7c7e5ef6eb","modified":1527317071000},{"_id":"source/_posts/year-2017.md","hash":"b310512c55911ef5494430eb9ad6d386184a7994","modified":1527317071000},{"_id":"themes/fresh/.cache/0a7937fdce6bbdb95671db90c2c4af4e.json","hash":"dfe06af274cda798a68da94aea1f7c88bb5697b8","modified":1527244999000},{"_id":"themes/fresh/.cache/2afa77695d46f4fe71ef2b4ed5df4c1d.json","hash":"dcf0337f93934bf9b6c3ce0a9dff644303ee9626","modified":1527244999000},{"_id":"themes/fresh/.cache/17b315cb1c90875fd73fe3511f304752.json","hash":"211e6a104037d719bbb5c508851ae17cec30114d","modified":1527244999000},{"_id":"themes/fresh/.cache/42d16ba4db4520d98b80d67ab6971039.json","hash":"551e256d8d30537be47253d56cf526e1e255d7f0","modified":1527244999000},{"_id":"themes/fresh/.cache/451770e6ed857453ee32087fae0e8986.json","hash":"f219ddaba61708de0573e62a148a25b6d9fab01a","modified":1527244999000},{"_id":"themes/fresh/.cache/dbdeb6ab00a607daeaf0641c30d6ef08.json","hash":"e9a28c20aec90b0eb3bef4895b9eb5fb80a94b3d","modified":1527244999000},{"_id":"themes/fresh/.cache/ab1d7b33b4f39b4c6b6b49d3c0523edd.json","hash":"8b5aa6a773c1135580bf06ad978129f94c58e384","modified":1527244999000},{"_id":"themes/fresh/layout/_layout.swig","hash":"43bfe738c39f0b8c22c5a837d79cc1a68d81f244","modified":1527310220000},{"_id":"themes/fresh/layout/archive.swig","hash":"e81cbf316b82a29b6640c265cc9eb3b3162e584c","modified":1527310224000},{"_id":"themes/fresh/layout/draft.swig","hash":"b015da4710d512b4e1798091706c9897d4076c73","modified":1527244999000},{"_id":"themes/fresh/layout/index.swig","hash":"df2c58827637c76b675ce34a0c8ef60cfb69540d","modified":1527310233000},{"_id":"themes/fresh/layout/category.swig","hash":"d0b8c2c7b8aa926d5d01f1b8e5800b53283a3a97","modified":1527310227000},{"_id":"themes/fresh/layout/post.swig","hash":"a8b73d2222992b8e6b74243d0608dffa4e86234f","modified":1537088661000},{"_id":"themes/fresh/layout/page.swig","hash":"853cf94298e72897791db05db4fe4f24f7c7685b","modified":1527310238000},{"_id":"themes/fresh/layout/tag.swig","hash":"e17dfd626832cd0dbcddf24478e1d7f7f32271fb","modified":1527310248000},{"_id":"themes/fresh/languages/zh-cn.yml","hash":"488f4a8c9dfb3273094bc6c2b952c80765bb15ad","modified":1527244999000},{"_id":"themes/fresh/build/css/pages","hash":"c6e9d8d601b0008b2c7d56b0e6ea873ed568fd4d","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/archive.swig","hash":"68229f903e303c0d31467327d609ae2cc3e30b29","modified":1527244999000},{"_id":"themes/fresh/layout/_common/timestamp.swig","hash":"0f0a6d686900748711df98f1fd40d795cc9977d9","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/article.swig","hash":"497ce3f49787efe8018a3109a5b548ca0abf4bd1","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/comment.swig","hash":"6f90590a6e76d00c395ef94e33443e8a757a1dab","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/disqus_count.swig","hash":"60d031ebeb945ee61c9d08ea905cf44a6e376daf","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/disqus.swig","hash":"46ff0095369c62a9834135395a83bb871bfd91c6","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/footer.swig","hash":"298d82b3195b987ba479c999d78ff112cb77ab54","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/header.swig","hash":"a24aaa0010f532daa9d496b23de81d4e82eff194","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/pagination.swig","hash":"75044dcddf6c740888c073a6ce223cfbdc170261","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/sibling.swig","hash":"79354f8ec09ee88672ba8c4b863c7e70e6dc462a","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/sidebar.swig","hash":"890dc68eb64300342f3e26b365c7bfaee17becb3","modified":1527244999000},{"_id":"themes/fresh/layout/_widget/category.swig","hash":"2776325a914e522b05e26de55d95ba2863076027","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/social.swig","hash":"c1af766adb34173a1a4d2dc44a2130ba9e9ed147","modified":1527244999000},{"_id":"themes/fresh/layout/_widget/old-browser.swig","hash":"19c8f7cd10b5693b3d074f0d44457d7022c77bcd","modified":1527244999000},{"_id":"themes/fresh/layout/_widget/search.swig","hash":"045682c20d4fdf63fd4e1390b2eaf29f1e3d40ea","modified":1527244999000},{"_id":"themes/fresh/layout/_widget/tag.swig","hash":"df7b275911ea05f06a59964655737191a079a526","modified":1527244999000},{"_id":"themes/fresh/layout/_widget/google-analytics.swig","hash":"89a35eed105231b531738ad498125a09562ae473","modified":1535469659000},{"_id":"themes/fresh/layout/_widget/comment.swig","hash":"9c6e9d6b867404e59195b2f44c08ad33b122f68c","modified":1527244999000},{"_id":"themes/fresh/source/css/archive.scss","hash":"82d2b55ae706bc202a426416a69d17eeaec7f7a4","modified":1527244999000},{"_id":"themes/fresh/source/css/index.scss","hash":"76188eba474973d32c01e8f50eee7fc4899ad33d","modified":1527244999000},{"_id":"themes/fresh/source/css/post.scss","hash":"8481fa055fadab175489f77a49757a70baadd309","modified":1527244999000},{"_id":"themes/fresh/source/dist/base.js","hash":"654b863f73dd35e838c8684a6d877ba89313df94","modified":1527244999000},{"_id":"themes/fresh/source/dist/test.css","hash":"f8de547158251604a7393a6333dc610e1afa8aaa","modified":1527244999000},{"_id":"themes/fresh/source/dist/test.js","hash":"bb69ab31b1fcebdf6fa1421645eb9a4b74d18a87","modified":1527244999000},{"_id":"themes/fresh/source/fonts/iconfont.eot","hash":"0ecda8a13ee30c857606380d5a6f771f465c4cbc","modified":1527244999000},{"_id":"themes/fresh/source/fonts/iconfont.svg","hash":"8ae52abb8f348b518172672fcb22846d0a6d8620","modified":1527244999000},{"_id":"themes/fresh/source/fonts/iconfont.ttf","hash":"29fd78a2349ca0333d4d4925dee0944c450820a3","modified":1527244999000},{"_id":"themes/fresh/source/js/base.js","hash":"0c2aeb573be149de46bc8fa2d2cdf6d919415fb9","modified":1527244999000},{"_id":"themes/fresh/source/fonts/iconfont.woff","hash":"31eafc0b56addf7017288d73c37391ac3fb23a30","modified":1527244999000},{"_id":"themes/fresh/source/js/comment.js","hash":"fc0d2b351c5e67a326d9c5642e502247677c4c51","modified":1527244999000},{"_id":"themes/fresh/source/js/main.js","hash":"1fed9ffae61e15fd85350024df860564e0f81bfa","modified":1527244999000},{"_id":"themes/fresh/source/lib/mod.js","hash":"7fa112ee74d4acdc82bb581fd9d0f1ee38058c6d","modified":1527244999000},{"_id":"themes/fresh/source/lib/zepto.js","hash":"fe3615b079510ff6aead6ce5b877ffe11bb78256","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/category.swig","hash":"6c6d290bad90d2a4a4d06bbbe77035e605b6505e","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/cc.swig","hash":"5ce2c07a483c2879ed6fa8c6926e6f177d94e8a5","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/meta.swig","hash":"a14c391623fbfdef03e45a56adfb04159f9489c0","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/donate.swig","hash":"30991a82469c88c7fb83fb765ae8017ed50d1db3","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/post-normal.swig","hash":"4cb0d5d3680ae09a37f9b32fd3ada46e98aeff7c","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/shield.swig","hash":"f663a7e1e7f442a3cfc3183bd8178fa15fa2b9f6","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/tag.swig","hash":"492ca403197d478462054274c73d8abc2b11f2d1","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post/title.swig","hash":"8e8fe4282ee776608c73560184e9d3036a0ad415","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post-detail/article.swig","hash":"0d8bf3ed4eeb0f28ade791b799a52935ea1295d2","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post-excerpt/article-normal.swig","hash":"96eceb291a9a304c3d7109047b79de51b361526e","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post-excerpt/article-photo.swig","hash":"5380608ef18f11e081dc36ca4d1d0bb7a85965a0","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post-excerpt/article-title.swig","hash":"d548d178b7075433ce0f0ab7d7d65bbd60e03d2b","modified":1527244999000},{"_id":"themes/fresh/layout/_partial/post-excerpt/article.swig","hash":"927d6f774e867f2703d1489b3a8347d54d912690","modified":1527244999000},{"_id":"themes/fresh/source/build/css/iconfont_201704181501.css","hash":"fa23ead64ef68d3d93bfaef5546f8835bf378b64","modified":1527244999000},{"_id":"themes/fresh/source/build/fonts/iconfont.eot","hash":"0ecda8a13ee30c857606380d5a6f771f465c4cbc","modified":1527244999000},{"_id":"themes/fresh/source/build/fonts/iconfont.svg","hash":"8ae52abb8f348b518172672fcb22846d0a6d8620","modified":1527244999000},{"_id":"themes/fresh/source/build/fonts/iconfont.ttf","hash":"29fd78a2349ca0333d4d4925dee0944c450820a3","modified":1527244999000},{"_id":"themes/fresh/source/build/fonts/iconfont.woff","hash":"31eafc0b56addf7017288d73c37391ac3fb23a30","modified":1527244999000},{"_id":"themes/fresh/source/build/js/comment.js","hash":"fc0d2b351c5e67a326d9c5642e502247677c4c51","modified":1527244999000},{"_id":"themes/fresh/source/css/base/_common.scss","hash":"85baca96cc514fcff78989b86761c948e0ba15b1","modified":1527244999000},{"_id":"themes/fresh/source/css/base/_layout.scss","hash":"16cdb8cff9bb7fbd664a4baa279c836e56d03f1e","modified":1527244999000},{"_id":"themes/fresh/source/css/base/_variable.scss","hash":"bd680fa43a4414f1b9880fb3c7ca9f6f23295e1d","modified":1527244999000},{"_id":"themes/fresh/source/css/lib/_iconfont.css","hash":"d0fc8ff47efb5106b8af4982bb3384ec5469f3f0","modified":1527244999000},{"_id":"themes/fresh/source/css/lib/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1527244999000},{"_id":"themes/fresh/source/css/widget/_comment.scss","hash":"098812f0e49aa1acfd87ba1c9eb3678f091d8f29","modified":1527244999000},{"_id":"themes/fresh/source/css/widget/_old-browser.scss","hash":"fc241b4c2bb4cb166ea0e88aa0fcd31c2b92650c","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/_comment.scss","hash":"2bb75c79a14ceb79e0611c62b696ba914948590b","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/_footer.scss","hash":"89f19b3edebcb2aa7d7caf598ff0364ac5d62dc0","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/_header.scss","hash":"ccb4795dd933fa68e67406a4ede5cd8a60d38b9b","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/_pagination.scss","hash":"55ddf69a33e03844d9d1adffdfc4c133e6ba0bfe","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/_shield.scss","hash":"2b03020da9cc4c383f028e1b1652b21043451bcd","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/_widget.scss","hash":"1b07e2cc0b72fe9f3d262abaa770f90b30dafb7e","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/_syntax.scss","hash":"69e83b468e2e1a7ef13bbcddd9cdd82cc2afaa8b","modified":1527244999000},{"_id":"themes/fresh/source/js/modules/zoom.js","hash":"1faa746b1236adc1d9b0fd26374b1f95707da613","modified":1527244999000},{"_id":"themes/fresh/source/js/post/checkTocScroll.js","hash":"73ba0ad00a815245a9c4ad493da5c45484a002b5","modified":1527244999000},{"_id":"themes/fresh/source/build/css/pages/archive_201709301847.css","hash":"7403230c16826b8817b3e5bb05ccf767341d9391","modified":1527244999000},{"_id":"themes/fresh/source/build/css/pages/index_201709301847.css","hash":"5c85aa94fa67a7cec215dce1862670d156157a41","modified":1527244999000},{"_id":"themes/fresh/source/build/css/pages/archive_201709301905.css","hash":"7403230c16826b8817b3e5bb05ccf767341d9391","modified":1527244999000},{"_id":"themes/fresh/source/build/css/pages/index_201709301905.css","hash":"5c85aa94fa67a7cec215dce1862670d156157a41","modified":1527244999000},{"_id":"themes/fresh/source/build/css/pages/post_201709301847.css","hash":"f7d42b79822e690bec12dc98f57a91a5e1c343a7","modified":1527244999000},{"_id":"themes/fresh/source/build/css/pages/post_201709301905.css","hash":"f7d42b79822e690bec12dc98f57a91a5e1c343a7","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/post/_meta.scss","hash":"71983fbff5d773a46a40e11240400e91aef22304","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/post/_article.scss","hash":"931d5eaa33a5475a9fb31a452776e7394d70d880","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/post/_cc.scss","hash":"6d4f04ff95817d07669eccea7dbaef873e5f7c74","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/post/_toc.scss","hash":"316644ddccb653b069eee0e3f99f447d375e585a","modified":1535469659000},{"_id":"themes/fresh/source/css/partial/post-excerpt/_article.scss","hash":"5a8bdf4636b64476e4f090f7bd1cf2ad1c5934ed","modified":1527244999000},{"_id":"themes/fresh/source/css/partial/post-excerpt/_photo.scss","hash":"8c185332c47c6f0029cd655f213c00dd68c72b20","modified":1527244999000}],"Category":[{"name":"life","_id":"cjm4n1x7y0007zvr3agc7l8mo"},{"name":"tech","_id":"cjm4n1x82000dzvr3ae0p6b83"},{"name":"work","parent":"cjm4n1x82000dzvr3ae0p6b83","_id":"cjm4n1x8a000ozvr3di8z1k2b"},{"name":"未分类","_id":"cjm4n1x8r001jzvr35tsy3ywb"},{"name":"reading","_id":"cjm4n1x94002bzvr3p54bdx7m"},{"name":"reading","parent":"cjm4n1x7y0007zvr3agc7l8mo","_id":"cjm4n1x97002hzvr37162gzy9"},{"name":"work","parent":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1x9b002nzvr3mnwgn4qy"},{"name":"study","_id":"cjm4n1x9f002uzvr3rjyxbxz2"},{"name":"photography","_id":"cjm4n1x9o003czvr3bmqpbimj"},{"name":"tech","parent":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1x9x003uzvr3ultzocum"},{"name":"work","_id":"cjm4n1xa10045zvr3zmt5w9rj"},{"name":"finance","_id":"cjm4n1xad004uzvr3ajkt4ynp"},{"name":"reading","parent":"cjm4n1xad004uzvr3ajkt4ynp","_id":"cjm4n1xaj0056zvr3h7ufjflz"}],"Data":[],"Page":[{"title":"About","date":"2015-04-20T01:33:43.000Z","layout":"page","_content":"\n![\"Mount Cook in New Zealand\"](http://cdn.sinacloud.net/woodysblog/2016/mount-cook.JPG)\n\n## 简介\n\n博主：伍酱\n\n2017.05 - 至今，阿里巴巴CBU，前端开发\n2016.06 - 2017.01，新西兰，打工度假\n2013.06 - 2016.06，百度知识体系，前端开发\n2009.09 - 2013.06，华南理工大学，软件工程本科\n\n## 兴趣爱好\n\n喜欢**读书**，一天看好几本，也能一本看好几天，但没沾到多少墨水，就一文盲；\n\n喜欢拍照，玩**胶卷**，但太懒了，没去过哪拍出一辑好片，现在还囤了几卷2012年的没拿去洗，醉了~\n\n喜欢**理财**，P2P、余额宝/理财通、股票/债券基金、A股、美股，什么都碰，就等着**money**翻个几十倍了~\n\n喜欢**安静地写代码**，准确的来说，是写自己的代码，让别人看去吧，哈哈……写出**优雅的代码**，这是一件所有程序猿都会觉得有成就感的事情吧；\n\n不怎么喜欢社交，[blog](http://www.wuyuying.com)、[weibo](http://www.weibo.com/wuyuying1128)、[豆瓣](http://www.douban.com/people/wuyuying1128/)、微信（就先不暴露了）\n\n## 欲望地图\n\n* 圣托里尼（美）\n* 土耳其（热气球）\n* ~~新西兰（打工度假）~~[ 2016.06-2017.01 在新西兰打工度假半年]\n* 欧洲（在NZ遇到很多欧洲的小伙伴，看了《极简欧洲史》，想看看）\n* 美国（咖啡之旅）\n* 日本（干净）\n\n## 欲望技能\n\n* ~~英文一般好，够在旅游时候砍价、问路即可~~ [ 去了新西兰半年，一直讲英文，不算太流利，不过死不了 ^_^ ]\n* ~~开车（自行车、三轮车不算）~~[ 2016年终于拿到驾照噜，在新西兰开过几次车；不过仍需练习~ ]\n* 四菜一汤，白饭任装（自己煮）\n\n## 欲望人生\n\n* 开家咖啡馆\n* 成为独立开发者\n* 找一个喜欢我和我喜欢的人，在亲人和好朋友的祝福下，平淡、健康、开心地过日子\n* 财务自由，做自己喜欢的事情/工作，不用为了三顿饱饭折腰\n\n","source":"about.md","raw":"---\ntitle: About\ndate: 2015-04-20 09:33:43\nlayout: page\n---\n\n![\"Mount Cook in New Zealand\"](http://cdn.sinacloud.net/woodysblog/2016/mount-cook.JPG)\n\n## 简介\n\n博主：伍酱\n\n2017.05 - 至今，阿里巴巴CBU，前端开发\n2016.06 - 2017.01，新西兰，打工度假\n2013.06 - 2016.06，百度知识体系，前端开发\n2009.09 - 2013.06，华南理工大学，软件工程本科\n\n## 兴趣爱好\n\n喜欢**读书**，一天看好几本，也能一本看好几天，但没沾到多少墨水，就一文盲；\n\n喜欢拍照，玩**胶卷**，但太懒了，没去过哪拍出一辑好片，现在还囤了几卷2012年的没拿去洗，醉了~\n\n喜欢**理财**，P2P、余额宝/理财通、股票/债券基金、A股、美股，什么都碰，就等着**money**翻个几十倍了~\n\n喜欢**安静地写代码**，准确的来说，是写自己的代码，让别人看去吧，哈哈……写出**优雅的代码**，这是一件所有程序猿都会觉得有成就感的事情吧；\n\n不怎么喜欢社交，[blog](http://www.wuyuying.com)、[weibo](http://www.weibo.com/wuyuying1128)、[豆瓣](http://www.douban.com/people/wuyuying1128/)、微信（就先不暴露了）\n\n## 欲望地图\n\n* 圣托里尼（美）\n* 土耳其（热气球）\n* ~~新西兰（打工度假）~~[ 2016.06-2017.01 在新西兰打工度假半年]\n* 欧洲（在NZ遇到很多欧洲的小伙伴，看了《极简欧洲史》，想看看）\n* 美国（咖啡之旅）\n* 日本（干净）\n\n## 欲望技能\n\n* ~~英文一般好，够在旅游时候砍价、问路即可~~ [ 去了新西兰半年，一直讲英文，不算太流利，不过死不了 ^_^ ]\n* ~~开车（自行车、三轮车不算）~~[ 2016年终于拿到驾照噜，在新西兰开过几次车；不过仍需练习~ ]\n* 四菜一汤，白饭任装（自己煮）\n\n## 欲望人生\n\n* 开家咖啡馆\n* 成为独立开发者\n* 找一个喜欢我和我喜欢的人，在亲人和好朋友的祝福下，平淡、健康、开心地过日子\n* 财务自由，做自己喜欢的事情/工作，不用为了三顿饱饭折腰\n\n","updated":"2018-08-20T14:15:20.000Z","path":"about.html","comments":1,"_id":"cjm4n1x5w0000zvr3wo7vpn0l","content":"<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/mount-cook.JPG\" alt=\"&quot;Mount Cook in New Zealand&quot;\"></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>博主：伍酱</p>\n<p>2017.05 - 至今，阿里巴巴CBU，前端开发<br>2016.06 - 2017.01，新西兰，打工度假<br>2013.06 - 2016.06，百度知识体系，前端开发<br>2009.09 - 2013.06，华南理工大学，软件工程本科</p>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><p>喜欢<strong>读书</strong>，一天看好几本，也能一本看好几天，但没沾到多少墨水，就一文盲；</p>\n<p>喜欢拍照，玩<strong>胶卷</strong>，但太懒了，没去过哪拍出一辑好片，现在还囤了几卷2012年的没拿去洗，醉了~</p>\n<p>喜欢<strong>理财</strong>，P2P、余额宝/理财通、股票/债券基金、A股、美股，什么都碰，就等着<strong>money</strong>翻个几十倍了~</p>\n<p>喜欢<strong>安静地写代码</strong>，准确的来说，是写自己的代码，让别人看去吧，哈哈……写出<strong>优雅的代码</strong>，这是一件所有程序猿都会觉得有成就感的事情吧；</p>\n<p>不怎么喜欢社交，<a href=\"http://www.wuyuying.com\" target=\"_blank\" rel=\"noopener\">blog</a>、<a href=\"http://www.weibo.com/wuyuying1128\" target=\"_blank\" rel=\"noopener\">weibo</a>、<a href=\"http://www.douban.com/people/wuyuying1128/\" target=\"_blank\" rel=\"noopener\">豆瓣</a>、微信（就先不暴露了）</p>\n<h2 id=\"欲望地图\"><a href=\"#欲望地图\" class=\"headerlink\" title=\"欲望地图\"></a>欲望地图</h2><ul>\n<li>圣托里尼（美）</li>\n<li>土耳其（热气球）</li>\n<li><del>新西兰（打工度假）</del>[ 2016.06-2017.01 在新西兰打工度假半年]</li>\n<li>欧洲（在NZ遇到很多欧洲的小伙伴，看了《极简欧洲史》，想看看）</li>\n<li>美国（咖啡之旅）</li>\n<li>日本（干净）</li>\n</ul>\n<h2 id=\"欲望技能\"><a href=\"#欲望技能\" class=\"headerlink\" title=\"欲望技能\"></a>欲望技能</h2><ul>\n<li><del>英文一般好，够在旅游时候砍价、问路即可</del> [ 去了新西兰半年，一直讲英文，不算太流利，不过死不了 ^_^ ]</li>\n<li><del>开车（自行车、三轮车不算）</del>[ 2016年终于拿到驾照噜，在新西兰开过几次车；不过仍需练习~ ]</li>\n<li>四菜一汤，白饭任装（自己煮）</li>\n</ul>\n<h2 id=\"欲望人生\"><a href=\"#欲望人生\" class=\"headerlink\" title=\"欲望人生\"></a>欲望人生</h2><ul>\n<li>开家咖啡馆</li>\n<li>成为独立开发者</li>\n<li>找一个喜欢我和我喜欢的人，在亲人和好朋友的祝福下，平淡、健康、开心地过日子</li>\n<li>财务自由，做自己喜欢的事情/工作，不用为了三顿饱饭折腰</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/mount-cook.JPG\" alt=\"&quot;Mount Cook in New Zealand&quot;\"></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>博主：伍酱</p>\n<p>2017.05 - 至今，阿里巴巴CBU，前端开发<br>2016.06 - 2017.01，新西兰，打工度假<br>2013.06 - 2016.06，百度知识体系，前端开发<br>2009.09 - 2013.06，华南理工大学，软件工程本科</p>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><p>喜欢<strong>读书</strong>，一天看好几本，也能一本看好几天，但没沾到多少墨水，就一文盲；</p>\n<p>喜欢拍照，玩<strong>胶卷</strong>，但太懒了，没去过哪拍出一辑好片，现在还囤了几卷2012年的没拿去洗，醉了~</p>\n<p>喜欢<strong>理财</strong>，P2P、余额宝/理财通、股票/债券基金、A股、美股，什么都碰，就等着<strong>money</strong>翻个几十倍了~</p>\n<p>喜欢<strong>安静地写代码</strong>，准确的来说，是写自己的代码，让别人看去吧，哈哈……写出<strong>优雅的代码</strong>，这是一件所有程序猿都会觉得有成就感的事情吧；</p>\n<p>不怎么喜欢社交，<a href=\"http://www.wuyuying.com\" target=\"_blank\" rel=\"noopener\">blog</a>、<a href=\"http://www.weibo.com/wuyuying1128\" target=\"_blank\" rel=\"noopener\">weibo</a>、<a href=\"http://www.douban.com/people/wuyuying1128/\" target=\"_blank\" rel=\"noopener\">豆瓣</a>、微信（就先不暴露了）</p>\n<h2 id=\"欲望地图\"><a href=\"#欲望地图\" class=\"headerlink\" title=\"欲望地图\"></a>欲望地图</h2><ul>\n<li>圣托里尼（美）</li>\n<li>土耳其（热气球）</li>\n<li><del>新西兰（打工度假）</del>[ 2016.06-2017.01 在新西兰打工度假半年]</li>\n<li>欧洲（在NZ遇到很多欧洲的小伙伴，看了《极简欧洲史》，想看看）</li>\n<li>美国（咖啡之旅）</li>\n<li>日本（干净）</li>\n</ul>\n<h2 id=\"欲望技能\"><a href=\"#欲望技能\" class=\"headerlink\" title=\"欲望技能\"></a>欲望技能</h2><ul>\n<li><del>英文一般好，够在旅游时候砍价、问路即可</del> [ 去了新西兰半年，一直讲英文，不算太流利，不过死不了 ^_^ ]</li>\n<li><del>开车（自行车、三轮车不算）</del>[ 2016年终于拿到驾照噜，在新西兰开过几次车；不过仍需练习~ ]</li>\n<li>四菜一汤，白饭任装（自己煮）</li>\n</ul>\n<h2 id=\"欲望人生\"><a href=\"#欲望人生\" class=\"headerlink\" title=\"欲望人生\"></a>欲望人生</h2><ul>\n<li>开家咖啡馆</li>\n<li>成为独立开发者</li>\n<li>找一个喜欢我和我喜欢的人，在亲人和好朋友的祝福下，平淡、健康、开心地过日子</li>\n<li>财务自由，做自己喜欢的事情/工作，不用为了三顿饱饭折腰</li>\n</ul>\n"},{"title":"码字辛苦，求打赏","date":"2017-01-25T07:34:43.000Z","layout":"page","slug":"donate","_content":"\n如果你觉得读完本博之后有所收获，想要小额赞助我一杯咖啡；\n又或者就是那么壕，想要打赏的话~\n本站在这里专门开的一个**打赏**页，以供各位想要支持我的朋友使用（之前放在每篇日志下，觉得有碍体验，就撤了）\n\n***\n\n## 微信打赏\n\n1. 打开手机中的`微信`，扫一扫以下二维码\n2. 如果在`微信`中访问本页面，长按二维码图片，识别图中二维码\n3. 保存以下二维码到本地相册，在`微信`的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）\n\n<img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/wxpay.jpg\"/>\n\n***\n\n## 支付宝打赏\n\n1. 打开手机中的`支付宝`，扫一扫以下二维码\n2. 保存以下二维码到本地相册，在`支付宝`的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）\n\n<img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/alipay.jpg\"/>\n\n***\n\n如有任何疑问或需求，欢迎大家留言或者直接联系我，谢谢 :)\n[ 联系方式见<a href=\"#footer\">页脚</a> ^_^ ]","source":"donate.md","raw":"---\ntitle: 码字辛苦，求打赏\ndate: 2017-01-25 15:34:43\nlayout: page\nslug: donate\n---\n\n如果你觉得读完本博之后有所收获，想要小额赞助我一杯咖啡；\n又或者就是那么壕，想要打赏的话~\n本站在这里专门开的一个**打赏**页，以供各位想要支持我的朋友使用（之前放在每篇日志下，觉得有碍体验，就撤了）\n\n***\n\n## 微信打赏\n\n1. 打开手机中的`微信`，扫一扫以下二维码\n2. 如果在`微信`中访问本页面，长按二维码图片，识别图中二维码\n3. 保存以下二维码到本地相册，在`微信`的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）\n\n<img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/wxpay.jpg\"/>\n\n***\n\n## 支付宝打赏\n\n1. 打开手机中的`支付宝`，扫一扫以下二维码\n2. 保存以下二维码到本地相册，在`支付宝`的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）\n\n<img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/alipay.jpg\"/>\n\n***\n\n如有任何疑问或需求，欢迎大家留言或者直接联系我，谢谢 :)\n[ 联系方式见<a href=\"#footer\">页脚</a> ^_^ ]","updated":"2018-05-26T06:44:31.000Z","path":"donate.html","comments":1,"_id":"cjm4n1x6v0001zvr352qgbypi","content":"<p>如果你觉得读完本博之后有所收获，想要小额赞助我一杯咖啡；<br>又或者就是那么壕，想要打赏的话~<br>本站在这里专门开的一个<strong>打赏</strong>页，以供各位想要支持我的朋友使用（之前放在每篇日志下，觉得有碍体验，就撤了）</p>\n<hr>\n<h2 id=\"微信打赏\"><a href=\"#微信打赏\" class=\"headerlink\" title=\"微信打赏\"></a>微信打赏</h2><ol>\n<li>打开手机中的<code>微信</code>，扫一扫以下二维码</li>\n<li>如果在<code>微信</code>中访问本页面，长按二维码图片，识别图中二维码</li>\n<li>保存以下二维码到本地相册，在<code>微信</code>的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）</li>\n</ol>\n<p><img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/wxpay.jpg\"></p>\n<hr>\n<h2 id=\"支付宝打赏\"><a href=\"#支付宝打赏\" class=\"headerlink\" title=\"支付宝打赏\"></a>支付宝打赏</h2><ol>\n<li>打开手机中的<code>支付宝</code>，扫一扫以下二维码</li>\n<li>保存以下二维码到本地相册，在<code>支付宝</code>的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）</li>\n</ol>\n<p><img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/alipay.jpg\"></p>\n<hr>\n<p>如有任何疑问或需求，欢迎大家留言或者直接联系我，谢谢 :)<br>[ 联系方式见<a href=\"#footer\">页脚</a> ^_^ ]</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你觉得读完本博之后有所收获，想要小额赞助我一杯咖啡；<br>又或者就是那么壕，想要打赏的话~<br>本站在这里专门开的一个<strong>打赏</strong>页，以供各位想要支持我的朋友使用（之前放在每篇日志下，觉得有碍体验，就撤了）</p>\n<hr>\n<h2 id=\"微信打赏\"><a href=\"#微信打赏\" class=\"headerlink\" title=\"微信打赏\"></a>微信打赏</h2><ol>\n<li>打开手机中的<code>微信</code>，扫一扫以下二维码</li>\n<li>如果在<code>微信</code>中访问本页面，长按二维码图片，识别图中二维码</li>\n<li>保存以下二维码到本地相册，在<code>微信</code>的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）</li>\n</ol>\n<p><img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/wxpay.jpg\"></p>\n<hr>\n<h2 id=\"支付宝打赏\"><a href=\"#支付宝打赏\" class=\"headerlink\" title=\"支付宝打赏\"></a>支付宝打赏</h2><ol>\n<li>打开手机中的<code>支付宝</code>，扫一扫以下二维码</li>\n<li>保存以下二维码到本地相册，在<code>支付宝</code>的扫一扫中，选择“相册”的二维码进行打赏（嗷，很麻烦）</li>\n</ol>\n<p><img class=\"no-fancybox\" src=\"http://cdn.sinacloud.net/woodysblog/blog/alipay.jpg\"></p>\n<hr>\n<p>如有任何疑问或需求，欢迎大家留言或者直接联系我，谢谢 :)<br>[ 联系方式见<a href=\"#footer\">页脚</a> ^_^ ]</p>\n"},{"title":"Working Holiday Visa","date":"+020166-04-20T10:55:00.000Z","layout":"page","_content":"\n这是楼主2015年抢visa时，从官网上扒下的申请表以及自己做的一些快捷入口，希望分享给有需要的朋友。\n\n如有任何疑问或者对站点的建议，在下面留言板欢迎反馈给我哟~\n\n谢谢 :)\n","source":"whv.md","raw":"---\ntitle: Working Holiday Visa\ndate: 20166-04-20 18:55:00\nlayout: page\n---\n\n这是楼主2015年抢visa时，从官网上扒下的申请表以及自己做的一些快捷入口，希望分享给有需要的朋友。\n\n如有任何疑问或者对站点的建议，在下面留言板欢迎反馈给我哟~\n\n谢谢 :)\n","updated":"2018-05-26T06:44:31.000Z","path":"whv.html","comments":1,"_id":"cjm4n1x6x0002zvr348c8zl8s","content":"<p>这是楼主2015年抢visa时，从官网上扒下的申请表以及自己做的一些快捷入口，希望分享给有需要的朋友。</p>\n<p>如有任何疑问或者对站点的建议，在下面留言板欢迎反馈给我哟~</p>\n<p>谢谢 :)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是楼主2015年抢visa时，从官网上扒下的申请表以及自己做的一些快捷入口，希望分享给有需要的朋友。</p>\n<p>如有任何疑问或者对站点的建议，在下面留言板欢迎反馈给我哟~</p>\n<p>谢谢 :)</p>\n"}],"Post":[{"title":"2018，厦门","date":"2018-06-24T09:30:09.000Z","_content":"\n和小伙伴们的高中毕业旅行来过厦门，7年后再来这里，变化超大的，感觉跟印象中很不一样。在这次的旅途，和 @猩爷 解锁了很多新的地方和小吃店（尽管还是有些地方没有去，留下一点遗憾），吃逛吃逛，玩得挺轻松愉快的。\n\n今年的端午节休假，恰好去年的年假快过期了，顺便多休了4天，来到了海边的厦门。6.16到6.22，算是在厦门待了7天，时间相当充裕的（小豚表示他们拍婚纱照时间都没那么长，哈哈）。不过由于我事前没有做好攻略，前2天在中山路附近乱逛，算是废了，哈哈，幸好 @猩爷 后面做了比较靠谱的计划，我们的行程是这样的。\n\nDay 1，中山路周边，晚上看海；  \nDay 2，厦大，夜逛中山路；\nDay 3，八市菜市场，书店喝咖啡思考人生，海边吹风；  \nDay 4，南普陀爬坡，沙坡尾拍照、喝咖啡，铁道公园，和厦门的好朋友 @小豚 聚餐，晚上环岛路吹海风。暴走3w步的一天，终于占领了微信运动的封面。  \nDay 5，鼓浪屿，吃姜母鸭，晚上海边吹风；  \nDay 6，再去中山路，吃沙茶面，到阿吉仔买饼，回曾厝垵逛逛，旅程结束前的休息日，晚上海边吹风；  \nDay 7，雨超大，睡到自然醒，坐高铁回杭州。\n\n![](http://sinacloud.net/woodysblog/xiamen-2018/DSC07441.jpg)\n\nBy the way，每一部分提到的小食，不一定是好评的哈，吃了不少坑，文末的《美食指南》会有评分和“避坑指南”，哈哈。\n\n## 中山路周边\n\n> 中山路，去厦门旅游的人没有不知道的吧，游客签到点，吃的喝的很多，本地小食、大排档、手信一条街。\n\n从青旅check-in之后，好饿好饿，赶紧吃个沙茶面和八婆婆烧仙草。\n\n青旅附近的老字号大中沙茶面，￥25一碗。\n\n![\"大中沙茶面\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamiandian.jpg)\n\n![\"沙茶面\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamian.jpg)\n\n先来八婆婆买杯烧仙草，7块一杯的蜂蜜/奶茶烧仙草，太有性价比了，味道又好，几乎每天都要买一杯，超满足。\n\n![\"八婆婆烧仙草\"](http://sinacloud.net/woodysblog/xiamen-2018/bapopo.jpg)\n\n![\"烧仙草本草\"](http://sinacloud.net/woodysblog/xiamen-2018/shaoxiancao.jpg)\n\n晚餐后，天还没黑，赶紧来海边看一会海，吹吹海风。\n\n![\"中山路出来的海边\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanroad_harbor.jpg)\n\n![\"轮渡\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_lundu.JPG)\n\n快要离开码头的时候，可能快要下雨了，夕阳特别美。\n\n![\"日落\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_sunset.JPG)\n\n中山路有一间新华书店，刚好碰到上面的茶馆新开张搞活动，有闽南的南音表演，就上去看了一下，挺有意思的。\n\n![\"闽南南音\"](http://sinacloud.net/woodysblog/xiamen-2018/nanyin.jpg)\n\n晚上的中山路，比较凉快和舒服，吹着风，开启“压马路”模式。\n\n![\"中山路夜市\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_nightMarket.jpg)\n\n## 厦门大学\n\n## 八市\n\n## 南普陀\n\n## 沙坡尾\n\n## 铁道公园\n\n## 鼓浪屿\n\n这次来到厦门，感觉变化最大的是去鼓浪屿的轮渡。\n\n7年前，在中山路附近有个码头，随时可以从出发，8块来回。\n\n7年后的今天，35块往返，还要提前买票，分各个时间段，好点的时间（8点半到10点半的票）基本要提前2天买，不然只能8点或者11点后再出发了。白天也不能从中山路对面的码头出发或回程（晚上6点半后可以），而白天对游客开放的邮轮中心夏鼓码头，离中山路和曾厝垵都有一段距离，要提前点出发。\n\n## 想和你一起吹吹风\n\n## 吃吃吃","source":"_drafts/xiamen-2018.md","raw":"---\ntitle: 2018，厦门\ndate: 2018-06-24 17:30:09\ntags:\n- travel\n---\n\n和小伙伴们的高中毕业旅行来过厦门，7年后再来这里，变化超大的，感觉跟印象中很不一样。在这次的旅途，和 @猩爷 解锁了很多新的地方和小吃店（尽管还是有些地方没有去，留下一点遗憾），吃逛吃逛，玩得挺轻松愉快的。\n\n今年的端午节休假，恰好去年的年假快过期了，顺便多休了4天，来到了海边的厦门。6.16到6.22，算是在厦门待了7天，时间相当充裕的（小豚表示他们拍婚纱照时间都没那么长，哈哈）。不过由于我事前没有做好攻略，前2天在中山路附近乱逛，算是废了，哈哈，幸好 @猩爷 后面做了比较靠谱的计划，我们的行程是这样的。\n\nDay 1，中山路周边，晚上看海；  \nDay 2，厦大，夜逛中山路；\nDay 3，八市菜市场，书店喝咖啡思考人生，海边吹风；  \nDay 4，南普陀爬坡，沙坡尾拍照、喝咖啡，铁道公园，和厦门的好朋友 @小豚 聚餐，晚上环岛路吹海风。暴走3w步的一天，终于占领了微信运动的封面。  \nDay 5，鼓浪屿，吃姜母鸭，晚上海边吹风；  \nDay 6，再去中山路，吃沙茶面，到阿吉仔买饼，回曾厝垵逛逛，旅程结束前的休息日，晚上海边吹风；  \nDay 7，雨超大，睡到自然醒，坐高铁回杭州。\n\n![](http://sinacloud.net/woodysblog/xiamen-2018/DSC07441.jpg)\n\nBy the way，每一部分提到的小食，不一定是好评的哈，吃了不少坑，文末的《美食指南》会有评分和“避坑指南”，哈哈。\n\n## 中山路周边\n\n> 中山路，去厦门旅游的人没有不知道的吧，游客签到点，吃的喝的很多，本地小食、大排档、手信一条街。\n\n从青旅check-in之后，好饿好饿，赶紧吃个沙茶面和八婆婆烧仙草。\n\n青旅附近的老字号大中沙茶面，￥25一碗。\n\n![\"大中沙茶面\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamiandian.jpg)\n\n![\"沙茶面\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamian.jpg)\n\n先来八婆婆买杯烧仙草，7块一杯的蜂蜜/奶茶烧仙草，太有性价比了，味道又好，几乎每天都要买一杯，超满足。\n\n![\"八婆婆烧仙草\"](http://sinacloud.net/woodysblog/xiamen-2018/bapopo.jpg)\n\n![\"烧仙草本草\"](http://sinacloud.net/woodysblog/xiamen-2018/shaoxiancao.jpg)\n\n晚餐后，天还没黑，赶紧来海边看一会海，吹吹海风。\n\n![\"中山路出来的海边\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanroad_harbor.jpg)\n\n![\"轮渡\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_lundu.JPG)\n\n快要离开码头的时候，可能快要下雨了，夕阳特别美。\n\n![\"日落\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_sunset.JPG)\n\n中山路有一间新华书店，刚好碰到上面的茶馆新开张搞活动，有闽南的南音表演，就上去看了一下，挺有意思的。\n\n![\"闽南南音\"](http://sinacloud.net/woodysblog/xiamen-2018/nanyin.jpg)\n\n晚上的中山路，比较凉快和舒服，吹着风，开启“压马路”模式。\n\n![\"中山路夜市\"](http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_nightMarket.jpg)\n\n## 厦门大学\n\n## 八市\n\n## 南普陀\n\n## 沙坡尾\n\n## 铁道公园\n\n## 鼓浪屿\n\n这次来到厦门，感觉变化最大的是去鼓浪屿的轮渡。\n\n7年前，在中山路附近有个码头，随时可以从出发，8块来回。\n\n7年后的今天，35块往返，还要提前买票，分各个时间段，好点的时间（8点半到10点半的票）基本要提前2天买，不然只能8点或者11点后再出发了。白天也不能从中山路对面的码头出发或回程（晚上6点半后可以），而白天对游客开放的邮轮中心夏鼓码头，离中山路和曾厝垵都有一段距离，要提前点出发。\n\n## 想和你一起吹吹风\n\n## 吃吃吃","slug":"xiamen-2018","published":0,"updated":"2018-06-26T13:31:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x7q0003zvr3rfkb21ws","content":"<p>和小伙伴们的高中毕业旅行来过厦门，7年后再来这里，变化超大的，感觉跟印象中很不一样。在这次的旅途，和 @猩爷 解锁了很多新的地方和小吃店（尽管还是有些地方没有去，留下一点遗憾），吃逛吃逛，玩得挺轻松愉快的。</p>\n<p>今年的端午节休假，恰好去年的年假快过期了，顺便多休了4天，来到了海边的厦门。6.16到6.22，算是在厦门待了7天，时间相当充裕的（小豚表示他们拍婚纱照时间都没那么长，哈哈）。不过由于我事前没有做好攻略，前2天在中山路附近乱逛，算是废了，哈哈，幸好 @猩爷 后面做了比较靠谱的计划，我们的行程是这样的。</p>\n<p>Day 1，中山路周边，晚上看海；<br>Day 2，厦大，夜逛中山路；<br>Day 3，八市菜市场，书店喝咖啡思考人生，海边吹风；<br>Day 4，南普陀爬坡，沙坡尾拍照、喝咖啡，铁道公园，和厦门的好朋友 @小豚 聚餐，晚上环岛路吹海风。暴走3w步的一天，终于占领了微信运动的封面。<br>Day 5，鼓浪屿，吃姜母鸭，晚上海边吹风；<br>Day 6，再去中山路，吃沙茶面，到阿吉仔买饼，回曾厝垵逛逛，旅程结束前的休息日，晚上海边吹风；<br>Day 7，雨超大，睡到自然醒，坐高铁回杭州。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/DSC07441.jpg\" alt=\"\"></p>\n<p>By the way，每一部分提到的小食，不一定是好评的哈，吃了不少坑，文末的《美食指南》会有评分和“避坑指南”，哈哈。</p>\n<h2 id=\"中山路周边\"><a href=\"#中山路周边\" class=\"headerlink\" title=\"中山路周边\"></a>中山路周边</h2><blockquote>\n<p>中山路，去厦门旅游的人没有不知道的吧，游客签到点，吃的喝的很多，本地小食、大排档、手信一条街。</p>\n</blockquote>\n<p>从青旅check-in之后，好饿好饿，赶紧吃个沙茶面和八婆婆烧仙草。</p>\n<p>青旅附近的老字号大中沙茶面，￥25一碗。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamiandian.jpg\" alt=\"&quot;大中沙茶面&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamian.jpg\" alt=\"&quot;沙茶面&quot;\"></p>\n<p>先来八婆婆买杯烧仙草，7块一杯的蜂蜜/奶茶烧仙草，太有性价比了，味道又好，几乎每天都要买一杯，超满足。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/bapopo.jpg\" alt=\"&quot;八婆婆烧仙草&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/shaoxiancao.jpg\" alt=\"&quot;烧仙草本草&quot;\"></p>\n<p>晚餐后，天还没黑，赶紧来海边看一会海，吹吹海风。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanroad_harbor.jpg\" alt=\"&quot;中山路出来的海边&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_lundu.JPG\" alt=\"&quot;轮渡&quot;\"></p>\n<p>快要离开码头的时候，可能快要下雨了，夕阳特别美。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_sunset.JPG\" alt=\"&quot;日落&quot;\"></p>\n<p>中山路有一间新华书店，刚好碰到上面的茶馆新开张搞活动，有闽南的南音表演，就上去看了一下，挺有意思的。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/nanyin.jpg\" alt=\"&quot;闽南南音&quot;\"></p>\n<p>晚上的中山路，比较凉快和舒服，吹着风，开启“压马路”模式。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_nightMarket.jpg\" alt=\"&quot;中山路夜市&quot;\"></p>\n<h2 id=\"厦门大学\"><a href=\"#厦门大学\" class=\"headerlink\" title=\"厦门大学\"></a>厦门大学</h2><h2 id=\"八市\"><a href=\"#八市\" class=\"headerlink\" title=\"八市\"></a>八市</h2><h2 id=\"南普陀\"><a href=\"#南普陀\" class=\"headerlink\" title=\"南普陀\"></a>南普陀</h2><h2 id=\"沙坡尾\"><a href=\"#沙坡尾\" class=\"headerlink\" title=\"沙坡尾\"></a>沙坡尾</h2><h2 id=\"铁道公园\"><a href=\"#铁道公园\" class=\"headerlink\" title=\"铁道公园\"></a>铁道公园</h2><h2 id=\"鼓浪屿\"><a href=\"#鼓浪屿\" class=\"headerlink\" title=\"鼓浪屿\"></a>鼓浪屿</h2><p>这次来到厦门，感觉变化最大的是去鼓浪屿的轮渡。</p>\n<p>7年前，在中山路附近有个码头，随时可以从出发，8块来回。</p>\n<p>7年后的今天，35块往返，还要提前买票，分各个时间段，好点的时间（8点半到10点半的票）基本要提前2天买，不然只能8点或者11点后再出发了。白天也不能从中山路对面的码头出发或回程（晚上6点半后可以），而白天对游客开放的邮轮中心夏鼓码头，离中山路和曾厝垵都有一段距离，要提前点出发。</p>\n<h2 id=\"想和你一起吹吹风\"><a href=\"#想和你一起吹吹风\" class=\"headerlink\" title=\"想和你一起吹吹风\"></a>想和你一起吹吹风</h2><h2 id=\"吃吃吃\"><a href=\"#吃吃吃\" class=\"headerlink\" title=\"吃吃吃\"></a>吃吃吃</h2>","site":{"data":{}},"excerpt":"","more":"<p>和小伙伴们的高中毕业旅行来过厦门，7年后再来这里，变化超大的，感觉跟印象中很不一样。在这次的旅途，和 @猩爷 解锁了很多新的地方和小吃店（尽管还是有些地方没有去，留下一点遗憾），吃逛吃逛，玩得挺轻松愉快的。</p>\n<p>今年的端午节休假，恰好去年的年假快过期了，顺便多休了4天，来到了海边的厦门。6.16到6.22，算是在厦门待了7天，时间相当充裕的（小豚表示他们拍婚纱照时间都没那么长，哈哈）。不过由于我事前没有做好攻略，前2天在中山路附近乱逛，算是废了，哈哈，幸好 @猩爷 后面做了比较靠谱的计划，我们的行程是这样的。</p>\n<p>Day 1，中山路周边，晚上看海；<br>Day 2，厦大，夜逛中山路；<br>Day 3，八市菜市场，书店喝咖啡思考人生，海边吹风；<br>Day 4，南普陀爬坡，沙坡尾拍照、喝咖啡，铁道公园，和厦门的好朋友 @小豚 聚餐，晚上环岛路吹海风。暴走3w步的一天，终于占领了微信运动的封面。<br>Day 5，鼓浪屿，吃姜母鸭，晚上海边吹风；<br>Day 6，再去中山路，吃沙茶面，到阿吉仔买饼，回曾厝垵逛逛，旅程结束前的休息日，晚上海边吹风；<br>Day 7，雨超大，睡到自然醒，坐高铁回杭州。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/DSC07441.jpg\" alt=\"\"></p>\n<p>By the way，每一部分提到的小食，不一定是好评的哈，吃了不少坑，文末的《美食指南》会有评分和“避坑指南”，哈哈。</p>\n<h2 id=\"中山路周边\"><a href=\"#中山路周边\" class=\"headerlink\" title=\"中山路周边\"></a>中山路周边</h2><blockquote>\n<p>中山路，去厦门旅游的人没有不知道的吧，游客签到点，吃的喝的很多，本地小食、大排档、手信一条街。</p>\n</blockquote>\n<p>从青旅check-in之后，好饿好饿，赶紧吃个沙茶面和八婆婆烧仙草。</p>\n<p>青旅附近的老字号大中沙茶面，￥25一碗。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamiandian.jpg\" alt=\"&quot;大中沙茶面&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_shachamian.jpg\" alt=\"&quot;沙茶面&quot;\"></p>\n<p>先来八婆婆买杯烧仙草，7块一杯的蜂蜜/奶茶烧仙草，太有性价比了，味道又好，几乎每天都要买一杯，超满足。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/bapopo.jpg\" alt=\"&quot;八婆婆烧仙草&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/shaoxiancao.jpg\" alt=\"&quot;烧仙草本草&quot;\"></p>\n<p>晚餐后，天还没黑，赶紧来海边看一会海，吹吹海风。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanroad_harbor.jpg\" alt=\"&quot;中山路出来的海边&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_lundu.JPG\" alt=\"&quot;轮渡&quot;\"></p>\n<p>快要离开码头的时候，可能快要下雨了，夕阳特别美。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_sunset.JPG\" alt=\"&quot;日落&quot;\"></p>\n<p>中山路有一间新华书店，刚好碰到上面的茶馆新开张搞活动，有闽南的南音表演，就上去看了一下，挺有意思的。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/nanyin.jpg\" alt=\"&quot;闽南南音&quot;\"></p>\n<p>晚上的中山路，比较凉快和舒服，吹着风，开启“压马路”模式。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/xiamen-2018/zhongshanRoad_nightMarket.jpg\" alt=\"&quot;中山路夜市&quot;\"></p>\n<h2 id=\"厦门大学\"><a href=\"#厦门大学\" class=\"headerlink\" title=\"厦门大学\"></a>厦门大学</h2><h2 id=\"八市\"><a href=\"#八市\" class=\"headerlink\" title=\"八市\"></a>八市</h2><h2 id=\"南普陀\"><a href=\"#南普陀\" class=\"headerlink\" title=\"南普陀\"></a>南普陀</h2><h2 id=\"沙坡尾\"><a href=\"#沙坡尾\" class=\"headerlink\" title=\"沙坡尾\"></a>沙坡尾</h2><h2 id=\"铁道公园\"><a href=\"#铁道公园\" class=\"headerlink\" title=\"铁道公园\"></a>铁道公园</h2><h2 id=\"鼓浪屿\"><a href=\"#鼓浪屿\" class=\"headerlink\" title=\"鼓浪屿\"></a>鼓浪屿</h2><p>这次来到厦门，感觉变化最大的是去鼓浪屿的轮渡。</p>\n<p>7年前，在中山路附近有个码头，随时可以从出发，8块来回。</p>\n<p>7年后的今天，35块往返，还要提前买票，分各个时间段，好点的时间（8点半到10点半的票）基本要提前2天买，不然只能8点或者11点后再出发了。白天也不能从中山路对面的码头出发或回程（晚上6点半后可以），而白天对游客开放的邮轮中心夏鼓码头，离中山路和曾厝垵都有一段距离，要提前点出发。</p>\n<h2 id=\"想和你一起吹吹风\"><a href=\"#想和你一起吹吹风\" class=\"headerlink\" title=\"想和你一起吹吹风\"></a>想和你一起吹吹风</h2><h2 id=\"吃吃吃\"><a href=\"#吃吃吃\" class=\"headerlink\" title=\"吃吃吃\"></a>吃吃吃</h2>"},{"title":"2014经验小伙伴的圣诞节","id":"68","date":"2014-12-26T12:06:18.000Z","_content":"\n今年的圣诞节很有意思，玩起“交换礼物”的游戏，瞬间回到学生时代：\n\n![cake](http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/1.jpg)\n<!--more-->\n\n可能经验的女生比较多吧，哈哈，比较搞笑，气氛很好，点32个赞；\n\n![hezhao](http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/hezhao.jpg)\n\n太开心~\n","source":"_posts/2014-exp-xmas.md","raw":"---\ntitle: 2014经验小伙伴的圣诞节\ntags:\n  - life\nid: 68\ncategories:\n  - life\ndate: 2014-12-26 20:06:18\n---\n\n今年的圣诞节很有意思，玩起“交换礼物”的游戏，瞬间回到学生时代：\n\n![cake](http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/1.jpg)\n<!--more-->\n\n可能经验的女生比较多吧，哈哈，比较搞笑，气氛很好，点32个赞；\n\n![hezhao](http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/hezhao.jpg)\n\n太开心~\n","slug":"2014-exp-xmas","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x7t0004zvr333bdsf78","content":"<p>今年的圣诞节很有意思，玩起“交换礼物”的游戏，瞬间回到学生时代：</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/1.jpg\" alt=\"cake\"><br><a id=\"more\"></a></p>\n<p>可能经验的女生比较多吧，哈哈，比较搞笑，气氛很好，点32个赞；</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/hezhao.jpg\" alt=\"hezhao\"></p>\n<p>太开心~</p>\n","site":{"data":{}},"excerpt":"<p>今年的圣诞节很有意思，玩起“交换礼物”的游戏，瞬间回到学生时代：</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/1.jpg\" alt=\"cake\"><br>","more":"</p>\n<p>可能经验的女生比较多吧，哈哈，比较搞笑，气氛很好，点32个赞；</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2014-exp-xmas/hezhao.jpg\" alt=\"hezhao\"></p>\n<p>太开心~</p>"},{"title":"7cake的那些事儿","id":"178","date":"2015-12-04T15:48:19.000Z","_content":"\n最近在帮七姐姐的蛋糕小作坊**7Cake**做[wap页面](http://wuyuyingsvn.sinaapp.com/7cake/index.html#/)，方便日常给客户推广和在微信等平台传播。\n\n该项目放在github上面，直接开源，嘎嘎，有问题也欢迎fork：[hi5-studio/7cake](https://github.com/hi5-studio/7cake)\n<!--more-->\n![](http://cdn.sinacloud.net/woodysblog/7cake/7cake.png \"7cake-设计稿\") Designed By @猩爷\n\n废话不多说，简单聊一下7cake站点的一些技术设计吧。\n\n* * *\n\n## 前端架构（FIS3 Angular + Zepto.js）\n\n作为FEX的粉丝，7cake必须用fis架构，想用single page application，于是选用了fis3 + angular，FIS团队还对angular的静态资源做了优化，支持了异步加载的静态文件，访问页面时才加载所需静态资源，棒！不过平时用fis2比较多，fis3的配置比较不一样，一直也没花时间仔细看fis3配置的官方文档，目前7cake的配置还用的fis3 angular demo的简单配置，后续再加上相关文件打包、图片合并策略吧。\n\n## 后端\n\n第一次用传说中的BaaS，毫无违和感，使用了[LeanCloud](https://leancloud.cn)的服务，提供了[javascript SDK](https://leancloud.cn/docs/js_guide.html)，只需要注册个账号，在页面引用他们家的库再初始化些token啥的，就可以用api增删改查各种数据，管理后台用着也蛮不错的，跟自己平时写的mis差不多。\n\n唯一不够流畅的，可能是后台风格偏geek，直接给数据库写字符串、object、上传文件，给没有编程背景的小伙伴讲解用法时稍稍费劲了点，不过也不难，嘿嘿，小成本页面直接用这个，免费的流量够用了（每个开发者账户每月享有100万次免费请求，超出后0.50元/万次），节省不少工作量，新项目快速搞起！\n\n* * *\n\n[![](http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png \"数据结构\")](http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png)\n\n之前做过知道/经验的商城、百度师傅的项目，对偏电商类型的页面逻辑有一点点了解，对于简单的页面实现和数据库设计，没有什么问题，不过后面还有以下的问题需要考虑：\n\n*   配置问题：静态资源请求优化、图片合并（现在pack图片会错乱 Orz~）、代码上线/部署自动化\n*   价格模板：3种类型的价格模板，根据type来区别渲染模板（前端模板baidutemplate），每添加一种type都是人肉添加相应模板结构，扩展性怎么破？\n*   模板渲染：由于用的是leancloud的JS SDK，所有数据都来自异步接口，网速情况差时，页面加载速度会很慢；另外，query获取全部的蛋糕信息列表，目前还在用js先拿到全部的数据，遍历根据cid赋值给N个数组，再利用对应数据遍历渲染模板，SDK应该有提供类似sort的接口，再看看文档吧，不要在js里做这件事啦~\n","source":"_posts/7cake.md","raw":"---\ntitle: 7cake的那些事儿\ntags:\n  - tech\n  - work\nid: 178\ncategories:\n  - tech\n  - work\ndate: 2015-12-04 23:48:19\n---\n\n最近在帮七姐姐的蛋糕小作坊**7Cake**做[wap页面](http://wuyuyingsvn.sinaapp.com/7cake/index.html#/)，方便日常给客户推广和在微信等平台传播。\n\n该项目放在github上面，直接开源，嘎嘎，有问题也欢迎fork：[hi5-studio/7cake](https://github.com/hi5-studio/7cake)\n<!--more-->\n![](http://cdn.sinacloud.net/woodysblog/7cake/7cake.png \"7cake-设计稿\") Designed By @猩爷\n\n废话不多说，简单聊一下7cake站点的一些技术设计吧。\n\n* * *\n\n## 前端架构（FIS3 Angular + Zepto.js）\n\n作为FEX的粉丝，7cake必须用fis架构，想用single page application，于是选用了fis3 + angular，FIS团队还对angular的静态资源做了优化，支持了异步加载的静态文件，访问页面时才加载所需静态资源，棒！不过平时用fis2比较多，fis3的配置比较不一样，一直也没花时间仔细看fis3配置的官方文档，目前7cake的配置还用的fis3 angular demo的简单配置，后续再加上相关文件打包、图片合并策略吧。\n\n## 后端\n\n第一次用传说中的BaaS，毫无违和感，使用了[LeanCloud](https://leancloud.cn)的服务，提供了[javascript SDK](https://leancloud.cn/docs/js_guide.html)，只需要注册个账号，在页面引用他们家的库再初始化些token啥的，就可以用api增删改查各种数据，管理后台用着也蛮不错的，跟自己平时写的mis差不多。\n\n唯一不够流畅的，可能是后台风格偏geek，直接给数据库写字符串、object、上传文件，给没有编程背景的小伙伴讲解用法时稍稍费劲了点，不过也不难，嘿嘿，小成本页面直接用这个，免费的流量够用了（每个开发者账户每月享有100万次免费请求，超出后0.50元/万次），节省不少工作量，新项目快速搞起！\n\n* * *\n\n[![](http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png \"数据结构\")](http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png)\n\n之前做过知道/经验的商城、百度师傅的项目，对偏电商类型的页面逻辑有一点点了解，对于简单的页面实现和数据库设计，没有什么问题，不过后面还有以下的问题需要考虑：\n\n*   配置问题：静态资源请求优化、图片合并（现在pack图片会错乱 Orz~）、代码上线/部署自动化\n*   价格模板：3种类型的价格模板，根据type来区别渲染模板（前端模板baidutemplate），每添加一种type都是人肉添加相应模板结构，扩展性怎么破？\n*   模板渲染：由于用的是leancloud的JS SDK，所有数据都来自异步接口，网速情况差时，页面加载速度会很慢；另外，query获取全部的蛋糕信息列表，目前还在用js先拿到全部的数据，遍历根据cid赋值给N个数组，再利用对应数据遍历渲染模板，SDK应该有提供类似sort的接口，再看看文档吧，不要在js里做这件事啦~\n","slug":"7cake","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x7x0006zvr3t5rvbpoc","content":"<p>最近在帮七姐姐的蛋糕小作坊<strong>7Cake</strong>做<a href=\"http://wuyuyingsvn.sinaapp.com/7cake/index.html#/\" target=\"_blank\" rel=\"noopener\">wap页面</a>，方便日常给客户推广和在微信等平台传播。</p>\n<p>该项目放在github上面，直接开源，嘎嘎，有问题也欢迎fork：<a href=\"https://github.com/hi5-studio/7cake\" target=\"_blank\" rel=\"noopener\">hi5-studio/7cake</a><br><a id=\"more\"></a><br><img src=\"http://cdn.sinacloud.net/woodysblog/7cake/7cake.png\" alt=\"\" title=\"7cake-设计稿\"> Designed By @猩爷</p>\n<p>废话不多说，简单聊一下7cake站点的一些技术设计吧。</p>\n<hr>\n<h2 id=\"前端架构（FIS3-Angular-Zepto-js）\"><a href=\"#前端架构（FIS3-Angular-Zepto-js）\" class=\"headerlink\" title=\"前端架构（FIS3 Angular + Zepto.js）\"></a>前端架构（FIS3 Angular + Zepto.js）</h2><p>作为FEX的粉丝，7cake必须用fis架构，想用single page application，于是选用了fis3 + angular，FIS团队还对angular的静态资源做了优化，支持了异步加载的静态文件，访问页面时才加载所需静态资源，棒！不过平时用fis2比较多，fis3的配置比较不一样，一直也没花时间仔细看fis3配置的官方文档，目前7cake的配置还用的fis3 angular demo的简单配置，后续再加上相关文件打包、图片合并策略吧。</p>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><p>第一次用传说中的BaaS，毫无违和感，使用了<a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>的服务，提供了<a href=\"https://leancloud.cn/docs/js_guide.html\" target=\"_blank\" rel=\"noopener\">javascript SDK</a>，只需要注册个账号，在页面引用他们家的库再初始化些token啥的，就可以用api增删改查各种数据，管理后台用着也蛮不错的，跟自己平时写的mis差不多。</p>\n<p>唯一不够流畅的，可能是后台风格偏geek，直接给数据库写字符串、object、上传文件，给没有编程背景的小伙伴讲解用法时稍稍费劲了点，不过也不难，嘿嘿，小成本页面直接用这个，免费的流量够用了（每个开发者账户每月享有100万次免费请求，超出后0.50元/万次），节省不少工作量，新项目快速搞起！</p>\n<hr>\n<p><a href=\"http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png\" alt=\"\" title=\"数据结构\"></a></p>\n<p>之前做过知道/经验的商城、百度师傅的项目，对偏电商类型的页面逻辑有一点点了解，对于简单的页面实现和数据库设计，没有什么问题，不过后面还有以下的问题需要考虑：</p>\n<ul>\n<li>配置问题：静态资源请求优化、图片合并（现在pack图片会错乱 Orz~）、代码上线/部署自动化</li>\n<li>价格模板：3种类型的价格模板，根据type来区别渲染模板（前端模板baidutemplate），每添加一种type都是人肉添加相应模板结构，扩展性怎么破？</li>\n<li>模板渲染：由于用的是leancloud的JS SDK，所有数据都来自异步接口，网速情况差时，页面加载速度会很慢；另外，query获取全部的蛋糕信息列表，目前还在用js先拿到全部的数据，遍历根据cid赋值给N个数组，再利用对应数据遍历渲染模板，SDK应该有提供类似sort的接口，再看看文档吧，不要在js里做这件事啦~</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近在帮七姐姐的蛋糕小作坊<strong>7Cake</strong>做<a href=\"http://wuyuyingsvn.sinaapp.com/7cake/index.html#/\" target=\"_blank\" rel=\"noopener\">wap页面</a>，方便日常给客户推广和在微信等平台传播。</p>\n<p>该项目放在github上面，直接开源，嘎嘎，有问题也欢迎fork：<a href=\"https://github.com/hi5-studio/7cake\" target=\"_blank\" rel=\"noopener\">hi5-studio/7cake</a><br>","more":"<br><img src=\"http://cdn.sinacloud.net/woodysblog/7cake/7cake.png\" alt=\"\" title=\"7cake-设计稿\"> Designed By @猩爷</p>\n<p>废话不多说，简单聊一下7cake站点的一些技术设计吧。</p>\n<hr>\n<h2 id=\"前端架构（FIS3-Angular-Zepto-js）\"><a href=\"#前端架构（FIS3-Angular-Zepto-js）\" class=\"headerlink\" title=\"前端架构（FIS3 Angular + Zepto.js）\"></a>前端架构（FIS3 Angular + Zepto.js）</h2><p>作为FEX的粉丝，7cake必须用fis架构，想用single page application，于是选用了fis3 + angular，FIS团队还对angular的静态资源做了优化，支持了异步加载的静态文件，访问页面时才加载所需静态资源，棒！不过平时用fis2比较多，fis3的配置比较不一样，一直也没花时间仔细看fis3配置的官方文档，目前7cake的配置还用的fis3 angular demo的简单配置，后续再加上相关文件打包、图片合并策略吧。</p>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><p>第一次用传说中的BaaS，毫无违和感，使用了<a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>的服务，提供了<a href=\"https://leancloud.cn/docs/js_guide.html\" target=\"_blank\" rel=\"noopener\">javascript SDK</a>，只需要注册个账号，在页面引用他们家的库再初始化些token啥的，就可以用api增删改查各种数据，管理后台用着也蛮不错的，跟自己平时写的mis差不多。</p>\n<p>唯一不够流畅的，可能是后台风格偏geek，直接给数据库写字符串、object、上传文件，给没有编程背景的小伙伴讲解用法时稍稍费劲了点，不过也不难，嘿嘿，小成本页面直接用这个，免费的流量够用了（每个开发者账户每月享有100万次免费请求，超出后0.50元/万次），节省不少工作量，新项目快速搞起！</p>\n<hr>\n<p><a href=\"http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.sinacloud.net/woodysblog/7cake/Cake-structure.png\" alt=\"\" title=\"数据结构\"></a></p>\n<p>之前做过知道/经验的商城、百度师傅的项目，对偏电商类型的页面逻辑有一点点了解，对于简单的页面实现和数据库设计，没有什么问题，不过后面还有以下的问题需要考虑：</p>\n<ul>\n<li>配置问题：静态资源请求优化、图片合并（现在pack图片会错乱 Orz~）、代码上线/部署自动化</li>\n<li>价格模板：3种类型的价格模板，根据type来区别渲染模板（前端模板baidutemplate），每添加一种type都是人肉添加相应模板结构，扩展性怎么破？</li>\n<li>模板渲染：由于用的是leancloud的JS SDK，所有数据都来自异步接口，网速情况差时，页面加载速度会很慢；另外，query获取全部的蛋糕信息列表，目前还在用js先拿到全部的数据，遍历根据cid赋值给N个数组，再利用对应数据遍历渲染模板，SDK应该有提供类似sort的接口，再看看文档吧，不要在js里做这件事啦~</li>\n</ul>"},{"title":"2017年Web开发者的技能蓝图","type":"title","date":"2017-04-22T13:54:29.000Z","_content":"\n在Medium看到一篇文章，分享了github网友<a href=\"https://github.com/kamranahmedse\" target=\"_blank\">@kamranahmedse</a>发布的<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\">developer-roadmap</a>。\n\n非常有意思，自己记录一下，也顺便跟大家分享~\n\n大致分为3个发展方向，前端、后端和运维。\n2017年，作为一枚web开发人员，roadmap提到的技术，你都了解么 ：）\n\n![\"web developer\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/web-developer.png)\n\n***\n\n## front-end\n\n![\"front-end developer roadmap in 2017\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/front-end.png)\n\n***\n\n## back-end\n\n![\"back-end developer roadmap in 2017\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/back-end.png)\n\n***\n\n## devOps\n\n![\"dev-ops developer roadmap in 2017\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/devOps.png)\n\n","source":"_posts/2017-roadmap.md","raw":"---\ntitle: 2017年Web开发者的技能蓝图\ntype: title\ndate: 2017-04-22 21:54:29\ntags:\n- front-end\n- back-end\n- devops\n- roadmap\n---\n\n在Medium看到一篇文章，分享了github网友<a href=\"https://github.com/kamranahmedse\" target=\"_blank\">@kamranahmedse</a>发布的<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\">developer-roadmap</a>。\n\n非常有意思，自己记录一下，也顺便跟大家分享~\n\n大致分为3个发展方向，前端、后端和运维。\n2017年，作为一枚web开发人员，roadmap提到的技术，你都了解么 ：）\n\n![\"web developer\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/web-developer.png)\n\n***\n\n## front-end\n\n![\"front-end developer roadmap in 2017\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/front-end.png)\n\n***\n\n## back-end\n\n![\"back-end developer roadmap in 2017\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/back-end.png)\n\n***\n\n## devOps\n\n![\"dev-ops developer roadmap in 2017\"](http://sinacloud.net/woodysblog/2017-web-dev-roadmap/devOps.png)\n\n","slug":"2017-roadmap","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x7z0008zvr3rlkyfuww","content":"<p>在Medium看到一篇文章，分享了github网友<a href=\"https://github.com/kamranahmedse\" target=\"_blank\">@kamranahmedse</a>发布的<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\">developer-roadmap</a>。</p>\n<p>非常有意思，自己记录一下，也顺便跟大家分享~</p>\n<p>大致分为3个发展方向，前端、后端和运维。<br>2017年，作为一枚web开发人员，roadmap提到的技术，你都了解么 ：）</p>\n<p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/web-developer.png\" alt=\"&quot;web developer&quot;\"></p>\n<hr>\n<h2 id=\"front-end\"><a href=\"#front-end\" class=\"headerlink\" title=\"front-end\"></a>front-end</h2><p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/front-end.png\" alt=\"&quot;front-end developer roadmap in 2017&quot;\"></p>\n<hr>\n<h2 id=\"back-end\"><a href=\"#back-end\" class=\"headerlink\" title=\"back-end\"></a>back-end</h2><p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/back-end.png\" alt=\"&quot;back-end developer roadmap in 2017&quot;\"></p>\n<hr>\n<h2 id=\"devOps\"><a href=\"#devOps\" class=\"headerlink\" title=\"devOps\"></a>devOps</h2><p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/devOps.png\" alt=\"&quot;dev-ops developer roadmap in 2017&quot;\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在Medium看到一篇文章，分享了github网友<a href=\"https://github.com/kamranahmedse\" target=\"_blank\">@kamranahmedse</a>发布的<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\">developer-roadmap</a>。</p>\n<p>非常有意思，自己记录一下，也顺便跟大家分享~</p>\n<p>大致分为3个发展方向，前端、后端和运维。<br>2017年，作为一枚web开发人员，roadmap提到的技术，你都了解么 ：）</p>\n<p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/web-developer.png\" alt=\"&quot;web developer&quot;\"></p>\n<hr>\n<h2 id=\"front-end\"><a href=\"#front-end\" class=\"headerlink\" title=\"front-end\"></a>front-end</h2><p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/front-end.png\" alt=\"&quot;front-end developer roadmap in 2017&quot;\"></p>\n<hr>\n<h2 id=\"back-end\"><a href=\"#back-end\" class=\"headerlink\" title=\"back-end\"></a>back-end</h2><p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/back-end.png\" alt=\"&quot;back-end developer roadmap in 2017&quot;\"></p>\n<hr>\n<h2 id=\"devOps\"><a href=\"#devOps\" class=\"headerlink\" title=\"devOps\"></a>devOps</h2><p><img src=\"http://sinacloud.net/woodysblog/2017-web-dev-roadmap/devOps.png\" alt=\"&quot;dev-ops developer roadmap in 2017&quot;\"></p>\n"},{"title":"Behavior Driven Development in ReactJS","date":"2018-06-02T12:13:25.000Z","_content":"\n> 如果想跳过前文，可以直接定位到[实战篇](/blog/archives/test-driven-dev/#我的实战)\n\n## What is Test Driven Development?\n\nCoding of features and tests go hand in hand.\n\n1. Write a unit test.\n2. Run the test. See it fail.\n3. Write the feature code to pass the test.\n4. Refactor the code.\n\n## Why TDD?\n\n* It reduces errors and defects in the long run.\n* It leads to higher quality code.\n\n## What is Behavior Driven Development?\n\n* A variation of TDD that tests for user scenarios.\n* Given, when, then... [ pattern ]\n* Given notes, when deleting, then remove a note.\n* BDD consists of scenarios/specifications.\n\n<!-- more -->\n\n## Test Tools\n\n* Jest\n* Enzyme\n\n> 如果想看create-react-app或jest/enzyme环境的配置，可以[定位到setup内容](#Setup)。\n\n## 我的实战\n\n项目中Jest and Enzyme的实战。\n\n### 1. 第一个Unit Test: `toMatchSnapshot`\n\n快照是Jest把调用时的component的结构记录下来，下次可以用来对比结构有没有差异。\n\n如果不一样，Jest会报错，如果是预期内的展示，可以按`u`把当前快照更新为最新的snapshot。\n\n```js\nit('render correctly', () => {\n  expect(app).toMatchSnapshot();\n});\n```\n\n### 2. 测试component的state\n\nstate的初始化检测 —— 状态`gifts`的值为空数组。\n\n```js\nit('init `state` for gifts as an empty list', () => {\n  expect(app.state().gifts).toEqual([]);\n});\n```\n\n注意：在jest中获得state是一个`state()`函数。\n\n### 3. 点击交互的测试\n\n通过className去查找交互元素，模拟用户行为，其中`simulate`是Enzyme提供的模拟函数。\n\n```js\nit('add a gift to `state` when click the `add` button', () => {\n  app.find('.btn-add').simulate('click');\n\n  expect(app.state().gifts.length).not.toBe(0);\n});\n\n// 检验某个component（Gift）是否存在\nit('create a Gift component', () => {\n  expect(app.find(Gift).exists()).toBe(true);\n});\n```\n\n### 4. 利用describe划分测试代码块\n\n用`describe`把测试分组。也可以使用`describe`定义一个场景，把相似的操作合并。\n\n以下的两个测试都需要先触发一次`add-gift`按钮的点击，再验证相应的测试逻辑。\n\n下面有两个hook，`beforeEach`和`afterEach`，可以用来执行**前置共同的action**和**结束之后的reset逻辑**。\n\n```js\ndescribe('when clicking the `add-gift` button', () => {\n    beforeEach(() => {\n      app.find('.btn-add').simulate('click');\n    });\n\n    afterEach(() => {\n      // reset state `gifts` to []\n      app.setState({\n        gifts: []\n      });\n    });\n\n    it('add a gift to `state`', () => {\n      // app.find('.btn-add').simulate('click');\n      expect(app.state().gifts.length).not.toBe(0);\n    });\n  \n    it('display gifts on the rendered list', () => {\n      // app.find('.btn-add').simulate('click');\n\n      const stateListLength = app.state().gifts.length;\n      const listItemLength = app.find('.list-item').length;\n  \n      expect(stateListLength).toEqual(listItemLength);\n    });\n  });\n```\n\n### 5. 父子组件交互测试\n\n#### 1）背景\n\n在GiftGiver内，父组件`<App />`根据`state`中的`gifts`数组渲染子组件`<Gift />`，而子组件有一个删除按钮，点击后可以从父组件`state`中`gifts`去掉命中当前GiftID的数据项。\n\n```js\n// App.js\n\n// state\nthis.state.gifts = [{\n  id: xxx\n}]\n\nremoveGift(id) {\n  // this.state.gifts.filter(gift => gift.id !== id)\n}\n\n// render\n{ this.state.gifts.map(gift => (\n  <Gift gift={gift} removeGift={removeGift} />\n))}\n\n// Gift.js\n\n// render\n// const { gift, removeGift } = this.props;\n<div>\n  <Button onClick={ gift => removeGift(gift.id) }>remove</Button>\n</div>\n```\n\n#### 2）设计思路\n\n1. 把`removeGift`挂在父组件（`<App />`）上，入参giftID\n2. 把`gift`的数据和`removeGift`作为props传给子组件（`<Gift />`）\n3. 在子组件（`<Gift />`），有一个删除按钮，点击后调用父组件的callback函数，入参giftID\n\n#### 3）写test case的思路\n\n##### I. 父组件的测试用例 App.test.js\n\n**涉及的核心逻辑或交互**：负责从数据源`this.state.gifts`中干掉对应数据的函数`removeGift`。\n\n**测试思路**：`removeGift`入参giftID后，检查会不会正确地从`state`中去掉该项数组（giftID === item.id）。\n\n**实现详情：**\n\na）前置操作：模拟调用行为。\n\n```js\nbeforeEach(() => {\n  // call the `removeGift` function in App.js\n  app.instance().removeGift(firstGiftID);\n});\n```\n\nb）断言逻辑：确定`this.state.gifts`中没有包含对应项\n\n```js\nit('gift with ID ${firstGiftID} is not in the state `gift`', () => {\n  const { gifts } = app.state();\n  const targetGiftList = gifts.find(gift => gift.id === firstGiftID) || [];\n\n  expect(targetGiftList.length).toBe(0);\n});\n```\n\n##### II. 子组件的测试用例 Gift.test.js\n\n**涉及的核心逻辑或交互**：\n\n* 点击一个删除按钮\n* 调用父组件传过来的callback函数，并传入id\n\n**测试思路**：\n\n* 在shallow时，模拟父元素传入对应的props\n* 模拟用户行为，点击删除按钮\n* 检查回调函数有没有被调用，以及传入的参数对不对\n\n**实现详情**：\n\n1）在shallow时，模拟父元素传入对应的props。\n\n```js\nconst mockRemove = jest.fn(); // 在第3点说明\nconst giftID = 1;\nconst props = {\n  gift: {\n    id: giftID\n  },\n  removeGift: mockRemove\n};\nconst gift = shallow(<Gift { ...props } />);\n```\n\n2）`beforeEach`里模拟删除按钮的点击\n\n```js\nbeforeEach(() => {\n  gift.find('.btn-delete').simulate('click');\n});\n```\n\n3）检查回调函数有没有被调用，以及传入的参数对不对\n\n从第1点可以看到，shallow渲染传入props时，回调函数把原本的removeGift函数替换成jest的mock。(`const mockRemove = jest.fn();`)\n\n因为该方法提供了一个断言检测方法，我们可以通过这个方式，检查回调函数有没有被调用以及传入的参数是否符合预期，实际的测试语句如下。\n\n```js\nit('calls the removeGift callback', () => {\n  expect(mockRemove).toHaveBeenCalledWith(giftID);\n});\n```\n\n### 6. coverage testing\n\n检测实际被调用代码的覆盖程度。（冗余代码检测）\n\n```js\nnpm run test -- --coverage\n```\n\n![](http://lc-wpyqjumv.cn-n1.lcfile.com/b79550c417506fb9c9c5.png)\n\n指定`--coverage`目标文件：，在`package.json`下，添加以下语句：\n\n```js\n\"jest\": {\n  \"collectCoverageFrom\": [\n    \"src/**.js\",\n    \"!src/index.js\"\n  ]\n}\n```\n\n#### Tips\n\n如果存在某些函数/逻辑没有覆盖到，可以考虑新增一个和`component`同级的`helpers`文件夹，在里面单独写那些跟组件基本功能无关的逻辑，如用于生成ID的ID生成函数，可以单拎出来放进`helpers`及进行相应的单元测试。\n\n## Setup\n\n### Preparation\n\n1. node, v8.x\n2. npm, v5.x\n3. create-react-app\n\n### Steps\n\nI. `create-react-app yourProjectName`\n\nII. install dependencies\n\n* dependencies: react-dom & react \n* devDependencies: enzyme & jest-cli\n\nIII. enzyme-adapter-react-16\n\nIn order to use the most current version of React > 16, we now need to install \"enzyme adapters\" to provide full compatibility with React.\n\n```\nnpm i enzyme-adapter-react-16 --save-dev  \n```\n\nNext, add a src/tempPolyfills.js file to create the global request animation frame function that React now depends on.\n\nsrc/tempPolyfills.js should contain the following contents:\n\n```\nconst requestAnimationFrame = global.requestAnimationFrame = callback => {\n  setTimeout(callback, 0);\n}\n```\n\nexport default requestAnimationFrame;\nFinally, add a src/setupTests.js file to configure the enzmye adapter for our tests. The disableLifecyleMethods portion is needed to allow us to modify props through different tests.\n\nsrc/setupTests.js should contain the following contents:\n\n```\nimport requestAnimationFrame from './tempPolyfills';\n\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter(), disableLifecycleMethods: true });\n```","source":"_posts/bdd-in-reactjs.md","raw":"---\ntitle: Behavior Driven Development in ReactJS\ntags:\n  - testing\n  - front-end\ndate: 2018-06-02 20:13:25\n---\n\n> 如果想跳过前文，可以直接定位到[实战篇](/blog/archives/test-driven-dev/#我的实战)\n\n## What is Test Driven Development?\n\nCoding of features and tests go hand in hand.\n\n1. Write a unit test.\n2. Run the test. See it fail.\n3. Write the feature code to pass the test.\n4. Refactor the code.\n\n## Why TDD?\n\n* It reduces errors and defects in the long run.\n* It leads to higher quality code.\n\n## What is Behavior Driven Development?\n\n* A variation of TDD that tests for user scenarios.\n* Given, when, then... [ pattern ]\n* Given notes, when deleting, then remove a note.\n* BDD consists of scenarios/specifications.\n\n<!-- more -->\n\n## Test Tools\n\n* Jest\n* Enzyme\n\n> 如果想看create-react-app或jest/enzyme环境的配置，可以[定位到setup内容](#Setup)。\n\n## 我的实战\n\n项目中Jest and Enzyme的实战。\n\n### 1. 第一个Unit Test: `toMatchSnapshot`\n\n快照是Jest把调用时的component的结构记录下来，下次可以用来对比结构有没有差异。\n\n如果不一样，Jest会报错，如果是预期内的展示，可以按`u`把当前快照更新为最新的snapshot。\n\n```js\nit('render correctly', () => {\n  expect(app).toMatchSnapshot();\n});\n```\n\n### 2. 测试component的state\n\nstate的初始化检测 —— 状态`gifts`的值为空数组。\n\n```js\nit('init `state` for gifts as an empty list', () => {\n  expect(app.state().gifts).toEqual([]);\n});\n```\n\n注意：在jest中获得state是一个`state()`函数。\n\n### 3. 点击交互的测试\n\n通过className去查找交互元素，模拟用户行为，其中`simulate`是Enzyme提供的模拟函数。\n\n```js\nit('add a gift to `state` when click the `add` button', () => {\n  app.find('.btn-add').simulate('click');\n\n  expect(app.state().gifts.length).not.toBe(0);\n});\n\n// 检验某个component（Gift）是否存在\nit('create a Gift component', () => {\n  expect(app.find(Gift).exists()).toBe(true);\n});\n```\n\n### 4. 利用describe划分测试代码块\n\n用`describe`把测试分组。也可以使用`describe`定义一个场景，把相似的操作合并。\n\n以下的两个测试都需要先触发一次`add-gift`按钮的点击，再验证相应的测试逻辑。\n\n下面有两个hook，`beforeEach`和`afterEach`，可以用来执行**前置共同的action**和**结束之后的reset逻辑**。\n\n```js\ndescribe('when clicking the `add-gift` button', () => {\n    beforeEach(() => {\n      app.find('.btn-add').simulate('click');\n    });\n\n    afterEach(() => {\n      // reset state `gifts` to []\n      app.setState({\n        gifts: []\n      });\n    });\n\n    it('add a gift to `state`', () => {\n      // app.find('.btn-add').simulate('click');\n      expect(app.state().gifts.length).not.toBe(0);\n    });\n  \n    it('display gifts on the rendered list', () => {\n      // app.find('.btn-add').simulate('click');\n\n      const stateListLength = app.state().gifts.length;\n      const listItemLength = app.find('.list-item').length;\n  \n      expect(stateListLength).toEqual(listItemLength);\n    });\n  });\n```\n\n### 5. 父子组件交互测试\n\n#### 1）背景\n\n在GiftGiver内，父组件`<App />`根据`state`中的`gifts`数组渲染子组件`<Gift />`，而子组件有一个删除按钮，点击后可以从父组件`state`中`gifts`去掉命中当前GiftID的数据项。\n\n```js\n// App.js\n\n// state\nthis.state.gifts = [{\n  id: xxx\n}]\n\nremoveGift(id) {\n  // this.state.gifts.filter(gift => gift.id !== id)\n}\n\n// render\n{ this.state.gifts.map(gift => (\n  <Gift gift={gift} removeGift={removeGift} />\n))}\n\n// Gift.js\n\n// render\n// const { gift, removeGift } = this.props;\n<div>\n  <Button onClick={ gift => removeGift(gift.id) }>remove</Button>\n</div>\n```\n\n#### 2）设计思路\n\n1. 把`removeGift`挂在父组件（`<App />`）上，入参giftID\n2. 把`gift`的数据和`removeGift`作为props传给子组件（`<Gift />`）\n3. 在子组件（`<Gift />`），有一个删除按钮，点击后调用父组件的callback函数，入参giftID\n\n#### 3）写test case的思路\n\n##### I. 父组件的测试用例 App.test.js\n\n**涉及的核心逻辑或交互**：负责从数据源`this.state.gifts`中干掉对应数据的函数`removeGift`。\n\n**测试思路**：`removeGift`入参giftID后，检查会不会正确地从`state`中去掉该项数组（giftID === item.id）。\n\n**实现详情：**\n\na）前置操作：模拟调用行为。\n\n```js\nbeforeEach(() => {\n  // call the `removeGift` function in App.js\n  app.instance().removeGift(firstGiftID);\n});\n```\n\nb）断言逻辑：确定`this.state.gifts`中没有包含对应项\n\n```js\nit('gift with ID ${firstGiftID} is not in the state `gift`', () => {\n  const { gifts } = app.state();\n  const targetGiftList = gifts.find(gift => gift.id === firstGiftID) || [];\n\n  expect(targetGiftList.length).toBe(0);\n});\n```\n\n##### II. 子组件的测试用例 Gift.test.js\n\n**涉及的核心逻辑或交互**：\n\n* 点击一个删除按钮\n* 调用父组件传过来的callback函数，并传入id\n\n**测试思路**：\n\n* 在shallow时，模拟父元素传入对应的props\n* 模拟用户行为，点击删除按钮\n* 检查回调函数有没有被调用，以及传入的参数对不对\n\n**实现详情**：\n\n1）在shallow时，模拟父元素传入对应的props。\n\n```js\nconst mockRemove = jest.fn(); // 在第3点说明\nconst giftID = 1;\nconst props = {\n  gift: {\n    id: giftID\n  },\n  removeGift: mockRemove\n};\nconst gift = shallow(<Gift { ...props } />);\n```\n\n2）`beforeEach`里模拟删除按钮的点击\n\n```js\nbeforeEach(() => {\n  gift.find('.btn-delete').simulate('click');\n});\n```\n\n3）检查回调函数有没有被调用，以及传入的参数对不对\n\n从第1点可以看到，shallow渲染传入props时，回调函数把原本的removeGift函数替换成jest的mock。(`const mockRemove = jest.fn();`)\n\n因为该方法提供了一个断言检测方法，我们可以通过这个方式，检查回调函数有没有被调用以及传入的参数是否符合预期，实际的测试语句如下。\n\n```js\nit('calls the removeGift callback', () => {\n  expect(mockRemove).toHaveBeenCalledWith(giftID);\n});\n```\n\n### 6. coverage testing\n\n检测实际被调用代码的覆盖程度。（冗余代码检测）\n\n```js\nnpm run test -- --coverage\n```\n\n![](http://lc-wpyqjumv.cn-n1.lcfile.com/b79550c417506fb9c9c5.png)\n\n指定`--coverage`目标文件：，在`package.json`下，添加以下语句：\n\n```js\n\"jest\": {\n  \"collectCoverageFrom\": [\n    \"src/**.js\",\n    \"!src/index.js\"\n  ]\n}\n```\n\n#### Tips\n\n如果存在某些函数/逻辑没有覆盖到，可以考虑新增一个和`component`同级的`helpers`文件夹，在里面单独写那些跟组件基本功能无关的逻辑，如用于生成ID的ID生成函数，可以单拎出来放进`helpers`及进行相应的单元测试。\n\n## Setup\n\n### Preparation\n\n1. node, v8.x\n2. npm, v5.x\n3. create-react-app\n\n### Steps\n\nI. `create-react-app yourProjectName`\n\nII. install dependencies\n\n* dependencies: react-dom & react \n* devDependencies: enzyme & jest-cli\n\nIII. enzyme-adapter-react-16\n\nIn order to use the most current version of React > 16, we now need to install \"enzyme adapters\" to provide full compatibility with React.\n\n```\nnpm i enzyme-adapter-react-16 --save-dev  \n```\n\nNext, add a src/tempPolyfills.js file to create the global request animation frame function that React now depends on.\n\nsrc/tempPolyfills.js should contain the following contents:\n\n```\nconst requestAnimationFrame = global.requestAnimationFrame = callback => {\n  setTimeout(callback, 0);\n}\n```\n\nexport default requestAnimationFrame;\nFinally, add a src/setupTests.js file to configure the enzmye adapter for our tests. The disableLifecyleMethods portion is needed to allow us to modify props through different tests.\n\nsrc/setupTests.js should contain the following contents:\n\n```\nimport requestAnimationFrame from './tempPolyfills';\n\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter(), disableLifecycleMethods: true });\n```","slug":"bdd-in-reactjs","published":1,"updated":"2018-06-06T02:31:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x800009zvr3xcv2yf50","content":"<blockquote>\n<p>如果想跳过前文，可以直接定位到<a href=\"/blog/archives/test-driven-dev/#我的实战\">实战篇</a></p>\n</blockquote>\n<h2 id=\"What-is-Test-Driven-Development\"><a href=\"#What-is-Test-Driven-Development\" class=\"headerlink\" title=\"What is Test Driven Development?\"></a>What is Test Driven Development?</h2><p>Coding of features and tests go hand in hand.</p>\n<ol>\n<li>Write a unit test.</li>\n<li>Run the test. See it fail.</li>\n<li>Write the feature code to pass the test.</li>\n<li>Refactor the code.</li>\n</ol>\n<h2 id=\"Why-TDD\"><a href=\"#Why-TDD\" class=\"headerlink\" title=\"Why TDD?\"></a>Why TDD?</h2><ul>\n<li>It reduces errors and defects in the long run.</li>\n<li>It leads to higher quality code.</li>\n</ul>\n<h2 id=\"What-is-Behavior-Driven-Development\"><a href=\"#What-is-Behavior-Driven-Development\" class=\"headerlink\" title=\"What is Behavior Driven Development?\"></a>What is Behavior Driven Development?</h2><ul>\n<li>A variation of TDD that tests for user scenarios.</li>\n<li>Given, when, then… [ pattern ]</li>\n<li>Given notes, when deleting, then remove a note.</li>\n<li>BDD consists of scenarios/specifications.</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Test-Tools\"><a href=\"#Test-Tools\" class=\"headerlink\" title=\"Test Tools\"></a>Test Tools</h2><ul>\n<li>Jest</li>\n<li>Enzyme</li>\n</ul>\n<blockquote>\n<p>如果想看create-react-app或jest/enzyme环境的配置，可以<a href=\"#Setup\">定位到setup内容</a>。</p>\n</blockquote>\n<h2 id=\"我的实战\"><a href=\"#我的实战\" class=\"headerlink\" title=\"我的实战\"></a>我的实战</h2><p>项目中Jest and Enzyme的实战。</p>\n<h3 id=\"1-第一个Unit-Test-toMatchSnapshot\"><a href=\"#1-第一个Unit-Test-toMatchSnapshot\" class=\"headerlink\" title=\"1. 第一个Unit Test: toMatchSnapshot\"></a>1. 第一个Unit Test: <code>toMatchSnapshot</code></h3><p>快照是Jest把调用时的component的结构记录下来，下次可以用来对比结构有没有差异。</p>\n<p>如果不一样，Jest会报错，如果是预期内的展示，可以按<code>u</code>把当前快照更新为最新的snapshot。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'render correctly'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(app).toMatchSnapshot();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-测试component的state\"><a href=\"#2-测试component的state\" class=\"headerlink\" title=\"2. 测试component的state\"></a>2. 测试component的state</h3><p>state的初始化检测 —— 状态<code>gifts</code>的值为空数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'init `state` for gifts as an empty list'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(app.state().gifts).toEqual([]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意：在jest中获得state是一个<code>state()</code>函数。</p>\n<h3 id=\"3-点击交互的测试\"><a href=\"#3-点击交互的测试\" class=\"headerlink\" title=\"3. 点击交互的测试\"></a>3. 点击交互的测试</h3><p>通过className去查找交互元素，模拟用户行为，其中<code>simulate</code>是Enzyme提供的模拟函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'add a gift to `state` when click the `add` button'</span>, () =&gt; &#123;</span><br><span class=\"line\">  app.find(<span class=\"string\">'.btn-add'</span>).simulate(<span class=\"string\">'click'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  expect(app.state().gifts.length).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检验某个component（Gift）是否存在</span></span><br><span class=\"line\">it(<span class=\"string\">'create a Gift component'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(app.find(Gift).exists()).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-利用describe划分测试代码块\"><a href=\"#4-利用describe划分测试代码块\" class=\"headerlink\" title=\"4. 利用describe划分测试代码块\"></a>4. 利用describe划分测试代码块</h3><p>用<code>describe</code>把测试分组。也可以使用<code>describe</code>定义一个场景，把相似的操作合并。</p>\n<p>以下的两个测试都需要先触发一次<code>add-gift</code>按钮的点击，再验证相应的测试逻辑。</p>\n<p>下面有两个hook，<code>beforeEach</code>和<code>afterEach</code>，可以用来执行<strong>前置共同的action</strong>和<strong>结束之后的reset逻辑</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'when clicking the `add-gift` button'</span>, () =&gt; &#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      app.find(<span class=\"string\">'.btn-add'</span>).simulate(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// reset state `gifts` to []</span></span><br><span class=\"line\">      app.setState(&#123;</span><br><span class=\"line\">        gifts: []</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'add a gift to `state`'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// app.find('.btn-add').simulate('click');</span></span><br><span class=\"line\">      expect(app.state().gifts.length).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">    it(<span class=\"string\">'display gifts on the rendered list'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// app.find('.btn-add').simulate('click');</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> stateListLength = app.state().gifts.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listItemLength = app.find(<span class=\"string\">'.list-item'</span>).length;</span><br><span class=\"line\">  </span><br><span class=\"line\">      expect(stateListLength).toEqual(listItemLength);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-父子组件交互测试\"><a href=\"#5-父子组件交互测试\" class=\"headerlink\" title=\"5. 父子组件交互测试\"></a>5. 父子组件交互测试</h3><h4 id=\"1）背景\"><a href=\"#1）背景\" class=\"headerlink\" title=\"1）背景\"></a>1）背景</h4><p>在GiftGiver内，父组件<code>&lt;App /&gt;</code>根据<code>state</code>中的<code>gifts</code>数组渲染子组件<code>&lt;Gift /&gt;</code>，而子组件有一个删除按钮，点击后可以从父组件<code>state</code>中<code>gifts</code>去掉命中当前GiftID的数据项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// state</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.state.gifts = [&#123;</span><br><span class=\"line\">  id: xxx</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">removeGift(id) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// this.state.gifts.filter(gift =&gt; gift.id !== id)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render</span></span><br><span class=\"line\">&#123; <span class=\"keyword\">this</span>.state.gifts.map(<span class=\"function\"><span class=\"params\">gift</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;Gift gift=&#123;gift&#125; removeGift=&#123;removeGift&#125; /&gt;</span><br><span class=\"line\">))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Gift.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render</span></span><br><span class=\"line\"><span class=\"comment\">// const &#123; gift, removeGift &#125; = this.props;</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;Button onClick=&#123; gift =&gt; removeGift(gift.id) &#125;&gt;remove&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2）设计思路\"><a href=\"#2）设计思路\" class=\"headerlink\" title=\"2）设计思路\"></a>2）设计思路</h4><ol>\n<li>把<code>removeGift</code>挂在父组件（<code>&lt;App /&gt;</code>）上，入参giftID</li>\n<li>把<code>gift</code>的数据和<code>removeGift</code>作为props传给子组件（<code>&lt;Gift /&gt;</code>）</li>\n<li>在子组件（<code>&lt;Gift /&gt;</code>），有一个删除按钮，点击后调用父组件的callback函数，入参giftID</li>\n</ol>\n<h4 id=\"3）写test-case的思路\"><a href=\"#3）写test-case的思路\" class=\"headerlink\" title=\"3）写test case的思路\"></a>3）写test case的思路</h4><h5 id=\"I-父组件的测试用例-App-test-js\"><a href=\"#I-父组件的测试用例-App-test-js\" class=\"headerlink\" title=\"I. 父组件的测试用例 App.test.js\"></a>I. 父组件的测试用例 App.test.js</h5><p><strong>涉及的核心逻辑或交互</strong>：负责从数据源<code>this.state.gifts</code>中干掉对应数据的函数<code>removeGift</code>。</p>\n<p><strong>测试思路</strong>：<code>removeGift</code>入参giftID后，检查会不会正确地从<code>state</code>中去掉该项数组（giftID === item.id）。</p>\n<p><strong>实现详情：</strong></p>\n<p>a）前置操作：模拟调用行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// call the `removeGift` function in App.js</span></span><br><span class=\"line\">  app.instance().removeGift(firstGiftID);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>b）断言逻辑：确定<code>this.state.gifts</code>中没有包含对应项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'gift with ID $&#123;firstGiftID&#125; is not in the state `gift`'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; gifts &#125; = app.state();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetGiftList = gifts.find(<span class=\"function\"><span class=\"params\">gift</span> =&gt;</span> gift.id === firstGiftID) || [];</span><br><span class=\"line\"></span><br><span class=\"line\">  expect(targetGiftList.length).toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"II-子组件的测试用例-Gift-test-js\"><a href=\"#II-子组件的测试用例-Gift-test-js\" class=\"headerlink\" title=\"II. 子组件的测试用例 Gift.test.js\"></a>II. 子组件的测试用例 Gift.test.js</h5><p><strong>涉及的核心逻辑或交互</strong>：</p>\n<ul>\n<li>点击一个删除按钮</li>\n<li>调用父组件传过来的callback函数，并传入id</li>\n</ul>\n<p><strong>测试思路</strong>：</p>\n<ul>\n<li>在shallow时，模拟父元素传入对应的props</li>\n<li>模拟用户行为，点击删除按钮</li>\n<li>检查回调函数有没有被调用，以及传入的参数对不对</li>\n</ul>\n<p><strong>实现详情</strong>：</p>\n<p>1）在shallow时，模拟父元素传入对应的props。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mockRemove = jest.fn(); <span class=\"comment\">// 在第3点说明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> giftID = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">  gift: &#123;</span><br><span class=\"line\">    id: giftID</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removeGift: mockRemove</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gift = shallow(&lt;Gift &#123; ...props &#125; /&gt;);</span><br></pre></td></tr></table></figure>\n<p>2）<code>beforeEach</code>里模拟删除按钮的点击</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  gift.find(<span class=\"string\">'.btn-delete'</span>).simulate(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3）检查回调函数有没有被调用，以及传入的参数对不对</p>\n<p>从第1点可以看到，shallow渲染传入props时，回调函数把原本的removeGift函数替换成jest的mock。(<code>const mockRemove = jest.fn();</code>)</p>\n<p>因为该方法提供了一个断言检测方法，我们可以通过这个方式，检查回调函数有没有被调用以及传入的参数是否符合预期，实际的测试语句如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'calls the removeGift callback'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(mockRemove).toHaveBeenCalledWith(giftID);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-coverage-testing\"><a href=\"#6-coverage-testing\" class=\"headerlink\" title=\"6. coverage testing\"></a>6. coverage testing</h3><p>检测实际被调用代码的覆盖程度。（冗余代码检测）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test -- --coverage</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://lc-wpyqjumv.cn-n1.lcfile.com/b79550c417506fb9c9c5.png\" alt=\"\"></p>\n<p>指定<code>--coverage</code>目标文件：，在<code>package.json</code>下，添加以下语句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"jest\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"collectCoverageFrom\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"src/**.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"!src/index.js\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><p>如果存在某些函数/逻辑没有覆盖到，可以考虑新增一个和<code>component</code>同级的<code>helpers</code>文件夹，在里面单独写那些跟组件基本功能无关的逻辑，如用于生成ID的ID生成函数，可以单拎出来放进<code>helpers</code>及进行相应的单元测试。</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><h3 id=\"Preparation\"><a href=\"#Preparation\" class=\"headerlink\" title=\"Preparation\"></a>Preparation</h3><ol>\n<li>node, v8.x</li>\n<li>npm, v5.x</li>\n<li>create-react-app</li>\n</ol>\n<h3 id=\"Steps\"><a href=\"#Steps\" class=\"headerlink\" title=\"Steps\"></a>Steps</h3><p>I. <code>create-react-app yourProjectName</code></p>\n<p>II. install dependencies</p>\n<ul>\n<li>dependencies: react-dom &amp; react </li>\n<li>devDependencies: enzyme &amp; jest-cli</li>\n</ul>\n<p>III. enzyme-adapter-react-16</p>\n<p>In order to use the most current version of React &gt; 16, we now need to install “enzyme adapters” to provide full compatibility with React.</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i enzyme-adapter-react<span class=\"number\">-16</span> --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>Next, add a src/tempPolyfills.js file to create the global request animation frame function that React now depends on.</p>\n<p>src/tempPolyfills.js should contain the following contents:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> requestAnimationFrame = global.requestAnimationFrame = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(callback, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>export default requestAnimationFrame;<br>Finally, add a src/setupTests.js file to configure the enzmye adapter for our tests. The disableLifecyleMethods portion is needed to allow us to modify props through different tests.</p>\n<p>src/setupTests.js should contain the following contents:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestAnimationFrame <span class=\"keyword\">from</span> <span class=\"string\">'./tempPolyfills'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; configure &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">'enzyme-adapter-react-16'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter(), <span class=\"attr\">disableLifecycleMethods</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>如果想跳过前文，可以直接定位到<a href=\"/blog/archives/test-driven-dev/#我的实战\">实战篇</a></p>\n</blockquote>\n<h2 id=\"What-is-Test-Driven-Development\"><a href=\"#What-is-Test-Driven-Development\" class=\"headerlink\" title=\"What is Test Driven Development?\"></a>What is Test Driven Development?</h2><p>Coding of features and tests go hand in hand.</p>\n<ol>\n<li>Write a unit test.</li>\n<li>Run the test. See it fail.</li>\n<li>Write the feature code to pass the test.</li>\n<li>Refactor the code.</li>\n</ol>\n<h2 id=\"Why-TDD\"><a href=\"#Why-TDD\" class=\"headerlink\" title=\"Why TDD?\"></a>Why TDD?</h2><ul>\n<li>It reduces errors and defects in the long run.</li>\n<li>It leads to higher quality code.</li>\n</ul>\n<h2 id=\"What-is-Behavior-Driven-Development\"><a href=\"#What-is-Behavior-Driven-Development\" class=\"headerlink\" title=\"What is Behavior Driven Development?\"></a>What is Behavior Driven Development?</h2><ul>\n<li>A variation of TDD that tests for user scenarios.</li>\n<li>Given, when, then… [ pattern ]</li>\n<li>Given notes, when deleting, then remove a note.</li>\n<li>BDD consists of scenarios/specifications.</li>\n</ul>","more":"<h2 id=\"Test-Tools\"><a href=\"#Test-Tools\" class=\"headerlink\" title=\"Test Tools\"></a>Test Tools</h2><ul>\n<li>Jest</li>\n<li>Enzyme</li>\n</ul>\n<blockquote>\n<p>如果想看create-react-app或jest/enzyme环境的配置，可以<a href=\"#Setup\">定位到setup内容</a>。</p>\n</blockquote>\n<h2 id=\"我的实战\"><a href=\"#我的实战\" class=\"headerlink\" title=\"我的实战\"></a>我的实战</h2><p>项目中Jest and Enzyme的实战。</p>\n<h3 id=\"1-第一个Unit-Test-toMatchSnapshot\"><a href=\"#1-第一个Unit-Test-toMatchSnapshot\" class=\"headerlink\" title=\"1. 第一个Unit Test: toMatchSnapshot\"></a>1. 第一个Unit Test: <code>toMatchSnapshot</code></h3><p>快照是Jest把调用时的component的结构记录下来，下次可以用来对比结构有没有差异。</p>\n<p>如果不一样，Jest会报错，如果是预期内的展示，可以按<code>u</code>把当前快照更新为最新的snapshot。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'render correctly'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(app).toMatchSnapshot();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-测试component的state\"><a href=\"#2-测试component的state\" class=\"headerlink\" title=\"2. 测试component的state\"></a>2. 测试component的state</h3><p>state的初始化检测 —— 状态<code>gifts</code>的值为空数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'init `state` for gifts as an empty list'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(app.state().gifts).toEqual([]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意：在jest中获得state是一个<code>state()</code>函数。</p>\n<h3 id=\"3-点击交互的测试\"><a href=\"#3-点击交互的测试\" class=\"headerlink\" title=\"3. 点击交互的测试\"></a>3. 点击交互的测试</h3><p>通过className去查找交互元素，模拟用户行为，其中<code>simulate</code>是Enzyme提供的模拟函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'add a gift to `state` when click the `add` button'</span>, () =&gt; &#123;</span><br><span class=\"line\">  app.find(<span class=\"string\">'.btn-add'</span>).simulate(<span class=\"string\">'click'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  expect(app.state().gifts.length).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检验某个component（Gift）是否存在</span></span><br><span class=\"line\">it(<span class=\"string\">'create a Gift component'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(app.find(Gift).exists()).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-利用describe划分测试代码块\"><a href=\"#4-利用describe划分测试代码块\" class=\"headerlink\" title=\"4. 利用describe划分测试代码块\"></a>4. 利用describe划分测试代码块</h3><p>用<code>describe</code>把测试分组。也可以使用<code>describe</code>定义一个场景，把相似的操作合并。</p>\n<p>以下的两个测试都需要先触发一次<code>add-gift</code>按钮的点击，再验证相应的测试逻辑。</p>\n<p>下面有两个hook，<code>beforeEach</code>和<code>afterEach</code>，可以用来执行<strong>前置共同的action</strong>和<strong>结束之后的reset逻辑</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'when clicking the `add-gift` button'</span>, () =&gt; &#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      app.find(<span class=\"string\">'.btn-add'</span>).simulate(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// reset state `gifts` to []</span></span><br><span class=\"line\">      app.setState(&#123;</span><br><span class=\"line\">        gifts: []</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'add a gift to `state`'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// app.find('.btn-add').simulate('click');</span></span><br><span class=\"line\">      expect(app.state().gifts.length).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">    it(<span class=\"string\">'display gifts on the rendered list'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// app.find('.btn-add').simulate('click');</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> stateListLength = app.state().gifts.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listItemLength = app.find(<span class=\"string\">'.list-item'</span>).length;</span><br><span class=\"line\">  </span><br><span class=\"line\">      expect(stateListLength).toEqual(listItemLength);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-父子组件交互测试\"><a href=\"#5-父子组件交互测试\" class=\"headerlink\" title=\"5. 父子组件交互测试\"></a>5. 父子组件交互测试</h3><h4 id=\"1）背景\"><a href=\"#1）背景\" class=\"headerlink\" title=\"1）背景\"></a>1）背景</h4><p>在GiftGiver内，父组件<code>&lt;App /&gt;</code>根据<code>state</code>中的<code>gifts</code>数组渲染子组件<code>&lt;Gift /&gt;</code>，而子组件有一个删除按钮，点击后可以从父组件<code>state</code>中<code>gifts</code>去掉命中当前GiftID的数据项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// state</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.state.gifts = [&#123;</span><br><span class=\"line\">  id: xxx</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">removeGift(id) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// this.state.gifts.filter(gift =&gt; gift.id !== id)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render</span></span><br><span class=\"line\">&#123; <span class=\"keyword\">this</span>.state.gifts.map(<span class=\"function\"><span class=\"params\">gift</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;Gift gift=&#123;gift&#125; removeGift=&#123;removeGift&#125; /&gt;</span><br><span class=\"line\">))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Gift.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render</span></span><br><span class=\"line\"><span class=\"comment\">// const &#123; gift, removeGift &#125; = this.props;</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;Button onClick=&#123; gift =&gt; removeGift(gift.id) &#125;&gt;remove&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2）设计思路\"><a href=\"#2）设计思路\" class=\"headerlink\" title=\"2）设计思路\"></a>2）设计思路</h4><ol>\n<li>把<code>removeGift</code>挂在父组件（<code>&lt;App /&gt;</code>）上，入参giftID</li>\n<li>把<code>gift</code>的数据和<code>removeGift</code>作为props传给子组件（<code>&lt;Gift /&gt;</code>）</li>\n<li>在子组件（<code>&lt;Gift /&gt;</code>），有一个删除按钮，点击后调用父组件的callback函数，入参giftID</li>\n</ol>\n<h4 id=\"3）写test-case的思路\"><a href=\"#3）写test-case的思路\" class=\"headerlink\" title=\"3）写test case的思路\"></a>3）写test case的思路</h4><h5 id=\"I-父组件的测试用例-App-test-js\"><a href=\"#I-父组件的测试用例-App-test-js\" class=\"headerlink\" title=\"I. 父组件的测试用例 App.test.js\"></a>I. 父组件的测试用例 App.test.js</h5><p><strong>涉及的核心逻辑或交互</strong>：负责从数据源<code>this.state.gifts</code>中干掉对应数据的函数<code>removeGift</code>。</p>\n<p><strong>测试思路</strong>：<code>removeGift</code>入参giftID后，检查会不会正确地从<code>state</code>中去掉该项数组（giftID === item.id）。</p>\n<p><strong>实现详情：</strong></p>\n<p>a）前置操作：模拟调用行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// call the `removeGift` function in App.js</span></span><br><span class=\"line\">  app.instance().removeGift(firstGiftID);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>b）断言逻辑：确定<code>this.state.gifts</code>中没有包含对应项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'gift with ID $&#123;firstGiftID&#125; is not in the state `gift`'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; gifts &#125; = app.state();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetGiftList = gifts.find(<span class=\"function\"><span class=\"params\">gift</span> =&gt;</span> gift.id === firstGiftID) || [];</span><br><span class=\"line\"></span><br><span class=\"line\">  expect(targetGiftList.length).toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"II-子组件的测试用例-Gift-test-js\"><a href=\"#II-子组件的测试用例-Gift-test-js\" class=\"headerlink\" title=\"II. 子组件的测试用例 Gift.test.js\"></a>II. 子组件的测试用例 Gift.test.js</h5><p><strong>涉及的核心逻辑或交互</strong>：</p>\n<ul>\n<li>点击一个删除按钮</li>\n<li>调用父组件传过来的callback函数，并传入id</li>\n</ul>\n<p><strong>测试思路</strong>：</p>\n<ul>\n<li>在shallow时，模拟父元素传入对应的props</li>\n<li>模拟用户行为，点击删除按钮</li>\n<li>检查回调函数有没有被调用，以及传入的参数对不对</li>\n</ul>\n<p><strong>实现详情</strong>：</p>\n<p>1）在shallow时，模拟父元素传入对应的props。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mockRemove = jest.fn(); <span class=\"comment\">// 在第3点说明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> giftID = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">  gift: &#123;</span><br><span class=\"line\">    id: giftID</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removeGift: mockRemove</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gift = shallow(&lt;Gift &#123; ...props &#125; /&gt;);</span><br></pre></td></tr></table></figure>\n<p>2）<code>beforeEach</code>里模拟删除按钮的点击</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  gift.find(<span class=\"string\">'.btn-delete'</span>).simulate(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3）检查回调函数有没有被调用，以及传入的参数对不对</p>\n<p>从第1点可以看到，shallow渲染传入props时，回调函数把原本的removeGift函数替换成jest的mock。(<code>const mockRemove = jest.fn();</code>)</p>\n<p>因为该方法提供了一个断言检测方法，我们可以通过这个方式，检查回调函数有没有被调用以及传入的参数是否符合预期，实际的测试语句如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'calls the removeGift callback'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(mockRemove).toHaveBeenCalledWith(giftID);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-coverage-testing\"><a href=\"#6-coverage-testing\" class=\"headerlink\" title=\"6. coverage testing\"></a>6. coverage testing</h3><p>检测实际被调用代码的覆盖程度。（冗余代码检测）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test -- --coverage</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://lc-wpyqjumv.cn-n1.lcfile.com/b79550c417506fb9c9c5.png\" alt=\"\"></p>\n<p>指定<code>--coverage</code>目标文件：，在<code>package.json</code>下，添加以下语句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"jest\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"collectCoverageFrom\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"src/**.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"!src/index.js\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><p>如果存在某些函数/逻辑没有覆盖到，可以考虑新增一个和<code>component</code>同级的<code>helpers</code>文件夹，在里面单独写那些跟组件基本功能无关的逻辑，如用于生成ID的ID生成函数，可以单拎出来放进<code>helpers</code>及进行相应的单元测试。</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><h3 id=\"Preparation\"><a href=\"#Preparation\" class=\"headerlink\" title=\"Preparation\"></a>Preparation</h3><ol>\n<li>node, v8.x</li>\n<li>npm, v5.x</li>\n<li>create-react-app</li>\n</ol>\n<h3 id=\"Steps\"><a href=\"#Steps\" class=\"headerlink\" title=\"Steps\"></a>Steps</h3><p>I. <code>create-react-app yourProjectName</code></p>\n<p>II. install dependencies</p>\n<ul>\n<li>dependencies: react-dom &amp; react </li>\n<li>devDependencies: enzyme &amp; jest-cli</li>\n</ul>\n<p>III. enzyme-adapter-react-16</p>\n<p>In order to use the most current version of React &gt; 16, we now need to install “enzyme adapters” to provide full compatibility with React.</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i enzyme-adapter-react<span class=\"number\">-16</span> --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>Next, add a src/tempPolyfills.js file to create the global request animation frame function that React now depends on.</p>\n<p>src/tempPolyfills.js should contain the following contents:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> requestAnimationFrame = global.requestAnimationFrame = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(callback, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>export default requestAnimationFrame;<br>Finally, add a src/setupTests.js file to configure the enzmye adapter for our tests. The disableLifecyleMethods portion is needed to allow us to modify props through different tests.</p>\n<p>src/setupTests.js should contain the following contents:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestAnimationFrame <span class=\"keyword\">from</span> <span class=\"string\">'./tempPolyfills'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; configure &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">'enzyme-adapter-react-16'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter(), <span class=\"attr\">disableLifecycleMethods</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Blog Log","id":"31","date":"2015-04-22T16:35:45.000Z","updateDate":"2017-04-02T07:13:02.000Z","_content":"\n**2018.08.26**\n{% douban \"https://book.douban.com/subject/26541801\" %}\n{% douban \"https://book.douban.com/subject/30292589/\" %}\n\n**2017.04.02**\n1. jQuery -> Zepto\n2. fancybox -> magnific popup\n\n以下是相同网络环境下，disable Cache，线上首页用Chrome Network的测试数据：\n\n上线前：\nJS，**三个**请求，`jquery.min.js`, `aio.js`, `fancybox.js`，总计**39.8KB**\nCSS，**两个**请求，`style.css`, `fancybox.css`，总计**7KB**\n\n上线后：\nJS，**两个**请求，`zepto.min.js`, `aio.js`，总计**17.9KB**\nCSS，**一个**请求，`style.css`，总计**6.5KB**\n<!--more-->\n**2017.02.16**\n\n1. 添加侧边栏的wgt-search\n\n**2016.04.04**\n\n1. wordpress迁移到[Hexo](https://hexo.io/zh-cn/docs/)\n2. 使用新浪云的CDN放图片\n\n**2015.05.07**\n\n1.  选一个在线展示ppt的框架，并学习之~\n\n**2015.05.02**\n\n1.  地图，记录我的旅游轨迹，每个地方hover可以展示一个图片和文字链\n\n**2015.04.29**\n\n1.  用angularJS搭建单页结构的[demo](/demo/)展示页\n2.  做一个单页内切换模板的转场插件\n\n**2015.04.28**\n\n1.  <del>生成订阅feed.xml</del>\n原来wordpress本身就有生成了，天才！ 订阅地址是：http://www.wuyuying.com/feed，另外，设置rss的数目限制可以去“设置 - 阅读”\n\n**2015.04.27**\n\n1.  demo页，迁到github维护，基于fis-pure和angular建立单页页面，编译完之后上线到wordpress的demo模板\n2.  优化meeta主题的资源请求\n\n**2015.04.23**\n\n1.  jekyll博客的post迁回来\n2.  知道9周年框架用fis-pure重写，产出demo和日志\n3.  <del>学习firebug</del>\n其实firebug和chrome dev tools功能差不多，chrome dev tools还内嵌了emulator，方便调试移动页面，我还是习惯用chrome多一点呀~\n4.  <del>gulp</del>\n嗷，看了两眼，发现没有工作驱动就没动力去学，还是有点学习成本，我还是乖乖用fis吧，再赞万能的[fis](http://fis.baidu.com \"fis官网\")~\n5.  zen-coding","source":"_posts/blog-log.md","raw":"---\ntitle: Blog Log\ntags:\n  - blog\nid: 31\ncategories:\n  - tech\ndate: 2015-04-23 00:35:45\nupdateDate: 2017-04-02 15:13:02\n---\n\n**2018.08.26**\n{% douban \"https://book.douban.com/subject/26541801\" %}\n{% douban \"https://book.douban.com/subject/30292589/\" %}\n\n**2017.04.02**\n1. jQuery -> Zepto\n2. fancybox -> magnific popup\n\n以下是相同网络环境下，disable Cache，线上首页用Chrome Network的测试数据：\n\n上线前：\nJS，**三个**请求，`jquery.min.js`, `aio.js`, `fancybox.js`，总计**39.8KB**\nCSS，**两个**请求，`style.css`, `fancybox.css`，总计**7KB**\n\n上线后：\nJS，**两个**请求，`zepto.min.js`, `aio.js`，总计**17.9KB**\nCSS，**一个**请求，`style.css`，总计**6.5KB**\n<!--more-->\n**2017.02.16**\n\n1. 添加侧边栏的wgt-search\n\n**2016.04.04**\n\n1. wordpress迁移到[Hexo](https://hexo.io/zh-cn/docs/)\n2. 使用新浪云的CDN放图片\n\n**2015.05.07**\n\n1.  选一个在线展示ppt的框架，并学习之~\n\n**2015.05.02**\n\n1.  地图，记录我的旅游轨迹，每个地方hover可以展示一个图片和文字链\n\n**2015.04.29**\n\n1.  用angularJS搭建单页结构的[demo](/demo/)展示页\n2.  做一个单页内切换模板的转场插件\n\n**2015.04.28**\n\n1.  <del>生成订阅feed.xml</del>\n原来wordpress本身就有生成了，天才！ 订阅地址是：http://www.wuyuying.com/feed，另外，设置rss的数目限制可以去“设置 - 阅读”\n\n**2015.04.27**\n\n1.  demo页，迁到github维护，基于fis-pure和angular建立单页页面，编译完之后上线到wordpress的demo模板\n2.  优化meeta主题的资源请求\n\n**2015.04.23**\n\n1.  jekyll博客的post迁回来\n2.  知道9周年框架用fis-pure重写，产出demo和日志\n3.  <del>学习firebug</del>\n其实firebug和chrome dev tools功能差不多，chrome dev tools还内嵌了emulator，方便调试移动页面，我还是习惯用chrome多一点呀~\n4.  <del>gulp</del>\n嗷，看了两眼，发现没有工作驱动就没动力去学，还是有点学习成本，我还是乖乖用fis吧，再赞万能的[fis](http://fis.baidu.com \"fis官网\")~\n5.  zen-coding","slug":"blog-log","published":1,"updated":"2018-08-28T15:20:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x81000czvr30rmmfnuj","content":"<p><strong>2018.08.26</strong><br><div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/26541801/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img1.doubanio.com/view/subject/m/public/s28369197.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"增长黑客\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：增长黑客</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"电子工业出版社\">出版社：电子工业出版社</p><p style=\"margin:0; font-size: 14px;\">出版日期：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">作者：范冰</p><p style=\"margin:0; font-size: 14px;\">出版年：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">定价：CNY 59.00</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div><br><div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/30292589/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img3.doubanio.com/view/subject/m/public/s29838063.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"谁的青春不迷茫\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：谁的青春不迷茫</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"北京联合出版公司\">出版社：北京联合出版公司</p><p style=\"margin:0; font-size: 14px;\">出版日期：2018-8-8</p><p style=\"margin:0; font-size: 14px;\">作者：刘同</p><p style=\"margin:0; font-size: 14px;\">出版年：2018-8-8</p><p style=\"margin:0; font-size: 14px;\">定价：45元</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div></p>\n<p><strong>2017.04.02</strong></p>\n<ol>\n<li>jQuery -&gt; Zepto</li>\n<li>fancybox -&gt; magnific popup</li>\n</ol>\n<p>以下是相同网络环境下，disable Cache，线上首页用Chrome Network的测试数据：</p>\n<p>上线前：<br>JS，<strong>三个</strong>请求，<code>jquery.min.js</code>, <code>aio.js</code>, <code>fancybox.js</code>，总计<strong>39.8KB</strong><br>CSS，<strong>两个</strong>请求，<code>style.css</code>, <code>fancybox.css</code>，总计<strong>7KB</strong></p>\n<p>上线后：<br>JS，<strong>两个</strong>请求，<code>zepto.min.js</code>, <code>aio.js</code>，总计<strong>17.9KB</strong><br>CSS，<strong>一个</strong>请求，<code>style.css</code>，总计<strong>6.5KB</strong><br><a id=\"more\"></a><br><strong>2017.02.16</strong></p>\n<ol>\n<li>添加侧边栏的wgt-search</li>\n</ol>\n<p><strong>2016.04.04</strong></p>\n<ol>\n<li>wordpress迁移到<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a></li>\n<li>使用新浪云的CDN放图片</li>\n</ol>\n<p><strong>2015.05.07</strong></p>\n<ol>\n<li>选一个在线展示ppt的框架，并学习之~</li>\n</ol>\n<p><strong>2015.05.02</strong></p>\n<ol>\n<li>地图，记录我的旅游轨迹，每个地方hover可以展示一个图片和文字链</li>\n</ol>\n<p><strong>2015.04.29</strong></p>\n<ol>\n<li>用angularJS搭建单页结构的<a href=\"/demo/\">demo</a>展示页</li>\n<li>做一个单页内切换模板的转场插件</li>\n</ol>\n<p><strong>2015.04.28</strong></p>\n<ol>\n<li><del>生成订阅feed.xml</del><br>原来wordpress本身就有生成了，天才！ 订阅地址是：<a href=\"http://www.wuyuying.com/feed，另外，设置rss的数目限制可以去“设置\" target=\"_blank\" rel=\"noopener\">http://www.wuyuying.com/feed，另外，设置rss的数目限制可以去“设置</a> - 阅读”</li>\n</ol>\n<p><strong>2015.04.27</strong></p>\n<ol>\n<li>demo页，迁到github维护，基于fis-pure和angular建立单页页面，编译完之后上线到wordpress的demo模板</li>\n<li>优化meeta主题的资源请求</li>\n</ol>\n<p><strong>2015.04.23</strong></p>\n<ol>\n<li>jekyll博客的post迁回来</li>\n<li>知道9周年框架用fis-pure重写，产出demo和日志</li>\n<li><del>学习firebug</del><br>其实firebug和chrome dev tools功能差不多，chrome dev tools还内嵌了emulator，方便调试移动页面，我还是习惯用chrome多一点呀~</li>\n<li><del>gulp</del><br>嗷，看了两眼，发现没有工作驱动就没动力去学，还是有点学习成本，我还是乖乖用fis吧，再赞万能的<a href=\"http://fis.baidu.com\" title=\"fis官网\" target=\"_blank\" rel=\"noopener\">fis</a>~</li>\n<li>zen-coding</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><strong>2018.08.26</strong><br><div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/26541801/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img1.doubanio.com/view/subject/m/public/s28369197.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"增长黑客\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：增长黑客</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"电子工业出版社\">出版社：电子工业出版社</p><p style=\"margin:0; font-size: 14px;\">出版日期：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">作者：范冰</p><p style=\"margin:0; font-size: 14px;\">出版年：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">定价：CNY 59.00</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div><br><div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/30292589/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img3.doubanio.com/view/subject/m/public/s29838063.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"谁的青春不迷茫\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：谁的青春不迷茫</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"北京联合出版公司\">出版社：北京联合出版公司</p><p style=\"margin:0; font-size: 14px;\">出版日期：2018-8-8</p><p style=\"margin:0; font-size: 14px;\">作者：刘同</p><p style=\"margin:0; font-size: 14px;\">出版年：2018-8-8</p><p style=\"margin:0; font-size: 14px;\">定价：45元</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div></p>\n<p><strong>2017.04.02</strong></p>\n<ol>\n<li>jQuery -&gt; Zepto</li>\n<li>fancybox -&gt; magnific popup</li>\n</ol>\n<p>以下是相同网络环境下，disable Cache，线上首页用Chrome Network的测试数据：</p>\n<p>上线前：<br>JS，<strong>三个</strong>请求，<code>jquery.min.js</code>, <code>aio.js</code>, <code>fancybox.js</code>，总计<strong>39.8KB</strong><br>CSS，<strong>两个</strong>请求，<code>style.css</code>, <code>fancybox.css</code>，总计<strong>7KB</strong></p>\n<p>上线后：<br>JS，<strong>两个</strong>请求，<code>zepto.min.js</code>, <code>aio.js</code>，总计<strong>17.9KB</strong><br>CSS，<strong>一个</strong>请求，<code>style.css</code>，总计<strong>6.5KB</strong><br>","more":"<br><strong>2017.02.16</strong></p>\n<ol>\n<li>添加侧边栏的wgt-search</li>\n</ol>\n<p><strong>2016.04.04</strong></p>\n<ol>\n<li>wordpress迁移到<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a></li>\n<li>使用新浪云的CDN放图片</li>\n</ol>\n<p><strong>2015.05.07</strong></p>\n<ol>\n<li>选一个在线展示ppt的框架，并学习之~</li>\n</ol>\n<p><strong>2015.05.02</strong></p>\n<ol>\n<li>地图，记录我的旅游轨迹，每个地方hover可以展示一个图片和文字链</li>\n</ol>\n<p><strong>2015.04.29</strong></p>\n<ol>\n<li>用angularJS搭建单页结构的<a href=\"/demo/\">demo</a>展示页</li>\n<li>做一个单页内切换模板的转场插件</li>\n</ol>\n<p><strong>2015.04.28</strong></p>\n<ol>\n<li><del>生成订阅feed.xml</del><br>原来wordpress本身就有生成了，天才！ 订阅地址是：<a href=\"http://www.wuyuying.com/feed，另外，设置rss的数目限制可以去“设置\" target=\"_blank\" rel=\"noopener\">http://www.wuyuying.com/feed，另外，设置rss的数目限制可以去“设置</a> - 阅读”</li>\n</ol>\n<p><strong>2015.04.27</strong></p>\n<ol>\n<li>demo页，迁到github维护，基于fis-pure和angular建立单页页面，编译完之后上线到wordpress的demo模板</li>\n<li>优化meeta主题的资源请求</li>\n</ol>\n<p><strong>2015.04.23</strong></p>\n<ol>\n<li>jekyll博客的post迁回来</li>\n<li>知道9周年框架用fis-pure重写，产出demo和日志</li>\n<li><del>学习firebug</del><br>其实firebug和chrome dev tools功能差不多，chrome dev tools还内嵌了emulator，方便调试移动页面，我还是习惯用chrome多一点呀~</li>\n<li><del>gulp</del><br>嗷，看了两眼，发现没有工作驱动就没动力去学，还是有点学习成本，我还是乖乖用fis吧，再赞万能的<a href=\"http://fis.baidu.com\" title=\"fis官网\" target=\"_blank\" rel=\"noopener\">fis</a>~</li>\n<li>zen-coding</li>\n</ol>"},{"title":"博客优化之路：从WordPress到Hexo","date":"2016-04-06T09:43:19.000Z","_content":"经历了WordPress、jekyll、Hexo、WordPress，前几天我还是把博客迁回到Hexo，因为WordPress太庞大了，想修改主题优化下页面性能或者加些个性化的小组件吧，也没折腾出一个前端构建的流程，开发起来很麻烦，放弃治疗啦，于是又回归到**静态博客**的怀抱。\n\n最近在公司做一些性能优化的工作，重构历史代码和优化打包策略啥的，每次看到优化效果都会觉得很爽，那些数字太漂亮，弄上瘾了，于是拿自己的博客接着改！\n\n虽然从WordPress到Hexo，我啥也没做，只是做了个“系统选型”的抉择，从重量级到轻量级选手，但是从数据看来，我觉得改得还是非常对的，以后站点会有更多的可玩性 :)\n\n<!--more-->\n\n## 改造后的性能优化：\n* 请求数，22 -> 7，减少了**68%**\n* 传输容量，1.3M -> 745K，减少了**44%**\n* Load时间，2.64s -> 1.10s，减少了**58%**\n\n### Hexo（官方主题[Landscape](https://github.com/hexojs/hexo-theme-landscape))\n  \n![Hexo首页加载情况](http://cdn.sinacloud.net/woodysblog/blog-opt/hexo-request.png)\n\n### WordPress（2016年官方主题twenty-sixteen）\n  \n![WordPress首页加载情况](http://cdn.sinacloud.net/woodysblog/blog-opt/wp-request.png)\n\n***\n\n从WordPress迁到Hexo，其实很简单。\n\n## 1. 导出WordPress数据\n\n仪表盘（wp-admin） -> 工具 -> 导出\n\n![\"WordPress数据导出\"](http://cdn.sinacloud.net/woodysblog/blog-opt/wp-export.png)\n\n## 2. 搭建Hexo\n\ni.安装Node.js、npm  \nii.安装Hexo\n    \n    npm install -g hexo-cli \n    \niii. Hexo初始化\n    \n    hexo init <folder> // 初始化某个目录  \n    cd <folder> // 进入该目录    \n    npm install // 安装所需npm依赖文件\n    \n## 3.WordPress到Hexo的迁移\n\ni.安装迁移插件\n\n    npm install hexo-migrator-WordPress --save\n\nii.把WordPress数据导出文件放进Hexo的安装目录  \niii.执行命令迁移文章：source是数据导出文件\n    \n    hexo migrate wordpress <source>\n    \n## 4. 媒体文件存在哪？\n\n虽然很方便的迁移了所有WP文章，但是我们可以发现，文章中有些格式可能会包括很多div等多余的html标签，需要人肉调整。\n\n然后文中引用的媒体文件尤其是图片，还在使用WP数据库中的文件，假如我想彻底脱离WP，我需要把这些媒体资源整理出来，那么问题来了，存在哪？\n\n目前我在用新浪云的[云存储SCS](http://open.sinastorage.com)服务，访问速度很快，按访问量计费，不过目前像我的博客访问量不大，基本免费。\n\n新浪云存储SCS服务的价格详情[传送门 >>](http://www.sinacloud.com/index/price.html)\n\n另外也可以考虑：\n\n[百度云BOS](https://bce.baidu.com/product/bos.html)，度厂很多内部产品线都在使用，按需计费，不过我没使用过，不清楚具体收费情况怎样，感兴趣的朋友可以来[价格表这儿](https://bce.baidu.com/doc/Pricing/BOS.html)看看。\n\n\n\n## Reference\n\n* [Hexo官网](https://hexo.io/zh-cn/docs/migration.html)\n* [Hexo迁移文档](https://hexo.io/zh-cn/docs/migration.html)：RSS/Jekyll/Octopress/WordPress/Joomla\n* [百度开放云](https://bce.baidu.com/index.html)\n* [新浪云](http://www.sinacloud.com)\n","source":"_posts/blog-opt-wp-hexo.md","raw":"---\ntitle: 博客优化之路：从WordPress到Hexo\ntags:\n  - tech\n  - blog\ndate: 2016-04-06 17:43:19\n---\n经历了WordPress、jekyll、Hexo、WordPress，前几天我还是把博客迁回到Hexo，因为WordPress太庞大了，想修改主题优化下页面性能或者加些个性化的小组件吧，也没折腾出一个前端构建的流程，开发起来很麻烦，放弃治疗啦，于是又回归到**静态博客**的怀抱。\n\n最近在公司做一些性能优化的工作，重构历史代码和优化打包策略啥的，每次看到优化效果都会觉得很爽，那些数字太漂亮，弄上瘾了，于是拿自己的博客接着改！\n\n虽然从WordPress到Hexo，我啥也没做，只是做了个“系统选型”的抉择，从重量级到轻量级选手，但是从数据看来，我觉得改得还是非常对的，以后站点会有更多的可玩性 :)\n\n<!--more-->\n\n## 改造后的性能优化：\n* 请求数，22 -> 7，减少了**68%**\n* 传输容量，1.3M -> 745K，减少了**44%**\n* Load时间，2.64s -> 1.10s，减少了**58%**\n\n### Hexo（官方主题[Landscape](https://github.com/hexojs/hexo-theme-landscape))\n  \n![Hexo首页加载情况](http://cdn.sinacloud.net/woodysblog/blog-opt/hexo-request.png)\n\n### WordPress（2016年官方主题twenty-sixteen）\n  \n![WordPress首页加载情况](http://cdn.sinacloud.net/woodysblog/blog-opt/wp-request.png)\n\n***\n\n从WordPress迁到Hexo，其实很简单。\n\n## 1. 导出WordPress数据\n\n仪表盘（wp-admin） -> 工具 -> 导出\n\n![\"WordPress数据导出\"](http://cdn.sinacloud.net/woodysblog/blog-opt/wp-export.png)\n\n## 2. 搭建Hexo\n\ni.安装Node.js、npm  \nii.安装Hexo\n    \n    npm install -g hexo-cli \n    \niii. Hexo初始化\n    \n    hexo init <folder> // 初始化某个目录  \n    cd <folder> // 进入该目录    \n    npm install // 安装所需npm依赖文件\n    \n## 3.WordPress到Hexo的迁移\n\ni.安装迁移插件\n\n    npm install hexo-migrator-WordPress --save\n\nii.把WordPress数据导出文件放进Hexo的安装目录  \niii.执行命令迁移文章：source是数据导出文件\n    \n    hexo migrate wordpress <source>\n    \n## 4. 媒体文件存在哪？\n\n虽然很方便的迁移了所有WP文章，但是我们可以发现，文章中有些格式可能会包括很多div等多余的html标签，需要人肉调整。\n\n然后文中引用的媒体文件尤其是图片，还在使用WP数据库中的文件，假如我想彻底脱离WP，我需要把这些媒体资源整理出来，那么问题来了，存在哪？\n\n目前我在用新浪云的[云存储SCS](http://open.sinastorage.com)服务，访问速度很快，按访问量计费，不过目前像我的博客访问量不大，基本免费。\n\n新浪云存储SCS服务的价格详情[传送门 >>](http://www.sinacloud.com/index/price.html)\n\n另外也可以考虑：\n\n[百度云BOS](https://bce.baidu.com/product/bos.html)，度厂很多内部产品线都在使用，按需计费，不过我没使用过，不清楚具体收费情况怎样，感兴趣的朋友可以来[价格表这儿](https://bce.baidu.com/doc/Pricing/BOS.html)看看。\n\n\n\n## Reference\n\n* [Hexo官网](https://hexo.io/zh-cn/docs/migration.html)\n* [Hexo迁移文档](https://hexo.io/zh-cn/docs/migration.html)：RSS/Jekyll/Octopress/WordPress/Joomla\n* [百度开放云](https://bce.baidu.com/index.html)\n* [新浪云](http://www.sinacloud.com)\n","slug":"blog-opt-wp-hexo","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x83000ezvr35rk0v5ry","content":"<p>经历了WordPress、jekyll、Hexo、WordPress，前几天我还是把博客迁回到Hexo，因为WordPress太庞大了，想修改主题优化下页面性能或者加些个性化的小组件吧，也没折腾出一个前端构建的流程，开发起来很麻烦，放弃治疗啦，于是又回归到<strong>静态博客</strong>的怀抱。</p>\n<p>最近在公司做一些性能优化的工作，重构历史代码和优化打包策略啥的，每次看到优化效果都会觉得很爽，那些数字太漂亮，弄上瘾了，于是拿自己的博客接着改！</p>\n<p>虽然从WordPress到Hexo，我啥也没做，只是做了个“系统选型”的抉择，从重量级到轻量级选手，但是从数据看来，我觉得改得还是非常对的，以后站点会有更多的可玩性 :)</p>\n<a id=\"more\"></a>\n<h2 id=\"改造后的性能优化：\"><a href=\"#改造后的性能优化：\" class=\"headerlink\" title=\"改造后的性能优化：\"></a>改造后的性能优化：</h2><ul>\n<li>请求数，22 -&gt; 7，减少了<strong>68%</strong></li>\n<li>传输容量，1.3M -&gt; 745K，减少了<strong>44%</strong></li>\n<li>Load时间，2.64s -&gt; 1.10s，减少了<strong>58%</strong></li>\n</ul>\n<h3 id=\"Hexo（官方主题Landscape\"><a href=\"#Hexo（官方主题Landscape\" class=\"headerlink\" title=\"Hexo（官方主题Landscape)\"></a>Hexo（官方主题<a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">Landscape</a>)</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/blog-opt/hexo-request.png\" alt=\"Hexo首页加载情况\"></p>\n<h3 id=\"WordPress（2016年官方主题twenty-sixteen）\"><a href=\"#WordPress（2016年官方主题twenty-sixteen）\" class=\"headerlink\" title=\"WordPress（2016年官方主题twenty-sixteen）\"></a>WordPress（2016年官方主题twenty-sixteen）</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/blog-opt/wp-request.png\" alt=\"WordPress首页加载情况\"></p>\n<hr>\n<p>从WordPress迁到Hexo，其实很简单。</p>\n<h2 id=\"1-导出WordPress数据\"><a href=\"#1-导出WordPress数据\" class=\"headerlink\" title=\"1. 导出WordPress数据\"></a>1. 导出WordPress数据</h2><p>仪表盘（wp-admin） -&gt; 工具 -&gt; 导出</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/blog-opt/wp-export.png\" alt=\"&quot;WordPress数据导出&quot;\"></p>\n<h2 id=\"2-搭建Hexo\"><a href=\"#2-搭建Hexo\" class=\"headerlink\" title=\"2. 搭建Hexo\"></a>2. 搭建Hexo</h2><p>i.安装Node.js、npm<br>ii.安装Hexo</p>\n<pre><code>npm install -g hexo-cli \n</code></pre><p>iii. Hexo初始化</p>\n<pre><code>hexo init &lt;folder&gt; // 初始化某个目录  \ncd &lt;folder&gt; // 进入该目录    \nnpm install // 安装所需npm依赖文件\n</code></pre><h2 id=\"3-WordPress到Hexo的迁移\"><a href=\"#3-WordPress到Hexo的迁移\" class=\"headerlink\" title=\"3.WordPress到Hexo的迁移\"></a>3.WordPress到Hexo的迁移</h2><p>i.安装迁移插件</p>\n<pre><code>npm install hexo-migrator-WordPress --save\n</code></pre><p>ii.把WordPress数据导出文件放进Hexo的安装目录<br>iii.执行命令迁移文章：source是数据导出文件</p>\n<pre><code>hexo migrate wordpress &lt;source&gt;\n</code></pre><h2 id=\"4-媒体文件存在哪？\"><a href=\"#4-媒体文件存在哪？\" class=\"headerlink\" title=\"4. 媒体文件存在哪？\"></a>4. 媒体文件存在哪？</h2><p>虽然很方便的迁移了所有WP文章，但是我们可以发现，文章中有些格式可能会包括很多div等多余的html标签，需要人肉调整。</p>\n<p>然后文中引用的媒体文件尤其是图片，还在使用WP数据库中的文件，假如我想彻底脱离WP，我需要把这些媒体资源整理出来，那么问题来了，存在哪？</p>\n<p>目前我在用新浪云的<a href=\"http://open.sinastorage.com\" target=\"_blank\" rel=\"noopener\">云存储SCS</a>服务，访问速度很快，按访问量计费，不过目前像我的博客访问量不大，基本免费。</p>\n<p>新浪云存储SCS服务的价格详情<a href=\"http://www.sinacloud.com/index/price.html\" target=\"_blank\" rel=\"noopener\">传送门 &gt;&gt;</a></p>\n<p>另外也可以考虑：</p>\n<p><a href=\"https://bce.baidu.com/product/bos.html\" target=\"_blank\" rel=\"noopener\">百度云BOS</a>，度厂很多内部产品线都在使用，按需计费，不过我没使用过，不清楚具体收费情况怎样，感兴趣的朋友可以来<a href=\"https://bce.baidu.com/doc/Pricing/BOS.html\" target=\"_blank\" rel=\"noopener\">价格表这儿</a>看看。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/migration.html\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/migration.html\" target=\"_blank\" rel=\"noopener\">Hexo迁移文档</a>：RSS/Jekyll/Octopress/WordPress/Joomla</li>\n<li><a href=\"https://bce.baidu.com/index.html\" target=\"_blank\" rel=\"noopener\">百度开放云</a></li>\n<li><a href=\"http://www.sinacloud.com\" target=\"_blank\" rel=\"noopener\">新浪云</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>经历了WordPress、jekyll、Hexo、WordPress，前几天我还是把博客迁回到Hexo，因为WordPress太庞大了，想修改主题优化下页面性能或者加些个性化的小组件吧，也没折腾出一个前端构建的流程，开发起来很麻烦，放弃治疗啦，于是又回归到<strong>静态博客</strong>的怀抱。</p>\n<p>最近在公司做一些性能优化的工作，重构历史代码和优化打包策略啥的，每次看到优化效果都会觉得很爽，那些数字太漂亮，弄上瘾了，于是拿自己的博客接着改！</p>\n<p>虽然从WordPress到Hexo，我啥也没做，只是做了个“系统选型”的抉择，从重量级到轻量级选手，但是从数据看来，我觉得改得还是非常对的，以后站点会有更多的可玩性 :)</p>","more":"<h2 id=\"改造后的性能优化：\"><a href=\"#改造后的性能优化：\" class=\"headerlink\" title=\"改造后的性能优化：\"></a>改造后的性能优化：</h2><ul>\n<li>请求数，22 -&gt; 7，减少了<strong>68%</strong></li>\n<li>传输容量，1.3M -&gt; 745K，减少了<strong>44%</strong></li>\n<li>Load时间，2.64s -&gt; 1.10s，减少了<strong>58%</strong></li>\n</ul>\n<h3 id=\"Hexo（官方主题Landscape\"><a href=\"#Hexo（官方主题Landscape\" class=\"headerlink\" title=\"Hexo（官方主题Landscape)\"></a>Hexo（官方主题<a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">Landscape</a>)</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/blog-opt/hexo-request.png\" alt=\"Hexo首页加载情况\"></p>\n<h3 id=\"WordPress（2016年官方主题twenty-sixteen）\"><a href=\"#WordPress（2016年官方主题twenty-sixteen）\" class=\"headerlink\" title=\"WordPress（2016年官方主题twenty-sixteen）\"></a>WordPress（2016年官方主题twenty-sixteen）</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/blog-opt/wp-request.png\" alt=\"WordPress首页加载情况\"></p>\n<hr>\n<p>从WordPress迁到Hexo，其实很简单。</p>\n<h2 id=\"1-导出WordPress数据\"><a href=\"#1-导出WordPress数据\" class=\"headerlink\" title=\"1. 导出WordPress数据\"></a>1. 导出WordPress数据</h2><p>仪表盘（wp-admin） -&gt; 工具 -&gt; 导出</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/blog-opt/wp-export.png\" alt=\"&quot;WordPress数据导出&quot;\"></p>\n<h2 id=\"2-搭建Hexo\"><a href=\"#2-搭建Hexo\" class=\"headerlink\" title=\"2. 搭建Hexo\"></a>2. 搭建Hexo</h2><p>i.安装Node.js、npm<br>ii.安装Hexo</p>\n<pre><code>npm install -g hexo-cli \n</code></pre><p>iii. Hexo初始化</p>\n<pre><code>hexo init &lt;folder&gt; // 初始化某个目录  \ncd &lt;folder&gt; // 进入该目录    \nnpm install // 安装所需npm依赖文件\n</code></pre><h2 id=\"3-WordPress到Hexo的迁移\"><a href=\"#3-WordPress到Hexo的迁移\" class=\"headerlink\" title=\"3.WordPress到Hexo的迁移\"></a>3.WordPress到Hexo的迁移</h2><p>i.安装迁移插件</p>\n<pre><code>npm install hexo-migrator-WordPress --save\n</code></pre><p>ii.把WordPress数据导出文件放进Hexo的安装目录<br>iii.执行命令迁移文章：source是数据导出文件</p>\n<pre><code>hexo migrate wordpress &lt;source&gt;\n</code></pre><h2 id=\"4-媒体文件存在哪？\"><a href=\"#4-媒体文件存在哪？\" class=\"headerlink\" title=\"4. 媒体文件存在哪？\"></a>4. 媒体文件存在哪？</h2><p>虽然很方便的迁移了所有WP文章，但是我们可以发现，文章中有些格式可能会包括很多div等多余的html标签，需要人肉调整。</p>\n<p>然后文中引用的媒体文件尤其是图片，还在使用WP数据库中的文件，假如我想彻底脱离WP，我需要把这些媒体资源整理出来，那么问题来了，存在哪？</p>\n<p>目前我在用新浪云的<a href=\"http://open.sinastorage.com\" target=\"_blank\" rel=\"noopener\">云存储SCS</a>服务，访问速度很快，按访问量计费，不过目前像我的博客访问量不大，基本免费。</p>\n<p>新浪云存储SCS服务的价格详情<a href=\"http://www.sinacloud.com/index/price.html\" target=\"_blank\" rel=\"noopener\">传送门 &gt;&gt;</a></p>\n<p>另外也可以考虑：</p>\n<p><a href=\"https://bce.baidu.com/product/bos.html\" target=\"_blank\" rel=\"noopener\">百度云BOS</a>，度厂很多内部产品线都在使用，按需计费，不过我没使用过，不清楚具体收费情况怎样，感兴趣的朋友可以来<a href=\"https://bce.baidu.com/doc/Pricing/BOS.html\" target=\"_blank\" rel=\"noopener\">价格表这儿</a>看看。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/migration.html\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/migration.html\" target=\"_blank\" rel=\"noopener\">Hexo迁移文档</a>：RSS/Jekyll/Octopress/WordPress/Joomla</li>\n<li><a href=\"https://bce.baidu.com/index.html\" target=\"_blank\" rel=\"noopener\">百度开放云</a></li>\n<li><a href=\"http://www.sinacloud.com\" target=\"_blank\" rel=\"noopener\">新浪云</a></li>\n</ul>"},{"title":"Begin Again, 2017","date":"2017-06-01T12:40:30.000Z","type":"photo","cover":"http://sinacloud.net/woodysblog/blog/begin-again-ali-night.jpg","_content":"\n<img src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/blog/begin-again-ali-day.jpg\" />\n\n想跟大家分享我找工作的故事。\n\n今天是2017年5月份的最后一个工作日，去年的这个时候，我在办理离职手续。从离职到重新回到工作中，真是整整一年呀，原来所谓的间隔年是这么回事。\n\n去年5月底，我在杭州，玩了半个月，出国前来杭州，并不是偶然，当时我在想，一年后我会再回来的，来阿里巴巴，我想先来看看这个未来工作的城市。\n\n去年6月中旬，坐上飞机去了南半球的新西兰，体验和收获了各种，今年1月中旬回来了，从开始到结束，跨度了大概8个月。这大半年里面，大部分时间都在玩，间断的有1个多月时间有做临时工，做kiwi fruit包装，上班不用带脑子，下班后也不需要把工作带回家，感觉非常神奇和放松，收入水平跟大家聊过了，最低工资大概2w RMB，会有种智商不用在线、站着就赚钱的感觉，是一种从来没有体验过的工作方式。\n\n很多小伙伴问我，你过去是做专业对口的工作么？在这里再解释一下，打工度假签证有规定不能为一个老板工作超过3个月，这项就限制了一般只能打季节工。何况做临时工的好处是想干就干，想不干就不干，上半个月班，赚够钱了，接着玩3个月，完全ok，这样比较灵活，始终我是去玩的，不是为了用劳动力换钱的，对吧？\n\n回来以后的生活，各种约约约，持续到过年。\n\n好像也不能一直这么hea（不羁放纵）下去，那就找工作吧。我去翻查了下印象笔记的工作日志，原来从2017.1.31（年初四）我就开始准备了，直到5.2我才收到阿里的正式的offer邮件，找工作花4个月？这几个月我都在干嘛呀，哈哈，找工作需要那么长的时间么？当然并不需要，以下分享一下我的时间表。\n\n## 找回感觉的2月\n\n2月份，我给自己列了一个书单和学习计划，一个月的准备时间。这段时间是我感到心理压力最大的时候，真的好难好累，看吧，出来混，还是要还的。\n\n作为一枚工作了近3年并断产了大半年的页面仔，我没有去看面经和一些剑指offer的书哈，说出来也不怕大家笑，我看了一大堆前端基础教科书，如《JavaScript高级程序设计》、《无懈可击的WEB设计》和《图解HTTP》等等，大概11本。~~还有看了廖雪峰、阮一峰和Youtube上的Max、Wes、The Net Ninja等老师的视频教程，包括Vue.js 2、ReactJS、Webpack、ES6、CSS Flex、NodeJS/Express等等。~~以上看的这些啊，都是浅尝即止，不精通，只追求“看过”。算是温故知新吧，这段时间也整理了以前的项目笔记。\n\n开始调整生物钟嘛，每天生活规律，从9点开始，晚上11点左右结束，没有周末。看书，看累了写会代码，写累了看会儿教程，接着再写会儿代码……晚餐后出门散步1小时，日间不定期被我爸妈骚扰，陪聊和看电视剧，这样都能完成我的计划，需要很强的定力，有木有。\n\n前端圈真是个坑，瞬息万变，我真是out太多了，永远有学不完的东西，知道得越多，发现自己知道的越少。不过声明一下哈，我并不觉得新技术不断出现，我们就得见一个爱一个，学到新东西后恨不得武装到自己写的每一行代码里。不是这样的，保持热情拥抱新技术，工作中只用合适的，不盲目追求最新的，始终技术转化成什么才是我们最关心的。\n\n现在我回想，这个2月的学习计划对面试有帮助么？有一点帮助，但不大，看的都没有被问到好吗？因为面试问题太随机了，每个面试官关注点都不一样，抓着简历和项目问，我懂的就懂，不懂的还是不懂，所以2月份对于我来说，不能说是面试准备，应该算是个仪式，生活要有仪式感嘛，是一个重新开始的仪式，仅此而已。\n\n## 开始面试的3月\n\n下面不写面经哈，只谈感受。\n\n一般来说，老板要什么样的人啊？技术靠谱、有团队精神、能扛事有责任感的……\n\n不管条件是什么，嘘~ 我就是。况且我还是个相貌气质佳、有故事的女同学，简直了，哪个boss看到我的简历，打电话来聊几句人生，就应该直接发offer了。要不是裸辞去了gap year，我肯定早就被某家棒棒的公司收了，好不好？磨叽什么呢~ 赶紧把我收了才对嘛！\n\n以上是我的幻想，现实却是很骨感。\n\n想起来也是搞笑，@唐工（曾任职百度、现任职腾讯的测试大神）在职想跳槽的时候，一天安排几家公司，密密麻麻地面试，我现在是全职求职的，但是投出去的简历少之又少，一周或者两周只面一个团队，低频到没朋友，所以求职时间拖得很长。\n\n我的想法是这样的。投简历之前，我想先了解对方是做什么的，自己感不感兴趣，顺便控制台调试一下对方的页面，代码咋样，用得是什么技术栈、构建工具，基本上能摸个差不多，喜欢了才给简历。\n\n整个求职过程，我给3家公司投过简历（捂脸），A创业公司、杭州猪厂和阿里。\n\nA创业公司，有一个我喜欢的百度大神，做直播的，一面谈了15分钟，聊新老技术升级的坑。\n\n猪厂，喜欢他家用心做的产品（情怀），一面谈了40分钟，第一次遇到纯跟我聊基础知识的，HTML/CSS/JS一题一题问的女面试官。\n\n两家公司的一面我都过了，但对方邀请我去上海、杭州进行二面的时候，我怂了，我发现当下最爱的始终是阿里，你们可以得到了我的简历，但得不到我的心。害怕对方真的发offer（我应该是自作多情了，哈哈，人家没说会发offer）。我想对这两家公司的面试官说声抱歉，浪费了他们的时间，因此后来我再也没有给其他团队投过简历。\n\n这段时间，我大概跟10位阿里前辈聊过，每一次的感觉不太一样，但能感受到阿里面试官的平均水平相当高。\n\n遇到过，第一轮就对我压力面，面了一个多小时，花式吊打我的简历，问到我说不知道为止，但我非常佩服这位面试官，他在那么短的时间内问的问题的覆盖面能够那么深那么广；\n\n遇到过，上来就吐槽我的自我介绍毫无信息量的主管，我说了答不出的问题，对方还是一再追问并质疑我的专业背景和技术能力，这也是唯一一次我不知道怎么接话，因为我feel到对方在发脾气，没法继续聊；[其实觉得我不合适，默默打个叉，尽快结束面试就可以了]\n\n遇到过，四轮技术面，其中一轮我还开视频直播写了一小时代码；[其实每轮内容都差不多，感觉没必要四面技术]\n\n遇到过，我花了很长时间回答一道题目，面试官说答得很全面，你是不是专门准备过的；[我确实准备过，不是因为这是常见面试题，而是我觉得里面涵盖自己应该了解的知识点]\n\n遇到过，一面技术摸底，二三面看人品、聊人生的。[这是最符合我想象的面试场景]\n\n万万没想到，差不多每次都聊得那么开心，前3个部门还是拒了我，拿到offer的是我面的第4个部门。\n\n凭着迷之自信，我几乎不会怀疑自己行不行，何况面试那么多轮，没有挂在压力技术面，说明并不是技术问题。但是换谁被拒3次也会不开心的，当我有点心灰意冷的时候，@猩爷给我发了这么一段话，摘自《巨婴国》：\n\n> 成熟的心智，需要基本的信心——我相信持续的投入会转化出我想要的东西，虽然这事不一定会发生，但我越投入，可能性就越大，并且在投入过程中，我的心得到了淬炼。\n\n3月份大概收到过二十多个阿里团队的邀约，我在面第4个部门时，还有另外3个阿里的团队在内推系统等我的简历释放。是啊，屡战屡败，屡败屡战，但我没想放弃治疗，打算一直面阿里，直到加入合适的团队为止。\n\n说起这事，@唐工说看到我这样，她问过自己，有没有一家公司能让她屡败屡战，被拒3遍还要接着面？并没有。\n\n我呢，为什么我要那么执着？为了“梦想本人”马老师，为了盛名在外的阿里前端大神，为了圆大学没有完成的淘宝梦，还是仅仅为了兑现一年前自己的承诺？为什么要来，我也分不清了，我只知道我要来阿里，做我觉得对的事情 —— 做出更好的东西帮助/影响到更多的人。\n\n## 等待的4、5月\n\ngap year后的求职季，止于我现在的团队 —— CBU，让大家见笑了，我的title是`新零售技术事业群-此处省略一万字-前端开发工程师`。\n\n有个非常有趣的插曲，口头offer我足足等了两周，由于部门架构调整，原本的HR去了别的地方，我的offer被遗忘了，后来接到新HR姐姐的电话，我的团队、title都变了，所以入职之前，我对新工作一无所知，只知道自己要去阿里B站（1688.com），用@清姐的话说，我现在是搞批发的，哈哈，以后我会告诉你们我在做的是什么。\n\n说实话，我从来没想过自己会加入大市场前端，真是缘分，我遇到了一个很特别的老大和一群很nice的小伙伴们，挺好的。我相信，一切便是最好的安排，这里会因我而不同，我也会在这里变成一个更好的自己。\n\n辛苦您终于看完了，谨以此图聊表谢意，晚安 ：）\n\n![](http://sinacloud.net/woodysblog/blog/begin-again-ali-night.jpg)\n\n2017.05.31\n写于杭州滨江区江南大道魔方公寓","source":"_posts/begin-again-2017.md","raw":"---\ntitle: Begin Again, 2017\ndate: 2017-06-01 20:40:30\ntype: photo\ncover: http://sinacloud.net/woodysblog/blog/begin-again-ali-night.jpg\ntags:\n- life\n---\n\n<img src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/blog/begin-again-ali-day.jpg\" />\n\n想跟大家分享我找工作的故事。\n\n今天是2017年5月份的最后一个工作日，去年的这个时候，我在办理离职手续。从离职到重新回到工作中，真是整整一年呀，原来所谓的间隔年是这么回事。\n\n去年5月底，我在杭州，玩了半个月，出国前来杭州，并不是偶然，当时我在想，一年后我会再回来的，来阿里巴巴，我想先来看看这个未来工作的城市。\n\n去年6月中旬，坐上飞机去了南半球的新西兰，体验和收获了各种，今年1月中旬回来了，从开始到结束，跨度了大概8个月。这大半年里面，大部分时间都在玩，间断的有1个多月时间有做临时工，做kiwi fruit包装，上班不用带脑子，下班后也不需要把工作带回家，感觉非常神奇和放松，收入水平跟大家聊过了，最低工资大概2w RMB，会有种智商不用在线、站着就赚钱的感觉，是一种从来没有体验过的工作方式。\n\n很多小伙伴问我，你过去是做专业对口的工作么？在这里再解释一下，打工度假签证有规定不能为一个老板工作超过3个月，这项就限制了一般只能打季节工。何况做临时工的好处是想干就干，想不干就不干，上半个月班，赚够钱了，接着玩3个月，完全ok，这样比较灵活，始终我是去玩的，不是为了用劳动力换钱的，对吧？\n\n回来以后的生活，各种约约约，持续到过年。\n\n好像也不能一直这么hea（不羁放纵）下去，那就找工作吧。我去翻查了下印象笔记的工作日志，原来从2017.1.31（年初四）我就开始准备了，直到5.2我才收到阿里的正式的offer邮件，找工作花4个月？这几个月我都在干嘛呀，哈哈，找工作需要那么长的时间么？当然并不需要，以下分享一下我的时间表。\n\n## 找回感觉的2月\n\n2月份，我给自己列了一个书单和学习计划，一个月的准备时间。这段时间是我感到心理压力最大的时候，真的好难好累，看吧，出来混，还是要还的。\n\n作为一枚工作了近3年并断产了大半年的页面仔，我没有去看面经和一些剑指offer的书哈，说出来也不怕大家笑，我看了一大堆前端基础教科书，如《JavaScript高级程序设计》、《无懈可击的WEB设计》和《图解HTTP》等等，大概11本。~~还有看了廖雪峰、阮一峰和Youtube上的Max、Wes、The Net Ninja等老师的视频教程，包括Vue.js 2、ReactJS、Webpack、ES6、CSS Flex、NodeJS/Express等等。~~以上看的这些啊，都是浅尝即止，不精通，只追求“看过”。算是温故知新吧，这段时间也整理了以前的项目笔记。\n\n开始调整生物钟嘛，每天生活规律，从9点开始，晚上11点左右结束，没有周末。看书，看累了写会代码，写累了看会儿教程，接着再写会儿代码……晚餐后出门散步1小时，日间不定期被我爸妈骚扰，陪聊和看电视剧，这样都能完成我的计划，需要很强的定力，有木有。\n\n前端圈真是个坑，瞬息万变，我真是out太多了，永远有学不完的东西，知道得越多，发现自己知道的越少。不过声明一下哈，我并不觉得新技术不断出现，我们就得见一个爱一个，学到新东西后恨不得武装到自己写的每一行代码里。不是这样的，保持热情拥抱新技术，工作中只用合适的，不盲目追求最新的，始终技术转化成什么才是我们最关心的。\n\n现在我回想，这个2月的学习计划对面试有帮助么？有一点帮助，但不大，看的都没有被问到好吗？因为面试问题太随机了，每个面试官关注点都不一样，抓着简历和项目问，我懂的就懂，不懂的还是不懂，所以2月份对于我来说，不能说是面试准备，应该算是个仪式，生活要有仪式感嘛，是一个重新开始的仪式，仅此而已。\n\n## 开始面试的3月\n\n下面不写面经哈，只谈感受。\n\n一般来说，老板要什么样的人啊？技术靠谱、有团队精神、能扛事有责任感的……\n\n不管条件是什么，嘘~ 我就是。况且我还是个相貌气质佳、有故事的女同学，简直了，哪个boss看到我的简历，打电话来聊几句人生，就应该直接发offer了。要不是裸辞去了gap year，我肯定早就被某家棒棒的公司收了，好不好？磨叽什么呢~ 赶紧把我收了才对嘛！\n\n以上是我的幻想，现实却是很骨感。\n\n想起来也是搞笑，@唐工（曾任职百度、现任职腾讯的测试大神）在职想跳槽的时候，一天安排几家公司，密密麻麻地面试，我现在是全职求职的，但是投出去的简历少之又少，一周或者两周只面一个团队，低频到没朋友，所以求职时间拖得很长。\n\n我的想法是这样的。投简历之前，我想先了解对方是做什么的，自己感不感兴趣，顺便控制台调试一下对方的页面，代码咋样，用得是什么技术栈、构建工具，基本上能摸个差不多，喜欢了才给简历。\n\n整个求职过程，我给3家公司投过简历（捂脸），A创业公司、杭州猪厂和阿里。\n\nA创业公司，有一个我喜欢的百度大神，做直播的，一面谈了15分钟，聊新老技术升级的坑。\n\n猪厂，喜欢他家用心做的产品（情怀），一面谈了40分钟，第一次遇到纯跟我聊基础知识的，HTML/CSS/JS一题一题问的女面试官。\n\n两家公司的一面我都过了，但对方邀请我去上海、杭州进行二面的时候，我怂了，我发现当下最爱的始终是阿里，你们可以得到了我的简历，但得不到我的心。害怕对方真的发offer（我应该是自作多情了，哈哈，人家没说会发offer）。我想对这两家公司的面试官说声抱歉，浪费了他们的时间，因此后来我再也没有给其他团队投过简历。\n\n这段时间，我大概跟10位阿里前辈聊过，每一次的感觉不太一样，但能感受到阿里面试官的平均水平相当高。\n\n遇到过，第一轮就对我压力面，面了一个多小时，花式吊打我的简历，问到我说不知道为止，但我非常佩服这位面试官，他在那么短的时间内问的问题的覆盖面能够那么深那么广；\n\n遇到过，上来就吐槽我的自我介绍毫无信息量的主管，我说了答不出的问题，对方还是一再追问并质疑我的专业背景和技术能力，这也是唯一一次我不知道怎么接话，因为我feel到对方在发脾气，没法继续聊；[其实觉得我不合适，默默打个叉，尽快结束面试就可以了]\n\n遇到过，四轮技术面，其中一轮我还开视频直播写了一小时代码；[其实每轮内容都差不多，感觉没必要四面技术]\n\n遇到过，我花了很长时间回答一道题目，面试官说答得很全面，你是不是专门准备过的；[我确实准备过，不是因为这是常见面试题，而是我觉得里面涵盖自己应该了解的知识点]\n\n遇到过，一面技术摸底，二三面看人品、聊人生的。[这是最符合我想象的面试场景]\n\n万万没想到，差不多每次都聊得那么开心，前3个部门还是拒了我，拿到offer的是我面的第4个部门。\n\n凭着迷之自信，我几乎不会怀疑自己行不行，何况面试那么多轮，没有挂在压力技术面，说明并不是技术问题。但是换谁被拒3次也会不开心的，当我有点心灰意冷的时候，@猩爷给我发了这么一段话，摘自《巨婴国》：\n\n> 成熟的心智，需要基本的信心——我相信持续的投入会转化出我想要的东西，虽然这事不一定会发生，但我越投入，可能性就越大，并且在投入过程中，我的心得到了淬炼。\n\n3月份大概收到过二十多个阿里团队的邀约，我在面第4个部门时，还有另外3个阿里的团队在内推系统等我的简历释放。是啊，屡战屡败，屡败屡战，但我没想放弃治疗，打算一直面阿里，直到加入合适的团队为止。\n\n说起这事，@唐工说看到我这样，她问过自己，有没有一家公司能让她屡败屡战，被拒3遍还要接着面？并没有。\n\n我呢，为什么我要那么执着？为了“梦想本人”马老师，为了盛名在外的阿里前端大神，为了圆大学没有完成的淘宝梦，还是仅仅为了兑现一年前自己的承诺？为什么要来，我也分不清了，我只知道我要来阿里，做我觉得对的事情 —— 做出更好的东西帮助/影响到更多的人。\n\n## 等待的4、5月\n\ngap year后的求职季，止于我现在的团队 —— CBU，让大家见笑了，我的title是`新零售技术事业群-此处省略一万字-前端开发工程师`。\n\n有个非常有趣的插曲，口头offer我足足等了两周，由于部门架构调整，原本的HR去了别的地方，我的offer被遗忘了，后来接到新HR姐姐的电话，我的团队、title都变了，所以入职之前，我对新工作一无所知，只知道自己要去阿里B站（1688.com），用@清姐的话说，我现在是搞批发的，哈哈，以后我会告诉你们我在做的是什么。\n\n说实话，我从来没想过自己会加入大市场前端，真是缘分，我遇到了一个很特别的老大和一群很nice的小伙伴们，挺好的。我相信，一切便是最好的安排，这里会因我而不同，我也会在这里变成一个更好的自己。\n\n辛苦您终于看完了，谨以此图聊表谢意，晚安 ：）\n\n![](http://sinacloud.net/woodysblog/blog/begin-again-ali-night.jpg)\n\n2017.05.31\n写于杭州滨江区江南大道魔方公寓","slug":"begin-again-2017","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x85000gzvr3ejjs4oqx","content":"<p><img src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/blog/begin-again-ali-day.jpg\"></p>\n<p>想跟大家分享我找工作的故事。</p>\n<p>今天是2017年5月份的最后一个工作日，去年的这个时候，我在办理离职手续。从离职到重新回到工作中，真是整整一年呀，原来所谓的间隔年是这么回事。</p>\n<p>去年5月底，我在杭州，玩了半个月，出国前来杭州，并不是偶然，当时我在想，一年后我会再回来的，来阿里巴巴，我想先来看看这个未来工作的城市。</p>\n<p>去年6月中旬，坐上飞机去了南半球的新西兰，体验和收获了各种，今年1月中旬回来了，从开始到结束，跨度了大概8个月。这大半年里面，大部分时间都在玩，间断的有1个多月时间有做临时工，做kiwi fruit包装，上班不用带脑子，下班后也不需要把工作带回家，感觉非常神奇和放松，收入水平跟大家聊过了，最低工资大概2w RMB，会有种智商不用在线、站着就赚钱的感觉，是一种从来没有体验过的工作方式。</p>\n<p>很多小伙伴问我，你过去是做专业对口的工作么？在这里再解释一下，打工度假签证有规定不能为一个老板工作超过3个月，这项就限制了一般只能打季节工。何况做临时工的好处是想干就干，想不干就不干，上半个月班，赚够钱了，接着玩3个月，完全ok，这样比较灵活，始终我是去玩的，不是为了用劳动力换钱的，对吧？</p>\n<p>回来以后的生活，各种约约约，持续到过年。</p>\n<p>好像也不能一直这么hea（不羁放纵）下去，那就找工作吧。我去翻查了下印象笔记的工作日志，原来从2017.1.31（年初四）我就开始准备了，直到5.2我才收到阿里的正式的offer邮件，找工作花4个月？这几个月我都在干嘛呀，哈哈，找工作需要那么长的时间么？当然并不需要，以下分享一下我的时间表。</p>\n<h2 id=\"找回感觉的2月\"><a href=\"#找回感觉的2月\" class=\"headerlink\" title=\"找回感觉的2月\"></a>找回感觉的2月</h2><p>2月份，我给自己列了一个书单和学习计划，一个月的准备时间。这段时间是我感到心理压力最大的时候，真的好难好累，看吧，出来混，还是要还的。</p>\n<p>作为一枚工作了近3年并断产了大半年的页面仔，我没有去看面经和一些剑指offer的书哈，说出来也不怕大家笑，我看了一大堆前端基础教科书，如《JavaScript高级程序设计》、《无懈可击的WEB设计》和《图解HTTP》等等，大概11本。<del>还有看了廖雪峰、阮一峰和Youtube上的Max、Wes、The Net Ninja等老师的视频教程，包括Vue.js 2、ReactJS、Webpack、ES6、CSS Flex、NodeJS/Express等等。</del>以上看的这些啊，都是浅尝即止，不精通，只追求“看过”。算是温故知新吧，这段时间也整理了以前的项目笔记。</p>\n<p>开始调整生物钟嘛，每天生活规律，从9点开始，晚上11点左右结束，没有周末。看书，看累了写会代码，写累了看会儿教程，接着再写会儿代码……晚餐后出门散步1小时，日间不定期被我爸妈骚扰，陪聊和看电视剧，这样都能完成我的计划，需要很强的定力，有木有。</p>\n<p>前端圈真是个坑，瞬息万变，我真是out太多了，永远有学不完的东西，知道得越多，发现自己知道的越少。不过声明一下哈，我并不觉得新技术不断出现，我们就得见一个爱一个，学到新东西后恨不得武装到自己写的每一行代码里。不是这样的，保持热情拥抱新技术，工作中只用合适的，不盲目追求最新的，始终技术转化成什么才是我们最关心的。</p>\n<p>现在我回想，这个2月的学习计划对面试有帮助么？有一点帮助，但不大，看的都没有被问到好吗？因为面试问题太随机了，每个面试官关注点都不一样，抓着简历和项目问，我懂的就懂，不懂的还是不懂，所以2月份对于我来说，不能说是面试准备，应该算是个仪式，生活要有仪式感嘛，是一个重新开始的仪式，仅此而已。</p>\n<h2 id=\"开始面试的3月\"><a href=\"#开始面试的3月\" class=\"headerlink\" title=\"开始面试的3月\"></a>开始面试的3月</h2><p>下面不写面经哈，只谈感受。</p>\n<p>一般来说，老板要什么样的人啊？技术靠谱、有团队精神、能扛事有责任感的……</p>\n<p>不管条件是什么，嘘~ 我就是。况且我还是个相貌气质佳、有故事的女同学，简直了，哪个boss看到我的简历，打电话来聊几句人生，就应该直接发offer了。要不是裸辞去了gap year，我肯定早就被某家棒棒的公司收了，好不好？磨叽什么呢~ 赶紧把我收了才对嘛！</p>\n<p>以上是我的幻想，现实却是很骨感。</p>\n<p>想起来也是搞笑，@唐工（曾任职百度、现任职腾讯的测试大神）在职想跳槽的时候，一天安排几家公司，密密麻麻地面试，我现在是全职求职的，但是投出去的简历少之又少，一周或者两周只面一个团队，低频到没朋友，所以求职时间拖得很长。</p>\n<p>我的想法是这样的。投简历之前，我想先了解对方是做什么的，自己感不感兴趣，顺便控制台调试一下对方的页面，代码咋样，用得是什么技术栈、构建工具，基本上能摸个差不多，喜欢了才给简历。</p>\n<p>整个求职过程，我给3家公司投过简历（捂脸），A创业公司、杭州猪厂和阿里。</p>\n<p>A创业公司，有一个我喜欢的百度大神，做直播的，一面谈了15分钟，聊新老技术升级的坑。</p>\n<p>猪厂，喜欢他家用心做的产品（情怀），一面谈了40分钟，第一次遇到纯跟我聊基础知识的，HTML/CSS/JS一题一题问的女面试官。</p>\n<p>两家公司的一面我都过了，但对方邀请我去上海、杭州进行二面的时候，我怂了，我发现当下最爱的始终是阿里，你们可以得到了我的简历，但得不到我的心。害怕对方真的发offer（我应该是自作多情了，哈哈，人家没说会发offer）。我想对这两家公司的面试官说声抱歉，浪费了他们的时间，因此后来我再也没有给其他团队投过简历。</p>\n<p>这段时间，我大概跟10位阿里前辈聊过，每一次的感觉不太一样，但能感受到阿里面试官的平均水平相当高。</p>\n<p>遇到过，第一轮就对我压力面，面了一个多小时，花式吊打我的简历，问到我说不知道为止，但我非常佩服这位面试官，他在那么短的时间内问的问题的覆盖面能够那么深那么广；</p>\n<p>遇到过，上来就吐槽我的自我介绍毫无信息量的主管，我说了答不出的问题，对方还是一再追问并质疑我的专业背景和技术能力，这也是唯一一次我不知道怎么接话，因为我feel到对方在发脾气，没法继续聊；[其实觉得我不合适，默默打个叉，尽快结束面试就可以了]</p>\n<p>遇到过，四轮技术面，其中一轮我还开视频直播写了一小时代码；[其实每轮内容都差不多，感觉没必要四面技术]</p>\n<p>遇到过，我花了很长时间回答一道题目，面试官说答得很全面，你是不是专门准备过的；[我确实准备过，不是因为这是常见面试题，而是我觉得里面涵盖自己应该了解的知识点]</p>\n<p>遇到过，一面技术摸底，二三面看人品、聊人生的。[这是最符合我想象的面试场景]</p>\n<p>万万没想到，差不多每次都聊得那么开心，前3个部门还是拒了我，拿到offer的是我面的第4个部门。</p>\n<p>凭着迷之自信，我几乎不会怀疑自己行不行，何况面试那么多轮，没有挂在压力技术面，说明并不是技术问题。但是换谁被拒3次也会不开心的，当我有点心灰意冷的时候，@猩爷给我发了这么一段话，摘自《巨婴国》：</p>\n<blockquote>\n<p>成熟的心智，需要基本的信心——我相信持续的投入会转化出我想要的东西，虽然这事不一定会发生，但我越投入，可能性就越大，并且在投入过程中，我的心得到了淬炼。</p>\n</blockquote>\n<p>3月份大概收到过二十多个阿里团队的邀约，我在面第4个部门时，还有另外3个阿里的团队在内推系统等我的简历释放。是啊，屡战屡败，屡败屡战，但我没想放弃治疗，打算一直面阿里，直到加入合适的团队为止。</p>\n<p>说起这事，@唐工说看到我这样，她问过自己，有没有一家公司能让她屡败屡战，被拒3遍还要接着面？并没有。</p>\n<p>我呢，为什么我要那么执着？为了“梦想本人”马老师，为了盛名在外的阿里前端大神，为了圆大学没有完成的淘宝梦，还是仅仅为了兑现一年前自己的承诺？为什么要来，我也分不清了，我只知道我要来阿里，做我觉得对的事情 —— 做出更好的东西帮助/影响到更多的人。</p>\n<h2 id=\"等待的4、5月\"><a href=\"#等待的4、5月\" class=\"headerlink\" title=\"等待的4、5月\"></a>等待的4、5月</h2><p>gap year后的求职季，止于我现在的团队 —— CBU，让大家见笑了，我的title是<code>新零售技术事业群-此处省略一万字-前端开发工程师</code>。</p>\n<p>有个非常有趣的插曲，口头offer我足足等了两周，由于部门架构调整，原本的HR去了别的地方，我的offer被遗忘了，后来接到新HR姐姐的电话，我的团队、title都变了，所以入职之前，我对新工作一无所知，只知道自己要去阿里B站（1688.com），用@清姐的话说，我现在是搞批发的，哈哈，以后我会告诉你们我在做的是什么。</p>\n<p>说实话，我从来没想过自己会加入大市场前端，真是缘分，我遇到了一个很特别的老大和一群很nice的小伙伴们，挺好的。我相信，一切便是最好的安排，这里会因我而不同，我也会在这里变成一个更好的自己。</p>\n<p>辛苦您终于看完了，谨以此图聊表谢意，晚安 ：）</p>\n<p><img src=\"http://sinacloud.net/woodysblog/blog/begin-again-ali-night.jpg\" alt=\"\"></p>\n<p>2017.05.31<br>写于杭州滨江区江南大道魔方公寓</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/blog/begin-again-ali-day.jpg\"></p>\n<p>想跟大家分享我找工作的故事。</p>\n<p>今天是2017年5月份的最后一个工作日，去年的这个时候，我在办理离职手续。从离职到重新回到工作中，真是整整一年呀，原来所谓的间隔年是这么回事。</p>\n<p>去年5月底，我在杭州，玩了半个月，出国前来杭州，并不是偶然，当时我在想，一年后我会再回来的，来阿里巴巴，我想先来看看这个未来工作的城市。</p>\n<p>去年6月中旬，坐上飞机去了南半球的新西兰，体验和收获了各种，今年1月中旬回来了，从开始到结束，跨度了大概8个月。这大半年里面，大部分时间都在玩，间断的有1个多月时间有做临时工，做kiwi fruit包装，上班不用带脑子，下班后也不需要把工作带回家，感觉非常神奇和放松，收入水平跟大家聊过了，最低工资大概2w RMB，会有种智商不用在线、站着就赚钱的感觉，是一种从来没有体验过的工作方式。</p>\n<p>很多小伙伴问我，你过去是做专业对口的工作么？在这里再解释一下，打工度假签证有规定不能为一个老板工作超过3个月，这项就限制了一般只能打季节工。何况做临时工的好处是想干就干，想不干就不干，上半个月班，赚够钱了，接着玩3个月，完全ok，这样比较灵活，始终我是去玩的，不是为了用劳动力换钱的，对吧？</p>\n<p>回来以后的生活，各种约约约，持续到过年。</p>\n<p>好像也不能一直这么hea（不羁放纵）下去，那就找工作吧。我去翻查了下印象笔记的工作日志，原来从2017.1.31（年初四）我就开始准备了，直到5.2我才收到阿里的正式的offer邮件，找工作花4个月？这几个月我都在干嘛呀，哈哈，找工作需要那么长的时间么？当然并不需要，以下分享一下我的时间表。</p>\n<h2 id=\"找回感觉的2月\"><a href=\"#找回感觉的2月\" class=\"headerlink\" title=\"找回感觉的2月\"></a>找回感觉的2月</h2><p>2月份，我给自己列了一个书单和学习计划，一个月的准备时间。这段时间是我感到心理压力最大的时候，真的好难好累，看吧，出来混，还是要还的。</p>\n<p>作为一枚工作了近3年并断产了大半年的页面仔，我没有去看面经和一些剑指offer的书哈，说出来也不怕大家笑，我看了一大堆前端基础教科书，如《JavaScript高级程序设计》、《无懈可击的WEB设计》和《图解HTTP》等等，大概11本。<del>还有看了廖雪峰、阮一峰和Youtube上的Max、Wes、The Net Ninja等老师的视频教程，包括Vue.js 2、ReactJS、Webpack、ES6、CSS Flex、NodeJS/Express等等。</del>以上看的这些啊，都是浅尝即止，不精通，只追求“看过”。算是温故知新吧，这段时间也整理了以前的项目笔记。</p>\n<p>开始调整生物钟嘛，每天生活规律，从9点开始，晚上11点左右结束，没有周末。看书，看累了写会代码，写累了看会儿教程，接着再写会儿代码……晚餐后出门散步1小时，日间不定期被我爸妈骚扰，陪聊和看电视剧，这样都能完成我的计划，需要很强的定力，有木有。</p>\n<p>前端圈真是个坑，瞬息万变，我真是out太多了，永远有学不完的东西，知道得越多，发现自己知道的越少。不过声明一下哈，我并不觉得新技术不断出现，我们就得见一个爱一个，学到新东西后恨不得武装到自己写的每一行代码里。不是这样的，保持热情拥抱新技术，工作中只用合适的，不盲目追求最新的，始终技术转化成什么才是我们最关心的。</p>\n<p>现在我回想，这个2月的学习计划对面试有帮助么？有一点帮助，但不大，看的都没有被问到好吗？因为面试问题太随机了，每个面试官关注点都不一样，抓着简历和项目问，我懂的就懂，不懂的还是不懂，所以2月份对于我来说，不能说是面试准备，应该算是个仪式，生活要有仪式感嘛，是一个重新开始的仪式，仅此而已。</p>\n<h2 id=\"开始面试的3月\"><a href=\"#开始面试的3月\" class=\"headerlink\" title=\"开始面试的3月\"></a>开始面试的3月</h2><p>下面不写面经哈，只谈感受。</p>\n<p>一般来说，老板要什么样的人啊？技术靠谱、有团队精神、能扛事有责任感的……</p>\n<p>不管条件是什么，嘘~ 我就是。况且我还是个相貌气质佳、有故事的女同学，简直了，哪个boss看到我的简历，打电话来聊几句人生，就应该直接发offer了。要不是裸辞去了gap year，我肯定早就被某家棒棒的公司收了，好不好？磨叽什么呢~ 赶紧把我收了才对嘛！</p>\n<p>以上是我的幻想，现实却是很骨感。</p>\n<p>想起来也是搞笑，@唐工（曾任职百度、现任职腾讯的测试大神）在职想跳槽的时候，一天安排几家公司，密密麻麻地面试，我现在是全职求职的，但是投出去的简历少之又少，一周或者两周只面一个团队，低频到没朋友，所以求职时间拖得很长。</p>\n<p>我的想法是这样的。投简历之前，我想先了解对方是做什么的，自己感不感兴趣，顺便控制台调试一下对方的页面，代码咋样，用得是什么技术栈、构建工具，基本上能摸个差不多，喜欢了才给简历。</p>\n<p>整个求职过程，我给3家公司投过简历（捂脸），A创业公司、杭州猪厂和阿里。</p>\n<p>A创业公司，有一个我喜欢的百度大神，做直播的，一面谈了15分钟，聊新老技术升级的坑。</p>\n<p>猪厂，喜欢他家用心做的产品（情怀），一面谈了40分钟，第一次遇到纯跟我聊基础知识的，HTML/CSS/JS一题一题问的女面试官。</p>\n<p>两家公司的一面我都过了，但对方邀请我去上海、杭州进行二面的时候，我怂了，我发现当下最爱的始终是阿里，你们可以得到了我的简历，但得不到我的心。害怕对方真的发offer（我应该是自作多情了，哈哈，人家没说会发offer）。我想对这两家公司的面试官说声抱歉，浪费了他们的时间，因此后来我再也没有给其他团队投过简历。</p>\n<p>这段时间，我大概跟10位阿里前辈聊过，每一次的感觉不太一样，但能感受到阿里面试官的平均水平相当高。</p>\n<p>遇到过，第一轮就对我压力面，面了一个多小时，花式吊打我的简历，问到我说不知道为止，但我非常佩服这位面试官，他在那么短的时间内问的问题的覆盖面能够那么深那么广；</p>\n<p>遇到过，上来就吐槽我的自我介绍毫无信息量的主管，我说了答不出的问题，对方还是一再追问并质疑我的专业背景和技术能力，这也是唯一一次我不知道怎么接话，因为我feel到对方在发脾气，没法继续聊；[其实觉得我不合适，默默打个叉，尽快结束面试就可以了]</p>\n<p>遇到过，四轮技术面，其中一轮我还开视频直播写了一小时代码；[其实每轮内容都差不多，感觉没必要四面技术]</p>\n<p>遇到过，我花了很长时间回答一道题目，面试官说答得很全面，你是不是专门准备过的；[我确实准备过，不是因为这是常见面试题，而是我觉得里面涵盖自己应该了解的知识点]</p>\n<p>遇到过，一面技术摸底，二三面看人品、聊人生的。[这是最符合我想象的面试场景]</p>\n<p>万万没想到，差不多每次都聊得那么开心，前3个部门还是拒了我，拿到offer的是我面的第4个部门。</p>\n<p>凭着迷之自信，我几乎不会怀疑自己行不行，何况面试那么多轮，没有挂在压力技术面，说明并不是技术问题。但是换谁被拒3次也会不开心的，当我有点心灰意冷的时候，@猩爷给我发了这么一段话，摘自《巨婴国》：</p>\n<blockquote>\n<p>成熟的心智，需要基本的信心——我相信持续的投入会转化出我想要的东西，虽然这事不一定会发生，但我越投入，可能性就越大，并且在投入过程中，我的心得到了淬炼。</p>\n</blockquote>\n<p>3月份大概收到过二十多个阿里团队的邀约，我在面第4个部门时，还有另外3个阿里的团队在内推系统等我的简历释放。是啊，屡战屡败，屡败屡战，但我没想放弃治疗，打算一直面阿里，直到加入合适的团队为止。</p>\n<p>说起这事，@唐工说看到我这样，她问过自己，有没有一家公司能让她屡败屡战，被拒3遍还要接着面？并没有。</p>\n<p>我呢，为什么我要那么执着？为了“梦想本人”马老师，为了盛名在外的阿里前端大神，为了圆大学没有完成的淘宝梦，还是仅仅为了兑现一年前自己的承诺？为什么要来，我也分不清了，我只知道我要来阿里，做我觉得对的事情 —— 做出更好的东西帮助/影响到更多的人。</p>\n<h2 id=\"等待的4、5月\"><a href=\"#等待的4、5月\" class=\"headerlink\" title=\"等待的4、5月\"></a>等待的4、5月</h2><p>gap year后的求职季，止于我现在的团队 —— CBU，让大家见笑了，我的title是<code>新零售技术事业群-此处省略一万字-前端开发工程师</code>。</p>\n<p>有个非常有趣的插曲，口头offer我足足等了两周，由于部门架构调整，原本的HR去了别的地方，我的offer被遗忘了，后来接到新HR姐姐的电话，我的团队、title都变了，所以入职之前，我对新工作一无所知，只知道自己要去阿里B站（1688.com），用@清姐的话说，我现在是搞批发的，哈哈，以后我会告诉你们我在做的是什么。</p>\n<p>说实话，我从来没想过自己会加入大市场前端，真是缘分，我遇到了一个很特别的老大和一群很nice的小伙伴们，挺好的。我相信，一切便是最好的安排，这里会因我而不同，我也会在这里变成一个更好的自己。</p>\n<p>辛苦您终于看完了，谨以此图聊表谢意，晚安 ：）</p>\n<p><img src=\"http://sinacloud.net/woodysblog/blog/begin-again-ali-night.jpg\" alt=\"\"></p>\n<p>2017.05.31<br>写于杭州滨江区江南大道魔方公寓</p>\n"},{"title":"CSS自定义属性 —— 别说你懂CSS相对单位","date":"2018-07-05T05:28:04.000Z","_content":"\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/) [本文]\n\n本文对应的章节目录：\n\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 在今年年初，译者也写过一篇[《CSS Variables学习笔记》](http://www.wuyuying.com/blog/archives/css-var/)，里面有更多的CSS Variables的语法解释和实例demo，感兴趣的朋友可以看看 ：）\n\n***\n\n## 2.6 自定义属性（也叫“CSS变量”）\n\n在2015年，一个大家期待已久的名为“用作层叠式变量的自定义属性”（Custom Properties for Cascading Variables）的CSS规范终于发布为“候选推荐标准”（Candidate Recommendation）。这套规范引入了CSS中“变量”的概念，支持一种新的基于上下文的动态样式定义方式。你可以声明一个变量，再给它赋值，然后就可以在样式表的任何地方引用它。你可以通过这样的方式，减少样式表中的重复代码，以及后续你会看到的一些有用的应用场景。\n\n在写这本书的时候，自定义属性已经被大多数主流浏览器支持了，除了IE。查看最新的浏览器支持情况，可以查看Can I Use的[http://caniuse.com/#feat=css-variables](http://caniuse.com/#feat=css-variables)。\n\n> ### 笔记  \n> \n> 如果你刚好在用支持自定义变量的CSS预处理器，如Sass（syntactically awesome stylesheets）或Less，你可能会下意识拒绝CSS变量。千万别这么做。因为原生的CSS变量比任何一个预处理器能实现的功能都要强大和灵活。为了强调它们之间（原生CSS变量和预处理器自定义变量）的差异，我会把它叫作“自定义属性”，而不用“CSS变量”。\n\n声明一个自定义属性，跟声明其他属性类似。代码片段2.23是自定义属性声明的例子。新建一个页面和样式表吧，然后添加以下的CSS代码。\n\n[ 代码片段 2.23 声明一个自定义属性 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n}\n```\n\n代码片段中，定义了一个名叫`--main-font`的变量，然后把它的值设定为普通的字体sans-serif。为了和其他属性区分开，命名的前缀必须是两道横杠（`--`），然后写上你想要的名字。\n\n变量一定要声明在一个声明区块内。在这里，我使用了`:root`选择器，那么这个变量就可以在整个页面的样式里使用 —— 后面我会简单解释这个问题。\n\n变量的声明，就它本身而言，不会做任何事情，直到我们在代码里引用它。我们在一个段落中使用它吧，做成像图2.13那样的效果。\n\n[ 图 2.13 对一个简单段落使用用变量声明的字体sans-serif ]\n\n![\"图 2.13\"](http://sinacloud.net/woodysblog/css-in-depth/02fig13_alt.jpg)\n\n我们可以用一个叫作`var()`的函数去引用自定义属性的值。现在，你可以利用这个函数去引用我们刚才声明的变量`--main-font`。把下面展示的代码片段添加到你的样式表中吧，把变量用起来。\n\n[ 代码片段 2.24 使用一个自定义属性 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n}\n\np {                                    1\n  font-family: var(--main-font);       1\n}   \n```\n\n* 1 把段落的字体定义为 Helvetica, Arial, sans-serif\n\n自定义属性可以让你在一个地方声明它的值，作为一个“单一数据源”（single source of truth），然后在样式表的任意一个地方引用。这一点对一些反复出现的值特别有用，譬如颜色。下一个代码片段添加了一个名叫`brand-color`的自定义属性。你可以在样式表中多次使用这个变量，但假如你需要（全局）修改它的值，只需要在一行代码中编辑它的值就可以了。\n\n[ 代码片段 2.25 对color使用自定义属性 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n  --brand-color: #369;                           1\n}\n\np {\n  font-family: var(--main-font);\n  color: var(--brand-color);\n}\n```\n\n* 1 声明一个蓝色的`brand-color`变量\n\n`var()`函数支持第二个参数，代表一个默认值。假如一个变量被声明的时候，第一个参数没有被声明，那么第二个参数值就会被引用。\n\n[ 代码片段 2.26 提供回退默认值 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n  --brand-color: #369;\n}\n\np {\n  font-family: var(--main-font, sans-serif);         1\n  color: var(--secondary-color, blue);               2\n}\n```\n\n* 1 声明一个默认值 sans-serif\n* 2 变量 secondary-color 没有被声明，于是默认值 blue 会被使用\n\n这段代码在两个不同的声明中，定义了默认值。第一个声明里，`--main-font`被声明，值为`Helvetica, Arial,sans-serif`，于是这个值就会被用到了。第二个声明里，`--secondary-color`是一个没有声明过的变量，所以默认值 blue 被用到了。\n\n> 笔记  \n> 如果`var()`被定义为一个无效值，这个属性会被定义为它的初始值。举个例子，如果在`padding: var(--brand-color)`中，变量是一个色号，那对于padding来说这就是一个无效值。在这个情况下，padding的值会被定义为0。\n\n### 2.6.1 动态改变自定义属性的值\n\n从这些例子可以看到，自定义属性只是更方便了一点，也可以帮助你减少很多的重复代码。但让自定义属性更有意思的是，自定义属性的声明是可以层叠和继承的。你可以在多个选择器中声明同一个变量，这些变量在页面的不同部分可以有着不一样的值。\n\n你可以声明一个变量是黑色的，举个例子，然后在一个特定的容器里把它重新定义为白色的。于是，在这个容器以外的所有依赖这个变量的颜色是黑色，而在容器内的就是白色。通过这样的方式，我们来实现一个像图2.14这样的效果。\n\n[ 图 2.14 自定义属性基于不同域下的值，生成两个颜色不一样的面板 ]\n\n![\"图 2.14\"](http://sinacloud.net/woodysblog/css-in-depth/02fig14_alt.jpg)\n\n这个面板类似你之前看到的那个（图2.7），HTML在代码片段2.27。这个面板有两个实例，一个在body下，另一个在一个深色的区块。来，更新下你的代码。\n\n[ 代码片段 2.27 页面上不同上下文的两个面板 ]\n\n```\n<body>\n  <div class=\"panel\">                               1\n    <h2>Single-origin</h2>\n    <div class=\"body\">\n      We have built partnerships with small farms\n      around the world to hand-select beans at the\n      peak of season. We then careful roast in\n      small batches to maximize their potential.\n    </div>\n  </div>\n\n  <aside class=\"dark\">                              2\n    <div class=\"panel\">                             2\n      <h2>Single-origin</h2>\n      <div class=\"body\">\n        We have built partnerships with small farms\n        around the world to hand-select beans at the\n        peak of season. We then careful roast in\n        small batches to maximize their potential.\n      </div>\n    </div>\n  </aside>\n</body>\n```\n\n* 1 页面上一个普通的面板\n* 2 第二个面板在深色容器里\n\n我们用变量重新改写一下面板中的文字和背景颜色。把下面的代码片段加进你的样式表。这里把背景颜色设成白色，文字颜色设成黑色。在你添加深色主题之前，我会解释这段代码的工作原理。\n\n[ 代码片段 2.28 利用变量定义面板的颜色 ]\n\n```\n:root {\n  --main-bg: #fff;                       1\n  --main-color: #000;                    1\n}\n\n.panel {\n  font-size: 1rem;\n  padding: 1em;\n  border: 1px solid #999;\n  border-radius: 0.5em;\n  background-color: var(--main-bg);      2\n  color: var(--main-color);              2\n}\n\n.panel > h2 {\n  margin-top: 0;\n  font-size: 0.8em;\n  font-weight: bold;\n  text-transform: uppercase;\n}\n```\n\n* 1 分别把背景色和文字颜色定义为白色和黑色\n* 2 在面板样式中使用变量\n\n你再一次把变量声明在`:root`选择器里。很明显，这样的话我们就可以在根元素（整个页面）下的任何元素中引用这个变量了。当根元素下的子元素使用这些变量时，它们就能拿到这些变量对应的值。\n\n你有两个面板，不过它们仍然看起来是一样的。现在，再一次定义这些变量，但这次是在一个不同的选择器中。下一个代码片段是深色容器的，它有深灰色的背景色，以及小小的padding和margin。同时，它也重写了两个变量。添加到你的样式表吧。\n\n[ 代码片段 2.29 设置深色容器的样式 ]\n\n```\n.dark {\n  margin-top: 2em;                   1\n  padding: 1em;\n  background-color: #999;            2\n  --main-bg: #333;                   3\n  --main-color: #fff;                3\n}\n```\n\n* 1 在深色容器和上一个容器间设定一个margin\n* 2 给深色容器设定深灰色的背景色\n* 3 在当前容器的作用域下，重新定义--main-bg 和 --main-color的值\n\n刷新页面，第二个面板就会有深色背景和白色文字。这是因为当这个面板去调用这些变量时，拿到的是深色容器作用域下的值，而不是根元素域下的值。注意，你并不需要修改这个容器里的样式或者添加额外的类名。\n\n在这个例子里，你两次定义了自定义属性，第一次在根元素作用域上（`--main-color`是黑色的），第二次在深色容器作用域（`--main-color`是白色的）。自定义属性表现得像作用域变量，因为值会被后代元素继承。在深色容器中，`--main-color`是白色的，而在页面的其他位置，它是黑色的。\n\n### 2.6.2 通过JavaScript改变自定义属性的值\n\n在浏览器中，自定义属性还可以被JavaScript访问和动态地修改。毕竟这不是一本讲JavaScript的书，我会告诉你足够多的基本概念，然后你再把这些融入到自己的JavaScript项目中。\n\n[ 代码片段 2.30 在JavaScript里访问一个自定义变量 ]\n\n```\n<script type=\"text/javascript\">\n  var rootElement = document.documentElement;\n  var styles = getComputedStyle(rootElement);                 1\n  var mainColor = styles.getPropertyValue('--main-bg');       2\n  console.log(String(mainColor).trim());                      3\n</script>\n```\n\n* 1 获取元素的样式对象（style object）\n* 2 从样式对象中获得 --main-bg 的值\n* 3 确认 mainColor 是一个字符串以及把空格去掉，输出“#fff”\n\n因为你可以随手修改自定义属性的值，你可以用JavaScript给`--main-bg`动态地定义一个新的值。如果你把它定义为浅蓝色，它就是展示成这样（图2.15）。\n\n[ 图 2.15 JavaScript可以通过改变变量--main-bg的值改变面板的背景色 ]\n\n![\"图 2.15\"](http://sinacloud.net/woodysblog/css-in-depth/02fig15_alt.jpg)\n\n下面的代码片段，会在根元素下给`--main-bg`定义一个新的值，在`<script>`标签的最下面，加上这些的代码。\n\n[ 代码片段 2.31 在JavaScript定义一个自定义变量的值 ]\n\n```\nvar rootElement = document.documentElement;\nrootElement.style.setProperty('--main-bg', '#cdf');            1\n```\n\n* 1 把根元素下的 --main-bg 定义为浅蓝色\n\n如果你执行这段代码，任何继承了`--main-bg`属性的元素都会发生改变，对应的值会变成新的。在你的页面上，这会把第一个面板的背景色变成浅蓝色。第二个面板保持不变，因为它继承的还是在深色容器里定义的值。\n\n利用这项技术，你可以在浏览器里用JavaScript给你的站点换主题。或者你可以高亮页面上的某些部分，又或者随手就可以做一些改变。只需要少量几行JavaScript代码，你做的改变就可以影响到页面上大量的元素。\n\n### 2.6.3 初探自定义属性\n\n自定义属性是一个全新的CSS领域，开发者才刚刚开始探索。因为目前浏览器的支持比较有限，所以还没有到使用它的“黄金时间”。我相信，一段时间之后，你会看到很多关于自定义属性的最佳实践和新颖的玩法。这是你需要留意的。尝试使用自定义属性，看看你可以做出些什么吧。\n\n需要关注的一点，如果你使用`var()`声明，低版本浏览器不能识别就会忽略它。如果可以的话，给那些浏览器提供一个回退（fallback）方案。\n\n[ 代码片段（没有编号） ]\n\n```\ncolor: black;\ncolor: var(--main-color);\n```\n\n自定义属性原生的动态特性，并不是总是可以使用的，可以关注它的浏览器支持情况[http://caniuse.com](http://caniuse.com)。\n\n## 总结\n\n* 拥抱和使用相对单位，让页面的结构去定义样式代码的含义\n* 个人喜欢对字号大小使用rem，选择性地对页面组件的一些简单缩放效果使用em\n* 你可以让整个页面实现响应式缩放，而不需要任何的媒体查询\n* 在声明行高时，使用不带单位的数值\n* 开始了解和使用CSS最新的特性之一——自定义属性吧！\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/) [本文]\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)  \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","source":"_posts/css-in-depth-css-variables.md","raw":"---\ntitle: CSS自定义属性 —— 别说你懂CSS相对单位\ndate: 2018-07-05 13:28:04\ntags:\n- front-end\n- css\n---\n\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/) [本文]\n\n本文对应的章节目录：\n\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 在今年年初，译者也写过一篇[《CSS Variables学习笔记》](http://www.wuyuying.com/blog/archives/css-var/)，里面有更多的CSS Variables的语法解释和实例demo，感兴趣的朋友可以看看 ：）\n\n***\n\n## 2.6 自定义属性（也叫“CSS变量”）\n\n在2015年，一个大家期待已久的名为“用作层叠式变量的自定义属性”（Custom Properties for Cascading Variables）的CSS规范终于发布为“候选推荐标准”（Candidate Recommendation）。这套规范引入了CSS中“变量”的概念，支持一种新的基于上下文的动态样式定义方式。你可以声明一个变量，再给它赋值，然后就可以在样式表的任何地方引用它。你可以通过这样的方式，减少样式表中的重复代码，以及后续你会看到的一些有用的应用场景。\n\n在写这本书的时候，自定义属性已经被大多数主流浏览器支持了，除了IE。查看最新的浏览器支持情况，可以查看Can I Use的[http://caniuse.com/#feat=css-variables](http://caniuse.com/#feat=css-variables)。\n\n> ### 笔记  \n> \n> 如果你刚好在用支持自定义变量的CSS预处理器，如Sass（syntactically awesome stylesheets）或Less，你可能会下意识拒绝CSS变量。千万别这么做。因为原生的CSS变量比任何一个预处理器能实现的功能都要强大和灵活。为了强调它们之间（原生CSS变量和预处理器自定义变量）的差异，我会把它叫作“自定义属性”，而不用“CSS变量”。\n\n声明一个自定义属性，跟声明其他属性类似。代码片段2.23是自定义属性声明的例子。新建一个页面和样式表吧，然后添加以下的CSS代码。\n\n[ 代码片段 2.23 声明一个自定义属性 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n}\n```\n\n代码片段中，定义了一个名叫`--main-font`的变量，然后把它的值设定为普通的字体sans-serif。为了和其他属性区分开，命名的前缀必须是两道横杠（`--`），然后写上你想要的名字。\n\n变量一定要声明在一个声明区块内。在这里，我使用了`:root`选择器，那么这个变量就可以在整个页面的样式里使用 —— 后面我会简单解释这个问题。\n\n变量的声明，就它本身而言，不会做任何事情，直到我们在代码里引用它。我们在一个段落中使用它吧，做成像图2.13那样的效果。\n\n[ 图 2.13 对一个简单段落使用用变量声明的字体sans-serif ]\n\n![\"图 2.13\"](http://sinacloud.net/woodysblog/css-in-depth/02fig13_alt.jpg)\n\n我们可以用一个叫作`var()`的函数去引用自定义属性的值。现在，你可以利用这个函数去引用我们刚才声明的变量`--main-font`。把下面展示的代码片段添加到你的样式表中吧，把变量用起来。\n\n[ 代码片段 2.24 使用一个自定义属性 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n}\n\np {                                    1\n  font-family: var(--main-font);       1\n}   \n```\n\n* 1 把段落的字体定义为 Helvetica, Arial, sans-serif\n\n自定义属性可以让你在一个地方声明它的值，作为一个“单一数据源”（single source of truth），然后在样式表的任意一个地方引用。这一点对一些反复出现的值特别有用，譬如颜色。下一个代码片段添加了一个名叫`brand-color`的自定义属性。你可以在样式表中多次使用这个变量，但假如你需要（全局）修改它的值，只需要在一行代码中编辑它的值就可以了。\n\n[ 代码片段 2.25 对color使用自定义属性 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n  --brand-color: #369;                           1\n}\n\np {\n  font-family: var(--main-font);\n  color: var(--brand-color);\n}\n```\n\n* 1 声明一个蓝色的`brand-color`变量\n\n`var()`函数支持第二个参数，代表一个默认值。假如一个变量被声明的时候，第一个参数没有被声明，那么第二个参数值就会被引用。\n\n[ 代码片段 2.26 提供回退默认值 ]\n\n```\n:root {\n  --main-font: Helvetica, Arial, sans-serif;\n  --brand-color: #369;\n}\n\np {\n  font-family: var(--main-font, sans-serif);         1\n  color: var(--secondary-color, blue);               2\n}\n```\n\n* 1 声明一个默认值 sans-serif\n* 2 变量 secondary-color 没有被声明，于是默认值 blue 会被使用\n\n这段代码在两个不同的声明中，定义了默认值。第一个声明里，`--main-font`被声明，值为`Helvetica, Arial,sans-serif`，于是这个值就会被用到了。第二个声明里，`--secondary-color`是一个没有声明过的变量，所以默认值 blue 被用到了。\n\n> 笔记  \n> 如果`var()`被定义为一个无效值，这个属性会被定义为它的初始值。举个例子，如果在`padding: var(--brand-color)`中，变量是一个色号，那对于padding来说这就是一个无效值。在这个情况下，padding的值会被定义为0。\n\n### 2.6.1 动态改变自定义属性的值\n\n从这些例子可以看到，自定义属性只是更方便了一点，也可以帮助你减少很多的重复代码。但让自定义属性更有意思的是，自定义属性的声明是可以层叠和继承的。你可以在多个选择器中声明同一个变量，这些变量在页面的不同部分可以有着不一样的值。\n\n你可以声明一个变量是黑色的，举个例子，然后在一个特定的容器里把它重新定义为白色的。于是，在这个容器以外的所有依赖这个变量的颜色是黑色，而在容器内的就是白色。通过这样的方式，我们来实现一个像图2.14这样的效果。\n\n[ 图 2.14 自定义属性基于不同域下的值，生成两个颜色不一样的面板 ]\n\n![\"图 2.14\"](http://sinacloud.net/woodysblog/css-in-depth/02fig14_alt.jpg)\n\n这个面板类似你之前看到的那个（图2.7），HTML在代码片段2.27。这个面板有两个实例，一个在body下，另一个在一个深色的区块。来，更新下你的代码。\n\n[ 代码片段 2.27 页面上不同上下文的两个面板 ]\n\n```\n<body>\n  <div class=\"panel\">                               1\n    <h2>Single-origin</h2>\n    <div class=\"body\">\n      We have built partnerships with small farms\n      around the world to hand-select beans at the\n      peak of season. We then careful roast in\n      small batches to maximize their potential.\n    </div>\n  </div>\n\n  <aside class=\"dark\">                              2\n    <div class=\"panel\">                             2\n      <h2>Single-origin</h2>\n      <div class=\"body\">\n        We have built partnerships with small farms\n        around the world to hand-select beans at the\n        peak of season. We then careful roast in\n        small batches to maximize their potential.\n      </div>\n    </div>\n  </aside>\n</body>\n```\n\n* 1 页面上一个普通的面板\n* 2 第二个面板在深色容器里\n\n我们用变量重新改写一下面板中的文字和背景颜色。把下面的代码片段加进你的样式表。这里把背景颜色设成白色，文字颜色设成黑色。在你添加深色主题之前，我会解释这段代码的工作原理。\n\n[ 代码片段 2.28 利用变量定义面板的颜色 ]\n\n```\n:root {\n  --main-bg: #fff;                       1\n  --main-color: #000;                    1\n}\n\n.panel {\n  font-size: 1rem;\n  padding: 1em;\n  border: 1px solid #999;\n  border-radius: 0.5em;\n  background-color: var(--main-bg);      2\n  color: var(--main-color);              2\n}\n\n.panel > h2 {\n  margin-top: 0;\n  font-size: 0.8em;\n  font-weight: bold;\n  text-transform: uppercase;\n}\n```\n\n* 1 分别把背景色和文字颜色定义为白色和黑色\n* 2 在面板样式中使用变量\n\n你再一次把变量声明在`:root`选择器里。很明显，这样的话我们就可以在根元素（整个页面）下的任何元素中引用这个变量了。当根元素下的子元素使用这些变量时，它们就能拿到这些变量对应的值。\n\n你有两个面板，不过它们仍然看起来是一样的。现在，再一次定义这些变量，但这次是在一个不同的选择器中。下一个代码片段是深色容器的，它有深灰色的背景色，以及小小的padding和margin。同时，它也重写了两个变量。添加到你的样式表吧。\n\n[ 代码片段 2.29 设置深色容器的样式 ]\n\n```\n.dark {\n  margin-top: 2em;                   1\n  padding: 1em;\n  background-color: #999;            2\n  --main-bg: #333;                   3\n  --main-color: #fff;                3\n}\n```\n\n* 1 在深色容器和上一个容器间设定一个margin\n* 2 给深色容器设定深灰色的背景色\n* 3 在当前容器的作用域下，重新定义--main-bg 和 --main-color的值\n\n刷新页面，第二个面板就会有深色背景和白色文字。这是因为当这个面板去调用这些变量时，拿到的是深色容器作用域下的值，而不是根元素域下的值。注意，你并不需要修改这个容器里的样式或者添加额外的类名。\n\n在这个例子里，你两次定义了自定义属性，第一次在根元素作用域上（`--main-color`是黑色的），第二次在深色容器作用域（`--main-color`是白色的）。自定义属性表现得像作用域变量，因为值会被后代元素继承。在深色容器中，`--main-color`是白色的，而在页面的其他位置，它是黑色的。\n\n### 2.6.2 通过JavaScript改变自定义属性的值\n\n在浏览器中，自定义属性还可以被JavaScript访问和动态地修改。毕竟这不是一本讲JavaScript的书，我会告诉你足够多的基本概念，然后你再把这些融入到自己的JavaScript项目中。\n\n[ 代码片段 2.30 在JavaScript里访问一个自定义变量 ]\n\n```\n<script type=\"text/javascript\">\n  var rootElement = document.documentElement;\n  var styles = getComputedStyle(rootElement);                 1\n  var mainColor = styles.getPropertyValue('--main-bg');       2\n  console.log(String(mainColor).trim());                      3\n</script>\n```\n\n* 1 获取元素的样式对象（style object）\n* 2 从样式对象中获得 --main-bg 的值\n* 3 确认 mainColor 是一个字符串以及把空格去掉，输出“#fff”\n\n因为你可以随手修改自定义属性的值，你可以用JavaScript给`--main-bg`动态地定义一个新的值。如果你把它定义为浅蓝色，它就是展示成这样（图2.15）。\n\n[ 图 2.15 JavaScript可以通过改变变量--main-bg的值改变面板的背景色 ]\n\n![\"图 2.15\"](http://sinacloud.net/woodysblog/css-in-depth/02fig15_alt.jpg)\n\n下面的代码片段，会在根元素下给`--main-bg`定义一个新的值，在`<script>`标签的最下面，加上这些的代码。\n\n[ 代码片段 2.31 在JavaScript定义一个自定义变量的值 ]\n\n```\nvar rootElement = document.documentElement;\nrootElement.style.setProperty('--main-bg', '#cdf');            1\n```\n\n* 1 把根元素下的 --main-bg 定义为浅蓝色\n\n如果你执行这段代码，任何继承了`--main-bg`属性的元素都会发生改变，对应的值会变成新的。在你的页面上，这会把第一个面板的背景色变成浅蓝色。第二个面板保持不变，因为它继承的还是在深色容器里定义的值。\n\n利用这项技术，你可以在浏览器里用JavaScript给你的站点换主题。或者你可以高亮页面上的某些部分，又或者随手就可以做一些改变。只需要少量几行JavaScript代码，你做的改变就可以影响到页面上大量的元素。\n\n### 2.6.3 初探自定义属性\n\n自定义属性是一个全新的CSS领域，开发者才刚刚开始探索。因为目前浏览器的支持比较有限，所以还没有到使用它的“黄金时间”。我相信，一段时间之后，你会看到很多关于自定义属性的最佳实践和新颖的玩法。这是你需要留意的。尝试使用自定义属性，看看你可以做出些什么吧。\n\n需要关注的一点，如果你使用`var()`声明，低版本浏览器不能识别就会忽略它。如果可以的话，给那些浏览器提供一个回退（fallback）方案。\n\n[ 代码片段（没有编号） ]\n\n```\ncolor: black;\ncolor: var(--main-color);\n```\n\n自定义属性原生的动态特性，并不是总是可以使用的，可以关注它的浏览器支持情况[http://caniuse.com](http://caniuse.com)。\n\n## 总结\n\n* 拥抱和使用相对单位，让页面的结构去定义样式代码的含义\n* 个人喜欢对字号大小使用rem，选择性地对页面组件的一些简单缩放效果使用em\n* 你可以让整个页面实现响应式缩放，而不需要任何的媒体查询\n* 在声明行高时，使用不带单位的数值\n* 开始了解和使用CSS最新的特性之一——自定义属性吧！\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/) [本文]\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)  \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","slug":"css-in-depth-css-variables","published":1,"updated":"2018-07-08T07:59:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x88000kzvr3z2mqcuc6","content":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a> [本文]</li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>在今年年初，译者也写过一篇<a href=\"http://www.wuyuying.com/blog/archives/css-var/\" target=\"_blank\" rel=\"noopener\">《CSS Variables学习笔记》</a>，里面有更多的CSS Variables的语法解释和实例demo，感兴趣的朋友可以看看 ：）</p>\n</blockquote>\n<hr>\n<h2 id=\"2-6-自定义属性（也叫“CSS变量”）\"><a href=\"#2-6-自定义属性（也叫“CSS变量”）\" class=\"headerlink\" title=\"2.6 自定义属性（也叫“CSS变量”）\"></a>2.6 自定义属性（也叫“CSS变量”）</h2><p>在2015年，一个大家期待已久的名为“用作层叠式变量的自定义属性”（Custom Properties for Cascading Variables）的CSS规范终于发布为“候选推荐标准”（Candidate Recommendation）。这套规范引入了CSS中“变量”的概念，支持一种新的基于上下文的动态样式定义方式。你可以声明一个变量，再给它赋值，然后就可以在样式表的任何地方引用它。你可以通过这样的方式，减少样式表中的重复代码，以及后续你会看到的一些有用的应用场景。</p>\n<p>在写这本书的时候，自定义属性已经被大多数主流浏览器支持了，除了IE。查看最新的浏览器支持情况，可以查看Can I Use的<a href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#feat=css-variables</a>。</p>\n<blockquote>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><p>如果你刚好在用支持自定义变量的CSS预处理器，如Sass（syntactically awesome stylesheets）或Less，你可能会下意识拒绝CSS变量。千万别这么做。因为原生的CSS变量比任何一个预处理器能实现的功能都要强大和灵活。为了强调它们之间（原生CSS变量和预处理器自定义变量）的差异，我会把它叫作“自定义属性”，而不用“CSS变量”。</p>\n</blockquote>\n<p>声明一个自定义属性，跟声明其他属性类似。代码片段2.23是自定义属性声明的例子。新建一个页面和样式表吧，然后添加以下的CSS代码。</p>\n<p>[ 代码片段 2.23 声明一个自定义属性 ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码片段中，定义了一个名叫<code>--main-font</code>的变量，然后把它的值设定为普通的字体sans-serif。为了和其他属性区分开，命名的前缀必须是两道横杠（<code>--</code>），然后写上你想要的名字。</p>\n<p>变量一定要声明在一个声明区块内。在这里，我使用了<code>:root</code>选择器，那么这个变量就可以在整个页面的样式里使用 —— 后面我会简单解释这个问题。</p>\n<p>变量的声明，就它本身而言，不会做任何事情，直到我们在代码里引用它。我们在一个段落中使用它吧，做成像图2.13那样的效果。</p>\n<p>[ 图 2.13 对一个简单段落使用用变量声明的字体sans-serif ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig13_alt.jpg\" alt=\"&quot;图 2.13&quot;\"></p>\n<p>我们可以用一个叫作<code>var()</code>的函数去引用自定义属性的值。现在，你可以利用这个函数去引用我们刚才声明的变量<code>--main-font</code>。把下面展示的代码片段添加到你的样式表中吧，把变量用起来。</p>\n<p>[ 代码片段 2.24 使用一个自定义属性 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-<span class=\"attribute\">font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;                                    1</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: var(--main-font);       1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 把段落的字体定义为 Helvetica, Arial, sans-serif</li>\n</ul>\n<p>自定义属性可以让你在一个地方声明它的值，作为一个“单一数据源”（single source of truth），然后在样式表的任意一个地方引用。这一点对一些反复出现的值特别有用，譬如颜色。下一个代码片段添加了一个名叫<code>brand-color</code>的自定义属性。你可以在样式表中多次使用这个变量，但假如你需要（全局）修改它的值，只需要在一行代码中编辑它的值就可以了。</p>\n<p>[ 代码片段 2.25 对color使用自定义属性 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-<span class=\"attribute\">font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  --brand-<span class=\"attribute\">color</span>: <span class=\"number\">#369</span>;                           1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: var(--main-font);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: var(--brand-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 声明一个蓝色的<code>brand-color</code>变量</li>\n</ul>\n<p><code>var()</code>函数支持第二个参数，代表一个默认值。假如一个变量被声明的时候，第一个参数没有被声明，那么第二个参数值就会被引用。</p>\n<p>[ 代码片段 2.26 提供回退默认值 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-<span class=\"attribute\">font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  --brand-<span class=\"attribute\">color</span>: <span class=\"number\">#369</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: var(--main-font, sans-serif);         1</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: var(--secondary-color, blue);               2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 声明一个默认值 sans-serif</li>\n<li>2 变量 secondary-color 没有被声明，于是默认值 blue 会被使用</li>\n</ul>\n<p>这段代码在两个不同的声明中，定义了默认值。第一个声明里，<code>--main-font</code>被声明，值为<code>Helvetica, Arial,sans-serif</code>，于是这个值就会被用到了。第二个声明里，<code>--secondary-color</code>是一个没有声明过的变量，所以默认值 blue 被用到了。</p>\n<blockquote>\n<p>笔记<br>如果<code>var()</code>被定义为一个无效值，这个属性会被定义为它的初始值。举个例子，如果在<code>padding: var(--brand-color)</code>中，变量是一个色号，那对于padding来说这就是一个无效值。在这个情况下，padding的值会被定义为0。</p>\n</blockquote>\n<h3 id=\"2-6-1-动态改变自定义属性的值\"><a href=\"#2-6-1-动态改变自定义属性的值\" class=\"headerlink\" title=\"2.6.1 动态改变自定义属性的值\"></a>2.6.1 动态改变自定义属性的值</h3><p>从这些例子可以看到，自定义属性只是更方便了一点，也可以帮助你减少很多的重复代码。但让自定义属性更有意思的是，自定义属性的声明是可以层叠和继承的。你可以在多个选择器中声明同一个变量，这些变量在页面的不同部分可以有着不一样的值。</p>\n<p>你可以声明一个变量是黑色的，举个例子，然后在一个特定的容器里把它重新定义为白色的。于是，在这个容器以外的所有依赖这个变量的颜色是黑色，而在容器内的就是白色。通过这样的方式，我们来实现一个像图2.14这样的效果。</p>\n<p>[ 图 2.14 自定义属性基于不同域下的值，生成两个颜色不一样的面板 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig14_alt.jpg\" alt=\"&quot;图 2.14&quot;\"></p>\n<p>这个面板类似你之前看到的那个（图2.7），HTML在代码片段2.27。这个面板有两个实例，一个在body下，另一个在一个深色的区块。来，更新下你的代码。</p>\n<p>[ 代码片段 2.27 页面上不同上下文的两个面板 ]</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"panel\"</span>&gt;                               <span class=\"number\">1</span></span><br><span class=\"line\">    &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><br><span class=\"line\">      We have built partnerships <span class=\"keyword\">with</span> small farms</span><br><span class=\"line\">      <span class=\"keyword\">around</span> <span class=\"keyword\">the</span> world <span class=\"keyword\">to</span> hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">      peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> careful roast <span class=\"keyword\">in</span></span><br><span class=\"line\">      small batches <span class=\"keyword\">to</span> maximize their potential.</span><br><span class=\"line\">    &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;aside <span class=\"built_in\">class</span>=<span class=\"string\">\"dark\"</span>&gt;                              <span class=\"number\">2</span></span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"panel\"</span>&gt;                             <span class=\"number\">2</span></span><br><span class=\"line\">      &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><br><span class=\"line\">        We have built partnerships <span class=\"keyword\">with</span> small farms</span><br><span class=\"line\">        <span class=\"keyword\">around</span> <span class=\"keyword\">the</span> world <span class=\"keyword\">to</span> hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">        peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> careful roast <span class=\"keyword\">in</span></span><br><span class=\"line\">        small batches <span class=\"keyword\">to</span> maximize their potential.</span><br><span class=\"line\">      &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/aside&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 页面上一个普通的面板</li>\n<li>2 第二个面板在深色容器里</li>\n</ul>\n<p>我们用变量重新改写一下面板中的文字和背景颜色。把下面的代码片段加进你的样式表。这里把背景颜色设成白色，文字颜色设成黑色。在你添加深色主题之前，我会解释这段代码的工作原理。</p>\n<p>[ 代码片段 2.28 利用变量定义面板的颜色 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-bg: <span class=\"number\">#fff</span>;                       1</span><br><span class=\"line\">  --main-<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;                    1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: var(--main-bg);      2</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: var(--main-color);              2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &gt; <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 分别把背景色和文字颜色定义为白色和黑色</li>\n<li>2 在面板样式中使用变量</li>\n</ul>\n<p>你再一次把变量声明在<code>:root</code>选择器里。很明显，这样的话我们就可以在根元素（整个页面）下的任何元素中引用这个变量了。当根元素下的子元素使用这些变量时，它们就能拿到这些变量对应的值。</p>\n<p>你有两个面板，不过它们仍然看起来是一样的。现在，再一次定义这些变量，但这次是在一个不同的选择器中。下一个代码片段是深色容器的，它有深灰色的背景色，以及小小的padding和margin。同时，它也重写了两个变量。添加到你的样式表吧。</p>\n<p>[ 代码片段 2.29 设置深色容器的样式 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dark</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">2em</span>;                   1</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#999</span>;            2</span><br><span class=\"line\">  --main-bg: <span class=\"number\">#333</span>;                   3</span><br><span class=\"line\">  --main-<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;                3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 在深色容器和上一个容器间设定一个margin</li>\n<li>2 给深色容器设定深灰色的背景色</li>\n<li>3 在当前容器的作用域下，重新定义–main-bg 和 –main-color的值</li>\n</ul>\n<p>刷新页面，第二个面板就会有深色背景和白色文字。这是因为当这个面板去调用这些变量时，拿到的是深色容器作用域下的值，而不是根元素域下的值。注意，你并不需要修改这个容器里的样式或者添加额外的类名。</p>\n<p>在这个例子里，你两次定义了自定义属性，第一次在根元素作用域上（<code>--main-color</code>是黑色的），第二次在深色容器作用域（<code>--main-color</code>是白色的）。自定义属性表现得像作用域变量，因为值会被后代元素继承。在深色容器中，<code>--main-color</code>是白色的，而在页面的其他位置，它是黑色的。</p>\n<h3 id=\"2-6-2-通过JavaScript改变自定义属性的值\"><a href=\"#2-6-2-通过JavaScript改变自定义属性的值\" class=\"headerlink\" title=\"2.6.2 通过JavaScript改变自定义属性的值\"></a>2.6.2 通过JavaScript改变自定义属性的值</h3><p>在浏览器中，自定义属性还可以被JavaScript访问和动态地修改。毕竟这不是一本讲JavaScript的书，我会告诉你足够多的基本概念，然后你再把这些融入到自己的JavaScript项目中。</p>\n<p>[ 代码片段 2.30 在JavaScript里访问一个自定义变量 ]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> rootElement = <span class=\"built_in\">document</span>.documentElement;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> styles = getComputedStyle(rootElement);                 <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> mainColor = styles.getPropertyValue(<span class=\"string\">'--main-bg'</span>);       <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(mainColor).trim());                      <span class=\"number\">3</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 获取元素的样式对象（style object）</li>\n<li>2 从样式对象中获得 –main-bg 的值</li>\n<li>3 确认 mainColor 是一个字符串以及把空格去掉，输出“#fff”</li>\n</ul>\n<p>因为你可以随手修改自定义属性的值，你可以用JavaScript给<code>--main-bg</code>动态地定义一个新的值。如果你把它定义为浅蓝色，它就是展示成这样（图2.15）。</p>\n<p>[ 图 2.15 JavaScript可以通过改变变量–main-bg的值改变面板的背景色 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig15_alt.jpg\" alt=\"&quot;图 2.15&quot;\"></p>\n<p>下面的代码片段，会在根元素下给<code>--main-bg</code>定义一个新的值，在<code>&lt;script&gt;</code>标签的最下面，加上这些的代码。</p>\n<p>[ 代码片段 2.31 在JavaScript定义一个自定义变量的值 ]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootElement = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">rootElement.style.setProperty(<span class=\"string\">'--main-bg'</span>, <span class=\"string\">'#cdf'</span>);            <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 把根元素下的 –main-bg 定义为浅蓝色</li>\n</ul>\n<p>如果你执行这段代码，任何继承了<code>--main-bg</code>属性的元素都会发生改变，对应的值会变成新的。在你的页面上，这会把第一个面板的背景色变成浅蓝色。第二个面板保持不变，因为它继承的还是在深色容器里定义的值。</p>\n<p>利用这项技术，你可以在浏览器里用JavaScript给你的站点换主题。或者你可以高亮页面上的某些部分，又或者随手就可以做一些改变。只需要少量几行JavaScript代码，你做的改变就可以影响到页面上大量的元素。</p>\n<h3 id=\"2-6-3-初探自定义属性\"><a href=\"#2-6-3-初探自定义属性\" class=\"headerlink\" title=\"2.6.3 初探自定义属性\"></a>2.6.3 初探自定义属性</h3><p>自定义属性是一个全新的CSS领域，开发者才刚刚开始探索。因为目前浏览器的支持比较有限，所以还没有到使用它的“黄金时间”。我相信，一段时间之后，你会看到很多关于自定义属性的最佳实践和新颖的玩法。这是你需要留意的。尝试使用自定义属性，看看你可以做出些什么吧。</p>\n<p>需要关注的一点，如果你使用<code>var()</code>声明，低版本浏览器不能识别就会忽略它。如果可以的话，给那些浏览器提供一个回退（fallback）方案。</p>\n<p>[ 代码片段（没有编号） ]</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">color</span>: black;</span><br><span class=\"line\"><span class=\"built_in\">color</span>: <span class=\"built_in\">var</span>(--main-<span class=\"built_in\">color</span>);</span><br></pre></td></tr></table></figure>\n<p>自定义属性原生的动态特性，并不是总是可以使用的，可以关注它的浏览器支持情况<a href=\"http://caniuse.com\" target=\"_blank\" rel=\"noopener\">http://caniuse.com</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>拥抱和使用相对单位，让页面的结构去定义样式代码的含义</li>\n<li>个人喜欢对字号大小使用rem，选择性地对页面组件的一些简单缩放效果使用em</li>\n<li>你可以让整个页面实现响应式缩放，而不需要任何的媒体查询</li>\n<li>在声明行高时，使用不带单位的数值</li>\n<li>开始了解和使用CSS最新的特性之一——自定义属性吧！</li>\n</ul>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a> [本文]</li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>  </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a> [本文]</li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>在今年年初，译者也写过一篇<a href=\"http://www.wuyuying.com/blog/archives/css-var/\" target=\"_blank\" rel=\"noopener\">《CSS Variables学习笔记》</a>，里面有更多的CSS Variables的语法解释和实例demo，感兴趣的朋友可以看看 ：）</p>\n</blockquote>\n<hr>\n<h2 id=\"2-6-自定义属性（也叫“CSS变量”）\"><a href=\"#2-6-自定义属性（也叫“CSS变量”）\" class=\"headerlink\" title=\"2.6 自定义属性（也叫“CSS变量”）\"></a>2.6 自定义属性（也叫“CSS变量”）</h2><p>在2015年，一个大家期待已久的名为“用作层叠式变量的自定义属性”（Custom Properties for Cascading Variables）的CSS规范终于发布为“候选推荐标准”（Candidate Recommendation）。这套规范引入了CSS中“变量”的概念，支持一种新的基于上下文的动态样式定义方式。你可以声明一个变量，再给它赋值，然后就可以在样式表的任何地方引用它。你可以通过这样的方式，减少样式表中的重复代码，以及后续你会看到的一些有用的应用场景。</p>\n<p>在写这本书的时候，自定义属性已经被大多数主流浏览器支持了，除了IE。查看最新的浏览器支持情况，可以查看Can I Use的<a href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#feat=css-variables</a>。</p>\n<blockquote>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><p>如果你刚好在用支持自定义变量的CSS预处理器，如Sass（syntactically awesome stylesheets）或Less，你可能会下意识拒绝CSS变量。千万别这么做。因为原生的CSS变量比任何一个预处理器能实现的功能都要强大和灵活。为了强调它们之间（原生CSS变量和预处理器自定义变量）的差异，我会把它叫作“自定义属性”，而不用“CSS变量”。</p>\n</blockquote>\n<p>声明一个自定义属性，跟声明其他属性类似。代码片段2.23是自定义属性声明的例子。新建一个页面和样式表吧，然后添加以下的CSS代码。</p>\n<p>[ 代码片段 2.23 声明一个自定义属性 ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码片段中，定义了一个名叫<code>--main-font</code>的变量，然后把它的值设定为普通的字体sans-serif。为了和其他属性区分开，命名的前缀必须是两道横杠（<code>--</code>），然后写上你想要的名字。</p>\n<p>变量一定要声明在一个声明区块内。在这里，我使用了<code>:root</code>选择器，那么这个变量就可以在整个页面的样式里使用 —— 后面我会简单解释这个问题。</p>\n<p>变量的声明，就它本身而言，不会做任何事情，直到我们在代码里引用它。我们在一个段落中使用它吧，做成像图2.13那样的效果。</p>\n<p>[ 图 2.13 对一个简单段落使用用变量声明的字体sans-serif ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig13_alt.jpg\" alt=\"&quot;图 2.13&quot;\"></p>\n<p>我们可以用一个叫作<code>var()</code>的函数去引用自定义属性的值。现在，你可以利用这个函数去引用我们刚才声明的变量<code>--main-font</code>。把下面展示的代码片段添加到你的样式表中吧，把变量用起来。</p>\n<p>[ 代码片段 2.24 使用一个自定义属性 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-<span class=\"attribute\">font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;                                    1</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: var(--main-font);       1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 把段落的字体定义为 Helvetica, Arial, sans-serif</li>\n</ul>\n<p>自定义属性可以让你在一个地方声明它的值，作为一个“单一数据源”（single source of truth），然后在样式表的任意一个地方引用。这一点对一些反复出现的值特别有用，譬如颜色。下一个代码片段添加了一个名叫<code>brand-color</code>的自定义属性。你可以在样式表中多次使用这个变量，但假如你需要（全局）修改它的值，只需要在一行代码中编辑它的值就可以了。</p>\n<p>[ 代码片段 2.25 对color使用自定义属性 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-<span class=\"attribute\">font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  --brand-<span class=\"attribute\">color</span>: <span class=\"number\">#369</span>;                           1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: var(--main-font);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: var(--brand-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 声明一个蓝色的<code>brand-color</code>变量</li>\n</ul>\n<p><code>var()</code>函数支持第二个参数，代表一个默认值。假如一个变量被声明的时候，第一个参数没有被声明，那么第二个参数值就会被引用。</p>\n<p>[ 代码片段 2.26 提供回退默认值 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-<span class=\"attribute\">font</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  --brand-<span class=\"attribute\">color</span>: <span class=\"number\">#369</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: var(--main-font, sans-serif);         1</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: var(--secondary-color, blue);               2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 声明一个默认值 sans-serif</li>\n<li>2 变量 secondary-color 没有被声明，于是默认值 blue 会被使用</li>\n</ul>\n<p>这段代码在两个不同的声明中，定义了默认值。第一个声明里，<code>--main-font</code>被声明，值为<code>Helvetica, Arial,sans-serif</code>，于是这个值就会被用到了。第二个声明里，<code>--secondary-color</code>是一个没有声明过的变量，所以默认值 blue 被用到了。</p>\n<blockquote>\n<p>笔记<br>如果<code>var()</code>被定义为一个无效值，这个属性会被定义为它的初始值。举个例子，如果在<code>padding: var(--brand-color)</code>中，变量是一个色号，那对于padding来说这就是一个无效值。在这个情况下，padding的值会被定义为0。</p>\n</blockquote>\n<h3 id=\"2-6-1-动态改变自定义属性的值\"><a href=\"#2-6-1-动态改变自定义属性的值\" class=\"headerlink\" title=\"2.6.1 动态改变自定义属性的值\"></a>2.6.1 动态改变自定义属性的值</h3><p>从这些例子可以看到，自定义属性只是更方便了一点，也可以帮助你减少很多的重复代码。但让自定义属性更有意思的是，自定义属性的声明是可以层叠和继承的。你可以在多个选择器中声明同一个变量，这些变量在页面的不同部分可以有着不一样的值。</p>\n<p>你可以声明一个变量是黑色的，举个例子，然后在一个特定的容器里把它重新定义为白色的。于是，在这个容器以外的所有依赖这个变量的颜色是黑色，而在容器内的就是白色。通过这样的方式，我们来实现一个像图2.14这样的效果。</p>\n<p>[ 图 2.14 自定义属性基于不同域下的值，生成两个颜色不一样的面板 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig14_alt.jpg\" alt=\"&quot;图 2.14&quot;\"></p>\n<p>这个面板类似你之前看到的那个（图2.7），HTML在代码片段2.27。这个面板有两个实例，一个在body下，另一个在一个深色的区块。来，更新下你的代码。</p>\n<p>[ 代码片段 2.27 页面上不同上下文的两个面板 ]</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"panel\"</span>&gt;                               <span class=\"number\">1</span></span><br><span class=\"line\">    &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><br><span class=\"line\">      We have built partnerships <span class=\"keyword\">with</span> small farms</span><br><span class=\"line\">      <span class=\"keyword\">around</span> <span class=\"keyword\">the</span> world <span class=\"keyword\">to</span> hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">      peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> careful roast <span class=\"keyword\">in</span></span><br><span class=\"line\">      small batches <span class=\"keyword\">to</span> maximize their potential.</span><br><span class=\"line\">    &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;aside <span class=\"built_in\">class</span>=<span class=\"string\">\"dark\"</span>&gt;                              <span class=\"number\">2</span></span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"panel\"</span>&gt;                             <span class=\"number\">2</span></span><br><span class=\"line\">      &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><br><span class=\"line\">        We have built partnerships <span class=\"keyword\">with</span> small farms</span><br><span class=\"line\">        <span class=\"keyword\">around</span> <span class=\"keyword\">the</span> world <span class=\"keyword\">to</span> hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">        peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> careful roast <span class=\"keyword\">in</span></span><br><span class=\"line\">        small batches <span class=\"keyword\">to</span> maximize their potential.</span><br><span class=\"line\">      &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/aside&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 页面上一个普通的面板</li>\n<li>2 第二个面板在深色容器里</li>\n</ul>\n<p>我们用变量重新改写一下面板中的文字和背景颜色。把下面的代码片段加进你的样式表。这里把背景颜色设成白色，文字颜色设成黑色。在你添加深色主题之前，我会解释这段代码的工作原理。</p>\n<p>[ 代码片段 2.28 利用变量定义面板的颜色 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --main-bg: <span class=\"number\">#fff</span>;                       1</span><br><span class=\"line\">  --main-<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;                    1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: var(--main-bg);      2</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: var(--main-color);              2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &gt; <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 分别把背景色和文字颜色定义为白色和黑色</li>\n<li>2 在面板样式中使用变量</li>\n</ul>\n<p>你再一次把变量声明在<code>:root</code>选择器里。很明显，这样的话我们就可以在根元素（整个页面）下的任何元素中引用这个变量了。当根元素下的子元素使用这些变量时，它们就能拿到这些变量对应的值。</p>\n<p>你有两个面板，不过它们仍然看起来是一样的。现在，再一次定义这些变量，但这次是在一个不同的选择器中。下一个代码片段是深色容器的，它有深灰色的背景色，以及小小的padding和margin。同时，它也重写了两个变量。添加到你的样式表吧。</p>\n<p>[ 代码片段 2.29 设置深色容器的样式 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dark</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">2em</span>;                   1</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#999</span>;            2</span><br><span class=\"line\">  --main-bg: <span class=\"number\">#333</span>;                   3</span><br><span class=\"line\">  --main-<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;                3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 在深色容器和上一个容器间设定一个margin</li>\n<li>2 给深色容器设定深灰色的背景色</li>\n<li>3 在当前容器的作用域下，重新定义–main-bg 和 –main-color的值</li>\n</ul>\n<p>刷新页面，第二个面板就会有深色背景和白色文字。这是因为当这个面板去调用这些变量时，拿到的是深色容器作用域下的值，而不是根元素域下的值。注意，你并不需要修改这个容器里的样式或者添加额外的类名。</p>\n<p>在这个例子里，你两次定义了自定义属性，第一次在根元素作用域上（<code>--main-color</code>是黑色的），第二次在深色容器作用域（<code>--main-color</code>是白色的）。自定义属性表现得像作用域变量，因为值会被后代元素继承。在深色容器中，<code>--main-color</code>是白色的，而在页面的其他位置，它是黑色的。</p>\n<h3 id=\"2-6-2-通过JavaScript改变自定义属性的值\"><a href=\"#2-6-2-通过JavaScript改变自定义属性的值\" class=\"headerlink\" title=\"2.6.2 通过JavaScript改变自定义属性的值\"></a>2.6.2 通过JavaScript改变自定义属性的值</h3><p>在浏览器中，自定义属性还可以被JavaScript访问和动态地修改。毕竟这不是一本讲JavaScript的书，我会告诉你足够多的基本概念，然后你再把这些融入到自己的JavaScript项目中。</p>\n<p>[ 代码片段 2.30 在JavaScript里访问一个自定义变量 ]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> rootElement = <span class=\"built_in\">document</span>.documentElement;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> styles = getComputedStyle(rootElement);                 <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> mainColor = styles.getPropertyValue(<span class=\"string\">'--main-bg'</span>);       <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(mainColor).trim());                      <span class=\"number\">3</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 获取元素的样式对象（style object）</li>\n<li>2 从样式对象中获得 –main-bg 的值</li>\n<li>3 确认 mainColor 是一个字符串以及把空格去掉，输出“#fff”</li>\n</ul>\n<p>因为你可以随手修改自定义属性的值，你可以用JavaScript给<code>--main-bg</code>动态地定义一个新的值。如果你把它定义为浅蓝色，它就是展示成这样（图2.15）。</p>\n<p>[ 图 2.15 JavaScript可以通过改变变量–main-bg的值改变面板的背景色 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig15_alt.jpg\" alt=\"&quot;图 2.15&quot;\"></p>\n<p>下面的代码片段，会在根元素下给<code>--main-bg</code>定义一个新的值，在<code>&lt;script&gt;</code>标签的最下面，加上这些的代码。</p>\n<p>[ 代码片段 2.31 在JavaScript定义一个自定义变量的值 ]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootElement = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">rootElement.style.setProperty(<span class=\"string\">'--main-bg'</span>, <span class=\"string\">'#cdf'</span>);            <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 把根元素下的 –main-bg 定义为浅蓝色</li>\n</ul>\n<p>如果你执行这段代码，任何继承了<code>--main-bg</code>属性的元素都会发生改变，对应的值会变成新的。在你的页面上，这会把第一个面板的背景色变成浅蓝色。第二个面板保持不变，因为它继承的还是在深色容器里定义的值。</p>\n<p>利用这项技术，你可以在浏览器里用JavaScript给你的站点换主题。或者你可以高亮页面上的某些部分，又或者随手就可以做一些改变。只需要少量几行JavaScript代码，你做的改变就可以影响到页面上大量的元素。</p>\n<h3 id=\"2-6-3-初探自定义属性\"><a href=\"#2-6-3-初探自定义属性\" class=\"headerlink\" title=\"2.6.3 初探自定义属性\"></a>2.6.3 初探自定义属性</h3><p>自定义属性是一个全新的CSS领域，开发者才刚刚开始探索。因为目前浏览器的支持比较有限，所以还没有到使用它的“黄金时间”。我相信，一段时间之后，你会看到很多关于自定义属性的最佳实践和新颖的玩法。这是你需要留意的。尝试使用自定义属性，看看你可以做出些什么吧。</p>\n<p>需要关注的一点，如果你使用<code>var()</code>声明，低版本浏览器不能识别就会忽略它。如果可以的话，给那些浏览器提供一个回退（fallback）方案。</p>\n<p>[ 代码片段（没有编号） ]</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">color</span>: black;</span><br><span class=\"line\"><span class=\"built_in\">color</span>: <span class=\"built_in\">var</span>(--main-<span class=\"built_in\">color</span>);</span><br></pre></td></tr></table></figure>\n<p>自定义属性原生的动态特性，并不是总是可以使用的，可以关注它的浏览器支持情况<a href=\"http://caniuse.com\" target=\"_blank\" rel=\"noopener\">http://caniuse.com</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>拥抱和使用相对单位，让页面的结构去定义样式代码的含义</li>\n<li>个人喜欢对字号大小使用rem，选择性地对页面组件的一些简单缩放效果使用em</li>\n<li>你可以让整个页面实现响应式缩放，而不需要任何的媒体查询</li>\n<li>在声明行高时，使用不带单位的数值</li>\n<li>开始了解和使用CSS最新的特性之一——自定义属性吧！</li>\n</ul>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a> [本文]</li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>  </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n"},{"title":"如何更愉快地使用rem —— 别说你懂CSS相对单位","date":"2018-07-05T05:28:01.000Z","_content":"\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/) [本文]\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.2 em和rem\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n\n***\n\n## 2.2 em和rem\n\n### 2.2.2 对font-size使用rem\n\n当浏览器解析HTML文档时，创建了一个用来代表页面元素的集合，叫做DOM（文档对象模型，Document Object Model）。树状结构，每一个节点代表一个元素。`<html>`就是顶层节点（根节点），在下面的是它的子节点`<head>`和`<body>`，再往下就是它们的子节点，还有后代节点，如此类推。\n\n根节点是文档里所有其他元素的祖先。它有一个特别的伪类（pseudo-class）选择器（:root），在样式表里可以用这个选择器表示。使用带类名的类型选择器html，或者直接用标签选择器，效果是一样的。\n\nrem是根em（root em）的缩写。rem是和根元素关联的，不依赖当前元素。不管你在文档中的什么地方使用这个单位，1.2rem的计算值是相等的，等于1.2倍的根元素的字号大小。下面的示例代码中，声明了根元素的字号大小，并在嵌套的无序列表中使用rem声明字号大小。\n\n[ 代码片段 2.10 使用rem声明字号大小 ]\n\n```\n:root {                    1\n  font-size: 1em;          2\n}\n\nul {\n  font-size: .8rem;\n}\n```\n\n* 1 伪类 :root 等价于 html 选择器\n* 2 使用浏览器的默认字号大小（16px）\n\n在这个示例里，根字号大小是浏览器的默认大小16px（根元素的1em等于浏览器的默认字号大小）。无序列表的字号大小为0.8rem，计算结果是12.8px。因为这只跟根元素相关，尽管你在列表里嵌套了列表，嵌套子列表的字号仍然保持不变。\n\n> #### 可用性：对font-size使用相对长度单位  \n> \n> 一些浏览器会提供给用户2种方式定制文字的大小：缩放和设置一个默认的字号大小。通过按Ctrl+或者Ctrl-，用户可以对页面进行缩放。这在视觉上会把整个页面的文字或图片（其实是所有元素）都放大或缩小了。在一些浏览器，这个改变只针对当前的标签页且是临时的，不会影响到新开的标签页。 \n>  \n> 设置默认字号大小，会有点不一样。不仅仅是设置的入口比较难找（一般在浏览器的设置页），而且这个设置是永久的，直到用户把默认值还原。值得注意的是，这个设置对使用px或其他绝对单位定义的字号大小无效。因为默认字号大小对一些用户是必要的，尤其是弱视的群体，你应该用相对单位或百分比来定义字号的大小。\n\nrem简化了很多em带来的复杂度。事实上，rem提供了一个在px和em间的相对单位折中解决方案，而且更易于使用。那么，是不是意味着你应该在对所有元素都使用rem，去掉其他长度单位呢？当然不是。\n\n在CSS的世界里，这个答案通常是，看情况。rem只是你的工具箱中的其中一个。掌握CSS很重要的一点，就是学会分辨在什么场景下该使用什么工具。我的选择是，对`font-size`使用rem，对border使用px，对其他的度量方式如`padding`、`margin`、`border-radius`等使用em。然而在必要时，需要声明容器的宽度的话，我更喜欢使用百分比。\n\n这样，字号大小就变得可预测，而当其他因素影响到元素的字号大小时，你也可以借助em去缩放元素的padding和margin。在border上使用像素是很合适的，尤其当你想要一根漂亮的线的时候。以上就是我对不同属性使用不同单位的理想方案，不过我要再次声明，这些都是工具，在某些特定场景下，利用不同的工具可能取到更好的效果。\n\n> 提示  \n> \n> 当你不确定的时候，对`font-size`使用rem，对`border`使用px，以及对其他大多数属性使用em。\n\n## 2.3 停止使用像素思维去思考\n\n把页面的根元素字号大小定义为0.625em或者62.5%，在最近几年来，这样的用法很常见，这是一种模式，或者更贴切地说，这是一种反模式。\n\n[ 代码片段 2.11 反模式：全局地把font-size定义为10px ]\n\n```\nhtml {\n  font-size: .625em;\n}\n```\n\n我并不推荐这种用法。这个用法把浏览器默认的字号大小16px缩小到10px。这样做的好处是简化了计算，如果设计师告诉你字号大小应该是14px，那你可以很轻易地计算出1.4rem，毕竟我们还是在使用相对单位。\n\n一开始，这看起来很方便，但事实上这样的实现方式有两个问题。第一，强制你写了很多重复的样式代码。10px对于大多数文本来说太小了，你需要在整个页面中，来来回回地覆盖它。你会发现，自己把一段段落（`<p>`）的字号大小声明为1.4rem，然后又把导航（`<nav>`）的链接字号大小声明为1.4rem，样式代码中还有很多这样的用法。这样引入了更高的错误风险，当你需要修改时发现代码耦合程度比较高，同时也会让样式文件变大。\n\n第二个问题是，你这么做的时候，其实你还是在用像素的思维在思考。虽然在代码里写的是`1.4rem`，但是在你的脑子里，其实还是想的是`14px`。在响应式网页开发中，你应该学会适应那些“模糊”的值。1.2em实际等于多少像素，并不重要，你只需要知道这是比继承的字号大一点点，那就足够了。而且，如果在屏幕上这不是你想要的效果，那就改吧。这是需要时间实验和试错的，但事实上，使用px的时候我们也需要这样做。（在第13章，我们会有更具体的方式来优化这个实现方式。）\n\n当使用em时，我们很容易陷入纠结，这个值转化成像素值会是多少呢？尤其对于字号大小。你一直在乘和除以em值，这样你很快就会疯掉了。相反，我希望你可以接受一项挑战，尝试培养先开始使用em的习惯。如果你习惯使用像素，那转成em是需要一定时间和练习的，但相信我，这很值得。\n\n这不是在说你再也不使用像素了。如果你跟一个设计师合作，你可能需要用更精确的像素值去沟通，这没问题的。在项目的开始，你需要声明一个基础的字号大小（通常是对标题或者标注的常用字号）。使用绝对值去描述大小，往往会更加容易。\n\n转换成rem会有计算环节，那就让计算器去忙吧（通常我会在Mac电脑上按`cmd+空格`，在Spotlight里计算）。首先在根元素上声明根字号大小，从那开始，使用像素应该是例外的情况，而不是常态。\n\n在这章内容里，我还是会持续地聊起像素。这会有助于我解释相对单位的工作原理，同时也能帮助你培养计算em值的习惯。在这章之后，我基本会使用相对单位来讨论字号的大小。\n\n### 2.3.1 设置一个合理的字号默认值\n\n先假设你想把默认字号设定为14px。把10px设定为基准值，再在页面中去覆盖它的写法，我们不推荐这种写法，相反，你应该在根元素上直接声明一个值。\n在这个代码片段里，目标字号值是继承的，浏览器的默认值16px，那么14/16 = 0.875。\n\n把下面的代码添加到一个新的样式表的最上面，我们会在这上面添加其他代码。这里设定根元素（`<html>`）的默认字号大小。\n\n[ 代码片段 2.12 设定正确的默认字号大小 ]\n\n```\n:root {                    1\n  font-size: 0.875em;      2\n}\n```\n\n* 1 或者使用 HTML 选择器\n* 2 14/16（期望值px / 继承值px）等于0.875\n\n现在，你的期望基准字号14px对整个页面的元素有效，你不需要在其他地方重新声明了。你只需要在设计不一样的地方修改成新的字号，譬如标题。\n\n我们一起来创建图2.7那样的面板吧！你创建的这个面板，基于14px字号，使用相对单位。\n\n[ 图 2.7 使用相对单位和继承字号的面板 ]\n\n![\"图 2.7\"](http://sinacloud.net/woodysblog/css-in-depth/02fig07_alt.jpg)\n\n下面是模板，加到你的页面吧。\n\n[ 代码片段 2.13 面板的模板 ]\n\n```\n<div class=\"panel\">\n  <h2>Single-origin</h2>\n  <div class=\"panel-body\">\n    We have built partnerships with small farms around the world to\n    hand-select beans at the peak of season. We then carefully roast\n    in <a href=\"/batch-size\">small batches</a> to maximize their\n    potential.\n  </div>\n</div>\n```\n\n下一段代码是样式的。你会在`padding`和`border-radius`使用`em`，标题的字号使用`rem`，以及`border`使用`px`。把下面代码添加到你的样式表吧。\n\n[ 代码片段 2.14 使用相对单位的面板 ]\n\n```\n.panel {\n  padding: 1em;                    1\n  border-radius: 0.5em;            1\n  border: 1px solid #999;          2\n}\n\n.panel > h2 {\n  margin-top: 0;                   3\n  font-size: 0.8rem;               4\n  font-weight: bold;               4\n  text-transform: uppercase;       4\n}\n```\n\n* 1 对padding和border-radius使用em\n* 2 用1px定义细边框\n* 3 把面板上面多余的空间去掉，更多解释看第3章\n* 4 用rem控制标题的字号大小\n\n这段代码给面板添加了一个细边框以及定义了标题的样式。我希望标题的字号小一点，但要加粗和全是大写。（你可以根据自己的设计，把字号改大点或者使用不同的排版方式）\n\n第二个选择器`>`是一个直接后代组合选择符（direct descendant combinator），它代表的是`.panel`下的子元素`h2`。更完整的选择器和组合选择符的索引可以看附录A。\n\n在代码片段2.13中，为了更清晰看到效果，我给`body`添加了一个类`panel-body`，不过你会发现，在你自己的代码里是不需要的。因为这个元素从根元素上继承了字号大小，它已经是你想要看到的那样。\n\n### 2.3.2 让这个面板变得“响应式”\n\n我们再更深入地看看这个问题。你可以根据屏幕尺寸的变化，添加媒体查询来改变基础字号大小，这可以令面板在不同尺寸的屏幕下，有不同的大小变化。（见图2.8）\n\n[ 图 2.8 在不同屏幕大小的响应式面板：300px（左上角），800px（右上角），1440px（下面） ]\n\n![\"图 2.8\"](http://sinacloud.net/woodysblog/css-in-depth/02fig08_alt.jpg)\n\n> 媒体查询（media query） —— 通过`@media`规则来声明样式，在不同的屏幕尺寸或者媒体类型（如打印机或显示器）下，触发对应的样式控制。这是响应式设计的关键要素。详情看代码片段2.15的这个例子，我在第8章会更深入的讨论媒体查询这个话题。\n\n为了实现上面说的效果，把你的样式代码改成这样。\n\n[ 代码片段 2.15 ]\n\n```\n:root {                            1\n  font-size: 0.75em;               1\n}                                  1\n\n@media (min-width: 800px) {        2\n  :root {                          2\n    font-size: 0.875em;            2\n  }                                2\n}                                  2\n\n@media (min-width: 1200px) {       3\n  :root {                          3\n    font-size: 1em;                3\n  }                                3\n}   \n```\n\n* 1 针对所有屏幕，但是在更大的屏幕会被覆盖\n* 2 针对比800px更宽的屏幕，覆盖默认样式代码\n* 3 针对比1200px更宽的屏幕，覆盖以上两套样式代码\n\n第一套样式规则，声明了小屏幕中的默认字号大小，这是我们想要在较小的屏幕上看到的字号大小。然后使用媒体查询，把800px和1200px分别作为两个分水岭逐级增加字号的大小，覆盖掉默认的代码。\n\n针对页面的根元素使用这些字号大小，响应式地重新定义em和rem对应的值，从而达到响应改变整个页面的效果。尽管你没有直接对这个面板做任何的修改，它现在是响应式的。在小屏幕上，譬如一台手机，字号大小会被渲染成更小的（12px）。然后，在更大的屏幕上，宽大于800px和大于1200px的，组件的字号会分别放大到14px和16px。改变你的浏览器窗口，看看组件是怎么变化的吧。\n\n如果你在整个页面中像这样严格使用相对单位，整个页面会随着视窗大小放大和缩小。这会是你的响应式策略里很重要的一部分。上面的2套媒体查询声明代码，可以帮助你节省在页面的其他部分使用媒体查询的额外代码。不过，如果你在元素中声明的字号大小是以像素为单位的，那就不会产生任何效果了。\n\n类似地，如果你的老板或者客户觉得现在网站的字号太小或者太大，你随时可以做到通过修改一行代码影响到全局的元素，这项改变会影响到页面上的其他元素，不费吹灰之力。\n\n### 2.3.3 调整单个组件的大小\n\n你也可以通过使用em缩放页面上的一个独立组件。有时，你可能会需要界面上的某些组件可以有个大号的版本。在我们的面板上这么做吧，首先你需要给面板添加一个类名`large`：`<div class=\"panel large\">`。\n\n在图2.9，我们看到了面板的普通版和大号版的比较。效果类似响应式面板，但是两种尺寸是可以同时在同一个页面中使用的。\n\n[ 图 2.9 在一个页面上的普通尺寸面板和大号面板 ]\n\n![\"图 2.9\"](http://sinacloud.net/woodysblog/css-in-depth/02fig09_alt.jpg)\n\n我们来对面板的字号声明方式做一些小的修改。你还是在使用相对单位，但需要调整它们的基准值。第一点，给每个面板的父元素字号大小的定义`font-size: 1rem`。这里指的是，不管在什么地方使用这个面板，每个面板的字号大小是一个确定值。\n\n第二点，使用em重新声明标题的字号大小，而不使用rem，这样标题就可以和刚才声明的父元素字号1rem关联起来。下面是对应的代码，更新下你的样式表代码吧。\n\n[ 代码片段 2.16 创建一个面板的大号版本 ]\n\n```\n.panel {\n  font-size: 1rem;               1\n  padding: 1em;\n  border: 1px solid #999;\n  border-radius: 0.5em;\n}\n\n.panel > h2 {\n  margin-top: 0;\n  font-size: 0.8em;              2\n  font-weight: bold;\n  text-transform: uppercase;\n}\n```\n\n* 1 给组件声明确定的字号大小\n* 2 其他元素的字号大小用em和父元素字号关联\n\n这些修改看起来并没有影响面板的样式，但是现在你已经准备好了，做一个大号的面板只需要修改一小行代码。你需要做的，就是把父元素字号大小改写成1rem以外的一个值。因为其他元素的计算方式都依赖父元素的字号大小，只要修改它，整个面板的相关尺寸都会发生改变。添加下一个CSS代码片段到你的样式表，定义一个大号面板吧。\n\n[ 代码片段 2.17 利用一行代码放大整个面板 ]\n\n```\n.panel.large {               1\n  font-size: 1.2rem;\n}\n```\n\n* 1 组合选择器指向同时有panel类和large类的元素\n\n现在，你可以给普通面板添加`class=\"panel\"`和给大号面板添加`class=\"panel large\"`。类似地，你也可以定义一个小号版本，只需要把父元素的字号设得比1rem小。如果这个面板是一个更复杂的组件，包含多种字号大小或padding，也只需要一个声明就可以重置大小，只要所有的子元素都是使用em声明的。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/) [本文]\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)   \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)\n","source":"_posts/css-in-depth-stop-thinking-in-px.md","raw":"---\ntitle: 如何更愉快地使用rem —— 别说你懂CSS相对单位\ndate: 2018-07-05 13:28:01\ntags:\n- front-end\n- css\n---\n\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/) [本文]\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.2 em和rem\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n\n***\n\n## 2.2 em和rem\n\n### 2.2.2 对font-size使用rem\n\n当浏览器解析HTML文档时，创建了一个用来代表页面元素的集合，叫做DOM（文档对象模型，Document Object Model）。树状结构，每一个节点代表一个元素。`<html>`就是顶层节点（根节点），在下面的是它的子节点`<head>`和`<body>`，再往下就是它们的子节点，还有后代节点，如此类推。\n\n根节点是文档里所有其他元素的祖先。它有一个特别的伪类（pseudo-class）选择器（:root），在样式表里可以用这个选择器表示。使用带类名的类型选择器html，或者直接用标签选择器，效果是一样的。\n\nrem是根em（root em）的缩写。rem是和根元素关联的，不依赖当前元素。不管你在文档中的什么地方使用这个单位，1.2rem的计算值是相等的，等于1.2倍的根元素的字号大小。下面的示例代码中，声明了根元素的字号大小，并在嵌套的无序列表中使用rem声明字号大小。\n\n[ 代码片段 2.10 使用rem声明字号大小 ]\n\n```\n:root {                    1\n  font-size: 1em;          2\n}\n\nul {\n  font-size: .8rem;\n}\n```\n\n* 1 伪类 :root 等价于 html 选择器\n* 2 使用浏览器的默认字号大小（16px）\n\n在这个示例里，根字号大小是浏览器的默认大小16px（根元素的1em等于浏览器的默认字号大小）。无序列表的字号大小为0.8rem，计算结果是12.8px。因为这只跟根元素相关，尽管你在列表里嵌套了列表，嵌套子列表的字号仍然保持不变。\n\n> #### 可用性：对font-size使用相对长度单位  \n> \n> 一些浏览器会提供给用户2种方式定制文字的大小：缩放和设置一个默认的字号大小。通过按Ctrl+或者Ctrl-，用户可以对页面进行缩放。这在视觉上会把整个页面的文字或图片（其实是所有元素）都放大或缩小了。在一些浏览器，这个改变只针对当前的标签页且是临时的，不会影响到新开的标签页。 \n>  \n> 设置默认字号大小，会有点不一样。不仅仅是设置的入口比较难找（一般在浏览器的设置页），而且这个设置是永久的，直到用户把默认值还原。值得注意的是，这个设置对使用px或其他绝对单位定义的字号大小无效。因为默认字号大小对一些用户是必要的，尤其是弱视的群体，你应该用相对单位或百分比来定义字号的大小。\n\nrem简化了很多em带来的复杂度。事实上，rem提供了一个在px和em间的相对单位折中解决方案，而且更易于使用。那么，是不是意味着你应该在对所有元素都使用rem，去掉其他长度单位呢？当然不是。\n\n在CSS的世界里，这个答案通常是，看情况。rem只是你的工具箱中的其中一个。掌握CSS很重要的一点，就是学会分辨在什么场景下该使用什么工具。我的选择是，对`font-size`使用rem，对border使用px，对其他的度量方式如`padding`、`margin`、`border-radius`等使用em。然而在必要时，需要声明容器的宽度的话，我更喜欢使用百分比。\n\n这样，字号大小就变得可预测，而当其他因素影响到元素的字号大小时，你也可以借助em去缩放元素的padding和margin。在border上使用像素是很合适的，尤其当你想要一根漂亮的线的时候。以上就是我对不同属性使用不同单位的理想方案，不过我要再次声明，这些都是工具，在某些特定场景下，利用不同的工具可能取到更好的效果。\n\n> 提示  \n> \n> 当你不确定的时候，对`font-size`使用rem，对`border`使用px，以及对其他大多数属性使用em。\n\n## 2.3 停止使用像素思维去思考\n\n把页面的根元素字号大小定义为0.625em或者62.5%，在最近几年来，这样的用法很常见，这是一种模式，或者更贴切地说，这是一种反模式。\n\n[ 代码片段 2.11 反模式：全局地把font-size定义为10px ]\n\n```\nhtml {\n  font-size: .625em;\n}\n```\n\n我并不推荐这种用法。这个用法把浏览器默认的字号大小16px缩小到10px。这样做的好处是简化了计算，如果设计师告诉你字号大小应该是14px，那你可以很轻易地计算出1.4rem，毕竟我们还是在使用相对单位。\n\n一开始，这看起来很方便，但事实上这样的实现方式有两个问题。第一，强制你写了很多重复的样式代码。10px对于大多数文本来说太小了，你需要在整个页面中，来来回回地覆盖它。你会发现，自己把一段段落（`<p>`）的字号大小声明为1.4rem，然后又把导航（`<nav>`）的链接字号大小声明为1.4rem，样式代码中还有很多这样的用法。这样引入了更高的错误风险，当你需要修改时发现代码耦合程度比较高，同时也会让样式文件变大。\n\n第二个问题是，你这么做的时候，其实你还是在用像素的思维在思考。虽然在代码里写的是`1.4rem`，但是在你的脑子里，其实还是想的是`14px`。在响应式网页开发中，你应该学会适应那些“模糊”的值。1.2em实际等于多少像素，并不重要，你只需要知道这是比继承的字号大一点点，那就足够了。而且，如果在屏幕上这不是你想要的效果，那就改吧。这是需要时间实验和试错的，但事实上，使用px的时候我们也需要这样做。（在第13章，我们会有更具体的方式来优化这个实现方式。）\n\n当使用em时，我们很容易陷入纠结，这个值转化成像素值会是多少呢？尤其对于字号大小。你一直在乘和除以em值，这样你很快就会疯掉了。相反，我希望你可以接受一项挑战，尝试培养先开始使用em的习惯。如果你习惯使用像素，那转成em是需要一定时间和练习的，但相信我，这很值得。\n\n这不是在说你再也不使用像素了。如果你跟一个设计师合作，你可能需要用更精确的像素值去沟通，这没问题的。在项目的开始，你需要声明一个基础的字号大小（通常是对标题或者标注的常用字号）。使用绝对值去描述大小，往往会更加容易。\n\n转换成rem会有计算环节，那就让计算器去忙吧（通常我会在Mac电脑上按`cmd+空格`，在Spotlight里计算）。首先在根元素上声明根字号大小，从那开始，使用像素应该是例外的情况，而不是常态。\n\n在这章内容里，我还是会持续地聊起像素。这会有助于我解释相对单位的工作原理，同时也能帮助你培养计算em值的习惯。在这章之后，我基本会使用相对单位来讨论字号的大小。\n\n### 2.3.1 设置一个合理的字号默认值\n\n先假设你想把默认字号设定为14px。把10px设定为基准值，再在页面中去覆盖它的写法，我们不推荐这种写法，相反，你应该在根元素上直接声明一个值。\n在这个代码片段里，目标字号值是继承的，浏览器的默认值16px，那么14/16 = 0.875。\n\n把下面的代码添加到一个新的样式表的最上面，我们会在这上面添加其他代码。这里设定根元素（`<html>`）的默认字号大小。\n\n[ 代码片段 2.12 设定正确的默认字号大小 ]\n\n```\n:root {                    1\n  font-size: 0.875em;      2\n}\n```\n\n* 1 或者使用 HTML 选择器\n* 2 14/16（期望值px / 继承值px）等于0.875\n\n现在，你的期望基准字号14px对整个页面的元素有效，你不需要在其他地方重新声明了。你只需要在设计不一样的地方修改成新的字号，譬如标题。\n\n我们一起来创建图2.7那样的面板吧！你创建的这个面板，基于14px字号，使用相对单位。\n\n[ 图 2.7 使用相对单位和继承字号的面板 ]\n\n![\"图 2.7\"](http://sinacloud.net/woodysblog/css-in-depth/02fig07_alt.jpg)\n\n下面是模板，加到你的页面吧。\n\n[ 代码片段 2.13 面板的模板 ]\n\n```\n<div class=\"panel\">\n  <h2>Single-origin</h2>\n  <div class=\"panel-body\">\n    We have built partnerships with small farms around the world to\n    hand-select beans at the peak of season. We then carefully roast\n    in <a href=\"/batch-size\">small batches</a> to maximize their\n    potential.\n  </div>\n</div>\n```\n\n下一段代码是样式的。你会在`padding`和`border-radius`使用`em`，标题的字号使用`rem`，以及`border`使用`px`。把下面代码添加到你的样式表吧。\n\n[ 代码片段 2.14 使用相对单位的面板 ]\n\n```\n.panel {\n  padding: 1em;                    1\n  border-radius: 0.5em;            1\n  border: 1px solid #999;          2\n}\n\n.panel > h2 {\n  margin-top: 0;                   3\n  font-size: 0.8rem;               4\n  font-weight: bold;               4\n  text-transform: uppercase;       4\n}\n```\n\n* 1 对padding和border-radius使用em\n* 2 用1px定义细边框\n* 3 把面板上面多余的空间去掉，更多解释看第3章\n* 4 用rem控制标题的字号大小\n\n这段代码给面板添加了一个细边框以及定义了标题的样式。我希望标题的字号小一点，但要加粗和全是大写。（你可以根据自己的设计，把字号改大点或者使用不同的排版方式）\n\n第二个选择器`>`是一个直接后代组合选择符（direct descendant combinator），它代表的是`.panel`下的子元素`h2`。更完整的选择器和组合选择符的索引可以看附录A。\n\n在代码片段2.13中，为了更清晰看到效果，我给`body`添加了一个类`panel-body`，不过你会发现，在你自己的代码里是不需要的。因为这个元素从根元素上继承了字号大小，它已经是你想要看到的那样。\n\n### 2.3.2 让这个面板变得“响应式”\n\n我们再更深入地看看这个问题。你可以根据屏幕尺寸的变化，添加媒体查询来改变基础字号大小，这可以令面板在不同尺寸的屏幕下，有不同的大小变化。（见图2.8）\n\n[ 图 2.8 在不同屏幕大小的响应式面板：300px（左上角），800px（右上角），1440px（下面） ]\n\n![\"图 2.8\"](http://sinacloud.net/woodysblog/css-in-depth/02fig08_alt.jpg)\n\n> 媒体查询（media query） —— 通过`@media`规则来声明样式，在不同的屏幕尺寸或者媒体类型（如打印机或显示器）下，触发对应的样式控制。这是响应式设计的关键要素。详情看代码片段2.15的这个例子，我在第8章会更深入的讨论媒体查询这个话题。\n\n为了实现上面说的效果，把你的样式代码改成这样。\n\n[ 代码片段 2.15 ]\n\n```\n:root {                            1\n  font-size: 0.75em;               1\n}                                  1\n\n@media (min-width: 800px) {        2\n  :root {                          2\n    font-size: 0.875em;            2\n  }                                2\n}                                  2\n\n@media (min-width: 1200px) {       3\n  :root {                          3\n    font-size: 1em;                3\n  }                                3\n}   \n```\n\n* 1 针对所有屏幕，但是在更大的屏幕会被覆盖\n* 2 针对比800px更宽的屏幕，覆盖默认样式代码\n* 3 针对比1200px更宽的屏幕，覆盖以上两套样式代码\n\n第一套样式规则，声明了小屏幕中的默认字号大小，这是我们想要在较小的屏幕上看到的字号大小。然后使用媒体查询，把800px和1200px分别作为两个分水岭逐级增加字号的大小，覆盖掉默认的代码。\n\n针对页面的根元素使用这些字号大小，响应式地重新定义em和rem对应的值，从而达到响应改变整个页面的效果。尽管你没有直接对这个面板做任何的修改，它现在是响应式的。在小屏幕上，譬如一台手机，字号大小会被渲染成更小的（12px）。然后，在更大的屏幕上，宽大于800px和大于1200px的，组件的字号会分别放大到14px和16px。改变你的浏览器窗口，看看组件是怎么变化的吧。\n\n如果你在整个页面中像这样严格使用相对单位，整个页面会随着视窗大小放大和缩小。这会是你的响应式策略里很重要的一部分。上面的2套媒体查询声明代码，可以帮助你节省在页面的其他部分使用媒体查询的额外代码。不过，如果你在元素中声明的字号大小是以像素为单位的，那就不会产生任何效果了。\n\n类似地，如果你的老板或者客户觉得现在网站的字号太小或者太大，你随时可以做到通过修改一行代码影响到全局的元素，这项改变会影响到页面上的其他元素，不费吹灰之力。\n\n### 2.3.3 调整单个组件的大小\n\n你也可以通过使用em缩放页面上的一个独立组件。有时，你可能会需要界面上的某些组件可以有个大号的版本。在我们的面板上这么做吧，首先你需要给面板添加一个类名`large`：`<div class=\"panel large\">`。\n\n在图2.9，我们看到了面板的普通版和大号版的比较。效果类似响应式面板，但是两种尺寸是可以同时在同一个页面中使用的。\n\n[ 图 2.9 在一个页面上的普通尺寸面板和大号面板 ]\n\n![\"图 2.9\"](http://sinacloud.net/woodysblog/css-in-depth/02fig09_alt.jpg)\n\n我们来对面板的字号声明方式做一些小的修改。你还是在使用相对单位，但需要调整它们的基准值。第一点，给每个面板的父元素字号大小的定义`font-size: 1rem`。这里指的是，不管在什么地方使用这个面板，每个面板的字号大小是一个确定值。\n\n第二点，使用em重新声明标题的字号大小，而不使用rem，这样标题就可以和刚才声明的父元素字号1rem关联起来。下面是对应的代码，更新下你的样式表代码吧。\n\n[ 代码片段 2.16 创建一个面板的大号版本 ]\n\n```\n.panel {\n  font-size: 1rem;               1\n  padding: 1em;\n  border: 1px solid #999;\n  border-radius: 0.5em;\n}\n\n.panel > h2 {\n  margin-top: 0;\n  font-size: 0.8em;              2\n  font-weight: bold;\n  text-transform: uppercase;\n}\n```\n\n* 1 给组件声明确定的字号大小\n* 2 其他元素的字号大小用em和父元素字号关联\n\n这些修改看起来并没有影响面板的样式，但是现在你已经准备好了，做一个大号的面板只需要修改一小行代码。你需要做的，就是把父元素字号大小改写成1rem以外的一个值。因为其他元素的计算方式都依赖父元素的字号大小，只要修改它，整个面板的相关尺寸都会发生改变。添加下一个CSS代码片段到你的样式表，定义一个大号面板吧。\n\n[ 代码片段 2.17 利用一行代码放大整个面板 ]\n\n```\n.panel.large {               1\n  font-size: 1.2rem;\n}\n```\n\n* 1 组合选择器指向同时有panel类和large类的元素\n\n现在，你可以给普通面板添加`class=\"panel\"`和给大号面板添加`class=\"panel large\"`。类似地，你也可以定义一个小号版本，只需要把父元素的字号设得比1rem小。如果这个面板是一个更复杂的组件，包含多种字号大小或padding，也只需要一个声明就可以重置大小，只要所有的子元素都是使用em声明的。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/) [本文]\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)   \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)\n","slug":"css-in-depth-stop-thinking-in-px","published":1,"updated":"2018-08-15T15:21:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x89000nzvr351b6t3rc","content":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.2 em和rem<ul>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-2-em和rem\"><a href=\"#2-2-em和rem\" class=\"headerlink\" title=\"2.2 em和rem\"></a>2.2 em和rem</h2><h3 id=\"2-2-2-对font-size使用rem\"><a href=\"#2-2-2-对font-size使用rem\" class=\"headerlink\" title=\"2.2.2 对font-size使用rem\"></a>2.2.2 对font-size使用rem</h3><p>当浏览器解析HTML文档时，创建了一个用来代表页面元素的集合，叫做DOM（文档对象模型，Document Object Model）。树状结构，每一个节点代表一个元素。<code>&lt;html&gt;</code>就是顶层节点（根节点），在下面的是它的子节点<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>，再往下就是它们的子节点，还有后代节点，如此类推。</p>\n<p>根节点是文档里所有其他元素的祖先。它有一个特别的伪类（pseudo-class）选择器（:root），在样式表里可以用这个选择器表示。使用带类名的类型选择器html，或者直接用标签选择器，效果是一样的。</p>\n<p>rem是根em（root em）的缩写。rem是和根元素关联的，不依赖当前元素。不管你在文档中的什么地方使用这个单位，1.2rem的计算值是相等的，等于1.2倍的根元素的字号大小。下面的示例代码中，声明了根元素的字号大小，并在嵌套的无序列表中使用rem声明字号大小。</p>\n<p>[ 代码片段 2.10 使用rem声明字号大小 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;                    1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;          2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">8rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 伪类 :root 等价于 html 选择器</li>\n<li>2 使用浏览器的默认字号大小（16px）</li>\n</ul>\n<p>在这个示例里，根字号大小是浏览器的默认大小16px（根元素的1em等于浏览器的默认字号大小）。无序列表的字号大小为0.8rem，计算结果是12.8px。因为这只跟根元素相关，尽管你在列表里嵌套了列表，嵌套子列表的字号仍然保持不变。</p>\n<blockquote>\n<h4 id=\"可用性：对font-size使用相对长度单位\"><a href=\"#可用性：对font-size使用相对长度单位\" class=\"headerlink\" title=\"可用性：对font-size使用相对长度单位\"></a>可用性：对font-size使用相对长度单位</h4><p>一些浏览器会提供给用户2种方式定制文字的大小：缩放和设置一个默认的字号大小。通过按Ctrl+或者Ctrl-，用户可以对页面进行缩放。这在视觉上会把整个页面的文字或图片（其实是所有元素）都放大或缩小了。在一些浏览器，这个改变只针对当前的标签页且是临时的，不会影响到新开的标签页。 </p>\n<p>设置默认字号大小，会有点不一样。不仅仅是设置的入口比较难找（一般在浏览器的设置页），而且这个设置是永久的，直到用户把默认值还原。值得注意的是，这个设置对使用px或其他绝对单位定义的字号大小无效。因为默认字号大小对一些用户是必要的，尤其是弱视的群体，你应该用相对单位或百分比来定义字号的大小。</p>\n</blockquote>\n<p>rem简化了很多em带来的复杂度。事实上，rem提供了一个在px和em间的相对单位折中解决方案，而且更易于使用。那么，是不是意味着你应该在对所有元素都使用rem，去掉其他长度单位呢？当然不是。</p>\n<p>在CSS的世界里，这个答案通常是，看情况。rem只是你的工具箱中的其中一个。掌握CSS很重要的一点，就是学会分辨在什么场景下该使用什么工具。我的选择是，对<code>font-size</code>使用rem，对border使用px，对其他的度量方式如<code>padding</code>、<code>margin</code>、<code>border-radius</code>等使用em。然而在必要时，需要声明容器的宽度的话，我更喜欢使用百分比。</p>\n<p>这样，字号大小就变得可预测，而当其他因素影响到元素的字号大小时，你也可以借助em去缩放元素的padding和margin。在border上使用像素是很合适的，尤其当你想要一根漂亮的线的时候。以上就是我对不同属性使用不同单位的理想方案，不过我要再次声明，这些都是工具，在某些特定场景下，利用不同的工具可能取到更好的效果。</p>\n<blockquote>\n<p>提示  </p>\n<p>当你不确定的时候，对<code>font-size</code>使用rem，对<code>border</code>使用px，以及对其他大多数属性使用em。</p>\n</blockquote>\n<h2 id=\"2-3-停止使用像素思维去思考\"><a href=\"#2-3-停止使用像素思维去思考\" class=\"headerlink\" title=\"2.3 停止使用像素思维去思考\"></a>2.3 停止使用像素思维去思考</h2><p>把页面的根元素字号大小定义为0.625em或者62.5%，在最近几年来，这样的用法很常见，这是一种模式，或者更贴切地说，这是一种反模式。</p>\n<p>[ 代码片段 2.11 反模式：全局地把font-size定义为10px ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">625em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我并不推荐这种用法。这个用法把浏览器默认的字号大小16px缩小到10px。这样做的好处是简化了计算，如果设计师告诉你字号大小应该是14px，那你可以很轻易地计算出1.4rem，毕竟我们还是在使用相对单位。</p>\n<p>一开始，这看起来很方便，但事实上这样的实现方式有两个问题。第一，强制你写了很多重复的样式代码。10px对于大多数文本来说太小了，你需要在整个页面中，来来回回地覆盖它。你会发现，自己把一段段落（<code>&lt;p&gt;</code>）的字号大小声明为1.4rem，然后又把导航（<code>&lt;nav&gt;</code>）的链接字号大小声明为1.4rem，样式代码中还有很多这样的用法。这样引入了更高的错误风险，当你需要修改时发现代码耦合程度比较高，同时也会让样式文件变大。</p>\n<p>第二个问题是，你这么做的时候，其实你还是在用像素的思维在思考。虽然在代码里写的是<code>1.4rem</code>，但是在你的脑子里，其实还是想的是<code>14px</code>。在响应式网页开发中，你应该学会适应那些“模糊”的值。1.2em实际等于多少像素，并不重要，你只需要知道这是比继承的字号大一点点，那就足够了。而且，如果在屏幕上这不是你想要的效果，那就改吧。这是需要时间实验和试错的，但事实上，使用px的时候我们也需要这样做。（在第13章，我们会有更具体的方式来优化这个实现方式。）</p>\n<p>当使用em时，我们很容易陷入纠结，这个值转化成像素值会是多少呢？尤其对于字号大小。你一直在乘和除以em值，这样你很快就会疯掉了。相反，我希望你可以接受一项挑战，尝试培养先开始使用em的习惯。如果你习惯使用像素，那转成em是需要一定时间和练习的，但相信我，这很值得。</p>\n<p>这不是在说你再也不使用像素了。如果你跟一个设计师合作，你可能需要用更精确的像素值去沟通，这没问题的。在项目的开始，你需要声明一个基础的字号大小（通常是对标题或者标注的常用字号）。使用绝对值去描述大小，往往会更加容易。</p>\n<p>转换成rem会有计算环节，那就让计算器去忙吧（通常我会在Mac电脑上按<code>cmd+空格</code>，在Spotlight里计算）。首先在根元素上声明根字号大小，从那开始，使用像素应该是例外的情况，而不是常态。</p>\n<p>在这章内容里，我还是会持续地聊起像素。这会有助于我解释相对单位的工作原理，同时也能帮助你培养计算em值的习惯。在这章之后，我基本会使用相对单位来讨论字号的大小。</p>\n<h3 id=\"2-3-1-设置一个合理的字号默认值\"><a href=\"#2-3-1-设置一个合理的字号默认值\" class=\"headerlink\" title=\"2.3.1 设置一个合理的字号默认值\"></a>2.3.1 设置一个合理的字号默认值</h3><p>先假设你想把默认字号设定为14px。把10px设定为基准值，再在页面中去覆盖它的写法，我们不推荐这种写法，相反，你应该在根元素上直接声明一个值。<br>在这个代码片段里，目标字号值是继承的，浏览器的默认值16px，那么14/16 = 0.875。</p>\n<p>把下面的代码添加到一个新的样式表的最上面，我们会在这上面添加其他代码。这里设定根元素（<code>&lt;html&gt;</code>）的默认字号大小。</p>\n<p>[ 代码片段 2.12 设定正确的默认字号大小 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;                    1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.875em</span>;      2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 或者使用 HTML 选择器</li>\n<li>2 14/16（期望值px / 继承值px）等于0.875</li>\n</ul>\n<p>现在，你的期望基准字号14px对整个页面的元素有效，你不需要在其他地方重新声明了。你只需要在设计不一样的地方修改成新的字号，譬如标题。</p>\n<p>我们一起来创建图2.7那样的面板吧！你创建的这个面板，基于14px字号，使用相对单位。</p>\n<p>[ 图 2.7 使用相对单位和继承字号的面板 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig07_alt.jpg\" alt=\"&quot;图 2.7&quot;\"></p>\n<p>下面是模板，加到你的页面吧。</p>\n<p>[ 代码片段 2.13 面板的模板 ]</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> class=<span class=\"string\">\"panel\"</span>&gt;</span><br><span class=\"line\">  &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> class=<span class=\"string\">\"panel-body\"</span>&gt;</span><br><span class=\"line\">    We have built partnerships <span class=\"keyword\">with</span> small farms around <span class=\"keyword\">the</span> world <span class=\"built_in\">to</span></span><br><span class=\"line\">    hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span> peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> carefully roast</span><br><span class=\"line\">    <span class=\"keyword\">in</span> &lt;<span class=\"keyword\">a</span> href=<span class=\"string\">\"/batch-size\"</span>&gt;small batches&lt;/<span class=\"keyword\">a</span>&gt; <span class=\"built_in\">to</span> maximize their</span><br><span class=\"line\">    potential.</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>下一段代码是样式的。你会在<code>padding</code>和<code>border-radius</code>使用<code>em</code>，标题的字号使用<code>rem</code>，以及<code>border</code>使用<code>px</code>。把下面代码添加到你的样式表吧。</p>\n<p>[ 代码片段 2.14 使用相对单位的面板 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;                    1</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5em</span>;            1</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;          2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &gt; <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;                   3</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;               4</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;               4</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;       4</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 对padding和border-radius使用em</li>\n<li>2 用1px定义细边框</li>\n<li>3 把面板上面多余的空间去掉，更多解释看第3章</li>\n<li>4 用rem控制标题的字号大小</li>\n</ul>\n<p>这段代码给面板添加了一个细边框以及定义了标题的样式。我希望标题的字号小一点，但要加粗和全是大写。（你可以根据自己的设计，把字号改大点或者使用不同的排版方式）</p>\n<p>第二个选择器<code>&gt;</code>是一个直接后代组合选择符（direct descendant combinator），它代表的是<code>.panel</code>下的子元素<code>h2</code>。更完整的选择器和组合选择符的索引可以看附录A。</p>\n<p>在代码片段2.13中，为了更清晰看到效果，我给<code>body</code>添加了一个类<code>panel-body</code>，不过你会发现，在你自己的代码里是不需要的。因为这个元素从根元素上继承了字号大小，它已经是你想要看到的那样。</p>\n<h3 id=\"2-3-2-让这个面板变得“响应式”\"><a href=\"#2-3-2-让这个面板变得“响应式”\" class=\"headerlink\" title=\"2.3.2 让这个面板变得“响应式”\"></a>2.3.2 让这个面板变得“响应式”</h3><p>我们再更深入地看看这个问题。你可以根据屏幕尺寸的变化，添加媒体查询来改变基础字号大小，这可以令面板在不同尺寸的屏幕下，有不同的大小变化。（见图2.8）</p>\n<p>[ 图 2.8 在不同屏幕大小的响应式面板：300px（左上角），800px（右上角），1440px（下面） ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig08_alt.jpg\" alt=\"&quot;图 2.8&quot;\"></p>\n<blockquote>\n<p>媒体查询（media query） —— 通过<code>@media</code>规则来声明样式，在不同的屏幕尺寸或者媒体类型（如打印机或显示器）下，触发对应的样式控制。这是响应式设计的关键要素。详情看代码片段2.15的这个例子，我在第8章会更深入的讨论媒体查询这个话题。</p>\n</blockquote>\n<p>为了实现上面说的效果，把你的样式代码改成这样。</p>\n<p>[ 代码片段 2.15 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;                            1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.75em</span>;               1</span><br><span class=\"line\">&#125;                                  1</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: 800px) &#123;        2</span><br><span class=\"line\">  :root &#123;                          2</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.875em</span>;            2</span><br><span class=\"line\">  &#125;                                2</span><br><span class=\"line\">&#125;                                  2</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: 1200px) &#123;       3</span><br><span class=\"line\">  :root &#123;                          3</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;                3</span><br><span class=\"line\">  &#125;                                3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 针对所有屏幕，但是在更大的屏幕会被覆盖</li>\n<li>2 针对比800px更宽的屏幕，覆盖默认样式代码</li>\n<li>3 针对比1200px更宽的屏幕，覆盖以上两套样式代码</li>\n</ul>\n<p>第一套样式规则，声明了小屏幕中的默认字号大小，这是我们想要在较小的屏幕上看到的字号大小。然后使用媒体查询，把800px和1200px分别作为两个分水岭逐级增加字号的大小，覆盖掉默认的代码。</p>\n<p>针对页面的根元素使用这些字号大小，响应式地重新定义em和rem对应的值，从而达到响应改变整个页面的效果。尽管你没有直接对这个面板做任何的修改，它现在是响应式的。在小屏幕上，譬如一台手机，字号大小会被渲染成更小的（12px）。然后，在更大的屏幕上，宽大于800px和大于1200px的，组件的字号会分别放大到14px和16px。改变你的浏览器窗口，看看组件是怎么变化的吧。</p>\n<p>如果你在整个页面中像这样严格使用相对单位，整个页面会随着视窗大小放大和缩小。这会是你的响应式策略里很重要的一部分。上面的2套媒体查询声明代码，可以帮助你节省在页面的其他部分使用媒体查询的额外代码。不过，如果你在元素中声明的字号大小是以像素为单位的，那就不会产生任何效果了。</p>\n<p>类似地，如果你的老板或者客户觉得现在网站的字号太小或者太大，你随时可以做到通过修改一行代码影响到全局的元素，这项改变会影响到页面上的其他元素，不费吹灰之力。</p>\n<h3 id=\"2-3-3-调整单个组件的大小\"><a href=\"#2-3-3-调整单个组件的大小\" class=\"headerlink\" title=\"2.3.3 调整单个组件的大小\"></a>2.3.3 调整单个组件的大小</h3><p>你也可以通过使用em缩放页面上的一个独立组件。有时，你可能会需要界面上的某些组件可以有个大号的版本。在我们的面板上这么做吧，首先你需要给面板添加一个类名<code>large</code>：<code>&lt;div class=&quot;panel large&quot;&gt;</code>。</p>\n<p>在图2.9，我们看到了面板的普通版和大号版的比较。效果类似响应式面板，但是两种尺寸是可以同时在同一个页面中使用的。</p>\n<p>[ 图 2.9 在一个页面上的普通尺寸面板和大号面板 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig09_alt.jpg\" alt=\"&quot;图 2.9&quot;\"></p>\n<p>我们来对面板的字号声明方式做一些小的修改。你还是在使用相对单位，但需要调整它们的基准值。第一点，给每个面板的父元素字号大小的定义<code>font-size: 1rem</code>。这里指的是，不管在什么地方使用这个面板，每个面板的字号大小是一个确定值。</p>\n<p>第二点，使用em重新声明标题的字号大小，而不使用rem，这样标题就可以和刚才声明的父元素字号1rem关联起来。下面是对应的代码，更新下你的样式表代码吧。</p>\n<p>[ 代码片段 2.16 创建一个面板的大号版本 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;               1</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &gt; <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8em</span>;              2</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 给组件声明确定的字号大小</li>\n<li>2 其他元素的字号大小用em和父元素字号关联</li>\n</ul>\n<p>这些修改看起来并没有影响面板的样式，但是现在你已经准备好了，做一个大号的面板只需要修改一小行代码。你需要做的，就是把父元素字号大小改写成1rem以外的一个值。因为其他元素的计算方式都依赖父元素的字号大小，只要修改它，整个面板的相关尺寸都会发生改变。添加下一个CSS代码片段到你的样式表，定义一个大号面板吧。</p>\n<p>[ 代码片段 2.17 利用一行代码放大整个面板 ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span><span class=\"selector-class\">.large</span> &#123;               <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 组合选择器指向同时有panel类和large类的元素</li>\n</ul>\n<p>现在，你可以给普通面板添加<code>class=&quot;panel&quot;</code>和给大号面板添加<code>class=&quot;panel large&quot;</code>。类似地，你也可以定义一个小号版本，只需要把父元素的字号设得比1rem小。如果这个面板是一个更复杂的组件，包含多种字号大小或padding，也只需要一个声明就可以重置大小，只要所有的子元素都是使用em声明的。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>   </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.2 em和rem<ul>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-2-em和rem\"><a href=\"#2-2-em和rem\" class=\"headerlink\" title=\"2.2 em和rem\"></a>2.2 em和rem</h2><h3 id=\"2-2-2-对font-size使用rem\"><a href=\"#2-2-2-对font-size使用rem\" class=\"headerlink\" title=\"2.2.2 对font-size使用rem\"></a>2.2.2 对font-size使用rem</h3><p>当浏览器解析HTML文档时，创建了一个用来代表页面元素的集合，叫做DOM（文档对象模型，Document Object Model）。树状结构，每一个节点代表一个元素。<code>&lt;html&gt;</code>就是顶层节点（根节点），在下面的是它的子节点<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>，再往下就是它们的子节点，还有后代节点，如此类推。</p>\n<p>根节点是文档里所有其他元素的祖先。它有一个特别的伪类（pseudo-class）选择器（:root），在样式表里可以用这个选择器表示。使用带类名的类型选择器html，或者直接用标签选择器，效果是一样的。</p>\n<p>rem是根em（root em）的缩写。rem是和根元素关联的，不依赖当前元素。不管你在文档中的什么地方使用这个单位，1.2rem的计算值是相等的，等于1.2倍的根元素的字号大小。下面的示例代码中，声明了根元素的字号大小，并在嵌套的无序列表中使用rem声明字号大小。</p>\n<p>[ 代码片段 2.10 使用rem声明字号大小 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;                    1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;          2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">8rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 伪类 :root 等价于 html 选择器</li>\n<li>2 使用浏览器的默认字号大小（16px）</li>\n</ul>\n<p>在这个示例里，根字号大小是浏览器的默认大小16px（根元素的1em等于浏览器的默认字号大小）。无序列表的字号大小为0.8rem，计算结果是12.8px。因为这只跟根元素相关，尽管你在列表里嵌套了列表，嵌套子列表的字号仍然保持不变。</p>\n<blockquote>\n<h4 id=\"可用性：对font-size使用相对长度单位\"><a href=\"#可用性：对font-size使用相对长度单位\" class=\"headerlink\" title=\"可用性：对font-size使用相对长度单位\"></a>可用性：对font-size使用相对长度单位</h4><p>一些浏览器会提供给用户2种方式定制文字的大小：缩放和设置一个默认的字号大小。通过按Ctrl+或者Ctrl-，用户可以对页面进行缩放。这在视觉上会把整个页面的文字或图片（其实是所有元素）都放大或缩小了。在一些浏览器，这个改变只针对当前的标签页且是临时的，不会影响到新开的标签页。 </p>\n<p>设置默认字号大小，会有点不一样。不仅仅是设置的入口比较难找（一般在浏览器的设置页），而且这个设置是永久的，直到用户把默认值还原。值得注意的是，这个设置对使用px或其他绝对单位定义的字号大小无效。因为默认字号大小对一些用户是必要的，尤其是弱视的群体，你应该用相对单位或百分比来定义字号的大小。</p>\n</blockquote>\n<p>rem简化了很多em带来的复杂度。事实上，rem提供了一个在px和em间的相对单位折中解决方案，而且更易于使用。那么，是不是意味着你应该在对所有元素都使用rem，去掉其他长度单位呢？当然不是。</p>\n<p>在CSS的世界里，这个答案通常是，看情况。rem只是你的工具箱中的其中一个。掌握CSS很重要的一点，就是学会分辨在什么场景下该使用什么工具。我的选择是，对<code>font-size</code>使用rem，对border使用px，对其他的度量方式如<code>padding</code>、<code>margin</code>、<code>border-radius</code>等使用em。然而在必要时，需要声明容器的宽度的话，我更喜欢使用百分比。</p>\n<p>这样，字号大小就变得可预测，而当其他因素影响到元素的字号大小时，你也可以借助em去缩放元素的padding和margin。在border上使用像素是很合适的，尤其当你想要一根漂亮的线的时候。以上就是我对不同属性使用不同单位的理想方案，不过我要再次声明，这些都是工具，在某些特定场景下，利用不同的工具可能取到更好的效果。</p>\n<blockquote>\n<p>提示  </p>\n<p>当你不确定的时候，对<code>font-size</code>使用rem，对<code>border</code>使用px，以及对其他大多数属性使用em。</p>\n</blockquote>\n<h2 id=\"2-3-停止使用像素思维去思考\"><a href=\"#2-3-停止使用像素思维去思考\" class=\"headerlink\" title=\"2.3 停止使用像素思维去思考\"></a>2.3 停止使用像素思维去思考</h2><p>把页面的根元素字号大小定义为0.625em或者62.5%，在最近几年来，这样的用法很常见，这是一种模式，或者更贴切地说，这是一种反模式。</p>\n<p>[ 代码片段 2.11 反模式：全局地把font-size定义为10px ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">625em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我并不推荐这种用法。这个用法把浏览器默认的字号大小16px缩小到10px。这样做的好处是简化了计算，如果设计师告诉你字号大小应该是14px，那你可以很轻易地计算出1.4rem，毕竟我们还是在使用相对单位。</p>\n<p>一开始，这看起来很方便，但事实上这样的实现方式有两个问题。第一，强制你写了很多重复的样式代码。10px对于大多数文本来说太小了，你需要在整个页面中，来来回回地覆盖它。你会发现，自己把一段段落（<code>&lt;p&gt;</code>）的字号大小声明为1.4rem，然后又把导航（<code>&lt;nav&gt;</code>）的链接字号大小声明为1.4rem，样式代码中还有很多这样的用法。这样引入了更高的错误风险，当你需要修改时发现代码耦合程度比较高，同时也会让样式文件变大。</p>\n<p>第二个问题是，你这么做的时候，其实你还是在用像素的思维在思考。虽然在代码里写的是<code>1.4rem</code>，但是在你的脑子里，其实还是想的是<code>14px</code>。在响应式网页开发中，你应该学会适应那些“模糊”的值。1.2em实际等于多少像素，并不重要，你只需要知道这是比继承的字号大一点点，那就足够了。而且，如果在屏幕上这不是你想要的效果，那就改吧。这是需要时间实验和试错的，但事实上，使用px的时候我们也需要这样做。（在第13章，我们会有更具体的方式来优化这个实现方式。）</p>\n<p>当使用em时，我们很容易陷入纠结，这个值转化成像素值会是多少呢？尤其对于字号大小。你一直在乘和除以em值，这样你很快就会疯掉了。相反，我希望你可以接受一项挑战，尝试培养先开始使用em的习惯。如果你习惯使用像素，那转成em是需要一定时间和练习的，但相信我，这很值得。</p>\n<p>这不是在说你再也不使用像素了。如果你跟一个设计师合作，你可能需要用更精确的像素值去沟通，这没问题的。在项目的开始，你需要声明一个基础的字号大小（通常是对标题或者标注的常用字号）。使用绝对值去描述大小，往往会更加容易。</p>\n<p>转换成rem会有计算环节，那就让计算器去忙吧（通常我会在Mac电脑上按<code>cmd+空格</code>，在Spotlight里计算）。首先在根元素上声明根字号大小，从那开始，使用像素应该是例外的情况，而不是常态。</p>\n<p>在这章内容里，我还是会持续地聊起像素。这会有助于我解释相对单位的工作原理，同时也能帮助你培养计算em值的习惯。在这章之后，我基本会使用相对单位来讨论字号的大小。</p>\n<h3 id=\"2-3-1-设置一个合理的字号默认值\"><a href=\"#2-3-1-设置一个合理的字号默认值\" class=\"headerlink\" title=\"2.3.1 设置一个合理的字号默认值\"></a>2.3.1 设置一个合理的字号默认值</h3><p>先假设你想把默认字号设定为14px。把10px设定为基准值，再在页面中去覆盖它的写法，我们不推荐这种写法，相反，你应该在根元素上直接声明一个值。<br>在这个代码片段里，目标字号值是继承的，浏览器的默认值16px，那么14/16 = 0.875。</p>\n<p>把下面的代码添加到一个新的样式表的最上面，我们会在这上面添加其他代码。这里设定根元素（<code>&lt;html&gt;</code>）的默认字号大小。</p>\n<p>[ 代码片段 2.12 设定正确的默认字号大小 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;                    1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.875em</span>;      2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 或者使用 HTML 选择器</li>\n<li>2 14/16（期望值px / 继承值px）等于0.875</li>\n</ul>\n<p>现在，你的期望基准字号14px对整个页面的元素有效，你不需要在其他地方重新声明了。你只需要在设计不一样的地方修改成新的字号，譬如标题。</p>\n<p>我们一起来创建图2.7那样的面板吧！你创建的这个面板，基于14px字号，使用相对单位。</p>\n<p>[ 图 2.7 使用相对单位和继承字号的面板 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig07_alt.jpg\" alt=\"&quot;图 2.7&quot;\"></p>\n<p>下面是模板，加到你的页面吧。</p>\n<p>[ 代码片段 2.13 面板的模板 ]</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> class=<span class=\"string\">\"panel\"</span>&gt;</span><br><span class=\"line\">  &lt;h2&gt;Single-origin&lt;/h2&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> class=<span class=\"string\">\"panel-body\"</span>&gt;</span><br><span class=\"line\">    We have built partnerships <span class=\"keyword\">with</span> small farms around <span class=\"keyword\">the</span> world <span class=\"built_in\">to</span></span><br><span class=\"line\">    hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span> peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> carefully roast</span><br><span class=\"line\">    <span class=\"keyword\">in</span> &lt;<span class=\"keyword\">a</span> href=<span class=\"string\">\"/batch-size\"</span>&gt;small batches&lt;/<span class=\"keyword\">a</span>&gt; <span class=\"built_in\">to</span> maximize their</span><br><span class=\"line\">    potential.</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>下一段代码是样式的。你会在<code>padding</code>和<code>border-radius</code>使用<code>em</code>，标题的字号使用<code>rem</code>，以及<code>border</code>使用<code>px</code>。把下面代码添加到你的样式表吧。</p>\n<p>[ 代码片段 2.14 使用相对单位的面板 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;                    1</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5em</span>;            1</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;          2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &gt; <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;                   3</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;               4</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;               4</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;       4</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 对padding和border-radius使用em</li>\n<li>2 用1px定义细边框</li>\n<li>3 把面板上面多余的空间去掉，更多解释看第3章</li>\n<li>4 用rem控制标题的字号大小</li>\n</ul>\n<p>这段代码给面板添加了一个细边框以及定义了标题的样式。我希望标题的字号小一点，但要加粗和全是大写。（你可以根据自己的设计，把字号改大点或者使用不同的排版方式）</p>\n<p>第二个选择器<code>&gt;</code>是一个直接后代组合选择符（direct descendant combinator），它代表的是<code>.panel</code>下的子元素<code>h2</code>。更完整的选择器和组合选择符的索引可以看附录A。</p>\n<p>在代码片段2.13中，为了更清晰看到效果，我给<code>body</code>添加了一个类<code>panel-body</code>，不过你会发现，在你自己的代码里是不需要的。因为这个元素从根元素上继承了字号大小，它已经是你想要看到的那样。</p>\n<h3 id=\"2-3-2-让这个面板变得“响应式”\"><a href=\"#2-3-2-让这个面板变得“响应式”\" class=\"headerlink\" title=\"2.3.2 让这个面板变得“响应式”\"></a>2.3.2 让这个面板变得“响应式”</h3><p>我们再更深入地看看这个问题。你可以根据屏幕尺寸的变化，添加媒体查询来改变基础字号大小，这可以令面板在不同尺寸的屏幕下，有不同的大小变化。（见图2.8）</p>\n<p>[ 图 2.8 在不同屏幕大小的响应式面板：300px（左上角），800px（右上角），1440px（下面） ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig08_alt.jpg\" alt=\"&quot;图 2.8&quot;\"></p>\n<blockquote>\n<p>媒体查询（media query） —— 通过<code>@media</code>规则来声明样式，在不同的屏幕尺寸或者媒体类型（如打印机或显示器）下，触发对应的样式控制。这是响应式设计的关键要素。详情看代码片段2.15的这个例子，我在第8章会更深入的讨论媒体查询这个话题。</p>\n</blockquote>\n<p>为了实现上面说的效果，把你的样式代码改成这样。</p>\n<p>[ 代码片段 2.15 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root &#123;                            1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.75em</span>;               1</span><br><span class=\"line\">&#125;                                  1</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: 800px) &#123;        2</span><br><span class=\"line\">  :root &#123;                          2</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.875em</span>;            2</span><br><span class=\"line\">  &#125;                                2</span><br><span class=\"line\">&#125;                                  2</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: 1200px) &#123;       3</span><br><span class=\"line\">  :root &#123;                          3</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;                3</span><br><span class=\"line\">  &#125;                                3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 针对所有屏幕，但是在更大的屏幕会被覆盖</li>\n<li>2 针对比800px更宽的屏幕，覆盖默认样式代码</li>\n<li>3 针对比1200px更宽的屏幕，覆盖以上两套样式代码</li>\n</ul>\n<p>第一套样式规则，声明了小屏幕中的默认字号大小，这是我们想要在较小的屏幕上看到的字号大小。然后使用媒体查询，把800px和1200px分别作为两个分水岭逐级增加字号的大小，覆盖掉默认的代码。</p>\n<p>针对页面的根元素使用这些字号大小，响应式地重新定义em和rem对应的值，从而达到响应改变整个页面的效果。尽管你没有直接对这个面板做任何的修改，它现在是响应式的。在小屏幕上，譬如一台手机，字号大小会被渲染成更小的（12px）。然后，在更大的屏幕上，宽大于800px和大于1200px的，组件的字号会分别放大到14px和16px。改变你的浏览器窗口，看看组件是怎么变化的吧。</p>\n<p>如果你在整个页面中像这样严格使用相对单位，整个页面会随着视窗大小放大和缩小。这会是你的响应式策略里很重要的一部分。上面的2套媒体查询声明代码，可以帮助你节省在页面的其他部分使用媒体查询的额外代码。不过，如果你在元素中声明的字号大小是以像素为单位的，那就不会产生任何效果了。</p>\n<p>类似地，如果你的老板或者客户觉得现在网站的字号太小或者太大，你随时可以做到通过修改一行代码影响到全局的元素，这项改变会影响到页面上的其他元素，不费吹灰之力。</p>\n<h3 id=\"2-3-3-调整单个组件的大小\"><a href=\"#2-3-3-调整单个组件的大小\" class=\"headerlink\" title=\"2.3.3 调整单个组件的大小\"></a>2.3.3 调整单个组件的大小</h3><p>你也可以通过使用em缩放页面上的一个独立组件。有时，你可能会需要界面上的某些组件可以有个大号的版本。在我们的面板上这么做吧，首先你需要给面板添加一个类名<code>large</code>：<code>&lt;div class=&quot;panel large&quot;&gt;</code>。</p>\n<p>在图2.9，我们看到了面板的普通版和大号版的比较。效果类似响应式面板，但是两种尺寸是可以同时在同一个页面中使用的。</p>\n<p>[ 图 2.9 在一个页面上的普通尺寸面板和大号面板 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig09_alt.jpg\" alt=\"&quot;图 2.9&quot;\"></p>\n<p>我们来对面板的字号声明方式做一些小的修改。你还是在使用相对单位，但需要调整它们的基准值。第一点，给每个面板的父元素字号大小的定义<code>font-size: 1rem</code>。这里指的是，不管在什么地方使用这个面板，每个面板的字号大小是一个确定值。</p>\n<p>第二点，使用em重新声明标题的字号大小，而不使用rem，这样标题就可以和刚才声明的父元素字号1rem关联起来。下面是对应的代码，更新下你的样式表代码吧。</p>\n<p>[ 代码片段 2.16 创建一个面板的大号版本 ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;               1</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel</span> &gt; <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8em</span>;              2</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 给组件声明确定的字号大小</li>\n<li>2 其他元素的字号大小用em和父元素字号关联</li>\n</ul>\n<p>这些修改看起来并没有影响面板的样式，但是现在你已经准备好了，做一个大号的面板只需要修改一小行代码。你需要做的，就是把父元素字号大小改写成1rem以外的一个值。因为其他元素的计算方式都依赖父元素的字号大小，只要修改它，整个面板的相关尺寸都会发生改变。添加下一个CSS代码片段到你的样式表，定义一个大号面板吧。</p>\n<p>[ 代码片段 2.17 利用一行代码放大整个面板 ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span><span class=\"selector-class\">.large</span> &#123;               <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 组合选择器指向同时有panel类和large类的元素</li>\n</ul>\n<p>现在，你可以给普通面板添加<code>class=&quot;panel&quot;</code>和给大号面板添加<code>class=&quot;panel large&quot;</code>。类似地，你也可以定义一个小号版本，只需要把父元素的字号设得比1rem小。如果这个面板是一个更复杂的组件，包含多种字号大小或padding，也只需要一个声明就可以重置大小，只要所有的子元素都是使用em声明的。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>   </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n"},{"title":"如何更愉快地使用em —— 别说你懂CSS相对单位","date":"2018-07-05T05:28:00.000Z","_content":"\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/) [本文]\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n\n***\n\nCSS提供了很多种方式去定义一个值。大家最熟悉的可能也是最容易使用的就是像素（pixel），这被称做“绝对单位”。也就是说，5px在不同的场景下是一样的值。而其他的单位，如em和rem，不是绝对的而是相对的。相对单位的值会根据外部影响因素的变化而变化。例如，2em的值取决于你在哪个元素使用它（有时甚至是哪个属性）。很自然，相对单位使用起来会比较困难。\n\n开发人员，甚至有经验的CSS开发人员，往往不喜欢跟相对单位打交道，其中包括臭名昭著的em。em的值可以被改变的方式似乎难以预测，没有px那么清晰。在本章中，我将揭开相对单位的神秘面纱。首先，我会解释它们为CSS带来的独特价值，然后我会帮助你更好地理解它们。我会解释它们的工作原理，也会告诉你怎么征服它们那看似不可预测的特性。你可以让相对单位为你所用，正确地运行，它们将让你的代码变得更加简单、灵活和容易使用。\n\n## 2.1 相对单位值的魔力\n\nCSS是通过迟绑定（late-binding）的方式把样式渲染到web页面上的：内容和它的样式会在各自的渲染完成之后再合并到一起。比起其他类型的图形设计，这给设计过程添加了它们没有的复杂程度，同时也赋予CSS更强大的能力 —— 一个样式表可供成百上千个页面使用。此外，用户可以直接改变页面的最终呈现方式。举个例子，用户可以更改默认字号大小或者调整浏览器窗口的大小。\n\n在早期的计算机应用程序开发以及传统出版行业中，开发人员或出版商清楚知道所在的媒介存在哪些限制。对于一个特定的应用程序，窗口可能是400px宽，300px高，或者一个版面可能是4英寸宽，6½英寸高。因此，当开发人员布局应用程序的按钮和文本时，他们很清楚这些元素可以做成什么尺寸，以及在屏幕上还有多少空间可以留给他们用来处理其他元素。然而在网页上，情况却不是这样的。\n\n### 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n\n在web环境下，用户可以将浏览器窗口设置为任意大小，且CSS需要去适应它。另外，用户可以在一个页面打开后，再调整它的大小，CSS也需要去适应这些新的约束条件。这说明了在你创建页面时样式还没有被调用，而是当页面在屏幕上渲染时，浏览器才会去计算样式的规则。\n\n这给CSS增加了一层抽象\b的概念。我们不应该根据理想的情境来设计元素，而是应该声明一些样式规则，可以让该元素在任何场景下都能跑通。对于现在的互联网，你的页面可能要在一个4英寸的手机屏幕上展示，也可能在一个30英寸的大屏幕上。\n\n长久以来，设计师大量使用“完美像素”设计，缓解了这个问题带来的复杂性。他们会创建一个有着严格定义的容器，通常是一个大约800px宽的居中的纵向列。然后在这些限制下他们再进行设计，这跟他们的前辈在原生应用程序或印刷出版物中做的设计或多或少有点类似。\n\n### 2.1.2 完美像素网页的终结\n\n随着技术的进步和制造商推出更高分辨率的显示器，像素完美的设计方式慢慢开始崩溃。在21世纪初期，把页面设计成1024px宽还是800px宽，哪个是更保险的展示策略？开发者针对这个问题讨论得很多。然后，我们又针对能否改成1280px宽有类似的讨论。是时候做个决定了。把我们网站的内容宽度做得宽一点（相对于落伍的小电脑屏幕），还是做得窄一点（相对于新出的大屏幕），哪个选择更好呢？\n\n当智能手机出现的时候，开发人员终于要（被迫）要停止假装每个人都可以在他们的网站上获得相同的体验了。不管我们喜不喜欢，我们都得放弃已知的多栏定宽（px）布局，并开始考虑响应式设计。我们再也不能逃避CSS所带来的抽象概念（abstraction），相反，我们要去拥抱这项特性。\n\n> 响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在[第8章](https://livebook.manning.com/#!/book/css-in-depth/chapter-8/ch08)中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。\n\n增加的抽象\b概念意味着额外的复杂性。如果我设定一个宽度为800px的元素，那么它在一个更小的窗口中会怎么显示呢？如果一个横向菜单不能全部在一行展示完，它又会怎么展示？在编写CSS时，你需要能够同时考虑具体情况以及普适性的问题。如果针对一个特定的问题，你有多种方式可以解决，那么你应该选那个在多种不同场景下更通用的解决方案。\n\n在抽象概念这个问题上，相对单位是CSS提供的工具之一。与其把字号大小设置为14px，你可以把它设置为与窗口大小成比例缩放。或者，你可以设置页面上所有元素是依赖基础字号大小的变化而变化的，然后用一行代码就可以达到调整整个页面的目的。接下来，我们来看看CSS提供了哪些方式来实现以上的效果。\n\n> ### 像素（pixel）、点（point）和pc（pica）\n> CSS支持一些绝对长度单位，其中最常见也最基本的是像素（px）。较不常见的绝对单位有毫米（mm，millimeter）、厘米（cm，centimeter）、英寸（in.，inch）、点（pt，point，印刷术语，长度为1/72 inch）以及pc（pica，印刷术语，长度为12 points）。如果你想了解其中的计算方式，以上的长度单位都可以直接转换成另一个单位：1 inch = 25.4 mm = 2.54 cm = 6 pc = 72 pt = 96 px。因此，16px与12pt（16/96×72）是等价的。设计师通常更熟悉点（point）的使用，而开发人员更习惯于像素，因此在和设计师沟通时，你可能需要在两者之间做一些计算工作。  \n> \n> 像素这个名字有点误导性 —— 1 CSS像素并不严格等同于显示器的1像素，在高分辨率显示器（如“Retina显示屏”）上尤其明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。（尽管有可能会因某些设备或用户设置而异。）\n\n## 2.2 em和rem\n\nem是最常见的相对长度单位，这是排版中使用的一种度量方式，基准值是当前元素的字号大小。 在CSS中，1em表示当前元素的字号大小，实际值取决于在哪个元素上应用。图2.1展示了一个padding为1em的`div`。\n\n[ 图 2.1：padding为1em的元素（添加虚线是为了让padding更明显）]\n\n![\"图 2.1\"](http://sinacloud.net/woodysblog/css-in-depth/02fig01_alt.jpg)\n\n模板代码片段如下。这套样式规则定义字号为16px，也就是元素本身1em代表的值，然后再使用em来声明元素的padding。 把这段代码添加到一个新的样式表里，在`<div class =\"padded\">`下随手写些文字，然后到浏览器看看效果吧。\n\n代码片段 2.1：在padding上使用em\n\n```\n.padded {\n  font-size: 16px;\n  padding: 1em;          1\n}\n```\n\n* 1 把各个方向的padding的值设置为字号大小\n\n把`padding`赋值为1em，乘以字号，得到一个值为16px的`padding`渲染值。重点来了，使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为计算值。\n\n在这个例子里，将`padding`改为2em会生成一个32px的计算值。如果同一个元素的另一个选择器，用一个不一样的字号值去覆盖它，这会改变em在这个域下的基准值，那么`padding`的计算值也会相应变化。\n\n在设置`padding、height、width或border-radius`等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。\n\n图2.2展示了两个不同大小的盒子。盒子内的`font-size`、`padding`和`border-radius`各不相同。\n\n[ 图 2.2：有相对大小的padding和border-radius的元素 ]\n\n![\"图 2.2\"](http://sinacloud.net/woodysblog/css-in-depth/02fig02.jpg)\n\n你可以通过用em声明`padding`和`border-radius`来给这些盒子声明样式规则。首先给每个元素设定`padding`和`border-radius`为1em，然后给每个盒子指定不同的字号，那么其他属性会跟着字号缩放。\n\n在你的HTML代码里，创建如下的两个盒子，类名分别是`box-small`和`box-large`，代表两个字号修饰符。\n\n[ 代码片段 2.2：在不同元素上使用em（HTML）]\n\n```\n<span class=\"box box-small\">Small</span>\n<span class=\"box box-large\">Large</span>\n```\n\n现在，添加下面的样式到你的样式表。这里使用了em声明了一个盒子。还定义了小字号和大字号的修饰符，指定不同的字号大小。\n\n[ 代码片段 2.3：在不同元素上使用em（CSS）]\n\n```\n.box {\n  padding: 1em;\n  border-radius: 1em;\n  background-color: lightgray;\n}\n\n.box-small {\n  font-size: 12px;              1\n}\n\n.box-large {\n  font-size: 18px;              1\n}\n```\n\n* 1 不同的字号大小，这会改变元素的em实际值的大小。\n\n这是em一个强大的功能。你可以定义一个元素的字号大小，然后使用一句简单的声明，就可以通过改变字号大小从而控制整个元素大小缩放。你后面将会创建另外一个这样的例子，不过首先，我们来讨论一下em和字号大小。\n\n### 2.2.1 对font-size使用em\n\n当`font-size`使用em作为单位时，它的表现会有点不一样。我之前说过，em是以当前元素的字号大小作为基准值的。但是，如果你把一个元素的字号设为1.2em的时候，这是什么意思呢？一个元素的字号大小是不能等于它自己的1.2倍的。相反，在`font-size`上的em会先从继承到的字号大小衍生出来。\n\n举个简单的例子，见图2.3。以下展示了一些不同字号大小的文字。在代码片段2.4，你会用到em来实现。\n\n[ 图 2.3 以em为单位的两种不同的字号大小 ]\n\n![\"图 2.3\"](http://sinacloud.net/woodysblog/css-in-depth/02fig03.jpg)\n\n在你的页面添加以下代码片段。第一行文字，在`<body>`标签里面，它会按body的字号大小渲染。第二部分，口号（slogan），继承父元素的字号大小。\n\n[ 代码片段 2.4 相对`font-size`的模板 ]\n\n```\n<body>\n  We love coffee\n  <p class=\"slogan\">We love coffee</p>          1\n</body>\n```\n\n* 1 slogan从<body>继承了字号大小。\n\n代码片段中，CSS代码片段声明了`body`的字号大小。为了更加清晰，在这里我用了px来声明。下一步，你可以用em来放大slogan的字号大小。\n\n[ 代码片段 2.5：在font-size上使用em ]\n\n```\nbody {\n  font-size: 16px;\n}\n\n.slogan {                  1\n  font-size: 1.2em;        1\n}                          1\n```\n\n* 1 计算：这个元素继承到字号，乘以1.2\n\nslogan声明的字号大小是1.2em，为了计算转换成像素值，你需要引用继承的字号16px，16 * 1.2 = 19.2，所以计算字号值是19.2px。\n\n> 提示 \n>  \n> 如果你已经知道以px为单位的基础字号大小，但希望把它改用em声明，下面有个简单的计算公式：目标em值 = 目标像素值 / 父元素（被继承元素）像素值。举个例子，如果你想要一个10px的字号大小，父元素的字号是12px，10 / 12 = 0.8333em。如果你想要16px的字号大小，父元素字号是12px，那么 16 / 12 = 1.3333em。我们会在这章里多次用到这个计算公式。\n\n有一点对你很有帮助，对于大多数浏览器，默认字号大小是16px。技术上，关键字medium会被计算转换为16px。\n\n#### 当我们在一个元素内用em同时声明font-size和其他属性\n\n你已经使用过em声明`font-size`了（基于一个继承的字号大小值）。以及，你也曾经使用em声明其他属性，如`padding`和`border-radius`（基于当前元素的字号大小值）。当你针对同一个元素使用em声明`font-size`和其他属性的时候，em会变得很神奇。此时浏览器必须先计算`font-size`，然后基于这个值再去计算其他值。这些属性声明的时候使用的是相同的em值，但很可能它们会有不同的计算值。\n\n在之前的例子里，我们计算到字号大小是19.2px（继承的16px乘以1.2em）。图2.4是相同的slogan元素，但有额外的1.2em `padding`以及为了让`padding`大小更加明显的灰色背景。可以看出，`padding`比`font-size`稍微大一些，尽管它俩声明的时候em值是一样的。\n\n[ 图2.4 一个font-size为1.2em以及padding为1.2em的元素 ]\n\n![\"图 2.4\"](http://sinacloud.net/woodysblog/css-in-depth/02fig04_alt.jpg)\n\n现在的情况是，这个段落从`body`继承了16px的字号大小，通过计算得到值为19.2px的字号计算值。这意味着，19.2px是1em在当前域的基础值，而这个值会被用作计算`padding`的值。对应的CSS代码在下面，更新你的样式表并查看你的测试页面吧。\n\n[ 代码片段 2.6 在font-size和padding上使用em ]\n\n```\nbody {\n  font-size: 16px;\n}\n\n.slogan {\n  font-size: 1.2em;             1\n  padding: 1.2em;               2\n  background-color: #ccc;\n}\n```\n\n* 1 赋值为 19.2 px\n* 2 赋值为 23.04 px\n\n在这个例子里，`padding`的声明值为1.2em，乘以19.2px（当前元素的字号大小），计算出23.04px。我们可以看到，尽管`font-size`和`padding`声明时em值是一样的，但它们的计算值是不一样的。\n\n#### 字号收缩问题\n\n当你使用em声明多层嵌套的元素字号时，会产生意想不到的效果。要弄清楚每个元素的实际值，首先你需要知道它继承的父元素的字号大小，如果父元素的字号也是用em声明的，那么你需要知道它的父元素的字号大小，在dom树往上查，以此类推。\n\n当你使用em声明列表的字号大小，列表嵌套了好几层，效果就更明显了。大多数web开发者会发现在他们的职业生涯里面，图2.5的列表嵌套形式有点眼熟。文字在逐步缩小！正是因为em带来的这一类烦人的问题，开发者才对em避而远之。\n\n[ 图 2.5 嵌套列表中的字号缩小现象 ]\n\n![\"图 2.5\"](http://sinacloud.net/woodysblog/css-in-depth/02fig05.jpg)\n\n当你多层嵌套列表，而每一层声明的字号大小以em为单位，字号收缩现象就会发生。在代码片段2.7和2.8的例子里，无序列表的字号是0.8em。这个选择器对页面上所有的ul有效，所以当一个列表从另外一个列表继承到字号大小的时候，em就产生复合效果。\n\n[ 代码片段 2.7 在列表上使用em ]\n\n```\nbody {\n  font-size: 16px;\n}\n\nul {\n  font-size: .8em;\n}\n```\n\n[ 代码片段 2.8 多层嵌套的列表 ]\n\n```\n<ul>\n  <li>Top level\n    <ul>                                    1\n      <li>Second level                      1\n        <ul>                                2\n          <li>Third level                   2\n            <ul>                            3\n              <li>Fourth level              3\n                <ul>\n                  <li>Fifth level</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n```\n\n* 1 这个列表嵌套在第一个列表里，继承了它的字号大小\n* 2 然后这个列表又嵌套在另一个列表里，继承了第二个列表的字号大小\n* 3 ……以此类推\n\n每一个列表的字号大小是0.8乘以父元素的字号大小。这代表第一个列表的字号大小是12.8px，嵌套的子列表字号大小是10.24px（12.8px * 0.8），第三层列表的是8.192px，如此类推。同样地，如果你给字号大小的赋值大于1em，相反，文字的字号会一层层变大。我们想要的效果是像图2.6一样，在顶层声明字号的大小，但下面嵌套层级的列表字号保持不变。\n\n[ 图 2.6 字号正常的多层嵌套列表 ]\n\n![\"图 2.6\"](http://sinacloud.net/woodysblog/css-in-depth/02fig06.jpg)\n\n其中一种实现的方式可以看看代码片段2.9。第一个列表的字号大小还是0.8 em（见示例2.7），第二个选择器对嵌套在无序列表的无序列表有效 —— 也就是除了第一个无序列表以外的所有无序列表。现在嵌套的列表设定了跟父元素一致的字号大小，正如图2.6一样。\n\n[ 代码片段 2.9 字号收缩现象的纠正 ]\n\n```\nul {\n  font-size: .8em;\n}\n\nul ul {                1\n  font-size: 1em;      1\n}  \n```\n\n* 1 嵌套在列表里面的列表，应该把字号大小设定为跟父元素一样\n\n这可以解决问题，但不是最优方案。因为你设置了一个字号值，马上用另一个选择器重写了这个规则。如果你可以使用针对嵌套的列表声明一个特定的选择器，避免互相覆盖，会是一个更好的方案。\n\n到现在我们清楚了，如果你不是一个比较小心的人，你应该远离em。使用em作为`padding`、`margin`和元素缩放效果的单位挺好的，但当em遇上`font-size`时，事情可以变得很复杂。感谢上天，我们有个更好的选择 —— rem。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/) [本文]\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)  \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","source":"_posts/css-in-depth-relative-units.md","raw":"---\ntitle: 如何更愉快地使用em —— 别说你懂CSS相对单位\ndate: 2018-07-05 13:28:00\ntags:\n- front-end\n- css\n---\n\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/) [本文]\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n\n***\n\nCSS提供了很多种方式去定义一个值。大家最熟悉的可能也是最容易使用的就是像素（pixel），这被称做“绝对单位”。也就是说，5px在不同的场景下是一样的值。而其他的单位，如em和rem，不是绝对的而是相对的。相对单位的值会根据外部影响因素的变化而变化。例如，2em的值取决于你在哪个元素使用它（有时甚至是哪个属性）。很自然，相对单位使用起来会比较困难。\n\n开发人员，甚至有经验的CSS开发人员，往往不喜欢跟相对单位打交道，其中包括臭名昭著的em。em的值可以被改变的方式似乎难以预测，没有px那么清晰。在本章中，我将揭开相对单位的神秘面纱。首先，我会解释它们为CSS带来的独特价值，然后我会帮助你更好地理解它们。我会解释它们的工作原理，也会告诉你怎么征服它们那看似不可预测的特性。你可以让相对单位为你所用，正确地运行，它们将让你的代码变得更加简单、灵活和容易使用。\n\n## 2.1 相对单位值的魔力\n\nCSS是通过迟绑定（late-binding）的方式把样式渲染到web页面上的：内容和它的样式会在各自的渲染完成之后再合并到一起。比起其他类型的图形设计，这给设计过程添加了它们没有的复杂程度，同时也赋予CSS更强大的能力 —— 一个样式表可供成百上千个页面使用。此外，用户可以直接改变页面的最终呈现方式。举个例子，用户可以更改默认字号大小或者调整浏览器窗口的大小。\n\n在早期的计算机应用程序开发以及传统出版行业中，开发人员或出版商清楚知道所在的媒介存在哪些限制。对于一个特定的应用程序，窗口可能是400px宽，300px高，或者一个版面可能是4英寸宽，6½英寸高。因此，当开发人员布局应用程序的按钮和文本时，他们很清楚这些元素可以做成什么尺寸，以及在屏幕上还有多少空间可以留给他们用来处理其他元素。然而在网页上，情况却不是这样的。\n\n### 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n\n在web环境下，用户可以将浏览器窗口设置为任意大小，且CSS需要去适应它。另外，用户可以在一个页面打开后，再调整它的大小，CSS也需要去适应这些新的约束条件。这说明了在你创建页面时样式还没有被调用，而是当页面在屏幕上渲染时，浏览器才会去计算样式的规则。\n\n这给CSS增加了一层抽象\b的概念。我们不应该根据理想的情境来设计元素，而是应该声明一些样式规则，可以让该元素在任何场景下都能跑通。对于现在的互联网，你的页面可能要在一个4英寸的手机屏幕上展示，也可能在一个30英寸的大屏幕上。\n\n长久以来，设计师大量使用“完美像素”设计，缓解了这个问题带来的复杂性。他们会创建一个有着严格定义的容器，通常是一个大约800px宽的居中的纵向列。然后在这些限制下他们再进行设计，这跟他们的前辈在原生应用程序或印刷出版物中做的设计或多或少有点类似。\n\n### 2.1.2 完美像素网页的终结\n\n随着技术的进步和制造商推出更高分辨率的显示器，像素完美的设计方式慢慢开始崩溃。在21世纪初期，把页面设计成1024px宽还是800px宽，哪个是更保险的展示策略？开发者针对这个问题讨论得很多。然后，我们又针对能否改成1280px宽有类似的讨论。是时候做个决定了。把我们网站的内容宽度做得宽一点（相对于落伍的小电脑屏幕），还是做得窄一点（相对于新出的大屏幕），哪个选择更好呢？\n\n当智能手机出现的时候，开发人员终于要（被迫）要停止假装每个人都可以在他们的网站上获得相同的体验了。不管我们喜不喜欢，我们都得放弃已知的多栏定宽（px）布局，并开始考虑响应式设计。我们再也不能逃避CSS所带来的抽象概念（abstraction），相反，我们要去拥抱这项特性。\n\n> 响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在[第8章](https://livebook.manning.com/#!/book/css-in-depth/chapter-8/ch08)中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。\n\n增加的抽象\b概念意味着额外的复杂性。如果我设定一个宽度为800px的元素，那么它在一个更小的窗口中会怎么显示呢？如果一个横向菜单不能全部在一行展示完，它又会怎么展示？在编写CSS时，你需要能够同时考虑具体情况以及普适性的问题。如果针对一个特定的问题，你有多种方式可以解决，那么你应该选那个在多种不同场景下更通用的解决方案。\n\n在抽象概念这个问题上，相对单位是CSS提供的工具之一。与其把字号大小设置为14px，你可以把它设置为与窗口大小成比例缩放。或者，你可以设置页面上所有元素是依赖基础字号大小的变化而变化的，然后用一行代码就可以达到调整整个页面的目的。接下来，我们来看看CSS提供了哪些方式来实现以上的效果。\n\n> ### 像素（pixel）、点（point）和pc（pica）\n> CSS支持一些绝对长度单位，其中最常见也最基本的是像素（px）。较不常见的绝对单位有毫米（mm，millimeter）、厘米（cm，centimeter）、英寸（in.，inch）、点（pt，point，印刷术语，长度为1/72 inch）以及pc（pica，印刷术语，长度为12 points）。如果你想了解其中的计算方式，以上的长度单位都可以直接转换成另一个单位：1 inch = 25.4 mm = 2.54 cm = 6 pc = 72 pt = 96 px。因此，16px与12pt（16/96×72）是等价的。设计师通常更熟悉点（point）的使用，而开发人员更习惯于像素，因此在和设计师沟通时，你可能需要在两者之间做一些计算工作。  \n> \n> 像素这个名字有点误导性 —— 1 CSS像素并不严格等同于显示器的1像素，在高分辨率显示器（如“Retina显示屏”）上尤其明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。（尽管有可能会因某些设备或用户设置而异。）\n\n## 2.2 em和rem\n\nem是最常见的相对长度单位，这是排版中使用的一种度量方式，基准值是当前元素的字号大小。 在CSS中，1em表示当前元素的字号大小，实际值取决于在哪个元素上应用。图2.1展示了一个padding为1em的`div`。\n\n[ 图 2.1：padding为1em的元素（添加虚线是为了让padding更明显）]\n\n![\"图 2.1\"](http://sinacloud.net/woodysblog/css-in-depth/02fig01_alt.jpg)\n\n模板代码片段如下。这套样式规则定义字号为16px，也就是元素本身1em代表的值，然后再使用em来声明元素的padding。 把这段代码添加到一个新的样式表里，在`<div class =\"padded\">`下随手写些文字，然后到浏览器看看效果吧。\n\n代码片段 2.1：在padding上使用em\n\n```\n.padded {\n  font-size: 16px;\n  padding: 1em;          1\n}\n```\n\n* 1 把各个方向的padding的值设置为字号大小\n\n把`padding`赋值为1em，乘以字号，得到一个值为16px的`padding`渲染值。重点来了，使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为计算值。\n\n在这个例子里，将`padding`改为2em会生成一个32px的计算值。如果同一个元素的另一个选择器，用一个不一样的字号值去覆盖它，这会改变em在这个域下的基准值，那么`padding`的计算值也会相应变化。\n\n在设置`padding、height、width或border-radius`等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。\n\n图2.2展示了两个不同大小的盒子。盒子内的`font-size`、`padding`和`border-radius`各不相同。\n\n[ 图 2.2：有相对大小的padding和border-radius的元素 ]\n\n![\"图 2.2\"](http://sinacloud.net/woodysblog/css-in-depth/02fig02.jpg)\n\n你可以通过用em声明`padding`和`border-radius`来给这些盒子声明样式规则。首先给每个元素设定`padding`和`border-radius`为1em，然后给每个盒子指定不同的字号，那么其他属性会跟着字号缩放。\n\n在你的HTML代码里，创建如下的两个盒子，类名分别是`box-small`和`box-large`，代表两个字号修饰符。\n\n[ 代码片段 2.2：在不同元素上使用em（HTML）]\n\n```\n<span class=\"box box-small\">Small</span>\n<span class=\"box box-large\">Large</span>\n```\n\n现在，添加下面的样式到你的样式表。这里使用了em声明了一个盒子。还定义了小字号和大字号的修饰符，指定不同的字号大小。\n\n[ 代码片段 2.3：在不同元素上使用em（CSS）]\n\n```\n.box {\n  padding: 1em;\n  border-radius: 1em;\n  background-color: lightgray;\n}\n\n.box-small {\n  font-size: 12px;              1\n}\n\n.box-large {\n  font-size: 18px;              1\n}\n```\n\n* 1 不同的字号大小，这会改变元素的em实际值的大小。\n\n这是em一个强大的功能。你可以定义一个元素的字号大小，然后使用一句简单的声明，就可以通过改变字号大小从而控制整个元素大小缩放。你后面将会创建另外一个这样的例子，不过首先，我们来讨论一下em和字号大小。\n\n### 2.2.1 对font-size使用em\n\n当`font-size`使用em作为单位时，它的表现会有点不一样。我之前说过，em是以当前元素的字号大小作为基准值的。但是，如果你把一个元素的字号设为1.2em的时候，这是什么意思呢？一个元素的字号大小是不能等于它自己的1.2倍的。相反，在`font-size`上的em会先从继承到的字号大小衍生出来。\n\n举个简单的例子，见图2.3。以下展示了一些不同字号大小的文字。在代码片段2.4，你会用到em来实现。\n\n[ 图 2.3 以em为单位的两种不同的字号大小 ]\n\n![\"图 2.3\"](http://sinacloud.net/woodysblog/css-in-depth/02fig03.jpg)\n\n在你的页面添加以下代码片段。第一行文字，在`<body>`标签里面，它会按body的字号大小渲染。第二部分，口号（slogan），继承父元素的字号大小。\n\n[ 代码片段 2.4 相对`font-size`的模板 ]\n\n```\n<body>\n  We love coffee\n  <p class=\"slogan\">We love coffee</p>          1\n</body>\n```\n\n* 1 slogan从<body>继承了字号大小。\n\n代码片段中，CSS代码片段声明了`body`的字号大小。为了更加清晰，在这里我用了px来声明。下一步，你可以用em来放大slogan的字号大小。\n\n[ 代码片段 2.5：在font-size上使用em ]\n\n```\nbody {\n  font-size: 16px;\n}\n\n.slogan {                  1\n  font-size: 1.2em;        1\n}                          1\n```\n\n* 1 计算：这个元素继承到字号，乘以1.2\n\nslogan声明的字号大小是1.2em，为了计算转换成像素值，你需要引用继承的字号16px，16 * 1.2 = 19.2，所以计算字号值是19.2px。\n\n> 提示 \n>  \n> 如果你已经知道以px为单位的基础字号大小，但希望把它改用em声明，下面有个简单的计算公式：目标em值 = 目标像素值 / 父元素（被继承元素）像素值。举个例子，如果你想要一个10px的字号大小，父元素的字号是12px，10 / 12 = 0.8333em。如果你想要16px的字号大小，父元素字号是12px，那么 16 / 12 = 1.3333em。我们会在这章里多次用到这个计算公式。\n\n有一点对你很有帮助，对于大多数浏览器，默认字号大小是16px。技术上，关键字medium会被计算转换为16px。\n\n#### 当我们在一个元素内用em同时声明font-size和其他属性\n\n你已经使用过em声明`font-size`了（基于一个继承的字号大小值）。以及，你也曾经使用em声明其他属性，如`padding`和`border-radius`（基于当前元素的字号大小值）。当你针对同一个元素使用em声明`font-size`和其他属性的时候，em会变得很神奇。此时浏览器必须先计算`font-size`，然后基于这个值再去计算其他值。这些属性声明的时候使用的是相同的em值，但很可能它们会有不同的计算值。\n\n在之前的例子里，我们计算到字号大小是19.2px（继承的16px乘以1.2em）。图2.4是相同的slogan元素，但有额外的1.2em `padding`以及为了让`padding`大小更加明显的灰色背景。可以看出，`padding`比`font-size`稍微大一些，尽管它俩声明的时候em值是一样的。\n\n[ 图2.4 一个font-size为1.2em以及padding为1.2em的元素 ]\n\n![\"图 2.4\"](http://sinacloud.net/woodysblog/css-in-depth/02fig04_alt.jpg)\n\n现在的情况是，这个段落从`body`继承了16px的字号大小，通过计算得到值为19.2px的字号计算值。这意味着，19.2px是1em在当前域的基础值，而这个值会被用作计算`padding`的值。对应的CSS代码在下面，更新你的样式表并查看你的测试页面吧。\n\n[ 代码片段 2.6 在font-size和padding上使用em ]\n\n```\nbody {\n  font-size: 16px;\n}\n\n.slogan {\n  font-size: 1.2em;             1\n  padding: 1.2em;               2\n  background-color: #ccc;\n}\n```\n\n* 1 赋值为 19.2 px\n* 2 赋值为 23.04 px\n\n在这个例子里，`padding`的声明值为1.2em，乘以19.2px（当前元素的字号大小），计算出23.04px。我们可以看到，尽管`font-size`和`padding`声明时em值是一样的，但它们的计算值是不一样的。\n\n#### 字号收缩问题\n\n当你使用em声明多层嵌套的元素字号时，会产生意想不到的效果。要弄清楚每个元素的实际值，首先你需要知道它继承的父元素的字号大小，如果父元素的字号也是用em声明的，那么你需要知道它的父元素的字号大小，在dom树往上查，以此类推。\n\n当你使用em声明列表的字号大小，列表嵌套了好几层，效果就更明显了。大多数web开发者会发现在他们的职业生涯里面，图2.5的列表嵌套形式有点眼熟。文字在逐步缩小！正是因为em带来的这一类烦人的问题，开发者才对em避而远之。\n\n[ 图 2.5 嵌套列表中的字号缩小现象 ]\n\n![\"图 2.5\"](http://sinacloud.net/woodysblog/css-in-depth/02fig05.jpg)\n\n当你多层嵌套列表，而每一层声明的字号大小以em为单位，字号收缩现象就会发生。在代码片段2.7和2.8的例子里，无序列表的字号是0.8em。这个选择器对页面上所有的ul有效，所以当一个列表从另外一个列表继承到字号大小的时候，em就产生复合效果。\n\n[ 代码片段 2.7 在列表上使用em ]\n\n```\nbody {\n  font-size: 16px;\n}\n\nul {\n  font-size: .8em;\n}\n```\n\n[ 代码片段 2.8 多层嵌套的列表 ]\n\n```\n<ul>\n  <li>Top level\n    <ul>                                    1\n      <li>Second level                      1\n        <ul>                                2\n          <li>Third level                   2\n            <ul>                            3\n              <li>Fourth level              3\n                <ul>\n                  <li>Fifth level</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n```\n\n* 1 这个列表嵌套在第一个列表里，继承了它的字号大小\n* 2 然后这个列表又嵌套在另一个列表里，继承了第二个列表的字号大小\n* 3 ……以此类推\n\n每一个列表的字号大小是0.8乘以父元素的字号大小。这代表第一个列表的字号大小是12.8px，嵌套的子列表字号大小是10.24px（12.8px * 0.8），第三层列表的是8.192px，如此类推。同样地，如果你给字号大小的赋值大于1em，相反，文字的字号会一层层变大。我们想要的效果是像图2.6一样，在顶层声明字号的大小，但下面嵌套层级的列表字号保持不变。\n\n[ 图 2.6 字号正常的多层嵌套列表 ]\n\n![\"图 2.6\"](http://sinacloud.net/woodysblog/css-in-depth/02fig06.jpg)\n\n其中一种实现的方式可以看看代码片段2.9。第一个列表的字号大小还是0.8 em（见示例2.7），第二个选择器对嵌套在无序列表的无序列表有效 —— 也就是除了第一个无序列表以外的所有无序列表。现在嵌套的列表设定了跟父元素一致的字号大小，正如图2.6一样。\n\n[ 代码片段 2.9 字号收缩现象的纠正 ]\n\n```\nul {\n  font-size: .8em;\n}\n\nul ul {                1\n  font-size: 1em;      1\n}  \n```\n\n* 1 嵌套在列表里面的列表，应该把字号大小设定为跟父元素一样\n\n这可以解决问题，但不是最优方案。因为你设置了一个字号值，马上用另一个选择器重写了这个规则。如果你可以使用针对嵌套的列表声明一个特定的选择器，避免互相覆盖，会是一个更好的方案。\n\n到现在我们清楚了，如果你不是一个比较小心的人，你应该远离em。使用em作为`padding`、`margin`和元素缩放效果的单位挺好的，但当em遇上`font-size`时，事情可以变得很复杂。感谢上天，我们有个更好的选择 —— rem。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/) [本文]\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)  \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","slug":"css-in-depth-relative-units","published":1,"updated":"2018-08-15T15:23:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8b000pzvr3xo1f9fl9","content":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>CSS提供了很多种方式去定义一个值。大家最熟悉的可能也是最容易使用的就是像素（pixel），这被称做“绝对单位”。也就是说，5px在不同的场景下是一样的值。而其他的单位，如em和rem，不是绝对的而是相对的。相对单位的值会根据外部影响因素的变化而变化。例如，2em的值取决于你在哪个元素使用它（有时甚至是哪个属性）。很自然，相对单位使用起来会比较困难。</p>\n<p>开发人员，甚至有经验的CSS开发人员，往往不喜欢跟相对单位打交道，其中包括臭名昭著的em。em的值可以被改变的方式似乎难以预测，没有px那么清晰。在本章中，我将揭开相对单位的神秘面纱。首先，我会解释它们为CSS带来的独特价值，然后我会帮助你更好地理解它们。我会解释它们的工作原理，也会告诉你怎么征服它们那看似不可预测的特性。你可以让相对单位为你所用，正确地运行，它们将让你的代码变得更加简单、灵活和容易使用。</p>\n<h2 id=\"2-1-相对单位值的魔力\"><a href=\"#2-1-相对单位值的魔力\" class=\"headerlink\" title=\"2.1 相对单位值的魔力\"></a>2.1 相对单位值的魔力</h2><p>CSS是通过迟绑定（late-binding）的方式把样式渲染到web页面上的：内容和它的样式会在各自的渲染完成之后再合并到一起。比起其他类型的图形设计，这给设计过程添加了它们没有的复杂程度，同时也赋予CSS更强大的能力 —— 一个样式表可供成百上千个页面使用。此外，用户可以直接改变页面的最终呈现方式。举个例子，用户可以更改默认字号大小或者调整浏览器窗口的大小。</p>\n<p>在早期的计算机应用程序开发以及传统出版行业中，开发人员或出版商清楚知道所在的媒介存在哪些限制。对于一个特定的应用程序，窗口可能是400px宽，300px高，或者一个版面可能是4英寸宽，6½英寸高。因此，当开发人员布局应用程序的按钮和文本时，他们很清楚这些元素可以做成什么尺寸，以及在屏幕上还有多少空间可以留给他们用来处理其他元素。然而在网页上，情况却不是这样的。</p>\n<h3 id=\"2-1-1-完美像素设计（pixel-perfect-design）的挣扎\"><a href=\"#2-1-1-完美像素设计（pixel-perfect-design）的挣扎\" class=\"headerlink\" title=\"2.1.1 完美像素设计（pixel-perfect design）的挣扎\"></a>2.1.1 完美像素设计（pixel-perfect design）的挣扎</h3><p>在web环境下，用户可以将浏览器窗口设置为任意大小，且CSS需要去适应它。另外，用户可以在一个页面打开后，再调整它的大小，CSS也需要去适应这些新的约束条件。这说明了在你创建页面时样式还没有被调用，而是当页面在屏幕上渲染时，浏览器才会去计算样式的规则。</p>\n<p>这给CSS增加了一层抽象\b的概念。我们不应该根据理想的情境来设计元素，而是应该声明一些样式规则，可以让该元素在任何场景下都能跑通。对于现在的互联网，你的页面可能要在一个4英寸的手机屏幕上展示，也可能在一个30英寸的大屏幕上。</p>\n<p>长久以来，设计师大量使用“完美像素”设计，缓解了这个问题带来的复杂性。他们会创建一个有着严格定义的容器，通常是一个大约800px宽的居中的纵向列。然后在这些限制下他们再进行设计，这跟他们的前辈在原生应用程序或印刷出版物中做的设计或多或少有点类似。</p>\n<h3 id=\"2-1-2-完美像素网页的终结\"><a href=\"#2-1-2-完美像素网页的终结\" class=\"headerlink\" title=\"2.1.2 完美像素网页的终结\"></a>2.1.2 完美像素网页的终结</h3><p>随着技术的进步和制造商推出更高分辨率的显示器，像素完美的设计方式慢慢开始崩溃。在21世纪初期，把页面设计成1024px宽还是800px宽，哪个是更保险的展示策略？开发者针对这个问题讨论得很多。然后，我们又针对能否改成1280px宽有类似的讨论。是时候做个决定了。把我们网站的内容宽度做得宽一点（相对于落伍的小电脑屏幕），还是做得窄一点（相对于新出的大屏幕），哪个选择更好呢？</p>\n<p>当智能手机出现的时候，开发人员终于要（被迫）要停止假装每个人都可以在他们的网站上获得相同的体验了。不管我们喜不喜欢，我们都得放弃已知的多栏定宽（px）布局，并开始考虑响应式设计。我们再也不能逃避CSS所带来的抽象概念（abstraction），相反，我们要去拥抱这项特性。</p>\n<blockquote>\n<p>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-8/ch08\" target=\"_blank\" rel=\"noopener\">第8章</a>中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。</p>\n</blockquote>\n<p>增加的抽象\b概念意味着额外的复杂性。如果我设定一个宽度为800px的元素，那么它在一个更小的窗口中会怎么显示呢？如果一个横向菜单不能全部在一行展示完，它又会怎么展示？在编写CSS时，你需要能够同时考虑具体情况以及普适性的问题。如果针对一个特定的问题，你有多种方式可以解决，那么你应该选那个在多种不同场景下更通用的解决方案。</p>\n<p>在抽象概念这个问题上，相对单位是CSS提供的工具之一。与其把字号大小设置为14px，你可以把它设置为与窗口大小成比例缩放。或者，你可以设置页面上所有元素是依赖基础字号大小的变化而变化的，然后用一行代码就可以达到调整整个页面的目的。接下来，我们来看看CSS提供了哪些方式来实现以上的效果。</p>\n<blockquote>\n<h3 id=\"像素（pixel）、点（point）和pc（pica）\"><a href=\"#像素（pixel）、点（point）和pc（pica）\" class=\"headerlink\" title=\"像素（pixel）、点（point）和pc（pica）\"></a>像素（pixel）、点（point）和pc（pica）</h3><p>CSS支持一些绝对长度单位，其中最常见也最基本的是像素（px）。较不常见的绝对单位有毫米（mm，millimeter）、厘米（cm，centimeter）、英寸（in.，inch）、点（pt，point，印刷术语，长度为1/72 inch）以及pc（pica，印刷术语，长度为12 points）。如果你想了解其中的计算方式，以上的长度单位都可以直接转换成另一个单位：1 inch = 25.4 mm = 2.54 cm = 6 pc = 72 pt = 96 px。因此，16px与12pt（16/96×72）是等价的。设计师通常更熟悉点（point）的使用，而开发人员更习惯于像素，因此在和设计师沟通时，你可能需要在两者之间做一些计算工作。  </p>\n<p>像素这个名字有点误导性 —— 1 CSS像素并不严格等同于显示器的1像素，在高分辨率显示器（如“Retina显示屏”）上尤其明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。（尽管有可能会因某些设备或用户设置而异。）</p>\n</blockquote>\n<h2 id=\"2-2-em和rem\"><a href=\"#2-2-em和rem\" class=\"headerlink\" title=\"2.2 em和rem\"></a>2.2 em和rem</h2><p>em是最常见的相对长度单位，这是排版中使用的一种度量方式，基准值是当前元素的字号大小。 在CSS中，1em表示当前元素的字号大小，实际值取决于在哪个元素上应用。图2.1展示了一个padding为1em的<code>div</code>。</p>\n<p>[ 图 2.1：padding为1em的元素（添加虚线是为了让padding更明显）]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig01_alt.jpg\" alt=\"&quot;图 2.1&quot;\"></p>\n<p>模板代码片段如下。这套样式规则定义字号为16px，也就是元素本身1em代表的值，然后再使用em来声明元素的padding。 把这段代码添加到一个新的样式表里，在<code>&lt;div class =&quot;padded&quot;&gt;</code>下随手写些文字，然后到浏览器看看效果吧。</p>\n<p>代码片段 2.1：在padding上使用em</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.padded</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;          1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 把各个方向的padding的值设置为字号大小</li>\n</ul>\n<p>把<code>padding</code>赋值为1em，乘以字号，得到一个值为16px的<code>padding</code>渲染值。重点来了，使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为计算值。</p>\n<p>在这个例子里，将<code>padding</code>改为2em会生成一个32px的计算值。如果同一个元素的另一个选择器，用一个不一样的字号值去覆盖它，这会改变em在这个域下的基准值，那么<code>padding</code>的计算值也会相应变化。</p>\n<p>在设置<code>padding、height、width或border-radius</code>等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。</p>\n<p>图2.2展示了两个不同大小的盒子。盒子内的<code>font-size</code>、<code>padding</code>和<code>border-radius</code>各不相同。</p>\n<p>[ 图 2.2：有相对大小的padding和border-radius的元素 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig02.jpg\" alt=\"&quot;图 2.2&quot;\"></p>\n<p>你可以通过用em声明<code>padding</code>和<code>border-radius</code>来给这些盒子声明样式规则。首先给每个元素设定<code>padding</code>和<code>border-radius</code>为1em，然后给每个盒子指定不同的字号，那么其他属性会跟着字号缩放。</p>\n<p>在你的HTML代码里，创建如下的两个盒子，类名分别是<code>box-small</code>和<code>box-large</code>，代表两个字号修饰符。</p>\n<p>[ 代码片段 2.2：在不同元素上使用em（HTML）]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box box-small\"</span>&gt;</span>Small<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box box-large\"</span>&gt;</span>Large<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在，添加下面的样式到你的样式表。这里使用了em声明了一个盒子。还定义了小字号和大字号的修饰符，指定不同的字号大小。</p>\n<p>[ 代码片段 2.3：在不同元素上使用em（CSS）]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightgray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-small</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;              <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-large</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;              <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 不同的字号大小，这会改变元素的em实际值的大小。</li>\n</ul>\n<p>这是em一个强大的功能。你可以定义一个元素的字号大小，然后使用一句简单的声明，就可以通过改变字号大小从而控制整个元素大小缩放。你后面将会创建另外一个这样的例子，不过首先，我们来讨论一下em和字号大小。</p>\n<h3 id=\"2-2-1-对font-size使用em\"><a href=\"#2-2-1-对font-size使用em\" class=\"headerlink\" title=\"2.2.1 对font-size使用em\"></a>2.2.1 对font-size使用em</h3><p>当<code>font-size</code>使用em作为单位时，它的表现会有点不一样。我之前说过，em是以当前元素的字号大小作为基准值的。但是，如果你把一个元素的字号设为1.2em的时候，这是什么意思呢？一个元素的字号大小是不能等于它自己的1.2倍的。相反，在<code>font-size</code>上的em会先从继承到的字号大小衍生出来。</p>\n<p>举个简单的例子，见图2.3。以下展示了一些不同字号大小的文字。在代码片段2.4，你会用到em来实现。</p>\n<p>[ 图 2.3 以em为单位的两种不同的字号大小 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig03.jpg\" alt=\"&quot;图 2.3&quot;\"></p>\n<p>在你的页面添加以下代码片段。第一行文字，在<code>&lt;body&gt;</code>标签里面，它会按body的字号大小渲染。第二部分，口号（slogan），继承父元素的字号大小。</p>\n<p>[ 代码片段 2.4 相对<code>font-size</code>的模板 ]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  We love coffee</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slogan\"</span>&gt;</span>We love coffee<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>          1</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 slogan从<body>继承了字号大小。</body></li>\n</ul>\n<p>代码片段中，CSS代码片段声明了<code>body</code>的字号大小。为了更加清晰，在这里我用了px来声明。下一步，你可以用em来放大slogan的字号大小。</p>\n<p>[ 代码片段 2.5：在font-size上使用em ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slogan</span> &#123;                  <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;        <span class=\"number\">1</span></span><br><span class=\"line\">&#125;                          <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 计算：这个元素继承到字号，乘以1.2</li>\n</ul>\n<p>slogan声明的字号大小是1.2em，为了计算转换成像素值，你需要引用继承的字号16px，16 * 1.2 = 19.2，所以计算字号值是19.2px。</p>\n<blockquote>\n<p>提示 </p>\n<p>如果你已经知道以px为单位的基础字号大小，但希望把它改用em声明，下面有个简单的计算公式：目标em值 = 目标像素值 / 父元素（被继承元素）像素值。举个例子，如果你想要一个10px的字号大小，父元素的字号是12px，10 / 12 = 0.8333em。如果你想要16px的字号大小，父元素字号是12px，那么 16 / 12 = 1.3333em。我们会在这章里多次用到这个计算公式。</p>\n</blockquote>\n<p>有一点对你很有帮助，对于大多数浏览器，默认字号大小是16px。技术上，关键字medium会被计算转换为16px。</p>\n<h4 id=\"当我们在一个元素内用em同时声明font-size和其他属性\"><a href=\"#当我们在一个元素内用em同时声明font-size和其他属性\" class=\"headerlink\" title=\"当我们在一个元素内用em同时声明font-size和其他属性\"></a>当我们在一个元素内用em同时声明font-size和其他属性</h4><p>你已经使用过em声明<code>font-size</code>了（基于一个继承的字号大小值）。以及，你也曾经使用em声明其他属性，如<code>padding</code>和<code>border-radius</code>（基于当前元素的字号大小值）。当你针对同一个元素使用em声明<code>font-size</code>和其他属性的时候，em会变得很神奇。此时浏览器必须先计算<code>font-size</code>，然后基于这个值再去计算其他值。这些属性声明的时候使用的是相同的em值，但很可能它们会有不同的计算值。</p>\n<p>在之前的例子里，我们计算到字号大小是19.2px（继承的16px乘以1.2em）。图2.4是相同的slogan元素，但有额外的1.2em <code>padding</code>以及为了让<code>padding</code>大小更加明显的灰色背景。可以看出，<code>padding</code>比<code>font-size</code>稍微大一些，尽管它俩声明的时候em值是一样的。</p>\n<p>[ 图2.4 一个font-size为1.2em以及padding为1.2em的元素 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig04_alt.jpg\" alt=\"&quot;图 2.4&quot;\"></p>\n<p>现在的情况是，这个段落从<code>body</code>继承了16px的字号大小，通过计算得到值为19.2px的字号计算值。这意味着，19.2px是1em在当前域的基础值，而这个值会被用作计算<code>padding</code>的值。对应的CSS代码在下面，更新你的样式表并查看你的测试页面吧。</p>\n<p>[ 代码片段 2.6 在font-size和padding上使用em ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slogan</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;             1</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1.2em</span>;               2</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 赋值为 19.2 px</li>\n<li>2 赋值为 23.04 px</li>\n</ul>\n<p>在这个例子里，<code>padding</code>的声明值为1.2em，乘以19.2px（当前元素的字号大小），计算出23.04px。我们可以看到，尽管<code>font-size</code>和<code>padding</code>声明时em值是一样的，但它们的计算值是不一样的。</p>\n<h4 id=\"字号收缩问题\"><a href=\"#字号收缩问题\" class=\"headerlink\" title=\"字号收缩问题\"></a>字号收缩问题</h4><p>当你使用em声明多层嵌套的元素字号时，会产生意想不到的效果。要弄清楚每个元素的实际值，首先你需要知道它继承的父元素的字号大小，如果父元素的字号也是用em声明的，那么你需要知道它的父元素的字号大小，在dom树往上查，以此类推。</p>\n<p>当你使用em声明列表的字号大小，列表嵌套了好几层，效果就更明显了。大多数web开发者会发现在他们的职业生涯里面，图2.5的列表嵌套形式有点眼熟。文字在逐步缩小！正是因为em带来的这一类烦人的问题，开发者才对em避而远之。</p>\n<p>[ 图 2.5 嵌套列表中的字号缩小现象 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig05.jpg\" alt=\"&quot;图 2.5&quot;\"></p>\n<p>当你多层嵌套列表，而每一层声明的字号大小以em为单位，字号收缩现象就会发生。在代码片段2.7和2.8的例子里，无序列表的字号是0.8em。这个选择器对页面上所有的ul有效，所以当一个列表从另外一个列表继承到字号大小的时候，em就产生复合效果。</p>\n<p>[ 代码片段 2.7 在列表上使用em ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">8em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[ 代码片段 2.8 多层嵌套的列表 ]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Top level</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>                                    1</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Second level                      1</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>                                2</span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Third level                   2</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>                            3</span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fourth level              3</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fifth level<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 这个列表嵌套在第一个列表里，继承了它的字号大小</li>\n<li>2 然后这个列表又嵌套在另一个列表里，继承了第二个列表的字号大小</li>\n<li>3 ……以此类推</li>\n</ul>\n<p>每一个列表的字号大小是0.8乘以父元素的字号大小。这代表第一个列表的字号大小是12.8px，嵌套的子列表字号大小是10.24px（12.8px * 0.8），第三层列表的是8.192px，如此类推。同样地，如果你给字号大小的赋值大于1em，相反，文字的字号会一层层变大。我们想要的效果是像图2.6一样，在顶层声明字号的大小，但下面嵌套层级的列表字号保持不变。</p>\n<p>[ 图 2.6 字号正常的多层嵌套列表 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig06.jpg\" alt=\"&quot;图 2.6&quot;\"></p>\n<p>其中一种实现的方式可以看看代码片段2.9。第一个列表的字号大小还是0.8 em（见示例2.7），第二个选择器对嵌套在无序列表的无序列表有效 —— 也就是除了第一个无序列表以外的所有无序列表。现在嵌套的列表设定了跟父元素一致的字号大小，正如图2.6一样。</p>\n<p>[ 代码片段 2.9 字号收缩现象的纠正 ]</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .8em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ul ul &#123;                1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: 1em;      1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 嵌套在列表里面的列表，应该把字号大小设定为跟父元素一样</li>\n</ul>\n<p>这可以解决问题，但不是最优方案。因为你设置了一个字号值，马上用另一个选择器重写了这个规则。如果你可以使用针对嵌套的列表声明一个特定的选择器，避免互相覆盖，会是一个更好的方案。</p>\n<p>到现在我们清楚了，如果你不是一个比较小心的人，你应该远离em。使用em作为<code>padding</code>、<code>margin</code>和元素缩放效果的单位挺好的，但当em遇上<code>font-size</code>时，事情可以变得很复杂。感谢上天，我们有个更好的选择 —— rem。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>  </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>CSS提供了很多种方式去定义一个值。大家最熟悉的可能也是最容易使用的就是像素（pixel），这被称做“绝对单位”。也就是说，5px在不同的场景下是一样的值。而其他的单位，如em和rem，不是绝对的而是相对的。相对单位的值会根据外部影响因素的变化而变化。例如，2em的值取决于你在哪个元素使用它（有时甚至是哪个属性）。很自然，相对单位使用起来会比较困难。</p>\n<p>开发人员，甚至有经验的CSS开发人员，往往不喜欢跟相对单位打交道，其中包括臭名昭著的em。em的值可以被改变的方式似乎难以预测，没有px那么清晰。在本章中，我将揭开相对单位的神秘面纱。首先，我会解释它们为CSS带来的独特价值，然后我会帮助你更好地理解它们。我会解释它们的工作原理，也会告诉你怎么征服它们那看似不可预测的特性。你可以让相对单位为你所用，正确地运行，它们将让你的代码变得更加简单、灵活和容易使用。</p>\n<h2 id=\"2-1-相对单位值的魔力\"><a href=\"#2-1-相对单位值的魔力\" class=\"headerlink\" title=\"2.1 相对单位值的魔力\"></a>2.1 相对单位值的魔力</h2><p>CSS是通过迟绑定（late-binding）的方式把样式渲染到web页面上的：内容和它的样式会在各自的渲染完成之后再合并到一起。比起其他类型的图形设计，这给设计过程添加了它们没有的复杂程度，同时也赋予CSS更强大的能力 —— 一个样式表可供成百上千个页面使用。此外，用户可以直接改变页面的最终呈现方式。举个例子，用户可以更改默认字号大小或者调整浏览器窗口的大小。</p>\n<p>在早期的计算机应用程序开发以及传统出版行业中，开发人员或出版商清楚知道所在的媒介存在哪些限制。对于一个特定的应用程序，窗口可能是400px宽，300px高，或者一个版面可能是4英寸宽，6½英寸高。因此，当开发人员布局应用程序的按钮和文本时，他们很清楚这些元素可以做成什么尺寸，以及在屏幕上还有多少空间可以留给他们用来处理其他元素。然而在网页上，情况却不是这样的。</p>\n<h3 id=\"2-1-1-完美像素设计（pixel-perfect-design）的挣扎\"><a href=\"#2-1-1-完美像素设计（pixel-perfect-design）的挣扎\" class=\"headerlink\" title=\"2.1.1 完美像素设计（pixel-perfect design）的挣扎\"></a>2.1.1 完美像素设计（pixel-perfect design）的挣扎</h3><p>在web环境下，用户可以将浏览器窗口设置为任意大小，且CSS需要去适应它。另外，用户可以在一个页面打开后，再调整它的大小，CSS也需要去适应这些新的约束条件。这说明了在你创建页面时样式还没有被调用，而是当页面在屏幕上渲染时，浏览器才会去计算样式的规则。</p>\n<p>这给CSS增加了一层抽象\b的概念。我们不应该根据理想的情境来设计元素，而是应该声明一些样式规则，可以让该元素在任何场景下都能跑通。对于现在的互联网，你的页面可能要在一个4英寸的手机屏幕上展示，也可能在一个30英寸的大屏幕上。</p>\n<p>长久以来，设计师大量使用“完美像素”设计，缓解了这个问题带来的复杂性。他们会创建一个有着严格定义的容器，通常是一个大约800px宽的居中的纵向列。然后在这些限制下他们再进行设计，这跟他们的前辈在原生应用程序或印刷出版物中做的设计或多或少有点类似。</p>\n<h3 id=\"2-1-2-完美像素网页的终结\"><a href=\"#2-1-2-完美像素网页的终结\" class=\"headerlink\" title=\"2.1.2 完美像素网页的终结\"></a>2.1.2 完美像素网页的终结</h3><p>随着技术的进步和制造商推出更高分辨率的显示器，像素完美的设计方式慢慢开始崩溃。在21世纪初期，把页面设计成1024px宽还是800px宽，哪个是更保险的展示策略？开发者针对这个问题讨论得很多。然后，我们又针对能否改成1280px宽有类似的讨论。是时候做个决定了。把我们网站的内容宽度做得宽一点（相对于落伍的小电脑屏幕），还是做得窄一点（相对于新出的大屏幕），哪个选择更好呢？</p>\n<p>当智能手机出现的时候，开发人员终于要（被迫）要停止假装每个人都可以在他们的网站上获得相同的体验了。不管我们喜不喜欢，我们都得放弃已知的多栏定宽（px）布局，并开始考虑响应式设计。我们再也不能逃避CSS所带来的抽象概念（abstraction），相反，我们要去拥抱这项特性。</p>\n<blockquote>\n<p>响应式 —— 在CSS中，这指的针对不同大小的浏览器窗口，用不同的方式响应更新页面的样式。我们要对不同尺寸的手机、平板电脑或桌面显示器多花心思了。我们将在<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-8/ch08\" target=\"_blank\" rel=\"noopener\">第8章</a>中详细介绍响应式设计，但在本章中，我会先给大家介绍一些重要的基础概念。</p>\n</blockquote>\n<p>增加的抽象\b概念意味着额外的复杂性。如果我设定一个宽度为800px的元素，那么它在一个更小的窗口中会怎么显示呢？如果一个横向菜单不能全部在一行展示完，它又会怎么展示？在编写CSS时，你需要能够同时考虑具体情况以及普适性的问题。如果针对一个特定的问题，你有多种方式可以解决，那么你应该选那个在多种不同场景下更通用的解决方案。</p>\n<p>在抽象概念这个问题上，相对单位是CSS提供的工具之一。与其把字号大小设置为14px，你可以把它设置为与窗口大小成比例缩放。或者，你可以设置页面上所有元素是依赖基础字号大小的变化而变化的，然后用一行代码就可以达到调整整个页面的目的。接下来，我们来看看CSS提供了哪些方式来实现以上的效果。</p>\n<blockquote>\n<h3 id=\"像素（pixel）、点（point）和pc（pica）\"><a href=\"#像素（pixel）、点（point）和pc（pica）\" class=\"headerlink\" title=\"像素（pixel）、点（point）和pc（pica）\"></a>像素（pixel）、点（point）和pc（pica）</h3><p>CSS支持一些绝对长度单位，其中最常见也最基本的是像素（px）。较不常见的绝对单位有毫米（mm，millimeter）、厘米（cm，centimeter）、英寸（in.，inch）、点（pt，point，印刷术语，长度为1/72 inch）以及pc（pica，印刷术语，长度为12 points）。如果你想了解其中的计算方式，以上的长度单位都可以直接转换成另一个单位：1 inch = 25.4 mm = 2.54 cm = 6 pc = 72 pt = 96 px。因此，16px与12pt（16/96×72）是等价的。设计师通常更熟悉点（point）的使用，而开发人员更习惯于像素，因此在和设计师沟通时，你可能需要在两者之间做一些计算工作。  </p>\n<p>像素这个名字有点误导性 —— 1 CSS像素并不严格等同于显示器的1像素，在高分辨率显示器（如“Retina显示屏”）上尤其明显。尽管根据浏览器、操作系统和硬件的不同，CSS的测量值可能会有细微的差别，但96px总是会大致等于屏幕上的物理1英寸。（尽管有可能会因某些设备或用户设置而异。）</p>\n</blockquote>\n<h2 id=\"2-2-em和rem\"><a href=\"#2-2-em和rem\" class=\"headerlink\" title=\"2.2 em和rem\"></a>2.2 em和rem</h2><p>em是最常见的相对长度单位，这是排版中使用的一种度量方式，基准值是当前元素的字号大小。 在CSS中，1em表示当前元素的字号大小，实际值取决于在哪个元素上应用。图2.1展示了一个padding为1em的<code>div</code>。</p>\n<p>[ 图 2.1：padding为1em的元素（添加虚线是为了让padding更明显）]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig01_alt.jpg\" alt=\"&quot;图 2.1&quot;\"></p>\n<p>模板代码片段如下。这套样式规则定义字号为16px，也就是元素本身1em代表的值，然后再使用em来声明元素的padding。 把这段代码添加到一个新的样式表里，在<code>&lt;div class =&quot;padded&quot;&gt;</code>下随手写些文字，然后到浏览器看看效果吧。</p>\n<p>代码片段 2.1：在padding上使用em</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.padded</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;          1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 把各个方向的padding的值设置为字号大小</li>\n</ul>\n<p>把<code>padding</code>赋值为1em，乘以字号，得到一个值为16px的<code>padding</code>渲染值。重点来了，使用相对单位声明的值会由浏览器转化为一个绝对值，我们称之为计算值。</p>\n<p>在这个例子里，将<code>padding</code>改为2em会生成一个32px的计算值。如果同一个元素的另一个选择器，用一个不一样的字号值去覆盖它，这会改变em在这个域下的基准值，那么<code>padding</code>的计算值也会相应变化。</p>\n<p>在设置<code>padding、height、width或border-radius</code>等属性时，使用em可能会很方便，因为如果它们继承了不同的字号大小，或者用户更改了字体设置，这些属性会均匀地缩放。</p>\n<p>图2.2展示了两个不同大小的盒子。盒子内的<code>font-size</code>、<code>padding</code>和<code>border-radius</code>各不相同。</p>\n<p>[ 图 2.2：有相对大小的padding和border-radius的元素 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig02.jpg\" alt=\"&quot;图 2.2&quot;\"></p>\n<p>你可以通过用em声明<code>padding</code>和<code>border-radius</code>来给这些盒子声明样式规则。首先给每个元素设定<code>padding</code>和<code>border-radius</code>为1em，然后给每个盒子指定不同的字号，那么其他属性会跟着字号缩放。</p>\n<p>在你的HTML代码里，创建如下的两个盒子，类名分别是<code>box-small</code>和<code>box-large</code>，代表两个字号修饰符。</p>\n<p>[ 代码片段 2.2：在不同元素上使用em（HTML）]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box box-small\"</span>&gt;</span>Small<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box box-large\"</span>&gt;</span>Large<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在，添加下面的样式到你的样式表。这里使用了em声明了一个盒子。还定义了小字号和大字号的修饰符，指定不同的字号大小。</p>\n<p>[ 代码片段 2.3：在不同元素上使用em（CSS）]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightgray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-small</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;              <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-large</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;              <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 不同的字号大小，这会改变元素的em实际值的大小。</li>\n</ul>\n<p>这是em一个强大的功能。你可以定义一个元素的字号大小，然后使用一句简单的声明，就可以通过改变字号大小从而控制整个元素大小缩放。你后面将会创建另外一个这样的例子，不过首先，我们来讨论一下em和字号大小。</p>\n<h3 id=\"2-2-1-对font-size使用em\"><a href=\"#2-2-1-对font-size使用em\" class=\"headerlink\" title=\"2.2.1 对font-size使用em\"></a>2.2.1 对font-size使用em</h3><p>当<code>font-size</code>使用em作为单位时，它的表现会有点不一样。我之前说过，em是以当前元素的字号大小作为基准值的。但是，如果你把一个元素的字号设为1.2em的时候，这是什么意思呢？一个元素的字号大小是不能等于它自己的1.2倍的。相反，在<code>font-size</code>上的em会先从继承到的字号大小衍生出来。</p>\n<p>举个简单的例子，见图2.3。以下展示了一些不同字号大小的文字。在代码片段2.4，你会用到em来实现。</p>\n<p>[ 图 2.3 以em为单位的两种不同的字号大小 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig03.jpg\" alt=\"&quot;图 2.3&quot;\"></p>\n<p>在你的页面添加以下代码片段。第一行文字，在<code>&lt;body&gt;</code>标签里面，它会按body的字号大小渲染。第二部分，口号（slogan），继承父元素的字号大小。</p>\n<p>[ 代码片段 2.4 相对<code>font-size</code>的模板 ]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  We love coffee</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slogan\"</span>&gt;</span>We love coffee<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>          1</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 slogan从<body>继承了字号大小。</body></li>\n</ul>\n<p>代码片段中，CSS代码片段声明了<code>body</code>的字号大小。为了更加清晰，在这里我用了px来声明。下一步，你可以用em来放大slogan的字号大小。</p>\n<p>[ 代码片段 2.5：在font-size上使用em ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slogan</span> &#123;                  <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;        <span class=\"number\">1</span></span><br><span class=\"line\">&#125;                          <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 计算：这个元素继承到字号，乘以1.2</li>\n</ul>\n<p>slogan声明的字号大小是1.2em，为了计算转换成像素值，你需要引用继承的字号16px，16 * 1.2 = 19.2，所以计算字号值是19.2px。</p>\n<blockquote>\n<p>提示 </p>\n<p>如果你已经知道以px为单位的基础字号大小，但希望把它改用em声明，下面有个简单的计算公式：目标em值 = 目标像素值 / 父元素（被继承元素）像素值。举个例子，如果你想要一个10px的字号大小，父元素的字号是12px，10 / 12 = 0.8333em。如果你想要16px的字号大小，父元素字号是12px，那么 16 / 12 = 1.3333em。我们会在这章里多次用到这个计算公式。</p>\n</blockquote>\n<p>有一点对你很有帮助，对于大多数浏览器，默认字号大小是16px。技术上，关键字medium会被计算转换为16px。</p>\n<h4 id=\"当我们在一个元素内用em同时声明font-size和其他属性\"><a href=\"#当我们在一个元素内用em同时声明font-size和其他属性\" class=\"headerlink\" title=\"当我们在一个元素内用em同时声明font-size和其他属性\"></a>当我们在一个元素内用em同时声明font-size和其他属性</h4><p>你已经使用过em声明<code>font-size</code>了（基于一个继承的字号大小值）。以及，你也曾经使用em声明其他属性，如<code>padding</code>和<code>border-radius</code>（基于当前元素的字号大小值）。当你针对同一个元素使用em声明<code>font-size</code>和其他属性的时候，em会变得很神奇。此时浏览器必须先计算<code>font-size</code>，然后基于这个值再去计算其他值。这些属性声明的时候使用的是相同的em值，但很可能它们会有不同的计算值。</p>\n<p>在之前的例子里，我们计算到字号大小是19.2px（继承的16px乘以1.2em）。图2.4是相同的slogan元素，但有额外的1.2em <code>padding</code>以及为了让<code>padding</code>大小更加明显的灰色背景。可以看出，<code>padding</code>比<code>font-size</code>稍微大一些，尽管它俩声明的时候em值是一样的。</p>\n<p>[ 图2.4 一个font-size为1.2em以及padding为1.2em的元素 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig04_alt.jpg\" alt=\"&quot;图 2.4&quot;\"></p>\n<p>现在的情况是，这个段落从<code>body</code>继承了16px的字号大小，通过计算得到值为19.2px的字号计算值。这意味着，19.2px是1em在当前域的基础值，而这个值会被用作计算<code>padding</code>的值。对应的CSS代码在下面，更新你的样式表并查看你的测试页面吧。</p>\n<p>[ 代码片段 2.6 在font-size和padding上使用em ]</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slogan</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;             1</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1.2em</span>;               2</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 赋值为 19.2 px</li>\n<li>2 赋值为 23.04 px</li>\n</ul>\n<p>在这个例子里，<code>padding</code>的声明值为1.2em，乘以19.2px（当前元素的字号大小），计算出23.04px。我们可以看到，尽管<code>font-size</code>和<code>padding</code>声明时em值是一样的，但它们的计算值是不一样的。</p>\n<h4 id=\"字号收缩问题\"><a href=\"#字号收缩问题\" class=\"headerlink\" title=\"字号收缩问题\"></a>字号收缩问题</h4><p>当你使用em声明多层嵌套的元素字号时，会产生意想不到的效果。要弄清楚每个元素的实际值，首先你需要知道它继承的父元素的字号大小，如果父元素的字号也是用em声明的，那么你需要知道它的父元素的字号大小，在dom树往上查，以此类推。</p>\n<p>当你使用em声明列表的字号大小，列表嵌套了好几层，效果就更明显了。大多数web开发者会发现在他们的职业生涯里面，图2.5的列表嵌套形式有点眼熟。文字在逐步缩小！正是因为em带来的这一类烦人的问题，开发者才对em避而远之。</p>\n<p>[ 图 2.5 嵌套列表中的字号缩小现象 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig05.jpg\" alt=\"&quot;图 2.5&quot;\"></p>\n<p>当你多层嵌套列表，而每一层声明的字号大小以em为单位，字号收缩现象就会发生。在代码片段2.7和2.8的例子里，无序列表的字号是0.8em。这个选择器对页面上所有的ul有效，所以当一个列表从另外一个列表继承到字号大小的时候，em就产生复合效果。</p>\n<p>[ 代码片段 2.7 在列表上使用em ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">8em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[ 代码片段 2.8 多层嵌套的列表 ]</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Top level</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>                                    1</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Second level                      1</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>                                2</span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Third level                   2</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>                            3</span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fourth level              3</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fifth level<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 这个列表嵌套在第一个列表里，继承了它的字号大小</li>\n<li>2 然后这个列表又嵌套在另一个列表里，继承了第二个列表的字号大小</li>\n<li>3 ……以此类推</li>\n</ul>\n<p>每一个列表的字号大小是0.8乘以父元素的字号大小。这代表第一个列表的字号大小是12.8px，嵌套的子列表字号大小是10.24px（12.8px * 0.8），第三层列表的是8.192px，如此类推。同样地，如果你给字号大小的赋值大于1em，相反，文字的字号会一层层变大。我们想要的效果是像图2.6一样，在顶层声明字号的大小，但下面嵌套层级的列表字号保持不变。</p>\n<p>[ 图 2.6 字号正常的多层嵌套列表 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig06.jpg\" alt=\"&quot;图 2.6&quot;\"></p>\n<p>其中一种实现的方式可以看看代码片段2.9。第一个列表的字号大小还是0.8 em（见示例2.7），第二个选择器对嵌套在无序列表的无序列表有效 —— 也就是除了第一个无序列表以外的所有无序列表。现在嵌套的列表设定了跟父元素一致的字号大小，正如图2.6一样。</p>\n<p>[ 代码片段 2.9 字号收缩现象的纠正 ]</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: .8em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ul ul &#123;                1</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: 1em;      1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 嵌套在列表里面的列表，应该把字号大小设定为跟父元素一样</li>\n</ul>\n<p>这可以解决问题，但不是最优方案。因为你设置了一个字号值，马上用另一个选择器重写了这个规则。如果你可以使用针对嵌套的列表声明一个特定的选择器，避免互相覆盖，会是一个更好的方案。</p>\n<p>到现在我们清楚了，如果你不是一个比较小心的人，你应该远离em。使用em作为<code>padding</code>、<code>margin</code>和元素缩放效果的单位挺好的，但当em遇上<code>font-size</code>时，事情可以变得很复杂。感谢上天，我们有个更好的选择 —— rem。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>  </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n"},{"title":"无单位数字和行高 —— 别说你懂CSS相对单位","date":"2018-07-05T05:28:03.000Z","_content":"\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/) [本文]\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n\n***\n\n## 2.5 无单位数字（unitless number）和行高（line-height）\n\n有一些属性可以接收不带单位的数值（意思就是一个不带长度单位的数字），如`line-height`、`z-index`和`font-weight`（700等于bold，400等于normal，如此类推）。你也可以在需要长度单位的地方（如px、em、rem）使用一个不带单位的`0`，因为长度已经是0了，带不带单位也无所谓了 —— 0px 等于 0% 等于 0em。\n\n> 警告\n> \n> 不带单位的0只可以表示长度单位和百分比的值，譬如padding、border和width。而对于一些特殊的情况，如度数（degrees）或者像秒这样基于时间的值（time-based values），是不可以使用不带单位的0的。\n\n`line-height`属性最特别的地方，在于同时支持带单位和不带单位的值。你应该保持使用不带单位的数值，因为这样就可以从父元素继承。我们在页面上写点文字，看看它是怎么表现的吧。把下面代码添加到你的样式表。\n\n[ 代码片段 2.20 继承`line-height`的模板 ]\n\n```\n<body>\n  <p class=\"about-us\">\n    We have built partnerships with small farms around the world to\n    hand-select beans at the peak of season. We then carefully roast in\n    small batches to maximize their potential.\n  </p>\n</body>\n```\n\n给`body`声明一个`line-height`，然后文档的其他元素会从这里继承。页面的展示符合预期，不管你对页面的其他元素的字号大小做了什么改变。\n\n[ 图 2.11 不带单位的行高，会在每个后代元素下重新计算出实际值 ]\n\n![\"图 2.11\"](http://sinacloud.net/woodysblog/css-in-depth/02fig11.jpg)\n\n把代码片段2.21的内容添加到你的样式表。段落（`<p>`）继承了1.2的行高。因为字号是32px（`2em` * 16px，浏览器默认字号大小），所以本地的行高计算值是38.4px（32px * 1.2）。这会给段落的行间距留下比较合适的空间。\n\n[ 代码片段 2.21 对line-height使用不带单位的值 ]\n\n```\nbody {\n  line-height: 1.2;               1\n}\n\n.about-us {\n  font-size: 2em;\n}\n```\n\n* 1 后代元素继承不带单位的值\n\n如果你给行高设定了一个带单位的值，你可能会得到意想不到的结果，如图2.12那样，行间文字互相重叠了，代码片段2.22则是造成这个结果的CSS代码。\n\n[ 图 2.12 继承行高造成的行间互叠 ]\n![\"图 2.12\"](http://sinacloud.net/woodysblog/css-in-depth/02fig12.jpg)\n\n[ 代码片段 2.22 带单位的行高值造成意外的结果 ]\n\n```\nbody {\n  line-height: 1.2em;             1\n}\n\n.about-us {\n  font-size: 2em;                 2\n}\n```\n\n* 1 后代元素继承了计算值（19.2px）\n* 2 等于32px\n\n这样的结果源于一次奇怪的继承：当一个元素是用带单位的值声明的，那么它的后代元素会继承计算结果值。当行高属性是用类似em来声明时，它的值会先被计算，然后计算后的值会传到任何继承它的后代元素。对于`line-height`这个属性来说，如果子元素有跟父元素不一样字号大小的情况，就会导致意想不到的结果，譬如文字间的遮挡。\n\n> 长度 —— CSS中用来描述距离测量的正式用语。它是一个带单位的数字，如5px。长度有两种类型：绝对的和相对的。百分比跟长度很类似，但严格来说，百分比不能叫长度。\n\n当你（对某个属性）使用不带单位的数字，声明的值会被继承，也就是说这个值会在子元素中用来重新计算子元素域下的值，而这个通常是你想要的效果。使用不带单位的数字，可以让你在body上设定一个行高，然后什么都不用管，页面上其他元素会默认继承，除非在某个特定的地方你想要做一个额外的样式。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/) [本文]\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)   \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","source":"_posts/css-in-depth-unitless-number.md","raw":"---\ntitle: 无单位数字和行高 —— 别说你懂CSS相对单位\ndate: 2018-07-05 13:28:03\ntags:\n- front-end\n- css\n---\n\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/) [本文]\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n\n***\n\n## 2.5 无单位数字（unitless number）和行高（line-height）\n\n有一些属性可以接收不带单位的数值（意思就是一个不带长度单位的数字），如`line-height`、`z-index`和`font-weight`（700等于bold，400等于normal，如此类推）。你也可以在需要长度单位的地方（如px、em、rem）使用一个不带单位的`0`，因为长度已经是0了，带不带单位也无所谓了 —— 0px 等于 0% 等于 0em。\n\n> 警告\n> \n> 不带单位的0只可以表示长度单位和百分比的值，譬如padding、border和width。而对于一些特殊的情况，如度数（degrees）或者像秒这样基于时间的值（time-based values），是不可以使用不带单位的0的。\n\n`line-height`属性最特别的地方，在于同时支持带单位和不带单位的值。你应该保持使用不带单位的数值，因为这样就可以从父元素继承。我们在页面上写点文字，看看它是怎么表现的吧。把下面代码添加到你的样式表。\n\n[ 代码片段 2.20 继承`line-height`的模板 ]\n\n```\n<body>\n  <p class=\"about-us\">\n    We have built partnerships with small farms around the world to\n    hand-select beans at the peak of season. We then carefully roast in\n    small batches to maximize their potential.\n  </p>\n</body>\n```\n\n给`body`声明一个`line-height`，然后文档的其他元素会从这里继承。页面的展示符合预期，不管你对页面的其他元素的字号大小做了什么改变。\n\n[ 图 2.11 不带单位的行高，会在每个后代元素下重新计算出实际值 ]\n\n![\"图 2.11\"](http://sinacloud.net/woodysblog/css-in-depth/02fig11.jpg)\n\n把代码片段2.21的内容添加到你的样式表。段落（`<p>`）继承了1.2的行高。因为字号是32px（`2em` * 16px，浏览器默认字号大小），所以本地的行高计算值是38.4px（32px * 1.2）。这会给段落的行间距留下比较合适的空间。\n\n[ 代码片段 2.21 对line-height使用不带单位的值 ]\n\n```\nbody {\n  line-height: 1.2;               1\n}\n\n.about-us {\n  font-size: 2em;\n}\n```\n\n* 1 后代元素继承不带单位的值\n\n如果你给行高设定了一个带单位的值，你可能会得到意想不到的结果，如图2.12那样，行间文字互相重叠了，代码片段2.22则是造成这个结果的CSS代码。\n\n[ 图 2.12 继承行高造成的行间互叠 ]\n![\"图 2.12\"](http://sinacloud.net/woodysblog/css-in-depth/02fig12.jpg)\n\n[ 代码片段 2.22 带单位的行高值造成意外的结果 ]\n\n```\nbody {\n  line-height: 1.2em;             1\n}\n\n.about-us {\n  font-size: 2em;                 2\n}\n```\n\n* 1 后代元素继承了计算值（19.2px）\n* 2 等于32px\n\n这样的结果源于一次奇怪的继承：当一个元素是用带单位的值声明的，那么它的后代元素会继承计算结果值。当行高属性是用类似em来声明时，它的值会先被计算，然后计算后的值会传到任何继承它的后代元素。对于`line-height`这个属性来说，如果子元素有跟父元素不一样字号大小的情况，就会导致意想不到的结果，譬如文字间的遮挡。\n\n> 长度 —— CSS中用来描述距离测量的正式用语。它是一个带单位的数字，如5px。长度有两种类型：绝对的和相对的。百分比跟长度很类似，但严格来说，百分比不能叫长度。\n\n当你（对某个属性）使用不带单位的数字，声明的值会被继承，也就是说这个值会在子元素中用来重新计算子元素域下的值，而这个通常是你想要的效果。使用不带单位的数字，可以让你在body上设定一个行高，然后什么都不用管，页面上其他元素会默认继承，除非在某个特定的地方你想要做一个额外的样式。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/)\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/) [本文]\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)   \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","slug":"css-in-depth-unitless-number","published":1,"updated":"2018-07-08T07:59:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8c000rzvr3pnz6vv5d","content":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n</ul>\n<hr>\n<h2 id=\"2-5-无单位数字（unitless-number）和行高（line-height）\"><a href=\"#2-5-无单位数字（unitless-number）和行高（line-height）\" class=\"headerlink\" title=\"2.5 无单位数字（unitless number）和行高（line-height）\"></a>2.5 无单位数字（unitless number）和行高（line-height）</h2><p>有一些属性可以接收不带单位的数值（意思就是一个不带长度单位的数字），如<code>line-height</code>、<code>z-index</code>和<code>font-weight</code>（700等于bold，400等于normal，如此类推）。你也可以在需要长度单位的地方（如px、em、rem）使用一个不带单位的<code>0</code>，因为长度已经是0了，带不带单位也无所谓了 —— 0px 等于 0% 等于 0em。</p>\n<blockquote>\n<p>警告</p>\n<p>不带单位的0只可以表示长度单位和百分比的值，譬如padding、border和width。而对于一些特殊的情况，如度数（degrees）或者像秒这样基于时间的值（time-based values），是不可以使用不带单位的0的。</p>\n</blockquote>\n<p><code>line-height</code>属性最特别的地方，在于同时支持带单位和不带单位的值。你应该保持使用不带单位的数值，因为这样就可以从父元素继承。我们在页面上写点文字，看看它是怎么表现的吧。把下面代码添加到你的样式表。</p>\n<p>[ 代码片段 2.20 继承<code>line-height</code>的模板 ]</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;p <span class=\"built_in\">class</span>=<span class=\"string\">\"about-us\"</span>&gt;</span><br><span class=\"line\">    We have built partnerships <span class=\"keyword\">with</span> small farms <span class=\"keyword\">around</span> <span class=\"keyword\">the</span> world <span class=\"keyword\">to</span></span><br><span class=\"line\">    hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span> peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> carefully roast <span class=\"keyword\">in</span></span><br><span class=\"line\">    small batches <span class=\"keyword\">to</span> maximize their potential.</span><br><span class=\"line\">  &lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>给<code>body</code>声明一个<code>line-height</code>，然后文档的其他元素会从这里继承。页面的展示符合预期，不管你对页面的其他元素的字号大小做了什么改变。</p>\n<p>[ 图 2.11 不带单位的行高，会在每个后代元素下重新计算出实际值 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig11.jpg\" alt=\"&quot;图 2.11&quot;\"></p>\n<p>把代码片段2.21的内容添加到你的样式表。段落（<code>&lt;p&gt;</code>）继承了1.2的行高。因为字号是32px（<code>2em</code> <em> 16px，浏览器默认字号大小），所以本地的行高计算值是38.4px（32px </em> 1.2）。这会给段落的行间距留下比较合适的空间。</p>\n<p>[ 代码片段 2.21 对line-height使用不带单位的值 ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2</span>;               <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.about-us</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 后代元素继承不带单位的值</li>\n</ul>\n<p>如果你给行高设定了一个带单位的值，你可能会得到意想不到的结果，如图2.12那样，行间文字互相重叠了，代码片段2.22则是造成这个结果的CSS代码。</p>\n<p>[ 图 2.12 继承行高造成的行间互叠 ]<br><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig12.jpg\" alt=\"&quot;图 2.12&quot;\"></p>\n<p>[ 代码片段 2.22 带单位的行高值造成意外的结果 ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2em</span>;             <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.about-us</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;                 <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 后代元素继承了计算值（19.2px）</li>\n<li>2 等于32px</li>\n</ul>\n<p>这样的结果源于一次奇怪的继承：当一个元素是用带单位的值声明的，那么它的后代元素会继承计算结果值。当行高属性是用类似em来声明时，它的值会先被计算，然后计算后的值会传到任何继承它的后代元素。对于<code>line-height</code>这个属性来说，如果子元素有跟父元素不一样字号大小的情况，就会导致意想不到的结果，譬如文字间的遮挡。</p>\n<blockquote>\n<p>长度 —— CSS中用来描述距离测量的正式用语。它是一个带单位的数字，如5px。长度有两种类型：绝对的和相对的。百分比跟长度很类似，但严格来说，百分比不能叫长度。</p>\n</blockquote>\n<p>当你（对某个属性）使用不带单位的数字，声明的值会被继承，也就是说这个值会在子元素中用来重新计算子元素域下的值，而这个通常是你想要的效果。使用不带单位的数字，可以让你在body上设定一个行高，然后什么都不用管，页面上其他元素会默认继承，除非在某个特定的地方你想要做一个额外的样式。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>   </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n</ul>\n<hr>\n<h2 id=\"2-5-无单位数字（unitless-number）和行高（line-height）\"><a href=\"#2-5-无单位数字（unitless-number）和行高（line-height）\" class=\"headerlink\" title=\"2.5 无单位数字（unitless number）和行高（line-height）\"></a>2.5 无单位数字（unitless number）和行高（line-height）</h2><p>有一些属性可以接收不带单位的数值（意思就是一个不带长度单位的数字），如<code>line-height</code>、<code>z-index</code>和<code>font-weight</code>（700等于bold，400等于normal，如此类推）。你也可以在需要长度单位的地方（如px、em、rem）使用一个不带单位的<code>0</code>，因为长度已经是0了，带不带单位也无所谓了 —— 0px 等于 0% 等于 0em。</p>\n<blockquote>\n<p>警告</p>\n<p>不带单位的0只可以表示长度单位和百分比的值，譬如padding、border和width。而对于一些特殊的情况，如度数（degrees）或者像秒这样基于时间的值（time-based values），是不可以使用不带单位的0的。</p>\n</blockquote>\n<p><code>line-height</code>属性最特别的地方，在于同时支持带单位和不带单位的值。你应该保持使用不带单位的数值，因为这样就可以从父元素继承。我们在页面上写点文字，看看它是怎么表现的吧。把下面代码添加到你的样式表。</p>\n<p>[ 代码片段 2.20 继承<code>line-height</code>的模板 ]</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;p <span class=\"built_in\">class</span>=<span class=\"string\">\"about-us\"</span>&gt;</span><br><span class=\"line\">    We have built partnerships <span class=\"keyword\">with</span> small farms <span class=\"keyword\">around</span> <span class=\"keyword\">the</span> world <span class=\"keyword\">to</span></span><br><span class=\"line\">    hand-select beans <span class=\"keyword\">at</span> <span class=\"keyword\">the</span> peak <span class=\"keyword\">of</span> season. We <span class=\"keyword\">then</span> carefully roast <span class=\"keyword\">in</span></span><br><span class=\"line\">    small batches <span class=\"keyword\">to</span> maximize their potential.</span><br><span class=\"line\">  &lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>给<code>body</code>声明一个<code>line-height</code>，然后文档的其他元素会从这里继承。页面的展示符合预期，不管你对页面的其他元素的字号大小做了什么改变。</p>\n<p>[ 图 2.11 不带单位的行高，会在每个后代元素下重新计算出实际值 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig11.jpg\" alt=\"&quot;图 2.11&quot;\"></p>\n<p>把代码片段2.21的内容添加到你的样式表。段落（<code>&lt;p&gt;</code>）继承了1.2的行高。因为字号是32px（<code>2em</code> <em> 16px，浏览器默认字号大小），所以本地的行高计算值是38.4px（32px </em> 1.2）。这会给段落的行间距留下比较合适的空间。</p>\n<p>[ 代码片段 2.21 对line-height使用不带单位的值 ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2</span>;               <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.about-us</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 后代元素继承不带单位的值</li>\n</ul>\n<p>如果你给行高设定了一个带单位的值，你可能会得到意想不到的结果，如图2.12那样，行间文字互相重叠了，代码片段2.22则是造成这个结果的CSS代码。</p>\n<p>[ 图 2.12 继承行高造成的行间互叠 ]<br><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig12.jpg\" alt=\"&quot;图 2.12&quot;\"></p>\n<p>[ 代码片段 2.22 带单位的行高值造成意外的结果 ]</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2em</span>;             <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.about-us</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;                 <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 后代元素继承了计算值（19.2px）</li>\n<li>2 等于32px</li>\n</ul>\n<p>这样的结果源于一次奇怪的继承：当一个元素是用带单位的值声明的，那么它的后代元素会继承计算结果值。当行高属性是用类似em来声明时，它的值会先被计算，然后计算后的值会传到任何继承它的后代元素。对于<code>line-height</code>这个属性来说，如果子元素有跟父元素不一样字号大小的情况，就会导致意想不到的结果，譬如文字间的遮挡。</p>\n<blockquote>\n<p>长度 —— CSS中用来描述距离测量的正式用语。它是一个带单位的数字，如5px。长度有两种类型：绝对的和相对的。百分比跟长度很类似，但严格来说，百分比不能叫长度。</p>\n</blockquote>\n<p>当你（对某个属性）使用不带单位的数字，声明的值会被继承，也就是说这个值会在子元素中用来重新计算子元素域下的值，而这个通常是你想要的效果。使用不带单位的数字，可以让你在body上设定一个行高，然后什么都不用管，页面上其他元素会默认继承，除非在某个特定的地方你想要做一个额外的样式。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a></li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>   </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n"},{"title":"视口相关单位的应用 —— 别说你懂CSS相对单位","date":"2018-07-05T05:28:02.000Z","_content":"\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/) [本文]\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n\n***\n\n## 2.4 视口相关单位（viewport-relative units）\n\n你已经学完em和rem了，它们都是以`font-size`为基准值的，但相对单位不只它们。还有视口相关单位，依赖浏览器的视口大小来定义长度的。\n\n> 视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。\n\n如果你不熟悉视口相关单位的话，在这里简单介绍一下。\n\n* vh —— 视口高度的1/100\n* vw —— 视口宽度的1/100\n* vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）\n* vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）\n\n举个例子，50vw等于视口宽度的一半，而25vh等于视口高度的25%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。\n\n图2.10展示了一个正方形的元素在不同屏幕尺寸下的视口的情况。宽和高的值都声明为90vmin，也就是宽高较小值的90%。边长的值等于，横屏情况下高度的90%，或者竖屏情况下宽度的90%。\n\n[ 图 2.10 如果把一个元素的宽高定义成90vmin，它总会展示成一个正方形，边长稍小于屏幕的视口，不管它的尺寸或方向怎样。 ]\n\n![\"图 2.10\"](http://sinacloud.net/woodysblog/css-in-depth/02fig10_alt.jpg)\n\n在代码片段2.18可以看到这个元素的样式，渲染了一个适应屏幕尺寸的大正方形，不管浏览器的尺寸是多少。你可以通过添加`<div class=\"square\">`，再看看页面效果。\n\n[ 代码片段 2.18 边长使用`vmin`的正方形元素 ]\n\n```\n.square {\n  width: 90vmin;\n  height: 90vmin;\n  background-color: #369;\n}\n```\n\n如果想做一个大英雄图片充满屏幕的效果，视口相关长度最合适不过。你的图片可以在一个长条形的容器内，把图片的高度设为100vh，那它的高度就会跟视口高度一样。\n\n> ### 笔记  \n> \n> 视口相关单位对于大多数浏览器还是一项比较新的特性，所以当你试图把这个特性和其他样式混搭时，有可能会有一些很奇怪的bug。详情参考[http://caniuse.com/#feat=viewport-units](http://caniuse.com/#feat=viewport-units)列表中的“已知问题（Known Issues）”\n\n> ### CSS3\n> \n> 本章提到的很多单位类型，其实并不在早期的CSS版本里（尤其是rem和视口相关单位）。在这门语言一系列的更新迭代过程中，它们慢慢被加进来，我们将最新的版本称作CSS3。  \n> \n> 在二十世纪末二十一世纪初，在CSS规范的初版发布之后的很长一段时间，只有很小的改动。在1998年5月份，W3C（World Wide Web Consortium）发布了CSS 2规范。不久之后，修正版本2中问题和缺陷的2.1版本开始了，CSS 2.1的工作持续了好多年，但并没有添加什么令人印象深刻的特性。直到2011年4月份，版本2.1终于被确认为“提议推荐标准”（Proposed Recommendation）。到这个时候，大多数浏览器对CSS 2.1的特性已经支持得很好了，在此基础上，浏览器又努力地添加一些新的特性。这就是新规范CSS 3。  \n> \n> “3”是个非正式的版本号，实际上并没有CSS3规范。相反，这个规范被拆成多个独立的模块，分别有独立的版本号。background和border的规范已经从盒模型（box model）以及层叠与继承（cascading and inheritance）规范中独立出来。通过这种方式，W3C就可以针对CSS某个模块进行更新迭代，而不用同时更新其他不相关的模块的内容。在这些模块规范里，很多还停留在第3版本（现在叫“第3级”），但有的模块（比如选择器规范（selectors specification））已经到第4级，而其他的模块（比如flexbox）还在第1级。  \n> \n> 这些新特性进入了人们的视野。我们可以看到在2009到2013年间，大量新的CSS特性涌进浏览器中。其中有现在比较出名的rem和视口相关单位，以及新的选择器（new selectors）、媒体查询（media queries）、网页文字（web fonts）、圆形边框（rounded borders）、动画（animation）、变换（transitions）、变形（transformations）以及定义颜色的不同方式。然而，每年的新特性的数量还在逐年稳定增长。  \n> \n> 这意味着，我们不再只跟一个特定版本的CSS规范打交道。这是一套有生命的标准，每个浏览器也在持续地支持新的特性，开发者会开始使用然后渐渐习惯它们。CSS4大概不会出现了，如果有的话，应该也只是个用于市场营销的名词。尽管这本书也会提到CSS3的新特性，但没有必要把它们都搬出来，就整个网页而言，这些都是CSS。\n\n### 2.4.1 在font-size上使用vw\n\n一个应用如果使用了视口相关单位，可能效果最不明显的地方就是用在字号大小上。事实上，我发现把vh和vw用在字号上比元素的宽或者高更实用。\n\n试想一下，如果把元素的font-size声明为2vm，会怎么样？台式机屏幕宽是1200px，2vm等于24px（1200 * 2%）。而平板电脑的屏幕宽768px，2vm约等于15px（768 * 2%）。很棒的是，元素在两个尺寸下缩放自如。这意味着这里并没有一个突然的断点，元素会随着视口尺寸的增大而平滑增大。\n\n不幸的是，24px对于大屏幕来说有点太大了。而更糟糕的是，在iPhone6它直接缩小到7.5px。好消息是缩放生效了，而坏消息是极限情况的处理有点差。你可以通过CSS的方法`calc()`解决这个问题。\n\n### 2.4.2 在font-size上使用calc()\n\n`calc()`函数支持对2个或者更多个数值进行基础的运算。这个函数对不同类型的单位间的运算尤其有用。这个函数支持加（+）、减（-）、乘（*）和除以（/）。其中，加和减运算符左右必须留有空格，所以我建议我们来培养一个习惯，总是在四个运算符的两侧都写上空格，譬如`calc(1em + 10px)`。\n\n你会在下一个代码片段中，使用`calc()`来计算vh单位和em单位的值。把你的样式表中的上一段设定基础字号大小的代码去掉（及相关的媒体查询代码），添加以下代码。\n\n[ 代码片段 2.19 在font-size中使用em和vh单位进行calc()运算 ]\n\n```\n:root {\n  font-size: calc(0.5em + 1vw);\n}\n```\n\n现在，打开页面，缓慢地改变浏览器的大小。你会发现，字号改变的过渡很平滑。0.5em在这里代表的是字号的最小值，1vm则代表着响应式地往上累加。这样基础字号大小就在iPhone6的11.75px和1200px宽浏览器窗口的20px间缩放。你可以根据自己的喜好改变这些值。\n\n你现在可以实现响应式策略的核心逻辑而不需要添加一行媒体查询的代码。页面上的所有元素可以根据视口大小平滑缩放，不再需要3或4个硬编码的断点。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/) [本文]\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)  \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","source":"_posts/css-in-depth-viewport-relative-units.md","raw":"---\ntitle: 视口相关单位的应用 —— 别说你懂CSS相对单位\ndate: 2018-07-05 13:28:02\ntags:\n- front-end\n- css\n---\n\n前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章[《Working with relative units》](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 [Github PR](https://github.com/YuyingWu/blog/tree/dev/source/_posts) ^_^）\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/) [本文]\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n本文对应的章节目录：\n\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n\n***\n\n## 2.4 视口相关单位（viewport-relative units）\n\n你已经学完em和rem了，它们都是以`font-size`为基准值的，但相对单位不只它们。还有视口相关单位，依赖浏览器的视口大小来定义长度的。\n\n> 视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。\n\n如果你不熟悉视口相关单位的话，在这里简单介绍一下。\n\n* vh —— 视口高度的1/100\n* vw —— 视口宽度的1/100\n* vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）\n* vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）\n\n举个例子，50vw等于视口宽度的一半，而25vh等于视口高度的25%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。\n\n图2.10展示了一个正方形的元素在不同屏幕尺寸下的视口的情况。宽和高的值都声明为90vmin，也就是宽高较小值的90%。边长的值等于，横屏情况下高度的90%，或者竖屏情况下宽度的90%。\n\n[ 图 2.10 如果把一个元素的宽高定义成90vmin，它总会展示成一个正方形，边长稍小于屏幕的视口，不管它的尺寸或方向怎样。 ]\n\n![\"图 2.10\"](http://sinacloud.net/woodysblog/css-in-depth/02fig10_alt.jpg)\n\n在代码片段2.18可以看到这个元素的样式，渲染了一个适应屏幕尺寸的大正方形，不管浏览器的尺寸是多少。你可以通过添加`<div class=\"square\">`，再看看页面效果。\n\n[ 代码片段 2.18 边长使用`vmin`的正方形元素 ]\n\n```\n.square {\n  width: 90vmin;\n  height: 90vmin;\n  background-color: #369;\n}\n```\n\n如果想做一个大英雄图片充满屏幕的效果，视口相关长度最合适不过。你的图片可以在一个长条形的容器内，把图片的高度设为100vh，那它的高度就会跟视口高度一样。\n\n> ### 笔记  \n> \n> 视口相关单位对于大多数浏览器还是一项比较新的特性，所以当你试图把这个特性和其他样式混搭时，有可能会有一些很奇怪的bug。详情参考[http://caniuse.com/#feat=viewport-units](http://caniuse.com/#feat=viewport-units)列表中的“已知问题（Known Issues）”\n\n> ### CSS3\n> \n> 本章提到的很多单位类型，其实并不在早期的CSS版本里（尤其是rem和视口相关单位）。在这门语言一系列的更新迭代过程中，它们慢慢被加进来，我们将最新的版本称作CSS3。  \n> \n> 在二十世纪末二十一世纪初，在CSS规范的初版发布之后的很长一段时间，只有很小的改动。在1998年5月份，W3C（World Wide Web Consortium）发布了CSS 2规范。不久之后，修正版本2中问题和缺陷的2.1版本开始了，CSS 2.1的工作持续了好多年，但并没有添加什么令人印象深刻的特性。直到2011年4月份，版本2.1终于被确认为“提议推荐标准”（Proposed Recommendation）。到这个时候，大多数浏览器对CSS 2.1的特性已经支持得很好了，在此基础上，浏览器又努力地添加一些新的特性。这就是新规范CSS 3。  \n> \n> “3”是个非正式的版本号，实际上并没有CSS3规范。相反，这个规范被拆成多个独立的模块，分别有独立的版本号。background和border的规范已经从盒模型（box model）以及层叠与继承（cascading and inheritance）规范中独立出来。通过这种方式，W3C就可以针对CSS某个模块进行更新迭代，而不用同时更新其他不相关的模块的内容。在这些模块规范里，很多还停留在第3版本（现在叫“第3级”），但有的模块（比如选择器规范（selectors specification））已经到第4级，而其他的模块（比如flexbox）还在第1级。  \n> \n> 这些新特性进入了人们的视野。我们可以看到在2009到2013年间，大量新的CSS特性涌进浏览器中。其中有现在比较出名的rem和视口相关单位，以及新的选择器（new selectors）、媒体查询（media queries）、网页文字（web fonts）、圆形边框（rounded borders）、动画（animation）、变换（transitions）、变形（transformations）以及定义颜色的不同方式。然而，每年的新特性的数量还在逐年稳定增长。  \n> \n> 这意味着，我们不再只跟一个特定版本的CSS规范打交道。这是一套有生命的标准，每个浏览器也在持续地支持新的特性，开发者会开始使用然后渐渐习惯它们。CSS4大概不会出现了，如果有的话，应该也只是个用于市场营销的名词。尽管这本书也会提到CSS3的新特性，但没有必要把它们都搬出来，就整个网页而言，这些都是CSS。\n\n### 2.4.1 在font-size上使用vw\n\n一个应用如果使用了视口相关单位，可能效果最不明显的地方就是用在字号大小上。事实上，我发现把vh和vw用在字号上比元素的宽或者高更实用。\n\n试想一下，如果把元素的font-size声明为2vm，会怎么样？台式机屏幕宽是1200px，2vm等于24px（1200 * 2%）。而平板电脑的屏幕宽768px，2vm约等于15px（768 * 2%）。很棒的是，元素在两个尺寸下缩放自如。这意味着这里并没有一个突然的断点，元素会随着视口尺寸的增大而平滑增大。\n\n不幸的是，24px对于大屏幕来说有点太大了。而更糟糕的是，在iPhone6它直接缩小到7.5px。好消息是缩放生效了，而坏消息是极限情况的处理有点差。你可以通过CSS的方法`calc()`解决这个问题。\n\n### 2.4.2 在font-size上使用calc()\n\n`calc()`函数支持对2个或者更多个数值进行基础的运算。这个函数对不同类型的单位间的运算尤其有用。这个函数支持加（+）、减（-）、乘（*）和除以（/）。其中，加和减运算符左右必须留有空格，所以我建议我们来培养一个习惯，总是在四个运算符的两侧都写上空格，譬如`calc(1em + 10px)`。\n\n你会在下一个代码片段中，使用`calc()`来计算vh单位和em单位的值。把你的样式表中的上一段设定基础字号大小的代码去掉（及相关的媒体查询代码），添加以下代码。\n\n[ 代码片段 2.19 在font-size中使用em和vh单位进行calc()运算 ]\n\n```\n:root {\n  font-size: calc(0.5em + 1vw);\n}\n```\n\n现在，打开页面，缓慢地改变浏览器的大小。你会发现，字号改变的过渡很平滑。0.5em在这里代表的是字号的最小值，1vm则代表着响应式地往上累加。这样基础字号大小就在iPhone6的11.75px和1200px宽浏览器窗口的20px间缩放。你可以根据自己的喜好改变这些值。\n\n你现在可以实现响应式策略的核心逻辑而不需要添加一行媒体查询的代码。页面上的所有元素可以根据视口大小平滑缩放，不再需要3或4个硬编码的断点。\n\n***\n\n《别说你懂CSS相对单位》系列译文：\n\n* [如何更愉快地使用em](/blog/archives/css-in-depth-relative-units/)\n* [如何更愉快地使用rem](/blog/archives/css-in-depth-stop-thinking-in-px/)\n* [视口相关单位的应用](/blog/archives/css-in-depth-viewport-relative-units/) [本文]\n* [无单位数字和行高](/blog/archives/css-in-depth-unitless-number/)\n* [CSS自定义属性](/blog/archives/css-in-depth-css-variables/)\n\n章节：\n\n* 2.1 相对单位值的魔力\n  * 2.1.1 完美像素设计（pixel-perfect design）的挣扎\n  * 2.1.2 完美像素网页的终结\n  * 像素（pixel）、点（point）和pc（pica）\n* 2.2 em和rem\n  * 2.2.1 对font-size使用em\n    * 当我们在一个元素内用em同时声明font-size和其他属性\n    * 字号收缩问题\n  * 2.2.2 对font-size使用rem\n    * 可用性：对font-size使用相对长度单位\n* 2.3 停止使用像素思维去思考\n  * 2.3.1 设置一个合理的字号默认值\n  * 2.3.2 让这个面板变得“响应式”\n  * 2.3.3 调整单个组件的大小\n* 2.4 视口相关单位（viewport-relative units）\n  * CSS3\n  * 2.4.1 在font-size上使用vw\n  * 2.4.2 在font-size上使用calc()\n* 2.5 不带单位的数字（unitless number）和行高（line-height）\n* 2.6 自定义属性（也叫“CSS变量”）\n  * 2.6.1 动态改变自定义属性的值\n  * 2.6.2 通过JavaScript改变自定义属性的值\n  * 2.6.3 初探自定义属性\n* 总结\n\n> 原著版权信息：\n> \n> 作者：Keith J.Grant  \n> 书籍：CSS in Depth  \n> 章节：[Working with relative units](https://livebook.manning.com/#!/book/css-in-depth/chapter-2)  \n\n*** \n\n笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。\n\n感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。\n\n如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。\n\n独立博客：[wuyuying.com](http://wuyuying.com/)  \n知乎ID：[@Yuying Wu](https://www.zhihu.com/people/yuying_wu/posts)  \nGithub：[Yuying Wu](https://github.com/YuyingWu)","slug":"css-in-depth-viewport-relative-units","published":1,"updated":"2018-07-08T07:59:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8d000uzvr343h90wu7","content":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-4-视口相关单位（viewport-relative-units）\"><a href=\"#2-4-视口相关单位（viewport-relative-units）\" class=\"headerlink\" title=\"2.4 视口相关单位（viewport-relative units）\"></a>2.4 视口相关单位（viewport-relative units）</h2><p>你已经学完em和rem了，它们都是以<code>font-size</code>为基准值的，但相对单位不只它们。还有视口相关单位，依赖浏览器的视口大小来定义长度的。</p>\n<blockquote>\n<p>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。</p>\n</blockquote>\n<p>如果你不熟悉视口相关单位的话，在这里简单介绍一下。</p>\n<ul>\n<li>vh —— 视口高度的1/100</li>\n<li>vw —— 视口宽度的1/100</li>\n<li>vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）</li>\n<li>vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）</li>\n</ul>\n<p>举个例子，50vw等于视口宽度的一半，而25vh等于视口高度的25%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。</p>\n<p>图2.10展示了一个正方形的元素在不同屏幕尺寸下的视口的情况。宽和高的值都声明为90vmin，也就是宽高较小值的90%。边长的值等于，横屏情况下高度的90%，或者竖屏情况下宽度的90%。</p>\n<p>[ 图 2.10 如果把一个元素的宽高定义成90vmin，它总会展示成一个正方形，边长稍小于屏幕的视口，不管它的尺寸或方向怎样。 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig10_alt.jpg\" alt=\"&quot;图 2.10&quot;\"></p>\n<p>在代码片段2.18可以看到这个元素的样式，渲染了一个适应屏幕尺寸的大正方形，不管浏览器的尺寸是多少。你可以通过添加<code>&lt;div class=&quot;square&quot;&gt;</code>，再看看页面效果。</p>\n<p>[ 代码片段 2.18 边长使用<code>vmin</code>的正方形元素 ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">90vmin</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90vmin</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#369</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想做一个大英雄图片充满屏幕的效果，视口相关长度最合适不过。你的图片可以在一个长条形的容器内，把图片的高度设为100vh，那它的高度就会跟视口高度一样。</p>\n<blockquote>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><p>视口相关单位对于大多数浏览器还是一项比较新的特性，所以当你试图把这个特性和其他样式混搭时，有可能会有一些很奇怪的bug。详情参考<a href=\"http://caniuse.com/#feat=viewport-units\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#feat=viewport-units</a>列表中的“已知问题（Known Issues）”</p>\n</blockquote>\n<blockquote>\n<h3 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h3><p>本章提到的很多单位类型，其实并不在早期的CSS版本里（尤其是rem和视口相关单位）。在这门语言一系列的更新迭代过程中，它们慢慢被加进来，我们将最新的版本称作CSS3。  </p>\n<p>在二十世纪末二十一世纪初，在CSS规范的初版发布之后的很长一段时间，只有很小的改动。在1998年5月份，W3C（World Wide Web Consortium）发布了CSS 2规范。不久之后，修正版本2中问题和缺陷的2.1版本开始了，CSS 2.1的工作持续了好多年，但并没有添加什么令人印象深刻的特性。直到2011年4月份，版本2.1终于被确认为“提议推荐标准”（Proposed Recommendation）。到这个时候，大多数浏览器对CSS 2.1的特性已经支持得很好了，在此基础上，浏览器又努力地添加一些新的特性。这就是新规范CSS 3。  </p>\n<p>“3”是个非正式的版本号，实际上并没有CSS3规范。相反，这个规范被拆成多个独立的模块，分别有独立的版本号。background和border的规范已经从盒模型（box model）以及层叠与继承（cascading and inheritance）规范中独立出来。通过这种方式，W3C就可以针对CSS某个模块进行更新迭代，而不用同时更新其他不相关的模块的内容。在这些模块规范里，很多还停留在第3版本（现在叫“第3级”），但有的模块（比如选择器规范（selectors specification））已经到第4级，而其他的模块（比如flexbox）还在第1级。  </p>\n<p>这些新特性进入了人们的视野。我们可以看到在2009到2013年间，大量新的CSS特性涌进浏览器中。其中有现在比较出名的rem和视口相关单位，以及新的选择器（new selectors）、媒体查询（media queries）、网页文字（web fonts）、圆形边框（rounded borders）、动画（animation）、变换（transitions）、变形（transformations）以及定义颜色的不同方式。然而，每年的新特性的数量还在逐年稳定增长。  </p>\n<p>这意味着，我们不再只跟一个特定版本的CSS规范打交道。这是一套有生命的标准，每个浏览器也在持续地支持新的特性，开发者会开始使用然后渐渐习惯它们。CSS4大概不会出现了，如果有的话，应该也只是个用于市场营销的名词。尽管这本书也会提到CSS3的新特性，但没有必要把它们都搬出来，就整个网页而言，这些都是CSS。</p>\n</blockquote>\n<h3 id=\"2-4-1-在font-size上使用vw\"><a href=\"#2-4-1-在font-size上使用vw\" class=\"headerlink\" title=\"2.4.1 在font-size上使用vw\"></a>2.4.1 在font-size上使用vw</h3><p>一个应用如果使用了视口相关单位，可能效果最不明显的地方就是用在字号大小上。事实上，我发现把vh和vw用在字号上比元素的宽或者高更实用。</p>\n<p>试想一下，如果把元素的font-size声明为2vm，会怎么样？台式机屏幕宽是1200px，2vm等于24px（1200 <em> 2%）。而平板电脑的屏幕宽768px，2vm约等于15px（768 </em> 2%）。很棒的是，元素在两个尺寸下缩放自如。这意味着这里并没有一个突然的断点，元素会随着视口尺寸的增大而平滑增大。</p>\n<p>不幸的是，24px对于大屏幕来说有点太大了。而更糟糕的是，在iPhone6它直接缩小到7.5px。好消息是缩放生效了，而坏消息是极限情况的处理有点差。你可以通过CSS的方法<code>calc()</code>解决这个问题。</p>\n<h3 id=\"2-4-2-在font-size上使用calc\"><a href=\"#2-4-2-在font-size上使用calc\" class=\"headerlink\" title=\"2.4.2 在font-size上使用calc()\"></a>2.4.2 在font-size上使用calc()</h3><p><code>calc()</code>函数支持对2个或者更多个数值进行基础的运算。这个函数对不同类型的单位间的运算尤其有用。这个函数支持加（+）、减（-）、乘（*）和除以（/）。其中，加和减运算符左右必须留有空格，所以我建议我们来培养一个习惯，总是在四个运算符的两侧都写上空格，譬如<code>calc(1em + 10px)</code>。</p>\n<p>你会在下一个代码片段中，使用<code>calc()</code>来计算vh单位和em单位的值。把你的样式表中的上一段设定基础字号大小的代码去掉（及相关的媒体查询代码），添加以下代码。</p>\n<p>[ 代码片段 2.19 在font-size中使用em和vh单位进行calc()运算 ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(0.5em + 1vw);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，打开页面，缓慢地改变浏览器的大小。你会发现，字号改变的过渡很平滑。0.5em在这里代表的是字号的最小值，1vm则代表着响应式地往上累加。这样基础字号大小就在iPhone6的11.75px和1200px宽浏览器窗口的20px间缩放。你可以根据自己的喜好改变这些值。</p>\n<p>你现在可以实现响应式策略的核心逻辑而不需要添加一行媒体查询的代码。页面上的所有元素可以根据视口大小平滑缩放，不再需要3或4个硬编码的断点。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>  </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">《Working with relative units》</a>，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以有了这个译文系列。（若有勘误或翻译建议，欢迎 <a href=\"https://github.com/YuyingWu/blog/tree/dev/source/_posts\" target=\"_blank\" rel=\"noopener\">Github PR</a> ^_^）</p>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>本文对应的章节目录：</p>\n<ul>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-4-视口相关单位（viewport-relative-units）\"><a href=\"#2-4-视口相关单位（viewport-relative-units）\" class=\"headerlink\" title=\"2.4 视口相关单位（viewport-relative units）\"></a>2.4 视口相关单位（viewport-relative units）</h2><p>你已经学完em和rem了，它们都是以<code>font-size</code>为基准值的，但相对单位不只它们。还有视口相关单位，依赖浏览器的视口大小来定义长度的。</p>\n<blockquote>\n<p>视口（viewport） —— 在浏览器窗口中用来渲染页面的可视区域，这不包括浏览器的地址栏、工具栏、状态栏等（如果有的话）。</p>\n</blockquote>\n<p>如果你不熟悉视口相关单位的话，在这里简单介绍一下。</p>\n<ul>\n<li>vh —— 视口高度的1/100</li>\n<li>vw —— 视口宽度的1/100</li>\n<li>vmin —— 视区宽度或高度较小值的1/100（IE9支持的是vm）</li>\n<li>vmax —— 视区宽度或高度较大值的1/100（在写本书时，IE或者Edge都不支持）</li>\n</ul>\n<p>举个例子，50vw等于视口宽度的一半，而25vh等于视口高度的25%。vmin依赖两者（宽或高）的较小值，如果我们需要确保一个元素不管在横屏还是竖屏下适应屏幕展示的话，这个属性会很有帮助：如果是横屏，vmin的基准值是屏幕的高度，如果是竖屏，它的基准值是屏幕的宽度。</p>\n<p>图2.10展示了一个正方形的元素在不同屏幕尺寸下的视口的情况。宽和高的值都声明为90vmin，也就是宽高较小值的90%。边长的值等于，横屏情况下高度的90%，或者竖屏情况下宽度的90%。</p>\n<p>[ 图 2.10 如果把一个元素的宽高定义成90vmin，它总会展示成一个正方形，边长稍小于屏幕的视口，不管它的尺寸或方向怎样。 ]</p>\n<p><img src=\"http://sinacloud.net/woodysblog/css-in-depth/02fig10_alt.jpg\" alt=\"&quot;图 2.10&quot;\"></p>\n<p>在代码片段2.18可以看到这个元素的样式，渲染了一个适应屏幕尺寸的大正方形，不管浏览器的尺寸是多少。你可以通过添加<code>&lt;div class=&quot;square&quot;&gt;</code>，再看看页面效果。</p>\n<p>[ 代码片段 2.18 边长使用<code>vmin</code>的正方形元素 ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">90vmin</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90vmin</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#369</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想做一个大英雄图片充满屏幕的效果，视口相关长度最合适不过。你的图片可以在一个长条形的容器内，把图片的高度设为100vh，那它的高度就会跟视口高度一样。</p>\n<blockquote>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><p>视口相关单位对于大多数浏览器还是一项比较新的特性，所以当你试图把这个特性和其他样式混搭时，有可能会有一些很奇怪的bug。详情参考<a href=\"http://caniuse.com/#feat=viewport-units\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#feat=viewport-units</a>列表中的“已知问题（Known Issues）”</p>\n</blockquote>\n<blockquote>\n<h3 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h3><p>本章提到的很多单位类型，其实并不在早期的CSS版本里（尤其是rem和视口相关单位）。在这门语言一系列的更新迭代过程中，它们慢慢被加进来，我们将最新的版本称作CSS3。  </p>\n<p>在二十世纪末二十一世纪初，在CSS规范的初版发布之后的很长一段时间，只有很小的改动。在1998年5月份，W3C（World Wide Web Consortium）发布了CSS 2规范。不久之后，修正版本2中问题和缺陷的2.1版本开始了，CSS 2.1的工作持续了好多年，但并没有添加什么令人印象深刻的特性。直到2011年4月份，版本2.1终于被确认为“提议推荐标准”（Proposed Recommendation）。到这个时候，大多数浏览器对CSS 2.1的特性已经支持得很好了，在此基础上，浏览器又努力地添加一些新的特性。这就是新规范CSS 3。  </p>\n<p>“3”是个非正式的版本号，实际上并没有CSS3规范。相反，这个规范被拆成多个独立的模块，分别有独立的版本号。background和border的规范已经从盒模型（box model）以及层叠与继承（cascading and inheritance）规范中独立出来。通过这种方式，W3C就可以针对CSS某个模块进行更新迭代，而不用同时更新其他不相关的模块的内容。在这些模块规范里，很多还停留在第3版本（现在叫“第3级”），但有的模块（比如选择器规范（selectors specification））已经到第4级，而其他的模块（比如flexbox）还在第1级。  </p>\n<p>这些新特性进入了人们的视野。我们可以看到在2009到2013年间，大量新的CSS特性涌进浏览器中。其中有现在比较出名的rem和视口相关单位，以及新的选择器（new selectors）、媒体查询（media queries）、网页文字（web fonts）、圆形边框（rounded borders）、动画（animation）、变换（transitions）、变形（transformations）以及定义颜色的不同方式。然而，每年的新特性的数量还在逐年稳定增长。  </p>\n<p>这意味着，我们不再只跟一个特定版本的CSS规范打交道。这是一套有生命的标准，每个浏览器也在持续地支持新的特性，开发者会开始使用然后渐渐习惯它们。CSS4大概不会出现了，如果有的话，应该也只是个用于市场营销的名词。尽管这本书也会提到CSS3的新特性，但没有必要把它们都搬出来，就整个网页而言，这些都是CSS。</p>\n</blockquote>\n<h3 id=\"2-4-1-在font-size上使用vw\"><a href=\"#2-4-1-在font-size上使用vw\" class=\"headerlink\" title=\"2.4.1 在font-size上使用vw\"></a>2.4.1 在font-size上使用vw</h3><p>一个应用如果使用了视口相关单位，可能效果最不明显的地方就是用在字号大小上。事实上，我发现把vh和vw用在字号上比元素的宽或者高更实用。</p>\n<p>试想一下，如果把元素的font-size声明为2vm，会怎么样？台式机屏幕宽是1200px，2vm等于24px（1200 <em> 2%）。而平板电脑的屏幕宽768px，2vm约等于15px（768 </em> 2%）。很棒的是，元素在两个尺寸下缩放自如。这意味着这里并没有一个突然的断点，元素会随着视口尺寸的增大而平滑增大。</p>\n<p>不幸的是，24px对于大屏幕来说有点太大了。而更糟糕的是，在iPhone6它直接缩小到7.5px。好消息是缩放生效了，而坏消息是极限情况的处理有点差。你可以通过CSS的方法<code>calc()</code>解决这个问题。</p>\n<h3 id=\"2-4-2-在font-size上使用calc\"><a href=\"#2-4-2-在font-size上使用calc\" class=\"headerlink\" title=\"2.4.2 在font-size上使用calc()\"></a>2.4.2 在font-size上使用calc()</h3><p><code>calc()</code>函数支持对2个或者更多个数值进行基础的运算。这个函数对不同类型的单位间的运算尤其有用。这个函数支持加（+）、减（-）、乘（*）和除以（/）。其中，加和减运算符左右必须留有空格，所以我建议我们来培养一个习惯，总是在四个运算符的两侧都写上空格，譬如<code>calc(1em + 10px)</code>。</p>\n<p>你会在下一个代码片段中，使用<code>calc()</code>来计算vh单位和em单位的值。把你的样式表中的上一段设定基础字号大小的代码去掉（及相关的媒体查询代码），添加以下代码。</p>\n<p>[ 代码片段 2.19 在font-size中使用em和vh单位进行calc()运算 ]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(0.5em + 1vw);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，打开页面，缓慢地改变浏览器的大小。你会发现，字号改变的过渡很平滑。0.5em在这里代表的是字号的最小值，1vm则代表着响应式地往上累加。这样基础字号大小就在iPhone6的11.75px和1200px宽浏览器窗口的20px间缩放。你可以根据自己的喜好改变这些值。</p>\n<p>你现在可以实现响应式策略的核心逻辑而不需要添加一行媒体查询的代码。页面上的所有元素可以根据视口大小平滑缩放，不再需要3或4个硬编码的断点。</p>\n<hr>\n<p>《别说你懂CSS相对单位》系列译文：</p>\n<ul>\n<li><a href=\"/blog/archives/css-in-depth-relative-units/\">如何更愉快地使用em</a></li>\n<li><a href=\"/blog/archives/css-in-depth-stop-thinking-in-px/\">如何更愉快地使用rem</a></li>\n<li><a href=\"/blog/archives/css-in-depth-viewport-relative-units/\">视口相关单位的应用</a> [本文]</li>\n<li><a href=\"/blog/archives/css-in-depth-unitless-number/\">无单位数字和行高</a></li>\n<li><a href=\"/blog/archives/css-in-depth-css-variables/\">CSS自定义属性</a></li>\n</ul>\n<p>章节：</p>\n<ul>\n<li>2.1 相对单位值的魔力<ul>\n<li>2.1.1 完美像素设计（pixel-perfect design）的挣扎</li>\n<li>2.1.2 完美像素网页的终结</li>\n<li>像素（pixel）、点（point）和pc（pica）</li>\n</ul>\n</li>\n<li>2.2 em和rem<ul>\n<li>2.2.1 对font-size使用em<ul>\n<li>当我们在一个元素内用em同时声明font-size和其他属性</li>\n<li>字号收缩问题</li>\n</ul>\n</li>\n<li>2.2.2 对font-size使用rem<ul>\n<li>可用性：对font-size使用相对长度单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 停止使用像素思维去思考<ul>\n<li>2.3.1 设置一个合理的字号默认值</li>\n<li>2.3.2 让这个面板变得“响应式”</li>\n<li>2.3.3 调整单个组件的大小</li>\n</ul>\n</li>\n<li>2.4 视口相关单位（viewport-relative units）<ul>\n<li>CSS3</li>\n<li>2.4.1 在font-size上使用vw</li>\n<li>2.4.2 在font-size上使用calc()</li>\n</ul>\n</li>\n<li>2.5 不带单位的数字（unitless number）和行高（line-height）</li>\n<li>2.6 自定义属性（也叫“CSS变量”）<ul>\n<li>2.6.1 动态改变自定义属性的值</li>\n<li>2.6.2 通过JavaScript改变自定义属性的值</li>\n<li>2.6.3 初探自定义属性</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>原著版权信息：</p>\n<p>作者：Keith J.Grant<br>书籍：CSS in Depth<br>章节：<a href=\"https://livebook.manning.com/#!/book/css-in-depth/chapter-2\" target=\"_blank\" rel=\"noopener\">Working with relative units</a>  </p>\n</blockquote>\n<hr>\n<p>笔者 @Yuying Wu，前端爱好者 / 鼓励师 / 新西兰打工度假 / 铲屎官。目前就职于某大型电商的B2B前端团队。</p>\n<p>感谢你读到这里，对上文若有任何疑问或建议，欢迎留言。</p>\n<p>如果你和我一样喜欢前端，喜欢捣腾独立博客或者前沿技术，或者有什么职业疑问，欢迎关注我以及各种交流哈。</p>\n<p>独立博客：<a href=\"http://wuyuying.com/\">wuyuying.com</a><br>知乎ID：<a href=\"https://www.zhihu.com/people/yuying_wu/posts\" target=\"_blank\" rel=\"noopener\">@Yuying Wu</a><br>Github：<a href=\"https://github.com/YuyingWu\" target=\"_blank\" rel=\"noopener\">Yuying Wu</a></p>\n"},{"title":"CSS Variables学习笔记","date":"2018-01-11T09:32:16.000Z","type":"photo","cover":"http://sinacloud.net/woodysblog/img/css-var-case-sensitive.png","_content":"\n最近看了下CSS Variables（CSS变量，又名CSS自定义属性），跟大家分享一下我的学习笔记。\n\n## 一、什么是CSS Variables\n\n来，直接看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables)上的描述：\n\n> CSS 变量是由CSS作者定义的实体，其中包含要在整个文档中重复使用的特定值。使用自定义属性来设置变量名，并使用特定的 var() 来访问。\n\n```\ncolor: var(--main-color);\n```\n\n## 二、学习笔记\n\n### 1. 声明 & 调用\n\n#### i. 声明方式\n\nCSS变量声明的方式非常简单，如下，声明了一个名叫`color`的CSS变量。\n\n* 在css文件中写\n* 写在html标签的inline-style里\n* 用JS给某个元素声明，方法`.style.setProperty`\n\n```css\nbody{\n  --color: red;\n}\n```\n\n```html\n<body style=\"--color: red;\"></body>\n```\n\n```javascript\ndocument.getElementsByTagName('body')[0].style.setProperty('--color', 'red')\n```\n\n#### ii. 调用方式\n\n通过`var()`函数调用，如：\n\n```CSS\n.block{\n  color: var(--color);\n}\n```\n\n#### iii. 变量的命名\n\n说完声明和调用，还有个小问题。那么，\bCSS变量的命名，有什么限制么？下面我们来测试一下。\n\n```CSS\n.foo-test{\n  --foo:;\n  --ffoo:;\n  --Foo: red;\n  --FOo: blue;\n  --FOO: green;\n  /* 以下省略测试className的代码 */\n}\n```\n\n![](http://sinacloud.net/woodysblog/img/css-var-case-sensitive.png)\n\n从以上测试代码可以看出：\n\n* CSS变量的命名是大小写敏感的\n* 不赋值或者赋值空格，都是无效的\n\n### 2. 作用域 & 继承\n\nCSS变量也有作用域一说，而最顶层的作用域就是`:root`，下面的所有的元素都可以共享相关CSS变量。\n\n```CSS\n:root{\n  --color: green;\n}\n```\n\n刚才我们在`body`上，定义了`--color`，在`body`下的子元素，都会默认继承这个属性，随意使用。当然也可以重载，把`--color`定义为别的值。\n\n```html\n<div class=\"block\">\n  <p>inherit color</p>\n  <p class=\"css-var-text\">overwrite color - hello world</p>\n</div>\n```\n\n```css\nbody{\n  --color: green;\n}\n.block{\n  color: var(--color);\n}\n.css-var-text{\n  --color: red;\n  color: var(--color);\n}\n```\n\n`.block`，作为`body`的子元素，继承了`--color`属性，所以边框出来就是`green`。\n\n而`.css-var-text`在自己的作用域中，重写了`--color`，出来的字体颜色是overwrite后的`blue`。\n\n![](http://sinacloud.net/woodysblog/img/css-var-inherit.png)\n\n### 3. 浏览器支持\n\n#### i. \b浏览器支持现状\n\n来看看[caniuse](https://caniuse.com/#search=css%20variables)上CSS Variables (Custom Properties)的支持度：\n\nPC的话，IE\b 11和Edge的支持度都很差，而\bChrome（2016.3）、Firefox（2017.11）和Safari(2017.3)的一些新版本都是支持的，相信很快就能普及。\n\nMobile的话，Safari在2016\b年的版本已经支持CSS变量了，但Opera、Chrome、UC等\b的支持还不太好。\n\n![](http://sinacloud.net/woodysblog/img/css-var-browser-support.png)\n\n#### ii. fallbacks\n\n浏览器的支持度不太好，我们又想玩新东西的话，就需要考虑如果浏览器不支持CSS变量，怎么优雅降级。（嗷，两套代码是有点……）\n\n```CSS\n/* 当浏览器不支持CSS变量 */\n.browser-support{\n  background: red;  \n}\n\n/* 当浏览器支持CSS变量 */\n@supports (--css: variables) {\n  .browser-support{\n    background: var(--color);\n  }\n}\n```\n\n## \b三、代码习作\n\n### 1. codepen\n\n在学习CSS Variables的时候，有边写一些教程的demo，除了\b以上，还包括一些实际场景的应用，如像box-shadow\b复合属性的拆解，以及JS操作CSS变量等。\n\n<p data-height=\"500\" data-theme-id=\"0\" data-slug-hash=\"dZrYJg\" data-default-tab=\"css,result\" data-user=\"wuyuying\" data-embed-version=\"2\" data-pen-title=\"CSS Varibles Study Notes\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wuyuying/pen/dZrYJg/\">CSS Varibles Study Notes</a> by Y (<a href=\"https://codepen.io/wuyuying\">@wuyuying</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n### 2. flexbox属性的DEMO\n\n![](http://sinacloud.net/woodysblog/img/css-var-flexbox.png)\n\n之前在团队也做过一下下flexbox的分享，大家也知道，flex属性和对应的值特别多，当时就很想做个\b可以随时变属性值看效果的playground。\n\n但想了下传统的实现方式，貌似没有\b优雅的方法。\n\n* CSS+JS实现：写一批classname，\b\boption\b切换时，通过\bJS修改classname改变样式；\n* 纯\bJS实现，根据option的value用JS改写元素的inline style（一直修改dom）\n\n哎哟，换CSS Variables之后，一切就不一样了，\b\b可继承、可复用、易维护，目前实现比较简单，可能跟以上的传统方式差别不太大，不过\b后续\b要修改或者做更多优化，我相信优势就会凸显出来了。\n\ndemo传送门：[wuyuying.com/flexbox-css-var](http://wuyuying.com/flexbox-css-var/)\n[github传送门](https://github.com/YuyingWu/blog-modern/blob/master/pages/flexbox-css-var.js)\n\n## 小结\n\n哈哈，没想到小结写什么，如果\b大家有好玩的CSS Variables的应用，欢迎分享给我 ：）","source":"_posts/css-var.md","raw":"---\ntitle: CSS Variables学习笔记\ndate: 2018-01-11 17:32:16\ntags:\n- front-end\n- CSS\n- CSS Variables\ntype: photo\ncover: http://sinacloud.net/woodysblog/img/css-var-case-sensitive.png\n---\n\n最近看了下CSS Variables（CSS变量，又名CSS自定义属性），跟大家分享一下我的学习笔记。\n\n## 一、什么是CSS Variables\n\n来，直接看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables)上的描述：\n\n> CSS 变量是由CSS作者定义的实体，其中包含要在整个文档中重复使用的特定值。使用自定义属性来设置变量名，并使用特定的 var() 来访问。\n\n```\ncolor: var(--main-color);\n```\n\n## 二、学习笔记\n\n### 1. 声明 & 调用\n\n#### i. 声明方式\n\nCSS变量声明的方式非常简单，如下，声明了一个名叫`color`的CSS变量。\n\n* 在css文件中写\n* 写在html标签的inline-style里\n* 用JS给某个元素声明，方法`.style.setProperty`\n\n```css\nbody{\n  --color: red;\n}\n```\n\n```html\n<body style=\"--color: red;\"></body>\n```\n\n```javascript\ndocument.getElementsByTagName('body')[0].style.setProperty('--color', 'red')\n```\n\n#### ii. 调用方式\n\n通过`var()`函数调用，如：\n\n```CSS\n.block{\n  color: var(--color);\n}\n```\n\n#### iii. 变量的命名\n\n说完声明和调用，还有个小问题。那么，\bCSS变量的命名，有什么限制么？下面我们来测试一下。\n\n```CSS\n.foo-test{\n  --foo:;\n  --ffoo:;\n  --Foo: red;\n  --FOo: blue;\n  --FOO: green;\n  /* 以下省略测试className的代码 */\n}\n```\n\n![](http://sinacloud.net/woodysblog/img/css-var-case-sensitive.png)\n\n从以上测试代码可以看出：\n\n* CSS变量的命名是大小写敏感的\n* 不赋值或者赋值空格，都是无效的\n\n### 2. 作用域 & 继承\n\nCSS变量也有作用域一说，而最顶层的作用域就是`:root`，下面的所有的元素都可以共享相关CSS变量。\n\n```CSS\n:root{\n  --color: green;\n}\n```\n\n刚才我们在`body`上，定义了`--color`，在`body`下的子元素，都会默认继承这个属性，随意使用。当然也可以重载，把`--color`定义为别的值。\n\n```html\n<div class=\"block\">\n  <p>inherit color</p>\n  <p class=\"css-var-text\">overwrite color - hello world</p>\n</div>\n```\n\n```css\nbody{\n  --color: green;\n}\n.block{\n  color: var(--color);\n}\n.css-var-text{\n  --color: red;\n  color: var(--color);\n}\n```\n\n`.block`，作为`body`的子元素，继承了`--color`属性，所以边框出来就是`green`。\n\n而`.css-var-text`在自己的作用域中，重写了`--color`，出来的字体颜色是overwrite后的`blue`。\n\n![](http://sinacloud.net/woodysblog/img/css-var-inherit.png)\n\n### 3. 浏览器支持\n\n#### i. \b浏览器支持现状\n\n来看看[caniuse](https://caniuse.com/#search=css%20variables)上CSS Variables (Custom Properties)的支持度：\n\nPC的话，IE\b 11和Edge的支持度都很差，而\bChrome（2016.3）、Firefox（2017.11）和Safari(2017.3)的一些新版本都是支持的，相信很快就能普及。\n\nMobile的话，Safari在2016\b年的版本已经支持CSS变量了，但Opera、Chrome、UC等\b的支持还不太好。\n\n![](http://sinacloud.net/woodysblog/img/css-var-browser-support.png)\n\n#### ii. fallbacks\n\n浏览器的支持度不太好，我们又想玩新东西的话，就需要考虑如果浏览器不支持CSS变量，怎么优雅降级。（嗷，两套代码是有点……）\n\n```CSS\n/* 当浏览器不支持CSS变量 */\n.browser-support{\n  background: red;  \n}\n\n/* 当浏览器支持CSS变量 */\n@supports (--css: variables) {\n  .browser-support{\n    background: var(--color);\n  }\n}\n```\n\n## \b三、代码习作\n\n### 1. codepen\n\n在学习CSS Variables的时候，有边写一些教程的demo，除了\b以上，还包括一些实际场景的应用，如像box-shadow\b复合属性的拆解，以及JS操作CSS变量等。\n\n<p data-height=\"500\" data-theme-id=\"0\" data-slug-hash=\"dZrYJg\" data-default-tab=\"css,result\" data-user=\"wuyuying\" data-embed-version=\"2\" data-pen-title=\"CSS Varibles Study Notes\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wuyuying/pen/dZrYJg/\">CSS Varibles Study Notes</a> by Y (<a href=\"https://codepen.io/wuyuying\">@wuyuying</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n### 2. flexbox属性的DEMO\n\n![](http://sinacloud.net/woodysblog/img/css-var-flexbox.png)\n\n之前在团队也做过一下下flexbox的分享，大家也知道，flex属性和对应的值特别多，当时就很想做个\b可以随时变属性值看效果的playground。\n\n但想了下传统的实现方式，貌似没有\b优雅的方法。\n\n* CSS+JS实现：写一批classname，\b\boption\b切换时，通过\bJS修改classname改变样式；\n* 纯\bJS实现，根据option的value用JS改写元素的inline style（一直修改dom）\n\n哎哟，换CSS Variables之后，一切就不一样了，\b\b可继承、可复用、易维护，目前实现比较简单，可能跟以上的传统方式差别不太大，不过\b后续\b要修改或者做更多优化，我相信优势就会凸显出来了。\n\ndemo传送门：[wuyuying.com/flexbox-css-var](http://wuyuying.com/flexbox-css-var/)\n[github传送门](https://github.com/YuyingWu/blog-modern/blob/master/pages/flexbox-css-var.js)\n\n## 小结\n\n哈哈，没想到小结写什么，如果\b大家有好玩的CSS Variables的应用，欢迎分享给我 ：）","slug":"css-var","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8e000wzvr3v7n4h357","content":"<p>最近看了下CSS Variables（CSS变量，又名CSS自定义属性），跟大家分享一下我的学习笔记。</p>\n<h2 id=\"一、什么是CSS-Variables\"><a href=\"#一、什么是CSS-Variables\" class=\"headerlink\" title=\"一、什么是CSS Variables\"></a>一、什么是CSS Variables</h2><p>来，直接看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables\" target=\"_blank\" rel=\"noopener\">MDN</a>上的描述：</p>\n<blockquote>\n<p>CSS 变量是由CSS作者定义的实体，其中包含要在整个文档中重复使用的特定值。使用自定义属性来设置变量名，并使用特定的 var() 来访问。</p>\n</blockquote>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">color</span>: <span class=\"built_in\">var</span>(--main-<span class=\"built_in\">color</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、学习笔记\"><a href=\"#二、学习笔记\" class=\"headerlink\" title=\"二、学习笔记\"></a>二、学习笔记</h2><h3 id=\"1-声明-amp-调用\"><a href=\"#1-声明-amp-调用\" class=\"headerlink\" title=\"1. 声明 &amp; 调用\"></a>1. 声明 &amp; 调用</h3><h4 id=\"i-声明方式\"><a href=\"#i-声明方式\" class=\"headerlink\" title=\"i. 声明方式\"></a>i. 声明方式</h4><p>CSS变量声明的方式非常简单，如下，声明了一个名叫<code>color</code>的CSS变量。</p>\n<ul>\n<li>在css文件中写</li>\n<li>写在html标签的inline-style里</li>\n<li>用JS给某个元素声明，方法<code>.style.setProperty</code></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"--color: red;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style.setProperty(<span class=\"string\">'--color'</span>, <span class=\"string\">'red'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"ii-调用方式\"><a href=\"#ii-调用方式\" class=\"headerlink\" title=\"ii. 调用方式\"></a>ii. 调用方式</h4><p>通过<code>var()</code>函数调用，如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"iii-变量的命名\"><a href=\"#iii-变量的命名\" class=\"headerlink\" title=\"iii. 变量的命名\"></a>iii. 变量的命名</h4><p>说完声明和调用，还有个小问题。那么，\bCSS变量的命名，有什么限制么？下面我们来测试一下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo-test</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--foo</span>:;</span><br><span class=\"line\">  <span class=\"attribute\">--ffoo</span>:;</span><br><span class=\"line\">  <span class=\"attribute\">--Foo</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">--FOo</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">--FOO</span>: green;</span><br><span class=\"line\">  <span class=\"comment\">/* 以下省略测试className的代码 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://sinacloud.net/woodysblog/img/css-var-case-sensitive.png\" alt=\"\"></p>\n<p>从以上测试代码可以看出：</p>\n<ul>\n<li>CSS变量的命名是大小写敏感的</li>\n<li>不赋值或者赋值空格，都是无效的</li>\n</ul>\n<h3 id=\"2-作用域-amp-继承\"><a href=\"#2-作用域-amp-继承\" class=\"headerlink\" title=\"2. 作用域 &amp; 继承\"></a>2. 作用域 &amp; 继承</h3><p>CSS变量也有作用域一说，而最顶层的作用域就是<code>:root</code>，下面的所有的元素都可以共享相关CSS变量。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚才我们在<code>body</code>上，定义了<code>--color</code>，在<code>body</code>下的子元素，都会默认继承这个属性，随意使用。当然也可以重载，把<code>--color</code>定义为别的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>inherit color<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"css-var-text\"</span>&gt;</span>overwrite color - hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.css-var-text</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>.block</code>，作为<code>body</code>的子元素，继承了<code>--color</code>属性，所以边框出来就是<code>green</code>。</p>\n<p>而<code>.css-var-text</code>在自己的作用域中，重写了<code>--color</code>，出来的字体颜色是overwrite后的<code>blue</code>。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/css-var-inherit.png\" alt=\"\"></p>\n<h3 id=\"3-浏览器支持\"><a href=\"#3-浏览器支持\" class=\"headerlink\" title=\"3. 浏览器支持\"></a>3. 浏览器支持</h3><h4 id=\"i-浏览器支持现状\"><a href=\"#i-浏览器支持现状\" class=\"headerlink\" title=\"i. \b浏览器支持现状\"></a>i. \b浏览器支持现状</h4><p>来看看<a href=\"https://caniuse.com/#search=css%20variables\" target=\"_blank\" rel=\"noopener\">caniuse</a>上CSS Variables (Custom Properties)的支持度：</p>\n<p>PC的话，IE\b 11和Edge的支持度都很差，而\bChrome（2016.3）、Firefox（2017.11）和Safari(2017.3)的一些新版本都是支持的，相信很快就能普及。</p>\n<p>Mobile的话，Safari在2016\b年的版本已经支持CSS变量了，但Opera、Chrome、UC等\b的支持还不太好。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/css-var-browser-support.png\" alt=\"\"></p>\n<h4 id=\"ii-fallbacks\"><a href=\"#ii-fallbacks\" class=\"headerlink\" title=\"ii. fallbacks\"></a>ii. fallbacks</h4><p>浏览器的支持度不太好，我们又想玩新东西的话，就需要考虑如果浏览器不支持CSS变量，怎么优雅降级。（嗷，两套代码是有点……）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 当浏览器不支持CSS变量 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.browser-support</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 当浏览器支持CSS变量 */</span></span><br><span class=\"line\">@<span class=\"keyword\">supports</span> (--css: variables) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.browser-support</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、代码习作\"><a href=\"#三、代码习作\" class=\"headerlink\" title=\"\b三、代码习作\"></a>\b三、代码习作</h2><h3 id=\"1-codepen\"><a href=\"#1-codepen\" class=\"headerlink\" title=\"1. codepen\"></a>1. codepen</h3><p>在学习CSS Variables的时候，有边写一些教程的demo，除了\b以上，还包括一些实际场景的应用，如像box-shadow\b复合属性的拆解，以及JS操作CSS变量等。</p>\n<p></p><p data-height=\"500\" data-theme-id=\"0\" data-slug-hash=\"dZrYJg\" data-default-tab=\"css,result\" data-user=\"wuyuying\" data-embed-version=\"2\" data-pen-title=\"CSS Varibles Study Notes\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wuyuying/pen/dZrYJg/\" target=\"_blank\" rel=\"noopener\">CSS Varibles Study Notes</a> by Y (<a href=\"https://codepen.io/wuyuying\" target=\"_blank\" rel=\"noopener\">@wuyuying</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"2-flexbox属性的DEMO\"><a href=\"#2-flexbox属性的DEMO\" class=\"headerlink\" title=\"2. flexbox属性的DEMO\"></a>2. flexbox属性的DEMO</h3><p><img src=\"http://sinacloud.net/woodysblog/img/css-var-flexbox.png\" alt=\"\"></p>\n<p>之前在团队也做过一下下flexbox的分享，大家也知道，flex属性和对应的值特别多，当时就很想做个\b可以随时变属性值看效果的playground。</p>\n<p>但想了下传统的实现方式，貌似没有\b优雅的方法。</p>\n<ul>\n<li>CSS+JS实现：写一批classname，\b\boption\b切换时，通过\bJS修改classname改变样式；</li>\n<li>纯\bJS实现，根据option的value用JS改写元素的inline style（一直修改dom）</li>\n</ul>\n<p>哎哟，换CSS Variables之后，一切就不一样了，\b\b可继承、可复用、易维护，目前实现比较简单，可能跟以上的传统方式差别不太大，不过\b后续\b要修改或者做更多优化，我相信优势就会凸显出来了。</p>\n<p>demo传送门：<a href=\"http://wuyuying.com/flexbox-css-var/\">wuyuying.com/flexbox-css-var</a><br><a href=\"https://github.com/YuyingWu/blog-modern/blob/master/pages/flexbox-css-var.js\" target=\"_blank\" rel=\"noopener\">github传送门</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>哈哈，没想到小结写什么，如果\b大家有好玩的CSS Variables的应用，欢迎分享给我 ：）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近看了下CSS Variables（CSS变量，又名CSS自定义属性），跟大家分享一下我的学习笔记。</p>\n<h2 id=\"一、什么是CSS-Variables\"><a href=\"#一、什么是CSS-Variables\" class=\"headerlink\" title=\"一、什么是CSS Variables\"></a>一、什么是CSS Variables</h2><p>来，直接看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables\" target=\"_blank\" rel=\"noopener\">MDN</a>上的描述：</p>\n<blockquote>\n<p>CSS 变量是由CSS作者定义的实体，其中包含要在整个文档中重复使用的特定值。使用自定义属性来设置变量名，并使用特定的 var() 来访问。</p>\n</blockquote>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">color</span>: <span class=\"built_in\">var</span>(--main-<span class=\"built_in\">color</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、学习笔记\"><a href=\"#二、学习笔记\" class=\"headerlink\" title=\"二、学习笔记\"></a>二、学习笔记</h2><h3 id=\"1-声明-amp-调用\"><a href=\"#1-声明-amp-调用\" class=\"headerlink\" title=\"1. 声明 &amp; 调用\"></a>1. 声明 &amp; 调用</h3><h4 id=\"i-声明方式\"><a href=\"#i-声明方式\" class=\"headerlink\" title=\"i. 声明方式\"></a>i. 声明方式</h4><p>CSS变量声明的方式非常简单，如下，声明了一个名叫<code>color</code>的CSS变量。</p>\n<ul>\n<li>在css文件中写</li>\n<li>写在html标签的inline-style里</li>\n<li>用JS给某个元素声明，方法<code>.style.setProperty</code></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"--color: red;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style.setProperty(<span class=\"string\">'--color'</span>, <span class=\"string\">'red'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"ii-调用方式\"><a href=\"#ii-调用方式\" class=\"headerlink\" title=\"ii. 调用方式\"></a>ii. 调用方式</h4><p>通过<code>var()</code>函数调用，如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"iii-变量的命名\"><a href=\"#iii-变量的命名\" class=\"headerlink\" title=\"iii. 变量的命名\"></a>iii. 变量的命名</h4><p>说完声明和调用，还有个小问题。那么，\bCSS变量的命名，有什么限制么？下面我们来测试一下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo-test</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--foo</span>:;</span><br><span class=\"line\">  <span class=\"attribute\">--ffoo</span>:;</span><br><span class=\"line\">  <span class=\"attribute\">--Foo</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">--FOo</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">--FOO</span>: green;</span><br><span class=\"line\">  <span class=\"comment\">/* 以下省略测试className的代码 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://sinacloud.net/woodysblog/img/css-var-case-sensitive.png\" alt=\"\"></p>\n<p>从以上测试代码可以看出：</p>\n<ul>\n<li>CSS变量的命名是大小写敏感的</li>\n<li>不赋值或者赋值空格，都是无效的</li>\n</ul>\n<h3 id=\"2-作用域-amp-继承\"><a href=\"#2-作用域-amp-继承\" class=\"headerlink\" title=\"2. 作用域 &amp; 继承\"></a>2. 作用域 &amp; 继承</h3><p>CSS变量也有作用域一说，而最顶层的作用域就是<code>:root</code>，下面的所有的元素都可以共享相关CSS变量。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚才我们在<code>body</code>上，定义了<code>--color</code>，在<code>body</code>下的子元素，都会默认继承这个属性，随意使用。当然也可以重载，把<code>--color</code>定义为别的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>inherit color<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"css-var-text\"</span>&gt;</span>overwrite color - hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.css-var-text</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>.block</code>，作为<code>body</code>的子元素，继承了<code>--color</code>属性，所以边框出来就是<code>green</code>。</p>\n<p>而<code>.css-var-text</code>在自己的作用域中，重写了<code>--color</code>，出来的字体颜色是overwrite后的<code>blue</code>。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/css-var-inherit.png\" alt=\"\"></p>\n<h3 id=\"3-浏览器支持\"><a href=\"#3-浏览器支持\" class=\"headerlink\" title=\"3. 浏览器支持\"></a>3. 浏览器支持</h3><h4 id=\"i-浏览器支持现状\"><a href=\"#i-浏览器支持现状\" class=\"headerlink\" title=\"i. \b浏览器支持现状\"></a>i. \b浏览器支持现状</h4><p>来看看<a href=\"https://caniuse.com/#search=css%20variables\" target=\"_blank\" rel=\"noopener\">caniuse</a>上CSS Variables (Custom Properties)的支持度：</p>\n<p>PC的话，IE\b 11和Edge的支持度都很差，而\bChrome（2016.3）、Firefox（2017.11）和Safari(2017.3)的一些新版本都是支持的，相信很快就能普及。</p>\n<p>Mobile的话，Safari在2016\b年的版本已经支持CSS变量了，但Opera、Chrome、UC等\b的支持还不太好。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/css-var-browser-support.png\" alt=\"\"></p>\n<h4 id=\"ii-fallbacks\"><a href=\"#ii-fallbacks\" class=\"headerlink\" title=\"ii. fallbacks\"></a>ii. fallbacks</h4><p>浏览器的支持度不太好，我们又想玩新东西的话，就需要考虑如果浏览器不支持CSS变量，怎么优雅降级。（嗷，两套代码是有点……）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 当浏览器不支持CSS变量 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.browser-support</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 当浏览器支持CSS变量 */</span></span><br><span class=\"line\">@<span class=\"keyword\">supports</span> (--css: variables) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.browser-support</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、代码习作\"><a href=\"#三、代码习作\" class=\"headerlink\" title=\"\b三、代码习作\"></a>\b三、代码习作</h2><h3 id=\"1-codepen\"><a href=\"#1-codepen\" class=\"headerlink\" title=\"1. codepen\"></a>1. codepen</h3><p>在学习CSS Variables的时候，有边写一些教程的demo，除了\b以上，还包括一些实际场景的应用，如像box-shadow\b复合属性的拆解，以及JS操作CSS变量等。</p>\n<p></p><p data-height=\"500\" data-theme-id=\"0\" data-slug-hash=\"dZrYJg\" data-default-tab=\"css,result\" data-user=\"wuyuying\" data-embed-version=\"2\" data-pen-title=\"CSS Varibles Study Notes\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wuyuying/pen/dZrYJg/\" target=\"_blank\" rel=\"noopener\">CSS Varibles Study Notes</a> by Y (<a href=\"https://codepen.io/wuyuying\" target=\"_blank\" rel=\"noopener\">@wuyuying</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"2-flexbox属性的DEMO\"><a href=\"#2-flexbox属性的DEMO\" class=\"headerlink\" title=\"2. flexbox属性的DEMO\"></a>2. flexbox属性的DEMO</h3><p><img src=\"http://sinacloud.net/woodysblog/img/css-var-flexbox.png\" alt=\"\"></p>\n<p>之前在团队也做过一下下flexbox的分享，大家也知道，flex属性和对应的值特别多，当时就很想做个\b可以随时变属性值看效果的playground。</p>\n<p>但想了下传统的实现方式，貌似没有\b优雅的方法。</p>\n<ul>\n<li>CSS+JS实现：写一批classname，\b\boption\b切换时，通过\bJS修改classname改变样式；</li>\n<li>纯\bJS实现，根据option的value用JS改写元素的inline style（一直修改dom）</li>\n</ul>\n<p>哎哟，换CSS Variables之后，一切就不一样了，\b\b可继承、可复用、易维护，目前实现比较简单，可能跟以上的传统方式差别不太大，不过\b后续\b要修改或者做更多优化，我相信优势就会凸显出来了。</p>\n<p>demo传送门：<a href=\"http://wuyuying.com/flexbox-css-var/\">wuyuying.com/flexbox-css-var</a><br><a href=\"https://github.com/YuyingWu/blog-modern/blob/master/pages/flexbox-css-var.js\" target=\"_blank\" rel=\"noopener\">github传送门</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>哈哈，没想到小结写什么，如果\b大家有好玩的CSS Variables的应用，欢迎分享给我 ：）</p>\n"},{"title":"谈谈怎么在不熟悉上下文的情况下debug","date":"2017-02-27T13:56:02.000Z","_content":"\n跟大家分享一个最近调bug的故事，在不熟悉架构、业务上下文、编程语言、调试环境等等的情况下，遇到问题时，我们可以怎么解决。简单的来说，路过一个你喜欢的站点，发现页面有bug，想帮忙修，怎么办？\n<!-- more -->\n***\n\n偶然访问了阿里[Ant Design](https://ant.design/)，默认是英文版本，我看右上角有个切换到中文的按钮，就过去一点，咦，跳到错误页了~\n\n![](http://cdn.sinacloud.net/woodysblog/articles/en-to-zh.png)\n\n职业习惯，我在chrome和Safari都测了一下，稳定浮现，bug~\n恰好这个站点是开源的，那就去github fork一下，把这个bug修了吧。\n\n原href：https://ant.design/\n正确跳转href：https://ant.design/index-cn\nChrome下跳转到：https://ant.design/index-cn/ant.design/\nSafari下跳转到：https://index-cn/ant.design/\n\n## 问题定位\n\n咋眼一看，我以为是程序猿或者PM在配置时写错了，于是我打开console，检查这个按钮的元素，看有什么关键字（url、data-属性、id、特别的classname等）\n\n![](http://cdn.sinacloud.net/woodysblog/articles/antd-button.png)\n\n没有链接，看来是js控制的，那就去翻源码吧~问题来了，怎么翻呢？\n\n从上图看，这个`button`没什么特色，不过，仔细一看，有个不太普通的类名，`ant-btn-ghost`，那我们就去模板那搜`ghost`吧！\n\n![](http://cdn.sinacloud.net/woodysblog/articles/antd-folder.png)\n\n从目录可以看出来，整个源是非常庞大的，除了官网页面、文档，还有Ant Design UI库的源码。凭”直觉“，到`site`文件夹搜`ghost`，因为那么多文件夹，就site比较像是放官网的。\n\nBingo!!!\n\n![](http://cdn.sinacloud.net/woodysblog/articles/antd-search.png)\n\n### button\n\n看看`button`相关的代码，虽然我不太懂React.js，但不难看出来，`button`的`click`事件处理函数`handleLangChange`就是我们要找的逻辑~\n\n```\n<Button className=\"lang\" type=\"ghost\" size=\"small\" onClick={this.handleLangChange} key=\"lang\">\n    <FormattedMessage id=\"app.header.lang\" />\n</Button>\n```\n### handleLangChange\n接下来去看`handleLangChange`函数，幸好代码不是很多，简单扫一眼~\n\n```\n  handleLangChange = () => {\n    const pathname = this.props.location.pathname;\n\n    if (utils.isLocalStorageNameSupported()) {\n      localStorage.setItem('locale', utils.isZhCN(pathname) ? 'en-US' : 'zh-CN');\n    }\n    location.href = location.href.replace(\n      location.pathname,\n      utils.getLocalizedPathname(pathname, !utils.isZhCN(pathname)),\n    );\n  }\n```\n\n第一句，变量声明，忽略；\n第二段，localstorage，忽略；\n第三段，replace，参数1是当前地址，参数2那段的`utils.getLocalizedPathname`是什么意思呢？\n\n### getLocalizedPathname\n在`site`文件夹再搜搜`getLocalizedPathname`，在`utils.jsx`找到了。\n\n```\nexport function getLocalizedPathname(path, zhCN) {\n  const pathname = path.startsWith('/') ? path : `/${path}`;\n\n  if (!zhCN) { // to enUS\n    return /\\/?index-cn/.test(pathname) ? '/' : pathname.replace('-cn', '');\n  } else if (pathname === '/') {\n    return '/index-cn';\n  } else if (pathname.endsWith('/')) {\n    return pathname.replace(/\\/$/, '-cn/');\n  }\n  return `${pathname}-cn`;\n}\n```\n\n我们再轻轻扫一眼，可以发现函数`getLocalizedPathname`的作用是根据当前路径`path`与是否中文版本`zhCN`，返回对应path值。\n\n经过上面的排查，我们基本定位切换中文的功能，涉及3个函数：\n\n* handleLangChange\n* utils.isZhCN\n* utils.getLocalizedPathname\n\n上面只是跟大家分享**问题定位**的思路，当然不是看看就可以”盲调“啦，哪有辣么厉害，运行调试才是正解！下面开聊**怎么调试和修bug**。\n\n## 怎么调试和修bug\n\n我在Github上看到有个[开发指导](https://github.com/ant-design/ant-design/wiki/Development)文档，上面写着这样可以预览调试：\n\n```\n// Fork and git clone.\n\n$ npm install\n$ npm start\n```\n\n我clone到本地，执行`npm start`后，提示有个npm组件报错，导致编译失败~没办法在线预览和调试。\n\n在这里我遇到两个问题：\n\n1. .jsx文件编译\n2. 运行环境不能在线调试 \n\n遇到事，咱不怕事，见招拆招就okay啦~\n\n1. 把jsx编译成js（或者用babel，具体问题具体分析）\n2. 写好demo后，随便用fis或者webpack在线调试就好了\n\n**针对上面的问题，我的处理方法是，直接把涉及的几个函数串起来，写成demo，想怎么调就怎么调噜~**\n\n```\n<script>\n// 判断当前是否中文版本\nfunction isZhCN(pathname) {\n    return (/-cn\\/?$/.test(pathname));\n}\n\n// 根据当前pathname和isZhCN()返回该跳转的相对路径\nfunction getLocalizedPathname(path, zhCN) {\n    var pathname = path.startsWith('/') ? path : '/' + path;\n\n    if (!zhCN) {\n        // to enUS\n        return (/\\/?index-cn/.test(pathname) ? '/' : pathname.replace('-cn', '')\n    );\n    } else if (pathname === '/') {\n        return '/index-cn';\n    } else if (pathname.endsWith('/')) {\n        return pathname.replace(/\\/$/, '-cn/');\n    }\n        return pathname + '-cn';\n}\n\n// handleLangChange 的简写\n// 由于当前环境不在https://ant.design域下，我是直接访问demo.html\n// 原文中的location.pathname，这里使用硬编码替代\nvar pathname = '/index-cn';\n\nvar result = location.href.replace(\n    location.pathname,\n    getLocalizedPathname(pathname, isZhCN(pathname))\n);\n\n// 输出测试结果\nconsole.log(result);\n</script>\n```\n\n其实这样也属于盲调，纯本地调试，修bug的原理没错，但是没有实时调试，加上我不了解业务逻辑（我以为只有首页有中英版本切换，没考虑到其他入口也有），导致我提交的第一个版本会丢失hash和query，后续我再PR了一版，修复的详细这里就不详述了。\n\n[第一版](https://github.com/ant-design/ant-design/pull/5050) [第二版](https://github.com/YuyingWu/ant-design/commit/9c9c164617ec35d9c30e5518f94661601bcd736b)\n\n## 结语\n\n不懂业务、不了解系统的架构和实现、不懂编程语言、没法实时调试，这些可能会变成我们在问题定位和修复时的拦路虎~但是，不要方，见招拆招，用自己的思路和方式解决 ：）\n","source":"_posts/debug-talk.md","raw":"---\ntitle: 谈谈怎么在不熟悉上下文的情况下debug\ndate: 2017-02-27 21:56:02\ntags: tech\n---\n\n跟大家分享一个最近调bug的故事，在不熟悉架构、业务上下文、编程语言、调试环境等等的情况下，遇到问题时，我们可以怎么解决。简单的来说，路过一个你喜欢的站点，发现页面有bug，想帮忙修，怎么办？\n<!-- more -->\n***\n\n偶然访问了阿里[Ant Design](https://ant.design/)，默认是英文版本，我看右上角有个切换到中文的按钮，就过去一点，咦，跳到错误页了~\n\n![](http://cdn.sinacloud.net/woodysblog/articles/en-to-zh.png)\n\n职业习惯，我在chrome和Safari都测了一下，稳定浮现，bug~\n恰好这个站点是开源的，那就去github fork一下，把这个bug修了吧。\n\n原href：https://ant.design/\n正确跳转href：https://ant.design/index-cn\nChrome下跳转到：https://ant.design/index-cn/ant.design/\nSafari下跳转到：https://index-cn/ant.design/\n\n## 问题定位\n\n咋眼一看，我以为是程序猿或者PM在配置时写错了，于是我打开console，检查这个按钮的元素，看有什么关键字（url、data-属性、id、特别的classname等）\n\n![](http://cdn.sinacloud.net/woodysblog/articles/antd-button.png)\n\n没有链接，看来是js控制的，那就去翻源码吧~问题来了，怎么翻呢？\n\n从上图看，这个`button`没什么特色，不过，仔细一看，有个不太普通的类名，`ant-btn-ghost`，那我们就去模板那搜`ghost`吧！\n\n![](http://cdn.sinacloud.net/woodysblog/articles/antd-folder.png)\n\n从目录可以看出来，整个源是非常庞大的，除了官网页面、文档，还有Ant Design UI库的源码。凭”直觉“，到`site`文件夹搜`ghost`，因为那么多文件夹，就site比较像是放官网的。\n\nBingo!!!\n\n![](http://cdn.sinacloud.net/woodysblog/articles/antd-search.png)\n\n### button\n\n看看`button`相关的代码，虽然我不太懂React.js，但不难看出来，`button`的`click`事件处理函数`handleLangChange`就是我们要找的逻辑~\n\n```\n<Button className=\"lang\" type=\"ghost\" size=\"small\" onClick={this.handleLangChange} key=\"lang\">\n    <FormattedMessage id=\"app.header.lang\" />\n</Button>\n```\n### handleLangChange\n接下来去看`handleLangChange`函数，幸好代码不是很多，简单扫一眼~\n\n```\n  handleLangChange = () => {\n    const pathname = this.props.location.pathname;\n\n    if (utils.isLocalStorageNameSupported()) {\n      localStorage.setItem('locale', utils.isZhCN(pathname) ? 'en-US' : 'zh-CN');\n    }\n    location.href = location.href.replace(\n      location.pathname,\n      utils.getLocalizedPathname(pathname, !utils.isZhCN(pathname)),\n    );\n  }\n```\n\n第一句，变量声明，忽略；\n第二段，localstorage，忽略；\n第三段，replace，参数1是当前地址，参数2那段的`utils.getLocalizedPathname`是什么意思呢？\n\n### getLocalizedPathname\n在`site`文件夹再搜搜`getLocalizedPathname`，在`utils.jsx`找到了。\n\n```\nexport function getLocalizedPathname(path, zhCN) {\n  const pathname = path.startsWith('/') ? path : `/${path}`;\n\n  if (!zhCN) { // to enUS\n    return /\\/?index-cn/.test(pathname) ? '/' : pathname.replace('-cn', '');\n  } else if (pathname === '/') {\n    return '/index-cn';\n  } else if (pathname.endsWith('/')) {\n    return pathname.replace(/\\/$/, '-cn/');\n  }\n  return `${pathname}-cn`;\n}\n```\n\n我们再轻轻扫一眼，可以发现函数`getLocalizedPathname`的作用是根据当前路径`path`与是否中文版本`zhCN`，返回对应path值。\n\n经过上面的排查，我们基本定位切换中文的功能，涉及3个函数：\n\n* handleLangChange\n* utils.isZhCN\n* utils.getLocalizedPathname\n\n上面只是跟大家分享**问题定位**的思路，当然不是看看就可以”盲调“啦，哪有辣么厉害，运行调试才是正解！下面开聊**怎么调试和修bug**。\n\n## 怎么调试和修bug\n\n我在Github上看到有个[开发指导](https://github.com/ant-design/ant-design/wiki/Development)文档，上面写着这样可以预览调试：\n\n```\n// Fork and git clone.\n\n$ npm install\n$ npm start\n```\n\n我clone到本地，执行`npm start`后，提示有个npm组件报错，导致编译失败~没办法在线预览和调试。\n\n在这里我遇到两个问题：\n\n1. .jsx文件编译\n2. 运行环境不能在线调试 \n\n遇到事，咱不怕事，见招拆招就okay啦~\n\n1. 把jsx编译成js（或者用babel，具体问题具体分析）\n2. 写好demo后，随便用fis或者webpack在线调试就好了\n\n**针对上面的问题，我的处理方法是，直接把涉及的几个函数串起来，写成demo，想怎么调就怎么调噜~**\n\n```\n<script>\n// 判断当前是否中文版本\nfunction isZhCN(pathname) {\n    return (/-cn\\/?$/.test(pathname));\n}\n\n// 根据当前pathname和isZhCN()返回该跳转的相对路径\nfunction getLocalizedPathname(path, zhCN) {\n    var pathname = path.startsWith('/') ? path : '/' + path;\n\n    if (!zhCN) {\n        // to enUS\n        return (/\\/?index-cn/.test(pathname) ? '/' : pathname.replace('-cn', '')\n    );\n    } else if (pathname === '/') {\n        return '/index-cn';\n    } else if (pathname.endsWith('/')) {\n        return pathname.replace(/\\/$/, '-cn/');\n    }\n        return pathname + '-cn';\n}\n\n// handleLangChange 的简写\n// 由于当前环境不在https://ant.design域下，我是直接访问demo.html\n// 原文中的location.pathname，这里使用硬编码替代\nvar pathname = '/index-cn';\n\nvar result = location.href.replace(\n    location.pathname,\n    getLocalizedPathname(pathname, isZhCN(pathname))\n);\n\n// 输出测试结果\nconsole.log(result);\n</script>\n```\n\n其实这样也属于盲调，纯本地调试，修bug的原理没错，但是没有实时调试，加上我不了解业务逻辑（我以为只有首页有中英版本切换，没考虑到其他入口也有），导致我提交的第一个版本会丢失hash和query，后续我再PR了一版，修复的详细这里就不详述了。\n\n[第一版](https://github.com/ant-design/ant-design/pull/5050) [第二版](https://github.com/YuyingWu/ant-design/commit/9c9c164617ec35d9c30e5518f94661601bcd736b)\n\n## 结语\n\n不懂业务、不了解系统的架构和实现、不懂编程语言、没法实时调试，这些可能会变成我们在问题定位和修复时的拦路虎~但是，不要方，见招拆招，用自己的思路和方式解决 ：）\n","slug":"debug-talk","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8f000zzvr3ads2gn4v","content":"<p>跟大家分享一个最近调bug的故事，在不熟悉架构、业务上下文、编程语言、调试环境等等的情况下，遇到问题时，我们可以怎么解决。简单的来说，路过一个你喜欢的站点，发现页面有bug，想帮忙修，怎么办？<br><a id=\"more\"></a></p>\n<hr>\n<p>偶然访问了阿里<a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener\">Ant Design</a>，默认是英文版本，我看右上角有个切换到中文的按钮，就过去一点，咦，跳到错误页了~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/en-to-zh.png\" alt=\"\"></p>\n<p>职业习惯，我在chrome和Safari都测了一下，稳定浮现，bug~<br>恰好这个站点是开源的，那就去github fork一下，把这个bug修了吧。</p>\n<p>原href：<a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener\">https://ant.design/</a><br>正确跳转href：<a href=\"https://ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/index-cn</a><br>Chrome下跳转到：<a href=\"https://ant.design/index-cn/ant.design/\" target=\"_blank\" rel=\"noopener\">https://ant.design/index-cn/ant.design/</a><br>Safari下跳转到：<a href=\"https://index-cn/ant.design/\" target=\"_blank\" rel=\"noopener\">https://index-cn/ant.design/</a></p>\n<h2 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h2><p>咋眼一看，我以为是程序猿或者PM在配置时写错了，于是我打开console，检查这个按钮的元素，看有什么关键字（url、data-属性、id、特别的classname等）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/antd-button.png\" alt=\"\"></p>\n<p>没有链接，看来是js控制的，那就去翻源码吧~问题来了，怎么翻呢？</p>\n<p>从上图看，这个<code>button</code>没什么特色，不过，仔细一看，有个不太普通的类名，<code>ant-btn-ghost</code>，那我们就去模板那搜<code>ghost</code>吧！</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/antd-folder.png\" alt=\"\"></p>\n<p>从目录可以看出来，整个源是非常庞大的，除了官网页面、文档，还有Ant Design UI库的源码。凭”直觉“，到<code>site</code>文件夹搜<code>ghost</code>，因为那么多文件夹，就site比较像是放官网的。</p>\n<p>Bingo!!!</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/antd-search.png\" alt=\"\"></p>\n<h3 id=\"button\"><a href=\"#button\" class=\"headerlink\" title=\"button\"></a>button</h3><p>看看<code>button</code>相关的代码，虽然我不太懂React.js，但不难看出来，<code>button</code>的<code>click</code>事件处理函数<code>handleLangChange</code>就是我们要找的逻辑~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button className=<span class=\"string\">\"lang\"</span> type=<span class=\"string\">\"ghost\"</span> size=<span class=\"string\">\"small\"</span> onClick=&#123;<span class=\"keyword\">this</span>.handleLangChange&#125; key=<span class=\"string\">\"lang\"</span>&gt;</span><br><span class=\"line\">    &lt;FormattedMessage id=<span class=\"string\">\"app.header.lang\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"handleLangChange\"><a href=\"#handleLangChange\" class=\"headerlink\" title=\"handleLangChange\"></a>handleLangChange</h3><p>接下来去看<code>handleLangChange</code>函数，幸好代码不是很多，简单扫一眼~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleLangChange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = <span class=\"keyword\">this</span>.props.location.pathname;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (utils.isLocalStorageNameSupported()) &#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'locale'</span>, utils.isZhCN(pathname) ? <span class=\"string\">'en-US'</span> : <span class=\"string\">'zh-CN'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  location.href = location.href.replace(</span><br><span class=\"line\">    location.pathname,</span><br><span class=\"line\">    utils.getLocalizedPathname(pathname, !utils.isZhCN(pathname)),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一句，变量声明，忽略；<br>第二段，localstorage，忽略；<br>第三段，replace，参数1是当前地址，参数2那段的<code>utils.getLocalizedPathname</code>是什么意思呢？</p>\n<h3 id=\"getLocalizedPathname\"><a href=\"#getLocalizedPathname\" class=\"headerlink\" title=\"getLocalizedPathname\"></a>getLocalizedPathname</h3><p>在<code>site</code>文件夹再搜搜<code>getLocalizedPathname</code>，在<code>utils.jsx</code>找到了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocalizedPathname</span>(<span class=\"params\">path, zhCN</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = path.startsWith(<span class=\"string\">'/'</span>) ? path : <span class=\"string\">`/<span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zhCN) &#123; <span class=\"comment\">// to enUS</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/\\/?index-cn/</span>.test(pathname) ? <span class=\"string\">'/'</span> : pathname.replace(<span class=\"string\">'-cn'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'/index-cn'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname.endsWith(<span class=\"string\">'/'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pathname.replace(<span class=\"regexp\">/\\/$/</span>, <span class=\"string\">'-cn/'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;pathname&#125;</span>-cn`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再轻轻扫一眼，可以发现函数<code>getLocalizedPathname</code>的作用是根据当前路径<code>path</code>与是否中文版本<code>zhCN</code>，返回对应path值。</p>\n<p>经过上面的排查，我们基本定位切换中文的功能，涉及3个函数：</p>\n<ul>\n<li>handleLangChange</li>\n<li>utils.isZhCN</li>\n<li>utils.getLocalizedPathname</li>\n</ul>\n<p>上面只是跟大家分享<strong>问题定位</strong>的思路，当然不是看看就可以”盲调“啦，哪有辣么厉害，运行调试才是正解！下面开聊<strong>怎么调试和修bug</strong>。</p>\n<h2 id=\"怎么调试和修bug\"><a href=\"#怎么调试和修bug\" class=\"headerlink\" title=\"怎么调试和修bug\"></a>怎么调试和修bug</h2><p>我在Github上看到有个<a href=\"https://github.com/ant-design/ant-design/wiki/Development\" target=\"_blank\" rel=\"noopener\">开发指导</a>文档，上面写着这样可以预览调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Fork and git clone.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm start</span></span><br></pre></td></tr></table></figure>\n<p>我clone到本地，执行<code>npm start</code>后，提示有个npm组件报错，导致编译失败~没办法在线预览和调试。</p>\n<p>在这里我遇到两个问题：</p>\n<ol>\n<li>.jsx文件编译</li>\n<li>运行环境不能在线调试 </li>\n</ol>\n<p>遇到事，咱不怕事，见招拆招就okay啦~</p>\n<ol>\n<li>把jsx编译成js（或者用babel，具体问题具体分析）</li>\n<li>写好demo后，随便用fis或者webpack在线调试就好了</li>\n</ol>\n<p><strong>针对上面的问题，我的处理方法是，直接把涉及的几个函数串起来，写成demo，想怎么调就怎么调噜~</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 判断当前是否中文版本</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isZhCN</span><span class=\"params\">(pathname)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"regexp\">/-cn\\/?$/</span>.test(pathname));</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 根据当前pathname和isZhCN()返回该跳转的相对路径</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocalizedPathname</span><span class=\"params\">(path, zhCN)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> pathname = path.startsWith(<span class=\"string\">'/'</span>) ? path : <span class=\"string\">'/'</span> + path;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">if</span> (!zhCN) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// to enUS</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> (<span class=\"regexp\">/\\/?index-cn/</span>.test(pathname) ? <span class=\"string\">'/'</span> : pathname.replace(<span class=\"string\">'-cn'</span>, <span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"string\">'/index-cn'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname.endsWith(<span class=\"string\">'/'</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> pathname.replace(<span class=\"regexp\">/\\/$/</span>, <span class=\"string\">'-cn/'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> pathname + <span class=\"string\">'-cn'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// handleLangChange 的简写</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 由于当前环境不在https://ant.design域下，我是直接访问demo.html</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 原文中的location.pathname，这里使用硬编码替代</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> pathname = <span class=\"string\">'/index-cn'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> result = location.href.replace(</span></span><br><span class=\"line\"><span class=\"undefined\">    location.pathname,</span></span><br><span class=\"line\"><span class=\"undefined\">    getLocalizedPathname(pathname, isZhCN(pathname))</span></span><br><span class=\"line\"><span class=\"undefined\">);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 输出测试结果</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log(result);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实这样也属于盲调，纯本地调试，修bug的原理没错，但是没有实时调试，加上我不了解业务逻辑（我以为只有首页有中英版本切换，没考虑到其他入口也有），导致我提交的第一个版本会丢失hash和query，后续我再PR了一版，修复的详细这里就不详述了。</p>\n<p><a href=\"https://github.com/ant-design/ant-design/pull/5050\" target=\"_blank\" rel=\"noopener\">第一版</a> <a href=\"https://github.com/YuyingWu/ant-design/commit/9c9c164617ec35d9c30e5518f94661601bcd736b\" target=\"_blank\" rel=\"noopener\">第二版</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>不懂业务、不了解系统的架构和实现、不懂编程语言、没法实时调试，这些可能会变成我们在问题定位和修复时的拦路虎~但是，不要方，见招拆招，用自己的思路和方式解决 ：）</p>\n","site":{"data":{}},"excerpt":"<p>跟大家分享一个最近调bug的故事，在不熟悉架构、业务上下文、编程语言、调试环境等等的情况下，遇到问题时，我们可以怎么解决。简单的来说，路过一个你喜欢的站点，发现页面有bug，想帮忙修，怎么办？<br>","more":"</p>\n<hr>\n<p>偶然访问了阿里<a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener\">Ant Design</a>，默认是英文版本，我看右上角有个切换到中文的按钮，就过去一点，咦，跳到错误页了~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/en-to-zh.png\" alt=\"\"></p>\n<p>职业习惯，我在chrome和Safari都测了一下，稳定浮现，bug~<br>恰好这个站点是开源的，那就去github fork一下，把这个bug修了吧。</p>\n<p>原href：<a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener\">https://ant.design/</a><br>正确跳转href：<a href=\"https://ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/index-cn</a><br>Chrome下跳转到：<a href=\"https://ant.design/index-cn/ant.design/\" target=\"_blank\" rel=\"noopener\">https://ant.design/index-cn/ant.design/</a><br>Safari下跳转到：<a href=\"https://index-cn/ant.design/\" target=\"_blank\" rel=\"noopener\">https://index-cn/ant.design/</a></p>\n<h2 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h2><p>咋眼一看，我以为是程序猿或者PM在配置时写错了，于是我打开console，检查这个按钮的元素，看有什么关键字（url、data-属性、id、特别的classname等）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/antd-button.png\" alt=\"\"></p>\n<p>没有链接，看来是js控制的，那就去翻源码吧~问题来了，怎么翻呢？</p>\n<p>从上图看，这个<code>button</code>没什么特色，不过，仔细一看，有个不太普通的类名，<code>ant-btn-ghost</code>，那我们就去模板那搜<code>ghost</code>吧！</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/antd-folder.png\" alt=\"\"></p>\n<p>从目录可以看出来，整个源是非常庞大的，除了官网页面、文档，还有Ant Design UI库的源码。凭”直觉“，到<code>site</code>文件夹搜<code>ghost</code>，因为那么多文件夹，就site比较像是放官网的。</p>\n<p>Bingo!!!</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/antd-search.png\" alt=\"\"></p>\n<h3 id=\"button\"><a href=\"#button\" class=\"headerlink\" title=\"button\"></a>button</h3><p>看看<code>button</code>相关的代码，虽然我不太懂React.js，但不难看出来，<code>button</code>的<code>click</code>事件处理函数<code>handleLangChange</code>就是我们要找的逻辑~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button className=<span class=\"string\">\"lang\"</span> type=<span class=\"string\">\"ghost\"</span> size=<span class=\"string\">\"small\"</span> onClick=&#123;<span class=\"keyword\">this</span>.handleLangChange&#125; key=<span class=\"string\">\"lang\"</span>&gt;</span><br><span class=\"line\">    &lt;FormattedMessage id=<span class=\"string\">\"app.header.lang\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"handleLangChange\"><a href=\"#handleLangChange\" class=\"headerlink\" title=\"handleLangChange\"></a>handleLangChange</h3><p>接下来去看<code>handleLangChange</code>函数，幸好代码不是很多，简单扫一眼~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleLangChange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = <span class=\"keyword\">this</span>.props.location.pathname;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (utils.isLocalStorageNameSupported()) &#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'locale'</span>, utils.isZhCN(pathname) ? <span class=\"string\">'en-US'</span> : <span class=\"string\">'zh-CN'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  location.href = location.href.replace(</span><br><span class=\"line\">    location.pathname,</span><br><span class=\"line\">    utils.getLocalizedPathname(pathname, !utils.isZhCN(pathname)),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一句，变量声明，忽略；<br>第二段，localstorage，忽略；<br>第三段，replace，参数1是当前地址，参数2那段的<code>utils.getLocalizedPathname</code>是什么意思呢？</p>\n<h3 id=\"getLocalizedPathname\"><a href=\"#getLocalizedPathname\" class=\"headerlink\" title=\"getLocalizedPathname\"></a>getLocalizedPathname</h3><p>在<code>site</code>文件夹再搜搜<code>getLocalizedPathname</code>，在<code>utils.jsx</code>找到了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocalizedPathname</span>(<span class=\"params\">path, zhCN</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = path.startsWith(<span class=\"string\">'/'</span>) ? path : <span class=\"string\">`/<span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zhCN) &#123; <span class=\"comment\">// to enUS</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/\\/?index-cn/</span>.test(pathname) ? <span class=\"string\">'/'</span> : pathname.replace(<span class=\"string\">'-cn'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'/index-cn'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname.endsWith(<span class=\"string\">'/'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pathname.replace(<span class=\"regexp\">/\\/$/</span>, <span class=\"string\">'-cn/'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;pathname&#125;</span>-cn`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再轻轻扫一眼，可以发现函数<code>getLocalizedPathname</code>的作用是根据当前路径<code>path</code>与是否中文版本<code>zhCN</code>，返回对应path值。</p>\n<p>经过上面的排查，我们基本定位切换中文的功能，涉及3个函数：</p>\n<ul>\n<li>handleLangChange</li>\n<li>utils.isZhCN</li>\n<li>utils.getLocalizedPathname</li>\n</ul>\n<p>上面只是跟大家分享<strong>问题定位</strong>的思路，当然不是看看就可以”盲调“啦，哪有辣么厉害，运行调试才是正解！下面开聊<strong>怎么调试和修bug</strong>。</p>\n<h2 id=\"怎么调试和修bug\"><a href=\"#怎么调试和修bug\" class=\"headerlink\" title=\"怎么调试和修bug\"></a>怎么调试和修bug</h2><p>我在Github上看到有个<a href=\"https://github.com/ant-design/ant-design/wiki/Development\" target=\"_blank\" rel=\"noopener\">开发指导</a>文档，上面写着这样可以预览调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Fork and git clone.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm start</span></span><br></pre></td></tr></table></figure>\n<p>我clone到本地，执行<code>npm start</code>后，提示有个npm组件报错，导致编译失败~没办法在线预览和调试。</p>\n<p>在这里我遇到两个问题：</p>\n<ol>\n<li>.jsx文件编译</li>\n<li>运行环境不能在线调试 </li>\n</ol>\n<p>遇到事，咱不怕事，见招拆招就okay啦~</p>\n<ol>\n<li>把jsx编译成js（或者用babel，具体问题具体分析）</li>\n<li>写好demo后，随便用fis或者webpack在线调试就好了</li>\n</ol>\n<p><strong>针对上面的问题，我的处理方法是，直接把涉及的几个函数串起来，写成demo，想怎么调就怎么调噜~</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 判断当前是否中文版本</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isZhCN</span><span class=\"params\">(pathname)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"regexp\">/-cn\\/?$/</span>.test(pathname));</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 根据当前pathname和isZhCN()返回该跳转的相对路径</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocalizedPathname</span><span class=\"params\">(path, zhCN)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> pathname = path.startsWith(<span class=\"string\">'/'</span>) ? path : <span class=\"string\">'/'</span> + path;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">if</span> (!zhCN) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// to enUS</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> (<span class=\"regexp\">/\\/?index-cn/</span>.test(pathname) ? <span class=\"string\">'/'</span> : pathname.replace(<span class=\"string\">'-cn'</span>, <span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"string\">'/index-cn'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pathname.endsWith(<span class=\"string\">'/'</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> pathname.replace(<span class=\"regexp\">/\\/$/</span>, <span class=\"string\">'-cn/'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> pathname + <span class=\"string\">'-cn'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// handleLangChange 的简写</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 由于当前环境不在https://ant.design域下，我是直接访问demo.html</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 原文中的location.pathname，这里使用硬编码替代</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> pathname = <span class=\"string\">'/index-cn'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> result = location.href.replace(</span></span><br><span class=\"line\"><span class=\"undefined\">    location.pathname,</span></span><br><span class=\"line\"><span class=\"undefined\">    getLocalizedPathname(pathname, isZhCN(pathname))</span></span><br><span class=\"line\"><span class=\"undefined\">);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// 输出测试结果</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log(result);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实这样也属于盲调，纯本地调试，修bug的原理没错，但是没有实时调试，加上我不了解业务逻辑（我以为只有首页有中英版本切换，没考虑到其他入口也有），导致我提交的第一个版本会丢失hash和query，后续我再PR了一版，修复的详细这里就不详述了。</p>\n<p><a href=\"https://github.com/ant-design/ant-design/pull/5050\" target=\"_blank\" rel=\"noopener\">第一版</a> <a href=\"https://github.com/YuyingWu/ant-design/commit/9c9c164617ec35d9c30e5518f94661601bcd736b\" target=\"_blank\" rel=\"noopener\">第二版</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>不懂业务、不了解系统的架构和实现、不懂编程语言、没法实时调试，这些可能会变成我们在问题定位和修复时的拦路虎~但是，不要方，见招拆招，用自己的思路和方式解决 ：）</p>"},{"title":"当我在欧洲艺术馆遇到馆长","date":"2017-10-05T12:15:45.000Z","type":"photo","cover":"http://sinacloud.net/woodysblog/eu-gallery/gallery-3.jpg","_content":"\n<figure>\n<img alt=\"poster\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-4.jpg\" />\n<figcaption>poster</figcaption>\n</figure>\n\n原定今天的计划是去杭州图书馆借几本书，顺便去看个展，就是这个号称“不出杭州看遍欧洲艺术品”的展览哈，我之前也不太了解欧洲历史文化，纯粹去凑个热闹。\n\n先来看镇店之宝之一 —— 《戴面纱的女人》by Giuseppe Croff，面纱做得特别薄特别真，女人闭眼的神情也刻画得惟妙惟肖。\n\n<figure>\n<img alt=\"戴面纱的女人\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-6.jpg\" />\n<figcaption>戴面纱的女人</figcaption>\n</figure>\n\n看这个汉白玉《爷爷的喜悦》by DonatoBarcaglia，近距离看像真的一样，身上的细节特别清晰，爷爷老去的皮肤和身上的青筋，以及孙子的baby fat，栩栩如生。\n\n<figure>\n<img alt=\"爷爷的喜悦\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-2.jpg\" />\n<figcaption>爷爷的喜悦</figcaption>\n</figure>\n\n这幅《哥伦布向天主教君主们敬献新大陆的宝藏》by Emanuel Gottlieb Leutze，超大一幅油画，配上一个无敌浮夸的画框，据闻每一角代表的是一块大陆，最后连在一起，象征和平。馆长说这幅画华盛顿美术馆馆长问她要了很久，希望结束这场展览之后，能转让给他，因为哥伦布是美洲大陆的英雄，这幅画在DC最合适了。\n\n<figure>\n<img alt=\"哥伦布向天主教君主们敬献新大陆的宝藏\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-3.jpg\" />\n<figcaption>哥伦布向天主教君主们敬献新大陆的宝藏</figcaption>\n</figure>\n\n这位小姐姐太美了有木有，不仅仅是身上的衣服，如丝般顺滑还加透视，看她的眼睛，画的特别有神，无论走到哪，都感觉她在看着你~\n\n<figure>\n<img alt=\"漂亮的小姐姐\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-5.jpg\" />\n<figcaption>漂亮的小姐姐</figcaption>\n</figure>\n\n万万没想到，非常有收获，不仅仅是了解了这些艺术品背后千回百转的故事，更多的是折服于馆长的个人魅力和情怀。\n\n馆长的名字叫**吴静**，法籍华裔，是一个古董钟表鉴定师，也是一个收藏家。欧洲艺术馆从想法到落地实施，选场地、挑藏品、布展，她只用了一年左右的时间。非常了不起有木有，今天很幸运，刚好碰到她在现场解说，艺术品背后的故事很精彩，人特别亲切和有感染力，更重要的是，她在以自己的方式去做公益，给这个世界给将来留下些什么，就是这个艺术馆及其背后的精神。\n\n下面是我在现场听到的忍不住鼓掌几个观点，分享给大家：\n\n> 我每天只睡4个小时，没有电话和微信的消息打扰，安静地鉴定古董钟表。很多朋友问我，为什么还要那么努力地工作，我已经不需要了。上天让我来到这个世界，是有任务的，我希望看到自己更多的可能性。\n\n想象一下，一个以个人名义开了个艺术馆的馆长，每一件艺术品都价值不菲，肯定是生活无忧。而每天只睡4个小时，她认为，睡眠不是算时间的，更重要的是大脑的休息，只要你觉得精神饱满，睡够了，就起来，不要在乎睡了多少个小时。也听得出来她对自己在做的事情（古董钟表鉴定师和收藏）的热爱，她微信封面和头像就特别帅气~\n\n<figure>\n<img alt=\"古董钟表鉴定师\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/IMG_7470.jpg\" />\n<figcaption>古董钟表鉴定师</figcaption>\n</figure>\n\n> 生前，为死后做事\n\n解说时呀，有不少市民问起，为什么要搞这个展览？\n\n吴静馆长说，生前，为死后做事。她的回答，真心让我觉得敬佩，特别圈粉。\n\n做公益，直接捐钱是最简单的方式，钱捐了然后被花光了，对个人的生活、发展或者对家庭、抑或对这个社会，可能就没有然后了。\n\n而这个公益欧洲艺术馆，正是她对公益的理解和所付诸的行动，从idea到action，花了一年的时间，收集的这些展品、展品从法国到中国的运输（在海上漂了三个多月）、场馆的装修（罗浮宫的设计团队），到志愿者的招募（自己也会下场做解说员），再到将来的一些跟国外合作的艺术program/课程。\n\n可以看得出来，是个大工程，工作量也非常庞大，令我们最惊讶的是，这个项目落地中国会遇到很多的难处，目前是没有得到政府的补贴和支持的，馆长自费开的一个艺术馆（也有越来越多受馆长的感染参与进来的民间朋友），进场免费，只是为了控制人数，需要提前预约。\n\n馆长的想法简单而美好，希望这个公益艺术馆能把欧洲文化带到中国来，让市民们不用出国，就能看到这些艺术品的真品和感受到西方艺术文化。希望美院的学生，不再需要对着那些千篇一律从模子出来的、没有细节的雕塑写生，而是可以来杭州的欧洲艺术馆，坐在这些有几百年历史的汉白玉雕塑下，随便画。（馆里的艺术品会有绳子起简单的隔离作用，但大多都没有玻璃柜子，展品跟你只有一步之遥）\n\n以上，就是我所看到的，一个充满正能量的女子，用自己的方式做公益，希望自己百年之后，在做的这件事情对这个世界带来一些不一样和价值。希望在国内推动欧洲艺术的发展，也是对祖国、对中法文化交流的回馈。真的让我觉得非常鼓舞和感动。\n\n在过程中，有幸跟馆长有对话，关于数字化图书馆的。\n\n`小伍` 吴静女士，您刚提到希望更多人知道这里，以及想在国内普及欧洲艺术，但目前这个馆只在杭州有，您有考虑过把艺术馆线上化吗？譬如百度百科的数字博物馆。\n`馆长` 嗯，当然是有的，知道的人肯定越多越好。可惜我从小在法国长大，这个项目在中国落地很难，虽然我带来了很多的收藏品，这些收藏品都很有价值，可惜我太不认识这方面的朋友。\n`小伍` 刚好，我认识了解这个百科数字图书馆的同学，我可以介绍你们认识，看能不能达成合作，把这个公益艺术馆搬到线上，让更多的国民知道，传播效果也许会更好。\n`馆长` 太好了，我们很需要，先谢谢你，回头我让助理跟你留下联系信息。\n\n万万没想到，解说结束之后，我加了吴静女士的微信，感觉超亲切，刷了一遍她的朋友圈，再次被圈粉，超正能量，很多事情亲力亲为，感觉看到了另一个世界，真是应验了那句话 —— \n\n> 比你有才华、比你有钱、比你美的人，还比你拼，你还有什么理由不努力！\n\n真心希望有一天能看到欧洲艺术馆在百科的数字图书馆出现，推广给更多人民群众，独乐乐不如众乐乐嘛，那我这个撮合的媒人也会觉得功德无量啦，哈哈，也感谢我女神**阮瑜**把一个这么棒的产品带到这个世上，和百科美女**小文子**给我提供的帮助。\n\n互联网产品推动传统行业的进步~ 我在工作过程中，无论是百度还是阿里，遇到过很多这样有情怀对社会有贡献的产品，不管我有没有参与其中，这样的好东西，我会不遗余力的在合适的场景推荐给合适的人。\n\n最后，据我所知，欧洲艺术馆**紧缺志愿者**，在杭州的同学们可以联系一下，艺术馆会开3年，一直都会招募志愿者的，在这也帮忙打个广告，希望如果周边有朋友有意愿的话，赶紧联系一下~ \n\n其实尤其对于美院的学生，这样的机会非常难得和珍贵，如果你是美院学生，又或者是辅导员，可以合作个项目啥的，一方面解决馆里缺志愿者的问题，另一方面可以近距离的接触著名收藏家以及她的珍藏艺术品，双赢~\n\n**那么好的欧洲艺术馆，在杭的朋友，怎么能不去捧场呢！？**\n\n此处应该有艺术馆的相关信息：\n\n电话：15988484200\n邮箱：eupart@163.com\n地址：浙江省杭州市江干区　解放东路58号　杭州图书馆地下负一层\n\n欧洲艺术馆的公众号（可以在上面预约参观）\n\n<figure>\n<img alt=\"欧洲艺术馆公众号\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/qrcode.jpg\" />\n<figcaption>欧洲艺术馆公众号</figcaption>\n</figure>\n\n最后的最后，楼主丧心病狂的想发一则招聘广告：\n\n上面有提到互联网推动传统行业的进步，其实阿里对社会也有非常多的贡献，其中我所在的团队CBU，就是这么个有情怀有理想有贡献的团队，我们的目标是 ——  让世界没有难做的生意。\n\n总而言之，有理想有情怀有钱有面儿有我这么赞的同事，**招2年或以上经验的靠谱前端**，欢迎自荐或推荐朋友，很急，在线等！！！暂时没想法也欢迎来撩~\n\n花名：姬无\nEMAIL：jiwu.wyy@alibaba-inc.com","source":"_posts/eu-gallery.md","raw":"---\ntitle: 当我在欧洲艺术馆遇到馆长\ntags:\n  - life\ndate: 2017-10-05 20:15:45\ntype: photo\ncover: http://sinacloud.net/woodysblog/eu-gallery/gallery-3.jpg\n---\n\n<figure>\n<img alt=\"poster\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-4.jpg\" />\n<figcaption>poster</figcaption>\n</figure>\n\n原定今天的计划是去杭州图书馆借几本书，顺便去看个展，就是这个号称“不出杭州看遍欧洲艺术品”的展览哈，我之前也不太了解欧洲历史文化，纯粹去凑个热闹。\n\n先来看镇店之宝之一 —— 《戴面纱的女人》by Giuseppe Croff，面纱做得特别薄特别真，女人闭眼的神情也刻画得惟妙惟肖。\n\n<figure>\n<img alt=\"戴面纱的女人\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-6.jpg\" />\n<figcaption>戴面纱的女人</figcaption>\n</figure>\n\n看这个汉白玉《爷爷的喜悦》by DonatoBarcaglia，近距离看像真的一样，身上的细节特别清晰，爷爷老去的皮肤和身上的青筋，以及孙子的baby fat，栩栩如生。\n\n<figure>\n<img alt=\"爷爷的喜悦\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-2.jpg\" />\n<figcaption>爷爷的喜悦</figcaption>\n</figure>\n\n这幅《哥伦布向天主教君主们敬献新大陆的宝藏》by Emanuel Gottlieb Leutze，超大一幅油画，配上一个无敌浮夸的画框，据闻每一角代表的是一块大陆，最后连在一起，象征和平。馆长说这幅画华盛顿美术馆馆长问她要了很久，希望结束这场展览之后，能转让给他，因为哥伦布是美洲大陆的英雄，这幅画在DC最合适了。\n\n<figure>\n<img alt=\"哥伦布向天主教君主们敬献新大陆的宝藏\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-3.jpg\" />\n<figcaption>哥伦布向天主教君主们敬献新大陆的宝藏</figcaption>\n</figure>\n\n这位小姐姐太美了有木有，不仅仅是身上的衣服，如丝般顺滑还加透视，看她的眼睛，画的特别有神，无论走到哪，都感觉她在看着你~\n\n<figure>\n<img alt=\"漂亮的小姐姐\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-5.jpg\" />\n<figcaption>漂亮的小姐姐</figcaption>\n</figure>\n\n万万没想到，非常有收获，不仅仅是了解了这些艺术品背后千回百转的故事，更多的是折服于馆长的个人魅力和情怀。\n\n馆长的名字叫**吴静**，法籍华裔，是一个古董钟表鉴定师，也是一个收藏家。欧洲艺术馆从想法到落地实施，选场地、挑藏品、布展，她只用了一年左右的时间。非常了不起有木有，今天很幸运，刚好碰到她在现场解说，艺术品背后的故事很精彩，人特别亲切和有感染力，更重要的是，她在以自己的方式去做公益，给这个世界给将来留下些什么，就是这个艺术馆及其背后的精神。\n\n下面是我在现场听到的忍不住鼓掌几个观点，分享给大家：\n\n> 我每天只睡4个小时，没有电话和微信的消息打扰，安静地鉴定古董钟表。很多朋友问我，为什么还要那么努力地工作，我已经不需要了。上天让我来到这个世界，是有任务的，我希望看到自己更多的可能性。\n\n想象一下，一个以个人名义开了个艺术馆的馆长，每一件艺术品都价值不菲，肯定是生活无忧。而每天只睡4个小时，她认为，睡眠不是算时间的，更重要的是大脑的休息，只要你觉得精神饱满，睡够了，就起来，不要在乎睡了多少个小时。也听得出来她对自己在做的事情（古董钟表鉴定师和收藏）的热爱，她微信封面和头像就特别帅气~\n\n<figure>\n<img alt=\"古董钟表鉴定师\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/IMG_7470.jpg\" />\n<figcaption>古董钟表鉴定师</figcaption>\n</figure>\n\n> 生前，为死后做事\n\n解说时呀，有不少市民问起，为什么要搞这个展览？\n\n吴静馆长说，生前，为死后做事。她的回答，真心让我觉得敬佩，特别圈粉。\n\n做公益，直接捐钱是最简单的方式，钱捐了然后被花光了，对个人的生活、发展或者对家庭、抑或对这个社会，可能就没有然后了。\n\n而这个公益欧洲艺术馆，正是她对公益的理解和所付诸的行动，从idea到action，花了一年的时间，收集的这些展品、展品从法国到中国的运输（在海上漂了三个多月）、场馆的装修（罗浮宫的设计团队），到志愿者的招募（自己也会下场做解说员），再到将来的一些跟国外合作的艺术program/课程。\n\n可以看得出来，是个大工程，工作量也非常庞大，令我们最惊讶的是，这个项目落地中国会遇到很多的难处，目前是没有得到政府的补贴和支持的，馆长自费开的一个艺术馆（也有越来越多受馆长的感染参与进来的民间朋友），进场免费，只是为了控制人数，需要提前预约。\n\n馆长的想法简单而美好，希望这个公益艺术馆能把欧洲文化带到中国来，让市民们不用出国，就能看到这些艺术品的真品和感受到西方艺术文化。希望美院的学生，不再需要对着那些千篇一律从模子出来的、没有细节的雕塑写生，而是可以来杭州的欧洲艺术馆，坐在这些有几百年历史的汉白玉雕塑下，随便画。（馆里的艺术品会有绳子起简单的隔离作用，但大多都没有玻璃柜子，展品跟你只有一步之遥）\n\n以上，就是我所看到的，一个充满正能量的女子，用自己的方式做公益，希望自己百年之后，在做的这件事情对这个世界带来一些不一样和价值。希望在国内推动欧洲艺术的发展，也是对祖国、对中法文化交流的回馈。真的让我觉得非常鼓舞和感动。\n\n在过程中，有幸跟馆长有对话，关于数字化图书馆的。\n\n`小伍` 吴静女士，您刚提到希望更多人知道这里，以及想在国内普及欧洲艺术，但目前这个馆只在杭州有，您有考虑过把艺术馆线上化吗？譬如百度百科的数字博物馆。\n`馆长` 嗯，当然是有的，知道的人肯定越多越好。可惜我从小在法国长大，这个项目在中国落地很难，虽然我带来了很多的收藏品，这些收藏品都很有价值，可惜我太不认识这方面的朋友。\n`小伍` 刚好，我认识了解这个百科数字图书馆的同学，我可以介绍你们认识，看能不能达成合作，把这个公益艺术馆搬到线上，让更多的国民知道，传播效果也许会更好。\n`馆长` 太好了，我们很需要，先谢谢你，回头我让助理跟你留下联系信息。\n\n万万没想到，解说结束之后，我加了吴静女士的微信，感觉超亲切，刷了一遍她的朋友圈，再次被圈粉，超正能量，很多事情亲力亲为，感觉看到了另一个世界，真是应验了那句话 —— \n\n> 比你有才华、比你有钱、比你美的人，还比你拼，你还有什么理由不努力！\n\n真心希望有一天能看到欧洲艺术馆在百科的数字图书馆出现，推广给更多人民群众，独乐乐不如众乐乐嘛，那我这个撮合的媒人也会觉得功德无量啦，哈哈，也感谢我女神**阮瑜**把一个这么棒的产品带到这个世上，和百科美女**小文子**给我提供的帮助。\n\n互联网产品推动传统行业的进步~ 我在工作过程中，无论是百度还是阿里，遇到过很多这样有情怀对社会有贡献的产品，不管我有没有参与其中，这样的好东西，我会不遗余力的在合适的场景推荐给合适的人。\n\n最后，据我所知，欧洲艺术馆**紧缺志愿者**，在杭州的同学们可以联系一下，艺术馆会开3年，一直都会招募志愿者的，在这也帮忙打个广告，希望如果周边有朋友有意愿的话，赶紧联系一下~ \n\n其实尤其对于美院的学生，这样的机会非常难得和珍贵，如果你是美院学生，又或者是辅导员，可以合作个项目啥的，一方面解决馆里缺志愿者的问题，另一方面可以近距离的接触著名收藏家以及她的珍藏艺术品，双赢~\n\n**那么好的欧洲艺术馆，在杭的朋友，怎么能不去捧场呢！？**\n\n此处应该有艺术馆的相关信息：\n\n电话：15988484200\n邮箱：eupart@163.com\n地址：浙江省杭州市江干区　解放东路58号　杭州图书馆地下负一层\n\n欧洲艺术馆的公众号（可以在上面预约参观）\n\n<figure>\n<img alt=\"欧洲艺术馆公众号\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/eu-gallery/qrcode.jpg\" />\n<figcaption>欧洲艺术馆公众号</figcaption>\n</figure>\n\n最后的最后，楼主丧心病狂的想发一则招聘广告：\n\n上面有提到互联网推动传统行业的进步，其实阿里对社会也有非常多的贡献，其中我所在的团队CBU，就是这么个有情怀有理想有贡献的团队，我们的目标是 ——  让世界没有难做的生意。\n\n总而言之，有理想有情怀有钱有面儿有我这么赞的同事，**招2年或以上经验的靠谱前端**，欢迎自荐或推荐朋友，很急，在线等！！！暂时没想法也欢迎来撩~\n\n花名：姬无\nEMAIL：jiwu.wyy@alibaba-inc.com","slug":"eu-gallery","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8g0011zvr3sbrdbkzf","content":"<figure><br><img alt=\"poster\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-4.jpg\"><br><figcaption>poster</figcaption><br></figure>\n\n<p>原定今天的计划是去杭州图书馆借几本书，顺便去看个展，就是这个号称“不出杭州看遍欧洲艺术品”的展览哈，我之前也不太了解欧洲历史文化，纯粹去凑个热闹。</p>\n<p>先来看镇店之宝之一 —— 《戴面纱的女人》by Giuseppe Croff，面纱做得特别薄特别真，女人闭眼的神情也刻画得惟妙惟肖。</p>\n<figure><br><img alt=\"戴面纱的女人\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-6.jpg\"><br><figcaption>戴面纱的女人</figcaption><br></figure>\n\n<p>看这个汉白玉《爷爷的喜悦》by DonatoBarcaglia，近距离看像真的一样，身上的细节特别清晰，爷爷老去的皮肤和身上的青筋，以及孙子的baby fat，栩栩如生。</p>\n<figure><br><img alt=\"爷爷的喜悦\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-2.jpg\"><br><figcaption>爷爷的喜悦</figcaption><br></figure>\n\n<p>这幅《哥伦布向天主教君主们敬献新大陆的宝藏》by Emanuel Gottlieb Leutze，超大一幅油画，配上一个无敌浮夸的画框，据闻每一角代表的是一块大陆，最后连在一起，象征和平。馆长说这幅画华盛顿美术馆馆长问她要了很久，希望结束这场展览之后，能转让给他，因为哥伦布是美洲大陆的英雄，这幅画在DC最合适了。</p>\n<figure><br><img alt=\"哥伦布向天主教君主们敬献新大陆的宝藏\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-3.jpg\"><br><figcaption>哥伦布向天主教君主们敬献新大陆的宝藏</figcaption><br></figure>\n\n<p>这位小姐姐太美了有木有，不仅仅是身上的衣服，如丝般顺滑还加透视，看她的眼睛，画的特别有神，无论走到哪，都感觉她在看着你~</p>\n<figure><br><img alt=\"漂亮的小姐姐\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-5.jpg\"><br><figcaption>漂亮的小姐姐</figcaption><br></figure>\n\n<p>万万没想到，非常有收获，不仅仅是了解了这些艺术品背后千回百转的故事，更多的是折服于馆长的个人魅力和情怀。</p>\n<p>馆长的名字叫<strong>吴静</strong>，法籍华裔，是一个古董钟表鉴定师，也是一个收藏家。欧洲艺术馆从想法到落地实施，选场地、挑藏品、布展，她只用了一年左右的时间。非常了不起有木有，今天很幸运，刚好碰到她在现场解说，艺术品背后的故事很精彩，人特别亲切和有感染力，更重要的是，她在以自己的方式去做公益，给这个世界给将来留下些什么，就是这个艺术馆及其背后的精神。</p>\n<p>下面是我在现场听到的忍不住鼓掌几个观点，分享给大家：</p>\n<blockquote>\n<p>我每天只睡4个小时，没有电话和微信的消息打扰，安静地鉴定古董钟表。很多朋友问我，为什么还要那么努力地工作，我已经不需要了。上天让我来到这个世界，是有任务的，我希望看到自己更多的可能性。</p>\n</blockquote>\n<p>想象一下，一个以个人名义开了个艺术馆的馆长，每一件艺术品都价值不菲，肯定是生活无忧。而每天只睡4个小时，她认为，睡眠不是算时间的，更重要的是大脑的休息，只要你觉得精神饱满，睡够了，就起来，不要在乎睡了多少个小时。也听得出来她对自己在做的事情（古董钟表鉴定师和收藏）的热爱，她微信封面和头像就特别帅气~</p>\n<figure><br><img alt=\"古董钟表鉴定师\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/IMG_7470.jpg\"><br><figcaption>古董钟表鉴定师</figcaption><br></figure>\n\n<blockquote>\n<p>生前，为死后做事</p>\n</blockquote>\n<p>解说时呀，有不少市民问起，为什么要搞这个展览？</p>\n<p>吴静馆长说，生前，为死后做事。她的回答，真心让我觉得敬佩，特别圈粉。</p>\n<p>做公益，直接捐钱是最简单的方式，钱捐了然后被花光了，对个人的生活、发展或者对家庭、抑或对这个社会，可能就没有然后了。</p>\n<p>而这个公益欧洲艺术馆，正是她对公益的理解和所付诸的行动，从idea到action，花了一年的时间，收集的这些展品、展品从法国到中国的运输（在海上漂了三个多月）、场馆的装修（罗浮宫的设计团队），到志愿者的招募（自己也会下场做解说员），再到将来的一些跟国外合作的艺术program/课程。</p>\n<p>可以看得出来，是个大工程，工作量也非常庞大，令我们最惊讶的是，这个项目落地中国会遇到很多的难处，目前是没有得到政府的补贴和支持的，馆长自费开的一个艺术馆（也有越来越多受馆长的感染参与进来的民间朋友），进场免费，只是为了控制人数，需要提前预约。</p>\n<p>馆长的想法简单而美好，希望这个公益艺术馆能把欧洲文化带到中国来，让市民们不用出国，就能看到这些艺术品的真品和感受到西方艺术文化。希望美院的学生，不再需要对着那些千篇一律从模子出来的、没有细节的雕塑写生，而是可以来杭州的欧洲艺术馆，坐在这些有几百年历史的汉白玉雕塑下，随便画。（馆里的艺术品会有绳子起简单的隔离作用，但大多都没有玻璃柜子，展品跟你只有一步之遥）</p>\n<p>以上，就是我所看到的，一个充满正能量的女子，用自己的方式做公益，希望自己百年之后，在做的这件事情对这个世界带来一些不一样和价值。希望在国内推动欧洲艺术的发展，也是对祖国、对中法文化交流的回馈。真的让我觉得非常鼓舞和感动。</p>\n<p>在过程中，有幸跟馆长有对话，关于数字化图书馆的。</p>\n<p><code>小伍</code> 吴静女士，您刚提到希望更多人知道这里，以及想在国内普及欧洲艺术，但目前这个馆只在杭州有，您有考虑过把艺术馆线上化吗？譬如百度百科的数字博物馆。<br><code>馆长</code> 嗯，当然是有的，知道的人肯定越多越好。可惜我从小在法国长大，这个项目在中国落地很难，虽然我带来了很多的收藏品，这些收藏品都很有价值，可惜我太不认识这方面的朋友。<br><code>小伍</code> 刚好，我认识了解这个百科数字图书馆的同学，我可以介绍你们认识，看能不能达成合作，把这个公益艺术馆搬到线上，让更多的国民知道，传播效果也许会更好。<br><code>馆长</code> 太好了，我们很需要，先谢谢你，回头我让助理跟你留下联系信息。</p>\n<p>万万没想到，解说结束之后，我加了吴静女士的微信，感觉超亲切，刷了一遍她的朋友圈，再次被圈粉，超正能量，很多事情亲力亲为，感觉看到了另一个世界，真是应验了那句话 —— </p>\n<blockquote>\n<p>比你有才华、比你有钱、比你美的人，还比你拼，你还有什么理由不努力！</p>\n</blockquote>\n<p>真心希望有一天能看到欧洲艺术馆在百科的数字图书馆出现，推广给更多人民群众，独乐乐不如众乐乐嘛，那我这个撮合的媒人也会觉得功德无量啦，哈哈，也感谢我女神<strong>阮瑜</strong>把一个这么棒的产品带到这个世上，和百科美女<strong>小文子</strong>给我提供的帮助。</p>\n<p>互联网产品推动传统行业的进步~ 我在工作过程中，无论是百度还是阿里，遇到过很多这样有情怀对社会有贡献的产品，不管我有没有参与其中，这样的好东西，我会不遗余力的在合适的场景推荐给合适的人。</p>\n<p>最后，据我所知，欧洲艺术馆<strong>紧缺志愿者</strong>，在杭州的同学们可以联系一下，艺术馆会开3年，一直都会招募志愿者的，在这也帮忙打个广告，希望如果周边有朋友有意愿的话，赶紧联系一下~ </p>\n<p>其实尤其对于美院的学生，这样的机会非常难得和珍贵，如果你是美院学生，又或者是辅导员，可以合作个项目啥的，一方面解决馆里缺志愿者的问题，另一方面可以近距离的接触著名收藏家以及她的珍藏艺术品，双赢~</p>\n<p><strong>那么好的欧洲艺术馆，在杭的朋友，怎么能不去捧场呢！？</strong></p>\n<p>此处应该有艺术馆的相关信息：</p>\n<p>电话：15988484200<br>邮箱：<a href=\"mailto:eupart@163.com\" target=\"_blank\" rel=\"noopener\">eupart@163.com</a><br>地址：浙江省杭州市江干区　解放东路58号　杭州图书馆地下负一层</p>\n<p>欧洲艺术馆的公众号（可以在上面预约参观）</p>\n<figure><br><img alt=\"欧洲艺术馆公众号\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/qrcode.jpg\"><br><figcaption>欧洲艺术馆公众号</figcaption><br></figure>\n\n<p>最后的最后，楼主丧心病狂的想发一则招聘广告：</p>\n<p>上面有提到互联网推动传统行业的进步，其实阿里对社会也有非常多的贡献，其中我所在的团队CBU，就是这么个有情怀有理想有贡献的团队，我们的目标是 ——  让世界没有难做的生意。</p>\n<p>总而言之，有理想有情怀有钱有面儿有我这么赞的同事，<strong>招2年或以上经验的靠谱前端</strong>，欢迎自荐或推荐朋友，很急，在线等！！！暂时没想法也欢迎来撩~</p>\n<p>花名：姬无<br>EMAIL：<a href=\"mailto:jiwu.wyy@alibaba-inc.com\" target=\"_blank\" rel=\"noopener\">jiwu.wyy@alibaba-inc.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure><br><img alt=\"poster\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-4.jpg\"><br><figcaption>poster</figcaption><br></figure>\n\n<p>原定今天的计划是去杭州图书馆借几本书，顺便去看个展，就是这个号称“不出杭州看遍欧洲艺术品”的展览哈，我之前也不太了解欧洲历史文化，纯粹去凑个热闹。</p>\n<p>先来看镇店之宝之一 —— 《戴面纱的女人》by Giuseppe Croff，面纱做得特别薄特别真，女人闭眼的神情也刻画得惟妙惟肖。</p>\n<figure><br><img alt=\"戴面纱的女人\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-6.jpg\"><br><figcaption>戴面纱的女人</figcaption><br></figure>\n\n<p>看这个汉白玉《爷爷的喜悦》by DonatoBarcaglia，近距离看像真的一样，身上的细节特别清晰，爷爷老去的皮肤和身上的青筋，以及孙子的baby fat，栩栩如生。</p>\n<figure><br><img alt=\"爷爷的喜悦\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-2.jpg\"><br><figcaption>爷爷的喜悦</figcaption><br></figure>\n\n<p>这幅《哥伦布向天主教君主们敬献新大陆的宝藏》by Emanuel Gottlieb Leutze，超大一幅油画，配上一个无敌浮夸的画框，据闻每一角代表的是一块大陆，最后连在一起，象征和平。馆长说这幅画华盛顿美术馆馆长问她要了很久，希望结束这场展览之后，能转让给他，因为哥伦布是美洲大陆的英雄，这幅画在DC最合适了。</p>\n<figure><br><img alt=\"哥伦布向天主教君主们敬献新大陆的宝藏\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-3.jpg\"><br><figcaption>哥伦布向天主教君主们敬献新大陆的宝藏</figcaption><br></figure>\n\n<p>这位小姐姐太美了有木有，不仅仅是身上的衣服，如丝般顺滑还加透视，看她的眼睛，画的特别有神，无论走到哪，都感觉她在看着你~</p>\n<figure><br><img alt=\"漂亮的小姐姐\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/gallery-5.jpg\"><br><figcaption>漂亮的小姐姐</figcaption><br></figure>\n\n<p>万万没想到，非常有收获，不仅仅是了解了这些艺术品背后千回百转的故事，更多的是折服于馆长的个人魅力和情怀。</p>\n<p>馆长的名字叫<strong>吴静</strong>，法籍华裔，是一个古董钟表鉴定师，也是一个收藏家。欧洲艺术馆从想法到落地实施，选场地、挑藏品、布展，她只用了一年左右的时间。非常了不起有木有，今天很幸运，刚好碰到她在现场解说，艺术品背后的故事很精彩，人特别亲切和有感染力，更重要的是，她在以自己的方式去做公益，给这个世界给将来留下些什么，就是这个艺术馆及其背后的精神。</p>\n<p>下面是我在现场听到的忍不住鼓掌几个观点，分享给大家：</p>\n<blockquote>\n<p>我每天只睡4个小时，没有电话和微信的消息打扰，安静地鉴定古董钟表。很多朋友问我，为什么还要那么努力地工作，我已经不需要了。上天让我来到这个世界，是有任务的，我希望看到自己更多的可能性。</p>\n</blockquote>\n<p>想象一下，一个以个人名义开了个艺术馆的馆长，每一件艺术品都价值不菲，肯定是生活无忧。而每天只睡4个小时，她认为，睡眠不是算时间的，更重要的是大脑的休息，只要你觉得精神饱满，睡够了，就起来，不要在乎睡了多少个小时。也听得出来她对自己在做的事情（古董钟表鉴定师和收藏）的热爱，她微信封面和头像就特别帅气~</p>\n<figure><br><img alt=\"古董钟表鉴定师\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/IMG_7470.jpg\"><br><figcaption>古董钟表鉴定师</figcaption><br></figure>\n\n<blockquote>\n<p>生前，为死后做事</p>\n</blockquote>\n<p>解说时呀，有不少市民问起，为什么要搞这个展览？</p>\n<p>吴静馆长说，生前，为死后做事。她的回答，真心让我觉得敬佩，特别圈粉。</p>\n<p>做公益，直接捐钱是最简单的方式，钱捐了然后被花光了，对个人的生活、发展或者对家庭、抑或对这个社会，可能就没有然后了。</p>\n<p>而这个公益欧洲艺术馆，正是她对公益的理解和所付诸的行动，从idea到action，花了一年的时间，收集的这些展品、展品从法国到中国的运输（在海上漂了三个多月）、场馆的装修（罗浮宫的设计团队），到志愿者的招募（自己也会下场做解说员），再到将来的一些跟国外合作的艺术program/课程。</p>\n<p>可以看得出来，是个大工程，工作量也非常庞大，令我们最惊讶的是，这个项目落地中国会遇到很多的难处，目前是没有得到政府的补贴和支持的，馆长自费开的一个艺术馆（也有越来越多受馆长的感染参与进来的民间朋友），进场免费，只是为了控制人数，需要提前预约。</p>\n<p>馆长的想法简单而美好，希望这个公益艺术馆能把欧洲文化带到中国来，让市民们不用出国，就能看到这些艺术品的真品和感受到西方艺术文化。希望美院的学生，不再需要对着那些千篇一律从模子出来的、没有细节的雕塑写生，而是可以来杭州的欧洲艺术馆，坐在这些有几百年历史的汉白玉雕塑下，随便画。（馆里的艺术品会有绳子起简单的隔离作用，但大多都没有玻璃柜子，展品跟你只有一步之遥）</p>\n<p>以上，就是我所看到的，一个充满正能量的女子，用自己的方式做公益，希望自己百年之后，在做的这件事情对这个世界带来一些不一样和价值。希望在国内推动欧洲艺术的发展，也是对祖国、对中法文化交流的回馈。真的让我觉得非常鼓舞和感动。</p>\n<p>在过程中，有幸跟馆长有对话，关于数字化图书馆的。</p>\n<p><code>小伍</code> 吴静女士，您刚提到希望更多人知道这里，以及想在国内普及欧洲艺术，但目前这个馆只在杭州有，您有考虑过把艺术馆线上化吗？譬如百度百科的数字博物馆。<br><code>馆长</code> 嗯，当然是有的，知道的人肯定越多越好。可惜我从小在法国长大，这个项目在中国落地很难，虽然我带来了很多的收藏品，这些收藏品都很有价值，可惜我太不认识这方面的朋友。<br><code>小伍</code> 刚好，我认识了解这个百科数字图书馆的同学，我可以介绍你们认识，看能不能达成合作，把这个公益艺术馆搬到线上，让更多的国民知道，传播效果也许会更好。<br><code>馆长</code> 太好了，我们很需要，先谢谢你，回头我让助理跟你留下联系信息。</p>\n<p>万万没想到，解说结束之后，我加了吴静女士的微信，感觉超亲切，刷了一遍她的朋友圈，再次被圈粉，超正能量，很多事情亲力亲为，感觉看到了另一个世界，真是应验了那句话 —— </p>\n<blockquote>\n<p>比你有才华、比你有钱、比你美的人，还比你拼，你还有什么理由不努力！</p>\n</blockquote>\n<p>真心希望有一天能看到欧洲艺术馆在百科的数字图书馆出现，推广给更多人民群众，独乐乐不如众乐乐嘛，那我这个撮合的媒人也会觉得功德无量啦，哈哈，也感谢我女神<strong>阮瑜</strong>把一个这么棒的产品带到这个世上，和百科美女<strong>小文子</strong>给我提供的帮助。</p>\n<p>互联网产品推动传统行业的进步~ 我在工作过程中，无论是百度还是阿里，遇到过很多这样有情怀对社会有贡献的产品，不管我有没有参与其中，这样的好东西，我会不遗余力的在合适的场景推荐给合适的人。</p>\n<p>最后，据我所知，欧洲艺术馆<strong>紧缺志愿者</strong>，在杭州的同学们可以联系一下，艺术馆会开3年，一直都会招募志愿者的，在这也帮忙打个广告，希望如果周边有朋友有意愿的话，赶紧联系一下~ </p>\n<p>其实尤其对于美院的学生，这样的机会非常难得和珍贵，如果你是美院学生，又或者是辅导员，可以合作个项目啥的，一方面解决馆里缺志愿者的问题，另一方面可以近距离的接触著名收藏家以及她的珍藏艺术品，双赢~</p>\n<p><strong>那么好的欧洲艺术馆，在杭的朋友，怎么能不去捧场呢！？</strong></p>\n<p>此处应该有艺术馆的相关信息：</p>\n<p>电话：15988484200<br>邮箱：<a href=\"mailto:eupart@163.com\" target=\"_blank\" rel=\"noopener\">eupart@163.com</a><br>地址：浙江省杭州市江干区　解放东路58号　杭州图书馆地下负一层</p>\n<p>欧洲艺术馆的公众号（可以在上面预约参观）</p>\n<figure><br><img alt=\"欧洲艺术馆公众号\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/eu-gallery/qrcode.jpg\"><br><figcaption>欧洲艺术馆公众号</figcaption><br></figure>\n\n<p>最后的最后，楼主丧心病狂的想发一则招聘广告：</p>\n<p>上面有提到互联网推动传统行业的进步，其实阿里对社会也有非常多的贡献，其中我所在的团队CBU，就是这么个有情怀有理想有贡献的团队，我们的目标是 ——  让世界没有难做的生意。</p>\n<p>总而言之，有理想有情怀有钱有面儿有我这么赞的同事，<strong>招2年或以上经验的靠谱前端</strong>，欢迎自荐或推荐朋友，很急，在线等！！！暂时没想法也欢迎来撩~</p>\n<p>花名：姬无<br>EMAIL：<a href=\"mailto:jiwu.wyy@alibaba-inc.com\" target=\"_blank\" rel=\"noopener\">jiwu.wyy@alibaba-inc.com</a></p>\n"},{"title":"读书笔记 - CSS网站布局实录","date":"2017-02-07T04:42:07.000Z","_content":"\n有些书籍，就算内容赶不上潮流，经典始终是经典，无论什么时候看，总会觉得有些新的感受新的收获。\n\n[《CSS网站布局实录》](https://book.douban.com/subject/2175995/)，这本书不厚，关于布局、文件流、盒模型等等的基础知识，却讲得非常清晰明白。\n<!-- more -->\n## 一、那些CSS布局的事儿\n\n### 一列固定宽度\n\n```\n.box-1{\n    width: 300px;\n}\n```\n\n### 一列宽度自适应\n\n宽度随着视窗宽度而改变\n\n```\n.box-1{\n    width: 80%;\n}\n```\n\n### 一列固定宽度居中\n\n```\n.box-1{\n    width: 300px;\n    margin: 0 auto;\n}\n```\n\n### 两列固定宽度\n\n使用浮动，使文件流下两个块级元素流到同一行\n\n> 文件流：body下的任意元素，根据其前后顺序和元素类型（块级、行内），组成一个个上下关系\n\n```\n.box-1{\n    width: 100px;\n    float: left;\n}\n.box-2{\n    width: 100px;\n    float: left;\n}\n```\n\n###  两列宽度自适应\n\n```\n.box-1{\n    width: 30%;\n    float: left;\n}\n.box-2{\n    width: 60%;\n    float: left;\n}\n```\n\n注意不要打满100%，会有两列之间的margin、padding、border等宽度影响\n\n### 两列右列宽度自适应\n\n左列宽度自适应同理。\n\n```\n.box-1{\n    width: 100px;\n    float: left;\n}\n.box-2{\n    // 自适应：不设宽度，不设定浮动属性\n}\n```\n\n### 两列固定宽度居中\n\n```HTML\n<section class=\"layout\">\n    <div class=\"box-1\"></div>\n    <div class=\"box-2\"></div>\n</section>\n```\n\n```\n.layout{\n    width: width1 + width2 (+ margin/borderWidth)\n    margin: 0 auto;\n    &:after{\n        clear: both; // 清除浮动，不影响后面的文件流\n    }\n}\n.box-1{\n    width: width1;\n    float: left;\n}\n.box-2{\n    width: width2;\n    float: left;\n}\n```\n\n### 三列中间列宽度自适应\n\n**左右列**使用绝对定位，脱离文件流；\n**中间列**默认宽度100%，使用左右的margin来缩进左列和右列的宽度，达到自适应的效果。\n\n如果定位不是针对整个视窗，父容器也用绝对定位，保证左右列绝对定位的参照元素是父元素。\n\n```\n.box-left{\n    position: absolute;\n    top: 0;\n    left: 0; // 左对齐\n    width: width1;\n}\n.box-right{\n    position: absolute;\n    top: 0;\n    right: 0; // 右对齐\n    width: width2;\n}\n.box-middle{\n    margin: 0 width2 0 width1; // margin: 上 右 下 左\n}\n```\n\n### 高度自适应\n\n单独设置某个元素的`height: 100%;`有时候会无效。原来，根据浏览器解析规则，**子元素的高度是否能按百分比显示，取决于父元素的高度**。\n\n假设我们要实现一个自适应视窗高度的效果：\n\n```\n// IE下，html元素默认高100%，但body不是\n// Firefox下，html没有默认高100%\nhtml, body{\n    height: 100%;\n}\n.target{\n    height: 100%;\n}\n```\n\n## 二、一些经典问题\n\n### 1. 上下margin叠加问题\n**表现**\n当上下对象均有`margin`属性时，外边距会出现叠加问题，取较大值。\n\n**原因**\nCSS原始设计问题。作者考虑到段落的样式控制，假如多个`p`之间形成段落，每个p都具有margin属性，为解决排版距离不一致问题，设计出外边距叠加规则。\n\n例外情况，margin叠加只针对**块级元素**，对`inline`、`浮动`、`绝对定位`的元素无效。\n\n### 2. IE6下，float元素margin加倍\n可通过设定目标元素的`display: inline;`解决。\n\n### 3. CSS效果：首字下沉\n```\n.first-character{\n    line-height: 1.5;\n    vertical-align: top;\n    &:first-letter{\n        font-size: 2em;\n        float: left;\n    }\n}\n```\n### 4. 图像裁剪问题\n\n1. CSS的clip属性（对象需使用绝对定位）\n2. 父元素定宽高，使用`overflow:hidden`，局部展示子元素的图片内容\n3. computed，通过计算，使图片自动水平、垂直居中\n4. flex布局\n","source":"_posts/css-layout.md","raw":"---\ntitle: 读书笔记 - CSS网站布局实录\ndate: 2017-02-07 12:42:07\ntags:\n- reading\n- css\n---\n\n有些书籍，就算内容赶不上潮流，经典始终是经典，无论什么时候看，总会觉得有些新的感受新的收获。\n\n[《CSS网站布局实录》](https://book.douban.com/subject/2175995/)，这本书不厚，关于布局、文件流、盒模型等等的基础知识，却讲得非常清晰明白。\n<!-- more -->\n## 一、那些CSS布局的事儿\n\n### 一列固定宽度\n\n```\n.box-1{\n    width: 300px;\n}\n```\n\n### 一列宽度自适应\n\n宽度随着视窗宽度而改变\n\n```\n.box-1{\n    width: 80%;\n}\n```\n\n### 一列固定宽度居中\n\n```\n.box-1{\n    width: 300px;\n    margin: 0 auto;\n}\n```\n\n### 两列固定宽度\n\n使用浮动，使文件流下两个块级元素流到同一行\n\n> 文件流：body下的任意元素，根据其前后顺序和元素类型（块级、行内），组成一个个上下关系\n\n```\n.box-1{\n    width: 100px;\n    float: left;\n}\n.box-2{\n    width: 100px;\n    float: left;\n}\n```\n\n###  两列宽度自适应\n\n```\n.box-1{\n    width: 30%;\n    float: left;\n}\n.box-2{\n    width: 60%;\n    float: left;\n}\n```\n\n注意不要打满100%，会有两列之间的margin、padding、border等宽度影响\n\n### 两列右列宽度自适应\n\n左列宽度自适应同理。\n\n```\n.box-1{\n    width: 100px;\n    float: left;\n}\n.box-2{\n    // 自适应：不设宽度，不设定浮动属性\n}\n```\n\n### 两列固定宽度居中\n\n```HTML\n<section class=\"layout\">\n    <div class=\"box-1\"></div>\n    <div class=\"box-2\"></div>\n</section>\n```\n\n```\n.layout{\n    width: width1 + width2 (+ margin/borderWidth)\n    margin: 0 auto;\n    &:after{\n        clear: both; // 清除浮动，不影响后面的文件流\n    }\n}\n.box-1{\n    width: width1;\n    float: left;\n}\n.box-2{\n    width: width2;\n    float: left;\n}\n```\n\n### 三列中间列宽度自适应\n\n**左右列**使用绝对定位，脱离文件流；\n**中间列**默认宽度100%，使用左右的margin来缩进左列和右列的宽度，达到自适应的效果。\n\n如果定位不是针对整个视窗，父容器也用绝对定位，保证左右列绝对定位的参照元素是父元素。\n\n```\n.box-left{\n    position: absolute;\n    top: 0;\n    left: 0; // 左对齐\n    width: width1;\n}\n.box-right{\n    position: absolute;\n    top: 0;\n    right: 0; // 右对齐\n    width: width2;\n}\n.box-middle{\n    margin: 0 width2 0 width1; // margin: 上 右 下 左\n}\n```\n\n### 高度自适应\n\n单独设置某个元素的`height: 100%;`有时候会无效。原来，根据浏览器解析规则，**子元素的高度是否能按百分比显示，取决于父元素的高度**。\n\n假设我们要实现一个自适应视窗高度的效果：\n\n```\n// IE下，html元素默认高100%，但body不是\n// Firefox下，html没有默认高100%\nhtml, body{\n    height: 100%;\n}\n.target{\n    height: 100%;\n}\n```\n\n## 二、一些经典问题\n\n### 1. 上下margin叠加问题\n**表现**\n当上下对象均有`margin`属性时，外边距会出现叠加问题，取较大值。\n\n**原因**\nCSS原始设计问题。作者考虑到段落的样式控制，假如多个`p`之间形成段落，每个p都具有margin属性，为解决排版距离不一致问题，设计出外边距叠加规则。\n\n例外情况，margin叠加只针对**块级元素**，对`inline`、`浮动`、`绝对定位`的元素无效。\n\n### 2. IE6下，float元素margin加倍\n可通过设定目标元素的`display: inline;`解决。\n\n### 3. CSS效果：首字下沉\n```\n.first-character{\n    line-height: 1.5;\n    vertical-align: top;\n    &:first-letter{\n        font-size: 2em;\n        float: left;\n    }\n}\n```\n### 4. 图像裁剪问题\n\n1. CSS的clip属性（对象需使用绝对定位）\n2. 父元素定宽高，使用`overflow:hidden`，局部展示子元素的图片内容\n3. computed，通过计算，使图片自动水平、垂直居中\n4. flex布局\n","slug":"css-layout","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8i0014zvr3tdny2h2h","content":"<p>有些书籍，就算内容赶不上潮流，经典始终是经典，无论什么时候看，总会觉得有些新的感受新的收获。</p>\n<p><a href=\"https://book.douban.com/subject/2175995/\" target=\"_blank\" rel=\"noopener\">《CSS网站布局实录》</a>，这本书不厚，关于布局、文件流、盒模型等等的基础知识，却讲得非常清晰明白。<br><a id=\"more\"></a></p>\n<h2 id=\"一、那些CSS布局的事儿\"><a href=\"#一、那些CSS布局的事儿\" class=\"headerlink\" title=\"一、那些CSS布局的事儿\"></a>一、那些CSS布局的事儿</h2><h3 id=\"一列固定宽度\"><a href=\"#一列固定宽度\" class=\"headerlink\" title=\"一列固定宽度\"></a>一列固定宽度</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一列宽度自适应\"><a href=\"#一列宽度自适应\" class=\"headerlink\" title=\"一列宽度自适应\"></a>一列宽度自适应</h3><p>宽度随着视窗宽度而改变</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一列固定宽度居中\"><a href=\"#一列固定宽度居中\" class=\"headerlink\" title=\"一列固定宽度居中\"></a>一列固定宽度居中</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两列固定宽度\"><a href=\"#两列固定宽度\" class=\"headerlink\" title=\"两列固定宽度\"></a>两列固定宽度</h3><p>使用浮动，使文件流下两个块级元素流到同一行</p>\n<blockquote>\n<p>文件流：body下的任意元素，根据其前后顺序和元素类型（块级、行内），组成一个个上下关系</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两列宽度自适应\"><a href=\"#两列宽度自适应\" class=\"headerlink\" title=\"两列宽度自适应\"></a>两列宽度自适应</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意不要打满100%，会有两列之间的margin、padding、border等宽度影响</p>\n<h3 id=\"两列右列宽度自适应\"><a href=\"#两列右列宽度自适应\" class=\"headerlink\" title=\"两列右列宽度自适应\"></a>两列右列宽度自适应</h3><p>左列宽度自适应同理。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">box</span><span class=\"number\">-1</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">width</span>: <span class=\"number\">100</span>px;</span><br><span class=\"line\">    <span class=\"built_in\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.<span class=\"built_in\">box</span><span class=\"number\">-2</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自适应：不设宽度，不设定浮动属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两列固定宽度居中\"><a href=\"#两列固定宽度居中\" class=\"headerlink\" title=\"两列固定宽度居中\"></a>两列固定宽度居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width1 + width2 (+ margin/borderWidth)</span><br><span class=\"line\">    margin: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    &amp;:after&#123;</span><br><span class=\"line\">        <span class=\"attribute\">clear</span>: both; <span class=\"comment\">// 清除浮动，不影响后面的文件流</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width1;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width2;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三列中间列宽度自适应\"><a href=\"#三列中间列宽度自适应\" class=\"headerlink\" title=\"三列中间列宽度自适应\"></a>三列中间列宽度自适应</h3><p><strong>左右列</strong>使用绝对定位，脱离文件流；<br><strong>中间列</strong>默认宽度100%，使用左右的margin来缩进左列和右列的宽度，达到自适应的效果。</p>\n<p>如果定位不是针对整个视窗，父容器也用绝对定位，保证左右列绝对定位的参照元素是父元素。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; <span class=\"comment\">// 左对齐</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; <span class=\"comment\">// 右对齐</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-middle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> width2 <span class=\"number\">0</span> width1; <span class=\"comment\">// margin: 上 右 下 左</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高度自适应\"><a href=\"#高度自适应\" class=\"headerlink\" title=\"高度自适应\"></a>高度自适应</h3><p>单独设置某个元素的<code>height: 100%;</code>有时候会无效。原来，根据浏览器解析规则，<strong>子元素的高度是否能按百分比显示，取决于父元素的高度</strong>。</p>\n<p>假设我们要实现一个自适应视窗高度的效果：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IE下，html元素默认高100%，但body不是</span></span><br><span class=\"line\"><span class=\"comment\">// Firefox下，html没有默认高100%</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.target</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、一些经典问题\"><a href=\"#二、一些经典问题\" class=\"headerlink\" title=\"二、一些经典问题\"></a>二、一些经典问题</h2><h3 id=\"1-上下margin叠加问题\"><a href=\"#1-上下margin叠加问题\" class=\"headerlink\" title=\"1. 上下margin叠加问题\"></a>1. 上下margin叠加问题</h3><p><strong>表现</strong><br>当上下对象均有<code>margin</code>属性时，外边距会出现叠加问题，取较大值。</p>\n<p><strong>原因</strong><br>CSS原始设计问题。作者考虑到段落的样式控制，假如多个<code>p</code>之间形成段落，每个p都具有margin属性，为解决排版距离不一致问题，设计出外边距叠加规则。</p>\n<p>例外情况，margin叠加只针对<strong>块级元素</strong>，对<code>inline</code>、<code>浮动</code>、<code>绝对定位</code>的元素无效。</p>\n<h3 id=\"2-IE6下，float元素margin加倍\"><a href=\"#2-IE6下，float元素margin加倍\" class=\"headerlink\" title=\"2. IE6下，float元素margin加倍\"></a>2. IE6下，float元素margin加倍</h3><p>可通过设定目标元素的<code>display: inline;</code>解决。</p>\n<h3 id=\"3-CSS效果：首字下沉\"><a href=\"#3-CSS效果：首字下沉\" class=\"headerlink\" title=\"3. CSS效果：首字下沉\"></a>3. CSS效果：首字下沉</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.first-character</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">    &amp;:first-letter&#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-图像裁剪问题\"><a href=\"#4-图像裁剪问题\" class=\"headerlink\" title=\"4. 图像裁剪问题\"></a>4. 图像裁剪问题</h3><ol>\n<li>CSS的clip属性（对象需使用绝对定位）</li>\n<li>父元素定宽高，使用<code>overflow:hidden</code>，局部展示子元素的图片内容</li>\n<li>computed，通过计算，使图片自动水平、垂直居中</li>\n<li>flex布局</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>有些书籍，就算内容赶不上潮流，经典始终是经典，无论什么时候看，总会觉得有些新的感受新的收获。</p>\n<p><a href=\"https://book.douban.com/subject/2175995/\" target=\"_blank\" rel=\"noopener\">《CSS网站布局实录》</a>，这本书不厚，关于布局、文件流、盒模型等等的基础知识，却讲得非常清晰明白。<br>","more":"</p>\n<h2 id=\"一、那些CSS布局的事儿\"><a href=\"#一、那些CSS布局的事儿\" class=\"headerlink\" title=\"一、那些CSS布局的事儿\"></a>一、那些CSS布局的事儿</h2><h3 id=\"一列固定宽度\"><a href=\"#一列固定宽度\" class=\"headerlink\" title=\"一列固定宽度\"></a>一列固定宽度</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一列宽度自适应\"><a href=\"#一列宽度自适应\" class=\"headerlink\" title=\"一列宽度自适应\"></a>一列宽度自适应</h3><p>宽度随着视窗宽度而改变</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一列固定宽度居中\"><a href=\"#一列固定宽度居中\" class=\"headerlink\" title=\"一列固定宽度居中\"></a>一列固定宽度居中</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两列固定宽度\"><a href=\"#两列固定宽度\" class=\"headerlink\" title=\"两列固定宽度\"></a>两列固定宽度</h3><p>使用浮动，使文件流下两个块级元素流到同一行</p>\n<blockquote>\n<p>文件流：body下的任意元素，根据其前后顺序和元素类型（块级、行内），组成一个个上下关系</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两列宽度自适应\"><a href=\"#两列宽度自适应\" class=\"headerlink\" title=\"两列宽度自适应\"></a>两列宽度自适应</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意不要打满100%，会有两列之间的margin、padding、border等宽度影响</p>\n<h3 id=\"两列右列宽度自适应\"><a href=\"#两列右列宽度自适应\" class=\"headerlink\" title=\"两列右列宽度自适应\"></a>两列右列宽度自适应</h3><p>左列宽度自适应同理。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">box</span><span class=\"number\">-1</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">width</span>: <span class=\"number\">100</span>px;</span><br><span class=\"line\">    <span class=\"built_in\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.<span class=\"built_in\">box</span><span class=\"number\">-2</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自适应：不设宽度，不设定浮动属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两列固定宽度居中\"><a href=\"#两列固定宽度居中\" class=\"headerlink\" title=\"两列固定宽度居中\"></a>两列固定宽度居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width1 + width2 (+ margin/borderWidth)</span><br><span class=\"line\">    margin: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    &amp;:after&#123;</span><br><span class=\"line\">        <span class=\"attribute\">clear</span>: both; <span class=\"comment\">// 清除浮动，不影响后面的文件流</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width1;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width2;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三列中间列宽度自适应\"><a href=\"#三列中间列宽度自适应\" class=\"headerlink\" title=\"三列中间列宽度自适应\"></a>三列中间列宽度自适应</h3><p><strong>左右列</strong>使用绝对定位，脱离文件流；<br><strong>中间列</strong>默认宽度100%，使用左右的margin来缩进左列和右列的宽度，达到自适应的效果。</p>\n<p>如果定位不是针对整个视窗，父容器也用绝对定位，保证左右列绝对定位的参照元素是父元素。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; <span class=\"comment\">// 左对齐</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; <span class=\"comment\">// 右对齐</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: width2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box-middle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> width2 <span class=\"number\">0</span> width1; <span class=\"comment\">// margin: 上 右 下 左</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高度自适应\"><a href=\"#高度自适应\" class=\"headerlink\" title=\"高度自适应\"></a>高度自适应</h3><p>单独设置某个元素的<code>height: 100%;</code>有时候会无效。原来，根据浏览器解析规则，<strong>子元素的高度是否能按百分比显示，取决于父元素的高度</strong>。</p>\n<p>假设我们要实现一个自适应视窗高度的效果：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IE下，html元素默认高100%，但body不是</span></span><br><span class=\"line\"><span class=\"comment\">// Firefox下，html没有默认高100%</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.target</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、一些经典问题\"><a href=\"#二、一些经典问题\" class=\"headerlink\" title=\"二、一些经典问题\"></a>二、一些经典问题</h2><h3 id=\"1-上下margin叠加问题\"><a href=\"#1-上下margin叠加问题\" class=\"headerlink\" title=\"1. 上下margin叠加问题\"></a>1. 上下margin叠加问题</h3><p><strong>表现</strong><br>当上下对象均有<code>margin</code>属性时，外边距会出现叠加问题，取较大值。</p>\n<p><strong>原因</strong><br>CSS原始设计问题。作者考虑到段落的样式控制，假如多个<code>p</code>之间形成段落，每个p都具有margin属性，为解决排版距离不一致问题，设计出外边距叠加规则。</p>\n<p>例外情况，margin叠加只针对<strong>块级元素</strong>，对<code>inline</code>、<code>浮动</code>、<code>绝对定位</code>的元素无效。</p>\n<h3 id=\"2-IE6下，float元素margin加倍\"><a href=\"#2-IE6下，float元素margin加倍\" class=\"headerlink\" title=\"2. IE6下，float元素margin加倍\"></a>2. IE6下，float元素margin加倍</h3><p>可通过设定目标元素的<code>display: inline;</code>解决。</p>\n<h3 id=\"3-CSS效果：首字下沉\"><a href=\"#3-CSS效果：首字下沉\" class=\"headerlink\" title=\"3. CSS效果：首字下沉\"></a>3. CSS效果：首字下沉</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.first-character</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">    &amp;:first-letter&#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-图像裁剪问题\"><a href=\"#4-图像裁剪问题\" class=\"headerlink\" title=\"4. 图像裁剪问题\"></a>4. 图像裁剪问题</h3><ol>\n<li>CSS的clip属性（对象需使用绝对定位）</li>\n<li>父元素定宽高，使用<code>overflow:hidden</code>，局部展示子元素的图片内容</li>\n<li>computed，通过计算，使图片自动水平、垂直居中</li>\n<li>flex布局</li>\n</ol>"},{"title":"fis3安装时遇到的node版本问题","date":"2017-01-17T16:18:45.000Z","_content":"今天在调试demo，执行编译命令时，\n\n```\nfis3 release\n```\n\n报了一大堆错误，一时懵逼~\n<!-- more -->\n![](http://cdn.sinacloud.net/woodysblog/fis3-node/error.png)\n\n关键行：\n\n```\nFatal error in ../deps/v8/src/api.cc, line 1051\n\nblah blah\n\nIllegal instruction: 4\n```\n\n运行环境是：\n* node，v 7.4.0\n* fis3，v 3.4.31\n\n这都啥呀，于是搜了下，可能是因为**node的v8内核不稳定或者跟涉及的插件不合适**~遇到类似的问题，可以尝试安装稳定版本的node。\n\n后来发现，还是不okay，就去fis官网看[安装指南](http://fis.baidu.com/fis3/docs/beginning/install.html)，发现fis只支持以下的node版本：\n\n```\n0.8.x，0.10.x, 0.12.x，4.x，6.x\n```\n\n最后我装了node的0.12.0版本，bingo！\n\n由于node版本的变更，一些模块可能需要重装，根据提示rebuild就好了 :)\n\n```\nnpm rebuild node-sass\n```\n\n***\n\n## node版本管理模块 —— n\n\n顺便安利一个npm的模块 —— n，专门管理node版本的模块，功能多多，可以查询node最新、最稳定的版本，又或者安装指定版本……\n\n**一、全局安装**\n\n```\nnpm install -g n\n```\n\n**二、n的常用功能**\n\n```\nn stable // 安装最稳定版本\nn ls // 查看node版本列表\nn 0.12.0 // 安装指定版本\n```","source":"_posts/fis3-node.md","raw":"---\ntitle: fis3安装时遇到的node版本问题\ntags:\n  - tech\ndate: 2017-01-18 00:18:45\n---\n今天在调试demo，执行编译命令时，\n\n```\nfis3 release\n```\n\n报了一大堆错误，一时懵逼~\n<!-- more -->\n![](http://cdn.sinacloud.net/woodysblog/fis3-node/error.png)\n\n关键行：\n\n```\nFatal error in ../deps/v8/src/api.cc, line 1051\n\nblah blah\n\nIllegal instruction: 4\n```\n\n运行环境是：\n* node，v 7.4.0\n* fis3，v 3.4.31\n\n这都啥呀，于是搜了下，可能是因为**node的v8内核不稳定或者跟涉及的插件不合适**~遇到类似的问题，可以尝试安装稳定版本的node。\n\n后来发现，还是不okay，就去fis官网看[安装指南](http://fis.baidu.com/fis3/docs/beginning/install.html)，发现fis只支持以下的node版本：\n\n```\n0.8.x，0.10.x, 0.12.x，4.x，6.x\n```\n\n最后我装了node的0.12.0版本，bingo！\n\n由于node版本的变更，一些模块可能需要重装，根据提示rebuild就好了 :)\n\n```\nnpm rebuild node-sass\n```\n\n***\n\n## node版本管理模块 —— n\n\n顺便安利一个npm的模块 —— n，专门管理node版本的模块，功能多多，可以查询node最新、最稳定的版本，又或者安装指定版本……\n\n**一、全局安装**\n\n```\nnpm install -g n\n```\n\n**二、n的常用功能**\n\n```\nn stable // 安装最稳定版本\nn ls // 查看node版本列表\nn 0.12.0 // 安装指定版本\n```","slug":"fis3-node","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8j0016zvr3fmqn7uy6","content":"<p>今天在调试demo，执行编译命令时，</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fis3 <span class=\"built_in\">release</span></span><br></pre></td></tr></table></figure>\n<p>报了一大堆错误，一时懵逼~<br><a id=\"more\"></a><br><img src=\"http://cdn.sinacloud.net/woodysblog/fis3-node/error.png\" alt=\"\"></p>\n<p>关键行：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fatal error <span class=\"keyword\">in</span> ..<span class=\"regexp\">/deps/</span>v8<span class=\"regexp\">/src/</span>api.cc, line <span class=\"number\">1051</span></span><br><span class=\"line\"></span><br><span class=\"line\">blah blah</span><br><span class=\"line\"></span><br><span class=\"line\">Illegal <span class=\"string\">instruction:</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>运行环境是：</p>\n<ul>\n<li>node，v 7.4.0</li>\n<li>fis3，v 3.4.31</li>\n</ul>\n<p>这都啥呀，于是搜了下，可能是因为<strong>node的v8内核不稳定或者跟涉及的插件不合适</strong>~遇到类似的问题，可以尝试安装稳定版本的node。</p>\n<p>后来发现，还是不okay，就去fis官网看<a href=\"http://fis.baidu.com/fis3/docs/beginning/install.html\" target=\"_blank\" rel=\"noopener\">安装指南</a>，发现fis只支持以下的node版本：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0<span class=\"selector-class\">.8</span><span class=\"selector-class\">.x</span>，0<span class=\"selector-class\">.10</span><span class=\"selector-class\">.x</span>, 0<span class=\"selector-class\">.12</span><span class=\"selector-class\">.x</span>，4<span class=\"selector-class\">.x</span>，6<span class=\"selector-class\">.x</span></span><br></pre></td></tr></table></figure>\n<p>最后我装了node的0.12.0版本，bingo！</p>\n<p>由于node版本的变更，一些模块可能需要重装，根据提示rebuild就好了 :)</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild <span class=\"keyword\">node</span><span class=\"title\">-sass</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"node版本管理模块-——-n\"><a href=\"#node版本管理模块-——-n\" class=\"headerlink\" title=\"node版本管理模块 —— n\"></a>node版本管理模块 —— n</h2><p>顺便安利一个npm的模块 —— n，专门管理node版本的模块，功能多多，可以查询node最新、最稳定的版本，又或者安装指定版本……</p>\n<p><strong>一、全局安装</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> -g n</span><br></pre></td></tr></table></figure>\n<p><strong>二、n的常用功能</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable <span class=\"comment\">// 安装最稳定版本</span></span><br><span class=\"line\">n ls <span class=\"comment\">// 查看node版本列表</span></span><br><span class=\"line\">n <span class=\"number\">0.12</span><span class=\"number\">.0</span> <span class=\"comment\">// 安装指定版本</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>今天在调试demo，执行编译命令时，</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fis3 <span class=\"built_in\">release</span></span><br></pre></td></tr></table></figure>\n<p>报了一大堆错误，一时懵逼~<br>","more":"<br><img src=\"http://cdn.sinacloud.net/woodysblog/fis3-node/error.png\" alt=\"\"></p>\n<p>关键行：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fatal error <span class=\"keyword\">in</span> ..<span class=\"regexp\">/deps/</span>v8<span class=\"regexp\">/src/</span>api.cc, line <span class=\"number\">1051</span></span><br><span class=\"line\"></span><br><span class=\"line\">blah blah</span><br><span class=\"line\"></span><br><span class=\"line\">Illegal <span class=\"string\">instruction:</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>运行环境是：</p>\n<ul>\n<li>node，v 7.4.0</li>\n<li>fis3，v 3.4.31</li>\n</ul>\n<p>这都啥呀，于是搜了下，可能是因为<strong>node的v8内核不稳定或者跟涉及的插件不合适</strong>~遇到类似的问题，可以尝试安装稳定版本的node。</p>\n<p>后来发现，还是不okay，就去fis官网看<a href=\"http://fis.baidu.com/fis3/docs/beginning/install.html\" target=\"_blank\" rel=\"noopener\">安装指南</a>，发现fis只支持以下的node版本：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0<span class=\"selector-class\">.8</span><span class=\"selector-class\">.x</span>，0<span class=\"selector-class\">.10</span><span class=\"selector-class\">.x</span>, 0<span class=\"selector-class\">.12</span><span class=\"selector-class\">.x</span>，4<span class=\"selector-class\">.x</span>，6<span class=\"selector-class\">.x</span></span><br></pre></td></tr></table></figure>\n<p>最后我装了node的0.12.0版本，bingo！</p>\n<p>由于node版本的变更，一些模块可能需要重装，根据提示rebuild就好了 :)</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild <span class=\"keyword\">node</span><span class=\"title\">-sass</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"node版本管理模块-——-n\"><a href=\"#node版本管理模块-——-n\" class=\"headerlink\" title=\"node版本管理模块 —— n\"></a>node版本管理模块 —— n</h2><p>顺便安利一个npm的模块 —— n，专门管理node版本的模块，功能多多，可以查询node最新、最稳定的版本，又或者安装指定版本……</p>\n<p><strong>一、全局安装</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> -g n</span><br></pre></td></tr></table></figure>\n<p><strong>二、n的常用功能</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable <span class=\"comment\">// 安装最稳定版本</span></span><br><span class=\"line\">n ls <span class=\"comment\">// 查看node版本列表</span></span><br><span class=\"line\">n <span class=\"number\">0.12</span><span class=\"number\">.0</span> <span class=\"comment\">// 安装指定版本</span></span><br></pre></td></tr></table></figure>"},{"title":"git学习笔记","date":"2017-01-23T10:35:51.000Z","_content":"最近想要做博客的云端编码，在哪都能发日志，于是入了coding.net的坑，从svn转到git下~\n\n以前工作中，因为没有什么使用git的需要，说要学吧，总有各种理由没时间。为了小博客真是操碎了心，看了廖老师的教程，发现其实git跟svn cli还是有很多的相同之处，也没有特别陌生，相信不用多久就能上手了 :)\n\n本文是自己学习和记录用的，如果大家想看教程，还是推荐廖雪峰老师的[《Git教程》](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n<!-- more -->\n## 关于版本库、工作区和暂存区\n* 版本库/Repository：Git版本库，会自动创建分支master，以及指向master的HEAD指针；\n* 工作区/Working Directory：你在本地写代码的目录；\n* 暂存区/Stage：\n\t* 当你使用`git add`时，是把本地代码提交到暂存区；\n\t* 而使用`git commit`时，则把暂存区的代码提交到当前的分支；\n\n![](http://cdn.sinacloud.net/woodysblog/git/git.jpg)\n\n## 常用命令\n\n```\ngit clone git@github.com:YuyingWu/blog.git // 从远程库克隆\ngit status // 查看状态\n\n// 文件处理\ngit add <file> // 添加文件到暂存区\ngit rm <file> // 从版本库删除文件\ngit checkout -- <file> // 撤销更改\ngit reset HEAD <file> // 撤销更改\ngit diff HEAD -- <file> // 比较diff\n\ngit commit // 把暂存区的所有内容提交到当前分支\n\n// 分支管理\ngit branch // 查看分支列表及当前分支，带参数-d代表删除某分支\ngit checkout branch-n // 切换到xx分支，带参数-b代表创建并切换\ngit checkout -b branch-n origin/branch-n // 创建与远程库对应的本地分支\ngit merge branch-n // 合并branch-n的代码到当前分支\n\n// 分支推送\ngit push origin master // origin为远程库，master为当前分支\n\n// 分支抓取\ngit pull // pull = fetch + merge\n\n// 本地分支push到远程仓库\ngit init\ngit remote add origin git@github.com:YuyingWu/blog.git\ngit add .\ngit commit -m \"init\"\ngit push origin preact:preact\n```\n\n## Git小贴士\n\n`问`：怎么生成SSH key（SSH密钥）？\n`答`：命令行执行以下代码。Mac系统下，生成的id_rsa.pub和id_rsa在/Users/xxx/.ssh目录。\n```\nssh-keygen -t rsa -C “your email address”\n```\n\n![](http://cdn.sinacloud.net/woodysblog/git/ssh.png)\n\n`问`：想把一份代码同步到多个git源，咋整？\n`答`：打开本地工作区的.git/config文件，给remote \"origin\"多添加几个url即可\n\n![](http://cdn.sinacloud.net/woodysblog/git/remote.png)\n\n`问`：RPC failed\n`答`：默认Git设置`http post`的缓存为1MB，改为500MB后成功提交\n\n```\n// Question\nerror: RPC failed; HTTP 411 curl 22 The requested URL returned error: 411 Length Required\nfatal: The remote end hung up unexpectedly\n\n// Solution\ngit config http.postBuffer  524288000\n```\n\n`问`：不同的SSH key给不同的站点使用\n`答`：在`.ssh`目录下，添加`config`文件，给对应的站点指定读对应的rsa文件\n\n```\nHost github.com\nHostName github.com\nUser git\nIdentityFile ~/.ssh/github_rsa\n\nHost git.coding.net\nUser wuyuying1128@163.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/coding_rsa\n```\n","source":"_posts/git.md","raw":"---\ntitle: git学习笔记\ndate: 2017-01-23 18:35:51\ntags:\n- tech\n- git\n---\n最近想要做博客的云端编码，在哪都能发日志，于是入了coding.net的坑，从svn转到git下~\n\n以前工作中，因为没有什么使用git的需要，说要学吧，总有各种理由没时间。为了小博客真是操碎了心，看了廖老师的教程，发现其实git跟svn cli还是有很多的相同之处，也没有特别陌生，相信不用多久就能上手了 :)\n\n本文是自己学习和记录用的，如果大家想看教程，还是推荐廖雪峰老师的[《Git教程》](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n<!-- more -->\n## 关于版本库、工作区和暂存区\n* 版本库/Repository：Git版本库，会自动创建分支master，以及指向master的HEAD指针；\n* 工作区/Working Directory：你在本地写代码的目录；\n* 暂存区/Stage：\n\t* 当你使用`git add`时，是把本地代码提交到暂存区；\n\t* 而使用`git commit`时，则把暂存区的代码提交到当前的分支；\n\n![](http://cdn.sinacloud.net/woodysblog/git/git.jpg)\n\n## 常用命令\n\n```\ngit clone git@github.com:YuyingWu/blog.git // 从远程库克隆\ngit status // 查看状态\n\n// 文件处理\ngit add <file> // 添加文件到暂存区\ngit rm <file> // 从版本库删除文件\ngit checkout -- <file> // 撤销更改\ngit reset HEAD <file> // 撤销更改\ngit diff HEAD -- <file> // 比较diff\n\ngit commit // 把暂存区的所有内容提交到当前分支\n\n// 分支管理\ngit branch // 查看分支列表及当前分支，带参数-d代表删除某分支\ngit checkout branch-n // 切换到xx分支，带参数-b代表创建并切换\ngit checkout -b branch-n origin/branch-n // 创建与远程库对应的本地分支\ngit merge branch-n // 合并branch-n的代码到当前分支\n\n// 分支推送\ngit push origin master // origin为远程库，master为当前分支\n\n// 分支抓取\ngit pull // pull = fetch + merge\n\n// 本地分支push到远程仓库\ngit init\ngit remote add origin git@github.com:YuyingWu/blog.git\ngit add .\ngit commit -m \"init\"\ngit push origin preact:preact\n```\n\n## Git小贴士\n\n`问`：怎么生成SSH key（SSH密钥）？\n`答`：命令行执行以下代码。Mac系统下，生成的id_rsa.pub和id_rsa在/Users/xxx/.ssh目录。\n```\nssh-keygen -t rsa -C “your email address”\n```\n\n![](http://cdn.sinacloud.net/woodysblog/git/ssh.png)\n\n`问`：想把一份代码同步到多个git源，咋整？\n`答`：打开本地工作区的.git/config文件，给remote \"origin\"多添加几个url即可\n\n![](http://cdn.sinacloud.net/woodysblog/git/remote.png)\n\n`问`：RPC failed\n`答`：默认Git设置`http post`的缓存为1MB，改为500MB后成功提交\n\n```\n// Question\nerror: RPC failed; HTTP 411 curl 22 The requested URL returned error: 411 Length Required\nfatal: The remote end hung up unexpectedly\n\n// Solution\ngit config http.postBuffer  524288000\n```\n\n`问`：不同的SSH key给不同的站点使用\n`答`：在`.ssh`目录下，添加`config`文件，给对应的站点指定读对应的rsa文件\n\n```\nHost github.com\nHostName github.com\nUser git\nIdentityFile ~/.ssh/github_rsa\n\nHost git.coding.net\nUser wuyuying1128@163.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/coding_rsa\n```\n","slug":"git","published":1,"updated":"2018-08-25T07:43:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8k0018zvr34hneef21","content":"<p>最近想要做博客的云端编码，在哪都能发日志，于是入了coding.net的坑，从svn转到git下~</p>\n<p>以前工作中，因为没有什么使用git的需要，说要学吧，总有各种理由没时间。为了小博客真是操碎了心，看了廖老师的教程，发现其实git跟svn cli还是有很多的相同之处，也没有特别陌生，相信不用多久就能上手了 :)</p>\n<p>本文是自己学习和记录用的，如果大家想看教程，还是推荐廖雪峰老师的<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">《Git教程》</a><br><a id=\"more\"></a></p>\n<h2 id=\"关于版本库、工作区和暂存区\"><a href=\"#关于版本库、工作区和暂存区\" class=\"headerlink\" title=\"关于版本库、工作区和暂存区\"></a>关于版本库、工作区和暂存区</h2><ul>\n<li>版本库/Repository：Git版本库，会自动创建分支master，以及指向master的HEAD指针；</li>\n<li>工作区/Working Directory：你在本地写代码的目录；</li>\n<li>暂存区/Stage：<ul>\n<li>当你使用<code>git add</code>时，是把本地代码提交到暂存区；</li>\n<li>而使用<code>git commit</code>时，则把暂存区的代码提交到当前的分支；</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/git/git.jpg\" alt=\"\"></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:YuyingWu/blog<span class=\"selector-class\">.git</span> <span class=\"comment\">// 从远程库克隆</span></span><br><span class=\"line\">git status <span class=\"comment\">// 查看状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件处理</span></span><br><span class=\"line\">git add &lt;file&gt; <span class=\"comment\">// 添加文件到暂存区</span></span><br><span class=\"line\">git rm &lt;file&gt; <span class=\"comment\">// 从版本库删除文件</span></span><br><span class=\"line\">git checkout -- &lt;file&gt; <span class=\"comment\">// 撤销更改</span></span><br><span class=\"line\">git reset HEAD &lt;file&gt; <span class=\"comment\">// 撤销更改</span></span><br><span class=\"line\">git diff HEAD -- &lt;file&gt; <span class=\"comment\">// 比较diff</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit <span class=\"comment\">// 把暂存区的所有内容提交到当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分支管理</span></span><br><span class=\"line\">git branch <span class=\"comment\">// 查看分支列表及当前分支，带参数-d代表删除某分支</span></span><br><span class=\"line\">git checkout branch-n <span class=\"comment\">// 切换到xx分支，带参数-b代表创建并切换</span></span><br><span class=\"line\">git checkout -<span class=\"selector-tag\">b</span> branch-n origin/branch-n <span class=\"comment\">// 创建与远程库对应的本地分支</span></span><br><span class=\"line\">git merge branch-n <span class=\"comment\">// 合并branch-n的代码到当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分支推送</span></span><br><span class=\"line\">git push origin master <span class=\"comment\">// origin为远程库，master为当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分支抓取</span></span><br><span class=\"line\">git pull <span class=\"comment\">// pull = fetch + merge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地分支push到远程仓库</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@github<span class=\"selector-class\">.com</span>:YuyingWu/blog.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"init\"</span></span><br><span class=\"line\">git push origin preact:preact</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git小贴士\"><a href=\"#Git小贴士\" class=\"headerlink\" title=\"Git小贴士\"></a>Git小贴士</h2><p><code>问</code>：怎么生成SSH key（SSH密钥）？<br><code>答</code>：命令行执行以下代码。Mac系统下，生成的id_rsa.pub和id_rsa在/Users/xxx/.ssh目录。<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C “your email <span class=\"built_in\">address</span>”</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/git/ssh.png\" alt=\"\"></p>\n<p><code>问</code>：想把一份代码同步到多个git源，咋整？<br><code>答</code>：打开本地工作区的.git/config文件，给remote “origin”多添加几个url即可</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/git/remote.png\" alt=\"\"></p>\n<p><code>问</code>：RPC failed<br><code>答</code>：默认Git设置<code>http post</code>的缓存为1MB，改为500MB后成功提交</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Question</span><br><span class=\"line\"><span class=\"keyword\">error: </span>RPC failed; HTTP 411 curl 22 The requested URL returned error: 411 Length Required</span><br><span class=\"line\">fatal: The remote end hung up unexpectedly</span><br><span class=\"line\"></span><br><span class=\"line\">// Solution</span><br><span class=\"line\">git config http.postBuffer  524288000</span><br></pre></td></tr></table></figure>\n<p><code>问</code>：不同的SSH key给不同的站点使用<br><code>答</code>：在<code>.ssh</code>目录下，添加<code>config</code>文件，给对应的站点指定读对应的rsa文件</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~/.ssh/github_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host git.coding.net</span><br><span class=\"line\">User wuyuying1128@163.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/coding_rsa</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近想要做博客的云端编码，在哪都能发日志，于是入了coding.net的坑，从svn转到git下~</p>\n<p>以前工作中，因为没有什么使用git的需要，说要学吧，总有各种理由没时间。为了小博客真是操碎了心，看了廖老师的教程，发现其实git跟svn cli还是有很多的相同之处，也没有特别陌生，相信不用多久就能上手了 :)</p>\n<p>本文是自己学习和记录用的，如果大家想看教程，还是推荐廖雪峰老师的<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">《Git教程》</a><br>","more":"</p>\n<h2 id=\"关于版本库、工作区和暂存区\"><a href=\"#关于版本库、工作区和暂存区\" class=\"headerlink\" title=\"关于版本库、工作区和暂存区\"></a>关于版本库、工作区和暂存区</h2><ul>\n<li>版本库/Repository：Git版本库，会自动创建分支master，以及指向master的HEAD指针；</li>\n<li>工作区/Working Directory：你在本地写代码的目录；</li>\n<li>暂存区/Stage：<ul>\n<li>当你使用<code>git add</code>时，是把本地代码提交到暂存区；</li>\n<li>而使用<code>git commit</code>时，则把暂存区的代码提交到当前的分支；</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/git/git.jpg\" alt=\"\"></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:YuyingWu/blog<span class=\"selector-class\">.git</span> <span class=\"comment\">// 从远程库克隆</span></span><br><span class=\"line\">git status <span class=\"comment\">// 查看状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件处理</span></span><br><span class=\"line\">git add &lt;file&gt; <span class=\"comment\">// 添加文件到暂存区</span></span><br><span class=\"line\">git rm &lt;file&gt; <span class=\"comment\">// 从版本库删除文件</span></span><br><span class=\"line\">git checkout -- &lt;file&gt; <span class=\"comment\">// 撤销更改</span></span><br><span class=\"line\">git reset HEAD &lt;file&gt; <span class=\"comment\">// 撤销更改</span></span><br><span class=\"line\">git diff HEAD -- &lt;file&gt; <span class=\"comment\">// 比较diff</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit <span class=\"comment\">// 把暂存区的所有内容提交到当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分支管理</span></span><br><span class=\"line\">git branch <span class=\"comment\">// 查看分支列表及当前分支，带参数-d代表删除某分支</span></span><br><span class=\"line\">git checkout branch-n <span class=\"comment\">// 切换到xx分支，带参数-b代表创建并切换</span></span><br><span class=\"line\">git checkout -<span class=\"selector-tag\">b</span> branch-n origin/branch-n <span class=\"comment\">// 创建与远程库对应的本地分支</span></span><br><span class=\"line\">git merge branch-n <span class=\"comment\">// 合并branch-n的代码到当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分支推送</span></span><br><span class=\"line\">git push origin master <span class=\"comment\">// origin为远程库，master为当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分支抓取</span></span><br><span class=\"line\">git pull <span class=\"comment\">// pull = fetch + merge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地分支push到远程仓库</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@github<span class=\"selector-class\">.com</span>:YuyingWu/blog.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"init\"</span></span><br><span class=\"line\">git push origin preact:preact</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git小贴士\"><a href=\"#Git小贴士\" class=\"headerlink\" title=\"Git小贴士\"></a>Git小贴士</h2><p><code>问</code>：怎么生成SSH key（SSH密钥）？<br><code>答</code>：命令行执行以下代码。Mac系统下，生成的id_rsa.pub和id_rsa在/Users/xxx/.ssh目录。<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C “your email <span class=\"built_in\">address</span>”</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/git/ssh.png\" alt=\"\"></p>\n<p><code>问</code>：想把一份代码同步到多个git源，咋整？<br><code>答</code>：打开本地工作区的.git/config文件，给remote “origin”多添加几个url即可</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/git/remote.png\" alt=\"\"></p>\n<p><code>问</code>：RPC failed<br><code>答</code>：默认Git设置<code>http post</code>的缓存为1MB，改为500MB后成功提交</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Question</span><br><span class=\"line\"><span class=\"keyword\">error: </span>RPC failed; HTTP 411 curl 22 The requested URL returned error: 411 Length Required</span><br><span class=\"line\">fatal: The remote end hung up unexpectedly</span><br><span class=\"line\"></span><br><span class=\"line\">// Solution</span><br><span class=\"line\">git config http.postBuffer  524288000</span><br></pre></td></tr></table></figure>\n<p><code>问</code>：不同的SSH key给不同的站点使用<br><code>答</code>：在<code>.ssh</code>目录下，添加<code>config</code>文件，给对应的站点指定读对应的rsa文件</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~/.ssh/github_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host git.coding.net</span><br><span class=\"line\">User wuyuying1128@163.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/coding_rsa</span><br></pre></td></tr></table></figure>"},{"title":"书单：给想成为全栈工程师的你","date":"2016-04-04T13:49:18.000Z","_content":"最近在看一本书[《Web 全栈工程师的自我修养》](https://book.douban.com/subject/26598045/) by [余果](https://yuguo.us)，书中很少提及技术详情，讲了一些全栈工程师的概念、技术栈甚至到设计、用户体验，广度还是很够的，这大概是作者工作成长过程的记录吧，对前端或者对程序员成长感兴趣的同学，推荐看看，前辈们的经验之谈，早点感受也蛮好的~\n\n<!-- more -->\n\n比较特别的一点是，每一章结束后，作者会推荐相关的几本书作为延伸阅读，下面收集了一下，算是给自己或者有需要的小伙伴一个参考吧 :)\n\n1. 什么是全栈工程师\n    * [黑客与画家](https://book.douban.com/subject/6021440/)\n    * [专业主义](https://book.douban.com/subject/1790456/)\n2. 如何成为全栈工程师\n    * [重来](https://book.douban.com/subject/5320866/)\n    * [精益创业](https://book.douban.com/subject/10945606/)\n3. 从学生到工程师\n    * [编程之美](https://book.douban.com/subject/3004255/)\n4. 野生程序员的故事\n    * [打造 Facebook](https://book.douban.com/subject/20471120/)\n5. 工程师事业指南\n    * [您就是极客](https://book.douban.com/subject/7055331/)\n    * [代码整洁之道](https://book.douban.com/subject/4199741/)\n6. 全栈工程师眼中的HTTP\n    * [图解 HTTP](https://book.douban.com/subject/25863515/)\n    * [高性能网站建设进阶指南](https://book.douban.com/subject/4719162/)\n7. 高性能网站的关键：缓存\n    * [网站性能监测与优化](https://book.douban.com/subject/5372270/)\n8. 大前端\n    * [精通CSS](https://book.douban.com/subject/4736167/)\n    * [单页 web 应用](https://book.douban.com/subject/25986284/)\n9. 向移动端转型\n    * [Getting Real](https://book.douban.com/subject/3567853/)\n    * [从 0 到 1](https://book.douban.com/subject/26297606/)\n    * [Building iPhone Apps with HTML, CSS, and Javascript](https://book.douban.com/subject/4254163/)\n10. 持续集成\n    * [Pro Git](https://book.douban.com/subject/3420144/)\n    * [Git 版本控制管理](https://book.douban.com/subject/5311565/)\n11. 理解编程语言\n    * [代码大全](https://book.douban.com/subject/1477390/)\n    * [代码的未来](https://book.douban.com/subject/24536403/)\n    * [禅与摩托车维修艺术](https://book.douban.com/subject/6811366/)\n12. 全栈游乐场（VPS）\n    * [鸟哥的Linux私房菜](https://book.douban.com/subject/4889838/)\n    * [只是为了好玩：Linux之父林纳斯自传](https://book.douban.com/subject/25930025/)\n13. 软件设计方法\n    * [设计模式](https://book.douban.com/subject/1052241/)\n    * [JavaScript 设计模式](https://book.douban.com/subject/3329540/)\n14. 高效工程师\n    * [软件随想录](https://book.douban.com/subject/4163938/)\n    * [卓有成效的程序员](https://book.douban.com/subject/3558788/)\n15. 学习设计\n    * [响应式 web 设计全流程解析](https://book.douban.com/subject/26241601/)\n    * [写给大家看的设计书](https://book.douban.com/subject/3323633/)\n    * [写给大家看的设计书：实例与创意](https://book.douban.com/subject/4837333/)\n16. 全栈思维\n    * [卓有成效的管理者](https://book.douban.com/subject/1322025/)\n    * [麦肯锡教我的写作武器](https://book.douban.com/subject/24745639/)\n    * [金字塔原理](https://book.douban.com/subject/25775696/)\n    * [安静：内向性格的竞争力](https://book.douban.com/subject/11601993/)\n","source":"_posts/full-stack.md","raw":"---\ntitle: 书单：给想成为全栈工程师的你\ntags:\n  - reading\n  - tech\ndate: 2016-04-04 21:49:18\n---\n最近在看一本书[《Web 全栈工程师的自我修养》](https://book.douban.com/subject/26598045/) by [余果](https://yuguo.us)，书中很少提及技术详情，讲了一些全栈工程师的概念、技术栈甚至到设计、用户体验，广度还是很够的，这大概是作者工作成长过程的记录吧，对前端或者对程序员成长感兴趣的同学，推荐看看，前辈们的经验之谈，早点感受也蛮好的~\n\n<!-- more -->\n\n比较特别的一点是，每一章结束后，作者会推荐相关的几本书作为延伸阅读，下面收集了一下，算是给自己或者有需要的小伙伴一个参考吧 :)\n\n1. 什么是全栈工程师\n    * [黑客与画家](https://book.douban.com/subject/6021440/)\n    * [专业主义](https://book.douban.com/subject/1790456/)\n2. 如何成为全栈工程师\n    * [重来](https://book.douban.com/subject/5320866/)\n    * [精益创业](https://book.douban.com/subject/10945606/)\n3. 从学生到工程师\n    * [编程之美](https://book.douban.com/subject/3004255/)\n4. 野生程序员的故事\n    * [打造 Facebook](https://book.douban.com/subject/20471120/)\n5. 工程师事业指南\n    * [您就是极客](https://book.douban.com/subject/7055331/)\n    * [代码整洁之道](https://book.douban.com/subject/4199741/)\n6. 全栈工程师眼中的HTTP\n    * [图解 HTTP](https://book.douban.com/subject/25863515/)\n    * [高性能网站建设进阶指南](https://book.douban.com/subject/4719162/)\n7. 高性能网站的关键：缓存\n    * [网站性能监测与优化](https://book.douban.com/subject/5372270/)\n8. 大前端\n    * [精通CSS](https://book.douban.com/subject/4736167/)\n    * [单页 web 应用](https://book.douban.com/subject/25986284/)\n9. 向移动端转型\n    * [Getting Real](https://book.douban.com/subject/3567853/)\n    * [从 0 到 1](https://book.douban.com/subject/26297606/)\n    * [Building iPhone Apps with HTML, CSS, and Javascript](https://book.douban.com/subject/4254163/)\n10. 持续集成\n    * [Pro Git](https://book.douban.com/subject/3420144/)\n    * [Git 版本控制管理](https://book.douban.com/subject/5311565/)\n11. 理解编程语言\n    * [代码大全](https://book.douban.com/subject/1477390/)\n    * [代码的未来](https://book.douban.com/subject/24536403/)\n    * [禅与摩托车维修艺术](https://book.douban.com/subject/6811366/)\n12. 全栈游乐场（VPS）\n    * [鸟哥的Linux私房菜](https://book.douban.com/subject/4889838/)\n    * [只是为了好玩：Linux之父林纳斯自传](https://book.douban.com/subject/25930025/)\n13. 软件设计方法\n    * [设计模式](https://book.douban.com/subject/1052241/)\n    * [JavaScript 设计模式](https://book.douban.com/subject/3329540/)\n14. 高效工程师\n    * [软件随想录](https://book.douban.com/subject/4163938/)\n    * [卓有成效的程序员](https://book.douban.com/subject/3558788/)\n15. 学习设计\n    * [响应式 web 设计全流程解析](https://book.douban.com/subject/26241601/)\n    * [写给大家看的设计书](https://book.douban.com/subject/3323633/)\n    * [写给大家看的设计书：实例与创意](https://book.douban.com/subject/4837333/)\n16. 全栈思维\n    * [卓有成效的管理者](https://book.douban.com/subject/1322025/)\n    * [麦肯锡教我的写作武器](https://book.douban.com/subject/24745639/)\n    * [金字塔原理](https://book.douban.com/subject/25775696/)\n    * [安静：内向性格的竞争力](https://book.douban.com/subject/11601993/)\n","slug":"full-stack","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8m001azvr3eb3euj87","content":"<p>最近在看一本书<a href=\"https://book.douban.com/subject/26598045/\" target=\"_blank\" rel=\"noopener\">《Web 全栈工程师的自我修养》</a> by <a href=\"https://yuguo.us\" target=\"_blank\" rel=\"noopener\">余果</a>，书中很少提及技术详情，讲了一些全栈工程师的概念、技术栈甚至到设计、用户体验，广度还是很够的，这大概是作者工作成长过程的记录吧，对前端或者对程序员成长感兴趣的同学，推荐看看，前辈们的经验之谈，早点感受也蛮好的~</p>\n<a id=\"more\"></a>\n<p>比较特别的一点是，每一章结束后，作者会推荐相关的几本书作为延伸阅读，下面收集了一下，算是给自己或者有需要的小伙伴一个参考吧 :)</p>\n<ol>\n<li>什么是全栈工程师<ul>\n<li><a href=\"https://book.douban.com/subject/6021440/\" target=\"_blank\" rel=\"noopener\">黑客与画家</a></li>\n<li><a href=\"https://book.douban.com/subject/1790456/\" target=\"_blank\" rel=\"noopener\">专业主义</a></li>\n</ul>\n</li>\n<li>如何成为全栈工程师<ul>\n<li><a href=\"https://book.douban.com/subject/5320866/\" target=\"_blank\" rel=\"noopener\">重来</a></li>\n<li><a href=\"https://book.douban.com/subject/10945606/\" target=\"_blank\" rel=\"noopener\">精益创业</a></li>\n</ul>\n</li>\n<li>从学生到工程师<ul>\n<li><a href=\"https://book.douban.com/subject/3004255/\" target=\"_blank\" rel=\"noopener\">编程之美</a></li>\n</ul>\n</li>\n<li>野生程序员的故事<ul>\n<li><a href=\"https://book.douban.com/subject/20471120/\" target=\"_blank\" rel=\"noopener\">打造 Facebook</a></li>\n</ul>\n</li>\n<li>工程师事业指南<ul>\n<li><a href=\"https://book.douban.com/subject/7055331/\" target=\"_blank\" rel=\"noopener\">您就是极客</a></li>\n<li><a href=\"https://book.douban.com/subject/4199741/\" target=\"_blank\" rel=\"noopener\">代码整洁之道</a></li>\n</ul>\n</li>\n<li>全栈工程师眼中的HTTP<ul>\n<li><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">图解 HTTP</a></li>\n<li><a href=\"https://book.douban.com/subject/4719162/\" target=\"_blank\" rel=\"noopener\">高性能网站建设进阶指南</a></li>\n</ul>\n</li>\n<li>高性能网站的关键：缓存<ul>\n<li><a href=\"https://book.douban.com/subject/5372270/\" target=\"_blank\" rel=\"noopener\">网站性能监测与优化</a></li>\n</ul>\n</li>\n<li>大前端<ul>\n<li><a href=\"https://book.douban.com/subject/4736167/\" target=\"_blank\" rel=\"noopener\">精通CSS</a></li>\n<li><a href=\"https://book.douban.com/subject/25986284/\" target=\"_blank\" rel=\"noopener\">单页 web 应用</a></li>\n</ul>\n</li>\n<li>向移动端转型<ul>\n<li><a href=\"https://book.douban.com/subject/3567853/\" target=\"_blank\" rel=\"noopener\">Getting Real</a></li>\n<li><a href=\"https://book.douban.com/subject/26297606/\" target=\"_blank\" rel=\"noopener\">从 0 到 1</a></li>\n<li><a href=\"https://book.douban.com/subject/4254163/\" target=\"_blank\" rel=\"noopener\">Building iPhone Apps with HTML, CSS, and Javascript</a></li>\n</ul>\n</li>\n<li>持续集成<ul>\n<li><a href=\"https://book.douban.com/subject/3420144/\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li>\n<li><a href=\"https://book.douban.com/subject/5311565/\" target=\"_blank\" rel=\"noopener\">Git 版本控制管理</a></li>\n</ul>\n</li>\n<li>理解编程语言<ul>\n<li><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener\">代码大全</a></li>\n<li><a href=\"https://book.douban.com/subject/24536403/\" target=\"_blank\" rel=\"noopener\">代码的未来</a></li>\n<li><a href=\"https://book.douban.com/subject/6811366/\" target=\"_blank\" rel=\"noopener\">禅与摩托车维修艺术</a></li>\n</ul>\n</li>\n<li>全栈游乐场（VPS）<ul>\n<li><a href=\"https://book.douban.com/subject/4889838/\" target=\"_blank\" rel=\"noopener\">鸟哥的Linux私房菜</a></li>\n<li><a href=\"https://book.douban.com/subject/25930025/\" target=\"_blank\" rel=\"noopener\">只是为了好玩：Linux之父林纳斯自传</a></li>\n</ul>\n</li>\n<li>软件设计方法<ul>\n<li><a href=\"https://book.douban.com/subject/1052241/\" target=\"_blank\" rel=\"noopener\">设计模式</a></li>\n<li><a href=\"https://book.douban.com/subject/3329540/\" target=\"_blank\" rel=\"noopener\">JavaScript 设计模式</a></li>\n</ul>\n</li>\n<li>高效工程师<ul>\n<li><a href=\"https://book.douban.com/subject/4163938/\" target=\"_blank\" rel=\"noopener\">软件随想录</a></li>\n<li><a href=\"https://book.douban.com/subject/3558788/\" target=\"_blank\" rel=\"noopener\">卓有成效的程序员</a></li>\n</ul>\n</li>\n<li>学习设计<ul>\n<li><a href=\"https://book.douban.com/subject/26241601/\" target=\"_blank\" rel=\"noopener\">响应式 web 设计全流程解析</a></li>\n<li><a href=\"https://book.douban.com/subject/3323633/\" target=\"_blank\" rel=\"noopener\">写给大家看的设计书</a></li>\n<li><a href=\"https://book.douban.com/subject/4837333/\" target=\"_blank\" rel=\"noopener\">写给大家看的设计书：实例与创意</a></li>\n</ul>\n</li>\n<li>全栈思维<ul>\n<li><a href=\"https://book.douban.com/subject/1322025/\" target=\"_blank\" rel=\"noopener\">卓有成效的管理者</a></li>\n<li><a href=\"https://book.douban.com/subject/24745639/\" target=\"_blank\" rel=\"noopener\">麦肯锡教我的写作武器</a></li>\n<li><a href=\"https://book.douban.com/subject/25775696/\" target=\"_blank\" rel=\"noopener\">金字塔原理</a></li>\n<li><a href=\"https://book.douban.com/subject/11601993/\" target=\"_blank\" rel=\"noopener\">安静：内向性格的竞争力</a></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近在看一本书<a href=\"https://book.douban.com/subject/26598045/\" target=\"_blank\" rel=\"noopener\">《Web 全栈工程师的自我修养》</a> by <a href=\"https://yuguo.us\" target=\"_blank\" rel=\"noopener\">余果</a>，书中很少提及技术详情，讲了一些全栈工程师的概念、技术栈甚至到设计、用户体验，广度还是很够的，这大概是作者工作成长过程的记录吧，对前端或者对程序员成长感兴趣的同学，推荐看看，前辈们的经验之谈，早点感受也蛮好的~</p>","more":"<p>比较特别的一点是，每一章结束后，作者会推荐相关的几本书作为延伸阅读，下面收集了一下，算是给自己或者有需要的小伙伴一个参考吧 :)</p>\n<ol>\n<li>什么是全栈工程师<ul>\n<li><a href=\"https://book.douban.com/subject/6021440/\" target=\"_blank\" rel=\"noopener\">黑客与画家</a></li>\n<li><a href=\"https://book.douban.com/subject/1790456/\" target=\"_blank\" rel=\"noopener\">专业主义</a></li>\n</ul>\n</li>\n<li>如何成为全栈工程师<ul>\n<li><a href=\"https://book.douban.com/subject/5320866/\" target=\"_blank\" rel=\"noopener\">重来</a></li>\n<li><a href=\"https://book.douban.com/subject/10945606/\" target=\"_blank\" rel=\"noopener\">精益创业</a></li>\n</ul>\n</li>\n<li>从学生到工程师<ul>\n<li><a href=\"https://book.douban.com/subject/3004255/\" target=\"_blank\" rel=\"noopener\">编程之美</a></li>\n</ul>\n</li>\n<li>野生程序员的故事<ul>\n<li><a href=\"https://book.douban.com/subject/20471120/\" target=\"_blank\" rel=\"noopener\">打造 Facebook</a></li>\n</ul>\n</li>\n<li>工程师事业指南<ul>\n<li><a href=\"https://book.douban.com/subject/7055331/\" target=\"_blank\" rel=\"noopener\">您就是极客</a></li>\n<li><a href=\"https://book.douban.com/subject/4199741/\" target=\"_blank\" rel=\"noopener\">代码整洁之道</a></li>\n</ul>\n</li>\n<li>全栈工程师眼中的HTTP<ul>\n<li><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">图解 HTTP</a></li>\n<li><a href=\"https://book.douban.com/subject/4719162/\" target=\"_blank\" rel=\"noopener\">高性能网站建设进阶指南</a></li>\n</ul>\n</li>\n<li>高性能网站的关键：缓存<ul>\n<li><a href=\"https://book.douban.com/subject/5372270/\" target=\"_blank\" rel=\"noopener\">网站性能监测与优化</a></li>\n</ul>\n</li>\n<li>大前端<ul>\n<li><a href=\"https://book.douban.com/subject/4736167/\" target=\"_blank\" rel=\"noopener\">精通CSS</a></li>\n<li><a href=\"https://book.douban.com/subject/25986284/\" target=\"_blank\" rel=\"noopener\">单页 web 应用</a></li>\n</ul>\n</li>\n<li>向移动端转型<ul>\n<li><a href=\"https://book.douban.com/subject/3567853/\" target=\"_blank\" rel=\"noopener\">Getting Real</a></li>\n<li><a href=\"https://book.douban.com/subject/26297606/\" target=\"_blank\" rel=\"noopener\">从 0 到 1</a></li>\n<li><a href=\"https://book.douban.com/subject/4254163/\" target=\"_blank\" rel=\"noopener\">Building iPhone Apps with HTML, CSS, and Javascript</a></li>\n</ul>\n</li>\n<li>持续集成<ul>\n<li><a href=\"https://book.douban.com/subject/3420144/\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li>\n<li><a href=\"https://book.douban.com/subject/5311565/\" target=\"_blank\" rel=\"noopener\">Git 版本控制管理</a></li>\n</ul>\n</li>\n<li>理解编程语言<ul>\n<li><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener\">代码大全</a></li>\n<li><a href=\"https://book.douban.com/subject/24536403/\" target=\"_blank\" rel=\"noopener\">代码的未来</a></li>\n<li><a href=\"https://book.douban.com/subject/6811366/\" target=\"_blank\" rel=\"noopener\">禅与摩托车维修艺术</a></li>\n</ul>\n</li>\n<li>全栈游乐场（VPS）<ul>\n<li><a href=\"https://book.douban.com/subject/4889838/\" target=\"_blank\" rel=\"noopener\">鸟哥的Linux私房菜</a></li>\n<li><a href=\"https://book.douban.com/subject/25930025/\" target=\"_blank\" rel=\"noopener\">只是为了好玩：Linux之父林纳斯自传</a></li>\n</ul>\n</li>\n<li>软件设计方法<ul>\n<li><a href=\"https://book.douban.com/subject/1052241/\" target=\"_blank\" rel=\"noopener\">设计模式</a></li>\n<li><a href=\"https://book.douban.com/subject/3329540/\" target=\"_blank\" rel=\"noopener\">JavaScript 设计模式</a></li>\n</ul>\n</li>\n<li>高效工程师<ul>\n<li><a href=\"https://book.douban.com/subject/4163938/\" target=\"_blank\" rel=\"noopener\">软件随想录</a></li>\n<li><a href=\"https://book.douban.com/subject/3558788/\" target=\"_blank\" rel=\"noopener\">卓有成效的程序员</a></li>\n</ul>\n</li>\n<li>学习设计<ul>\n<li><a href=\"https://book.douban.com/subject/26241601/\" target=\"_blank\" rel=\"noopener\">响应式 web 设计全流程解析</a></li>\n<li><a href=\"https://book.douban.com/subject/3323633/\" target=\"_blank\" rel=\"noopener\">写给大家看的设计书</a></li>\n<li><a href=\"https://book.douban.com/subject/4837333/\" target=\"_blank\" rel=\"noopener\">写给大家看的设计书：实例与创意</a></li>\n</ul>\n</li>\n<li>全栈思维<ul>\n<li><a href=\"https://book.douban.com/subject/1322025/\" target=\"_blank\" rel=\"noopener\">卓有成效的管理者</a></li>\n<li><a href=\"https://book.douban.com/subject/24745639/\" target=\"_blank\" rel=\"noopener\">麦肯锡教我的写作武器</a></li>\n<li><a href=\"https://book.douban.com/subject/25775696/\" target=\"_blank\" rel=\"noopener\">金字塔原理</a></li>\n<li><a href=\"https://book.douban.com/subject/11601993/\" target=\"_blank\" rel=\"noopener\">安静：内向性格的竞争力</a></li>\n</ul>\n</li>\n</ol>"},{"title":"Hi,fontmin","id":"126","date":"2015-05-27T15:38:54.000Z","_content":"\n相信FE同学们在日常开发中，经常遇到爱用特殊字体的UE，有时候偷偷改成微软雅黑会被发现（笑），被拆穿后只能乖乖切图，不过这样真的很不好，因为多一张图片（常常还是banner上的大文字）就多一个请求，哪怕用CSSsprite打包图片也占地儿，是不是？\n\n于是前阵子关注到baidu EFE的一个东东：[Fontmin](http://ecomfe.github.io/fontmin/)，具体介绍大家可以点过去看看哈。\n\nFontmin做的事情简单来说，引用字体文件弄成fontface，然后在font-family中引用该自定义字体，最赞的一点是，不需要引进该字体完整的字形，只取你自己需要的文字产出的定制化的字符文件，譬如最近一个项目用到的思源黑体（bold），完整的字符文件22.6MB，其实我只要几个字，产出的ttf只有7KB，真心牛，给32个赞！\n<!--more-->\n\n我用的是OS版的fontmin-app（可以点[这里](https://github.com/ecomfe/fontmin-app/releases)下载哈），可视化界面，拖进字体文件（tff格式），输入目标文字，点击“生成”，然后帮你生成css文件（fontface声明）和相关格式的字体文件eot/svg/ttf/woff（多种格式应该是出于浏览器兼容的考虑吧~）\n\n![](http://cdn.sinacloud.net/woodysblog/fontmin/1.jpg \"fontmin-app\")\n\n    @font-face {\n        font-family: \"SourceHanSansK-Bold\";\n        src: url(\"SourceHanSansK-Bold.eot\"); /* IE9 */\n        src: url(\"SourceHanSansK-Bold.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n\n        url(\"SourceHanSansK-Bold.woff\") format(\"woff\"), /* chrome、firefox */\n        url(\"SourceHanSansK-Bold.ttf\") format(\"truetype\"), /* chrome、firefox、opera、Safari, Android, iOS 4.2+ */\n\n        url(\"SourceHanSansK-Bold.svg#SourceHanSansK-Bold\") format(\"svg\"); /* iOS 4.1- */\n        font-style: normal;\n        font-weight: normal; }\n    `</pre>\n    引用很简单~\n    <pre>`font-family: \"SourceHanSansK-Bold\";\n    font-size: 36px;\n\n但是问题来了，思源黑体网上下载的一般是otf格式的文件，而fontmin只支持tff，怎么破？\n\n都12点了，先这样吧，后续再记录一下怎么在OS上把字体文件的格式从otf转成tff。\n\n* * *\n\n/** 我是华丽的分割线 **/\n\n* * *\n\n好，下面讲一下在MAC上怎么把otf转成ttf。\n\n推荐一个app：Fontographer\n\n![](http://cdn.sinacloud.net/woodysblog/fontmin/2.jpg \"Fontographer\")\n\n步骤：\n\n*   准备好字体文件（otf格式）\n*   在Fontographer中打开otf文件【 file -&gt; open 】\n*   转换格式 【 file -&gt; generate font files -&gt; ttf】\n![](http://cdn.sinacloud.net/woodysblog/fontmin/3.jpg \"generate font files\")\n","source":"_posts/fontmin.md","raw":"---\ntitle: 'Hi,fontmin'\ntags:\n  - tech\nid: 126\ncategories:\n  - tech\ndate: 2015-05-27 23:38:54\n---\n\n相信FE同学们在日常开发中，经常遇到爱用特殊字体的UE，有时候偷偷改成微软雅黑会被发现（笑），被拆穿后只能乖乖切图，不过这样真的很不好，因为多一张图片（常常还是banner上的大文字）就多一个请求，哪怕用CSSsprite打包图片也占地儿，是不是？\n\n于是前阵子关注到baidu EFE的一个东东：[Fontmin](http://ecomfe.github.io/fontmin/)，具体介绍大家可以点过去看看哈。\n\nFontmin做的事情简单来说，引用字体文件弄成fontface，然后在font-family中引用该自定义字体，最赞的一点是，不需要引进该字体完整的字形，只取你自己需要的文字产出的定制化的字符文件，譬如最近一个项目用到的思源黑体（bold），完整的字符文件22.6MB，其实我只要几个字，产出的ttf只有7KB，真心牛，给32个赞！\n<!--more-->\n\n我用的是OS版的fontmin-app（可以点[这里](https://github.com/ecomfe/fontmin-app/releases)下载哈），可视化界面，拖进字体文件（tff格式），输入目标文字，点击“生成”，然后帮你生成css文件（fontface声明）和相关格式的字体文件eot/svg/ttf/woff（多种格式应该是出于浏览器兼容的考虑吧~）\n\n![](http://cdn.sinacloud.net/woodysblog/fontmin/1.jpg \"fontmin-app\")\n\n    @font-face {\n        font-family: \"SourceHanSansK-Bold\";\n        src: url(\"SourceHanSansK-Bold.eot\"); /* IE9 */\n        src: url(\"SourceHanSansK-Bold.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n\n        url(\"SourceHanSansK-Bold.woff\") format(\"woff\"), /* chrome、firefox */\n        url(\"SourceHanSansK-Bold.ttf\") format(\"truetype\"), /* chrome、firefox、opera、Safari, Android, iOS 4.2+ */\n\n        url(\"SourceHanSansK-Bold.svg#SourceHanSansK-Bold\") format(\"svg\"); /* iOS 4.1- */\n        font-style: normal;\n        font-weight: normal; }\n    `</pre>\n    引用很简单~\n    <pre>`font-family: \"SourceHanSansK-Bold\";\n    font-size: 36px;\n\n但是问题来了，思源黑体网上下载的一般是otf格式的文件，而fontmin只支持tff，怎么破？\n\n都12点了，先这样吧，后续再记录一下怎么在OS上把字体文件的格式从otf转成tff。\n\n* * *\n\n/** 我是华丽的分割线 **/\n\n* * *\n\n好，下面讲一下在MAC上怎么把otf转成ttf。\n\n推荐一个app：Fontographer\n\n![](http://cdn.sinacloud.net/woodysblog/fontmin/2.jpg \"Fontographer\")\n\n步骤：\n\n*   准备好字体文件（otf格式）\n*   在Fontographer中打开otf文件【 file -&gt; open 】\n*   转换格式 【 file -&gt; generate font files -&gt; ttf】\n![](http://cdn.sinacloud.net/woodysblog/fontmin/3.jpg \"generate font files\")\n","slug":"fontmin","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8n001czvr3nuexppxq","content":"<p>相信FE同学们在日常开发中，经常遇到爱用特殊字体的UE，有时候偷偷改成微软雅黑会被发现（笑），被拆穿后只能乖乖切图，不过这样真的很不好，因为多一张图片（常常还是banner上的大文字）就多一个请求，哪怕用CSSsprite打包图片也占地儿，是不是？</p>\n<p>于是前阵子关注到baidu EFE的一个东东：<a href=\"http://ecomfe.github.io/fontmin/\" target=\"_blank\" rel=\"noopener\">Fontmin</a>，具体介绍大家可以点过去看看哈。</p>\n<p>Fontmin做的事情简单来说，引用字体文件弄成fontface，然后在font-family中引用该自定义字体，最赞的一点是，不需要引进该字体完整的字形，只取你自己需要的文字产出的定制化的字符文件，譬如最近一个项目用到的思源黑体（bold），完整的字符文件22.6MB，其实我只要几个字，产出的ttf只有7KB，真心牛，给32个赞！<br><a id=\"more\"></a></p>\n<p>我用的是OS版的fontmin-app（可以点<a href=\"https://github.com/ecomfe/fontmin-app/releases\" target=\"_blank\" rel=\"noopener\">这里</a>下载哈），可视化界面，拖进字体文件（tff格式），输入目标文字，点击“生成”，然后帮你生成css文件（fontface声明）和相关格式的字体文件eot/svg/ttf/woff（多种格式应该是出于浏览器兼容的考虑吧~）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/fontmin/1.jpg\" alt=\"\" title=\"fontmin-app\"></p>\n<pre><code>@font-face {\n    font-family: &quot;SourceHanSansK-Bold&quot;;\n    src: url(&quot;SourceHanSansK-Bold.eot&quot;); /* IE9 */\n    src: url(&quot;SourceHanSansK-Bold.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;), /* IE6-IE8 */\n\n    url(&quot;SourceHanSansK-Bold.woff&quot;) format(&quot;woff&quot;), /* chrome、firefox */\n    url(&quot;SourceHanSansK-Bold.ttf&quot;) format(&quot;truetype&quot;), /* chrome、firefox、opera、Safari, Android, iOS 4.2+ */\n\n    url(&quot;SourceHanSansK-Bold.svg#SourceHanSansK-Bold&quot;) format(&quot;svg&quot;); /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal; }\n`&lt;/pre&gt;\n引用很简单~\n&lt;pre&gt;`font-family: &quot;SourceHanSansK-Bold&quot;;\nfont-size: 36px;\n</code></pre><p>但是问题来了，思源黑体网上下载的一般是otf格式的文件，而fontmin只支持tff，怎么破？</p>\n<p>都12点了，先这样吧，后续再记录一下怎么在OS上把字体文件的格式从otf转成tff。</p>\n<hr>\n<p>/<strong> 我是华丽的分割线 </strong>/</p>\n<hr>\n<p>好，下面讲一下在MAC上怎么把otf转成ttf。</p>\n<p>推荐一个app：Fontographer</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/fontmin/2.jpg\" alt=\"\" title=\"Fontographer\"></p>\n<p>步骤：</p>\n<ul>\n<li>准备好字体文件（otf格式）</li>\n<li>在Fontographer中打开otf文件【 file -&gt; open 】</li>\n<li>转换格式 【 file -&gt; generate font files -&gt; ttf】<br><img src=\"http://cdn.sinacloud.net/woodysblog/fontmin/3.jpg\" alt=\"\" title=\"generate font files\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>相信FE同学们在日常开发中，经常遇到爱用特殊字体的UE，有时候偷偷改成微软雅黑会被发现（笑），被拆穿后只能乖乖切图，不过这样真的很不好，因为多一张图片（常常还是banner上的大文字）就多一个请求，哪怕用CSSsprite打包图片也占地儿，是不是？</p>\n<p>于是前阵子关注到baidu EFE的一个东东：<a href=\"http://ecomfe.github.io/fontmin/\" target=\"_blank\" rel=\"noopener\">Fontmin</a>，具体介绍大家可以点过去看看哈。</p>\n<p>Fontmin做的事情简单来说，引用字体文件弄成fontface，然后在font-family中引用该自定义字体，最赞的一点是，不需要引进该字体完整的字形，只取你自己需要的文字产出的定制化的字符文件，譬如最近一个项目用到的思源黑体（bold），完整的字符文件22.6MB，其实我只要几个字，产出的ttf只有7KB，真心牛，给32个赞！<br>","more":"</p>\n<p>我用的是OS版的fontmin-app（可以点<a href=\"https://github.com/ecomfe/fontmin-app/releases\" target=\"_blank\" rel=\"noopener\">这里</a>下载哈），可视化界面，拖进字体文件（tff格式），输入目标文字，点击“生成”，然后帮你生成css文件（fontface声明）和相关格式的字体文件eot/svg/ttf/woff（多种格式应该是出于浏览器兼容的考虑吧~）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/fontmin/1.jpg\" alt=\"\" title=\"fontmin-app\"></p>\n<pre><code>@font-face {\n    font-family: &quot;SourceHanSansK-Bold&quot;;\n    src: url(&quot;SourceHanSansK-Bold.eot&quot;); /* IE9 */\n    src: url(&quot;SourceHanSansK-Bold.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;), /* IE6-IE8 */\n\n    url(&quot;SourceHanSansK-Bold.woff&quot;) format(&quot;woff&quot;), /* chrome、firefox */\n    url(&quot;SourceHanSansK-Bold.ttf&quot;) format(&quot;truetype&quot;), /* chrome、firefox、opera、Safari, Android, iOS 4.2+ */\n\n    url(&quot;SourceHanSansK-Bold.svg#SourceHanSansK-Bold&quot;) format(&quot;svg&quot;); /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal; }\n`&lt;/pre&gt;\n引用很简单~\n&lt;pre&gt;`font-family: &quot;SourceHanSansK-Bold&quot;;\nfont-size: 36px;\n</code></pre><p>但是问题来了，思源黑体网上下载的一般是otf格式的文件，而fontmin只支持tff，怎么破？</p>\n<p>都12点了，先这样吧，后续再记录一下怎么在OS上把字体文件的格式从otf转成tff。</p>\n<hr>\n<p>/<strong> 我是华丽的分割线 </strong>/</p>\n<hr>\n<p>好，下面讲一下在MAC上怎么把otf转成ttf。</p>\n<p>推荐一个app：Fontographer</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/fontmin/2.jpg\" alt=\"\" title=\"Fontographer\"></p>\n<p>步骤：</p>\n<ul>\n<li>准备好字体文件（otf格式）</li>\n<li>在Fontographer中打开otf文件【 file -&gt; open 】</li>\n<li>转换格式 【 file -&gt; generate font files -&gt; ttf】<br><img src=\"http://cdn.sinacloud.net/woodysblog/fontmin/3.jpg\" alt=\"\" title=\"generate font files\"></li>\n</ul>"},{"title":"Google工作整理术","id":"283","date":"2016-03-12T12:12:20.000Z","type":"title","_content":"\n读了一本书《Google工作整理术》，里面提到很多方法论，以下摘录个人比较喜欢的：\n\n> 较之为了构建自己的“独门”知识或者为了向大家证明你是拥有特殊知识的唯一人选而没日没夜的疯狂工作，这是好得多的方法。成立一个团队，搞清楚什么是你擅长的，坦承什么是你不熟悉的。把你不擅长的工作委派给别人，并且要信任他们，放手让他们去做。经常尝试和那些比自己聪明，其背景、眼界与技能跟自己迥然不同的人共事，这样会更好。分享自己的所知，鼓励别人也这么做，你就会从他们那里学有所获，他们也可以从你这里学到东西，然后你们都会胜任更好的工作。这不是你首先应该努力的目标吗？\n工作以后，我们会发现，经常自己陷入了一个“无限加班”的困境，倒不会抱怨什么，反而觉得自己做的事情特别有意义，证明自己很有“存在感”。文中的这个观点，我觉得要学习下，弄清楚自己擅长什么，也要坦承自己不擅长什么，给自己给别人做更合适的事情，比自己什么都扛下来要更加有意义和价值。\n\n> 每个人的组织模式不是一模一样的。\n>   \n> 我们今天需要的是一种全新的有序组织方法，这种方法能够辨别我们的个体差异，考虑我们自身的制约和弱点，充分利用无所不在的可能技术。这种新式组织方法甚至赋予我们脱离组织的自由。\n>   \n> 不需要强求跟别人的组织模式保持一致，按自己的习惯走，作者喜欢用Google系的搜索、gmail、docs等工具进行组织，而我喜欢用搜索、印象笔记和日历收集记录，萝卜青菜各有所爱，花点心思了解自己和日常生活、工作，找到适合自己的组织模式吧~\n>   \n> 每周都抽出一定的时间，回顾温习本周搜集的信息 —— 会议记录、电子邮件、收藏网页，如此等等。需要关注某个主题的时候，再次回顾温习相关信息，有助于记住这些信息。需要用到信息的时候能够轻松记起，就会更加有条不紊，也更容易取得成功。\n>   \n> 在信息爆炸时代，我们日常接收到的信息是非常非常多的，正如我平时每天会写工作日记，然后在浏览网页或者朋友推荐的各种吃喝玩乐信息收集之后，如果我不去整理会怎么样呢？我也许根本想不起自己收集过什么信息，也就mark一下，这样的信息对我可能就没有任何作用了，所以我们需要每周（定期）review这段时间收集到的信息，打tag、分类等组织它们，等到后面我们忽然想要用的时候能方便找到。\n\n最后，给大家带来书中提到的方法论合集，有关“有序组织”的原理：\n  \n> 1.  为了实现大脑压力最小化，要把生活组织得有条不紊。\n> 2.  让信息尽可能快地离开大脑。\n> 3.  多重任务通常会让你降低效率。\n> 4.  利用故事去记忆。\n> 5.  仅仅因为一直都是按照某种特定方式做某事，并不意味着就该永远这样做。\n> 6.  知识不是力量，共享只是才是力量。\n> 7.  进行组织安排时，要绕开的是实际制约而不是假性制约。\n> 8.  对自己要坦诚，但是千万不要自我评判。\n> 9.  要懂得什么时候忽略制约。\n> 10.  在发动汽车之前，一定要确切的搞清楚自己要到哪里去，还要知道选择什么途径去。\n> 11.  在实现目标的方式上要灵活变通。\n> 12.  不要给信息归档，用的时候去搜索就行了。\n> 13.  大脑中只保存真正需要记忆的内容。\n> 14.  大块内容要化整为零。\n> 15.  每周拿出些时间回顾关键信息。\n> 16.  没有一个完美无缺的组织方法。\n> 17.  在数字信息中加上相应的关键词，以便日后容易找到。\n> 18.  尽量使用已经上手的工具。\n","source":"_posts/google-organization.md","raw":"---\ntitle: Google工作整理术\ntags:\n  - efficiency\n  - reading\nid: 283\ncategories:\n  - 未分类\ndate: 2016-03-12 20:12:20\ntype: title\n---\n\n读了一本书《Google工作整理术》，里面提到很多方法论，以下摘录个人比较喜欢的：\n\n> 较之为了构建自己的“独门”知识或者为了向大家证明你是拥有特殊知识的唯一人选而没日没夜的疯狂工作，这是好得多的方法。成立一个团队，搞清楚什么是你擅长的，坦承什么是你不熟悉的。把你不擅长的工作委派给别人，并且要信任他们，放手让他们去做。经常尝试和那些比自己聪明，其背景、眼界与技能跟自己迥然不同的人共事，这样会更好。分享自己的所知，鼓励别人也这么做，你就会从他们那里学有所获，他们也可以从你这里学到东西，然后你们都会胜任更好的工作。这不是你首先应该努力的目标吗？\n工作以后，我们会发现，经常自己陷入了一个“无限加班”的困境，倒不会抱怨什么，反而觉得自己做的事情特别有意义，证明自己很有“存在感”。文中的这个观点，我觉得要学习下，弄清楚自己擅长什么，也要坦承自己不擅长什么，给自己给别人做更合适的事情，比自己什么都扛下来要更加有意义和价值。\n\n> 每个人的组织模式不是一模一样的。\n>   \n> 我们今天需要的是一种全新的有序组织方法，这种方法能够辨别我们的个体差异，考虑我们自身的制约和弱点，充分利用无所不在的可能技术。这种新式组织方法甚至赋予我们脱离组织的自由。\n>   \n> 不需要强求跟别人的组织模式保持一致，按自己的习惯走，作者喜欢用Google系的搜索、gmail、docs等工具进行组织，而我喜欢用搜索、印象笔记和日历收集记录，萝卜青菜各有所爱，花点心思了解自己和日常生活、工作，找到适合自己的组织模式吧~\n>   \n> 每周都抽出一定的时间，回顾温习本周搜集的信息 —— 会议记录、电子邮件、收藏网页，如此等等。需要关注某个主题的时候，再次回顾温习相关信息，有助于记住这些信息。需要用到信息的时候能够轻松记起，就会更加有条不紊，也更容易取得成功。\n>   \n> 在信息爆炸时代，我们日常接收到的信息是非常非常多的，正如我平时每天会写工作日记，然后在浏览网页或者朋友推荐的各种吃喝玩乐信息收集之后，如果我不去整理会怎么样呢？我也许根本想不起自己收集过什么信息，也就mark一下，这样的信息对我可能就没有任何作用了，所以我们需要每周（定期）review这段时间收集到的信息，打tag、分类等组织它们，等到后面我们忽然想要用的时候能方便找到。\n\n最后，给大家带来书中提到的方法论合集，有关“有序组织”的原理：\n  \n> 1.  为了实现大脑压力最小化，要把生活组织得有条不紊。\n> 2.  让信息尽可能快地离开大脑。\n> 3.  多重任务通常会让你降低效率。\n> 4.  利用故事去记忆。\n> 5.  仅仅因为一直都是按照某种特定方式做某事，并不意味着就该永远这样做。\n> 6.  知识不是力量，共享只是才是力量。\n> 7.  进行组织安排时，要绕开的是实际制约而不是假性制约。\n> 8.  对自己要坦诚，但是千万不要自我评判。\n> 9.  要懂得什么时候忽略制约。\n> 10.  在发动汽车之前，一定要确切的搞清楚自己要到哪里去，还要知道选择什么途径去。\n> 11.  在实现目标的方式上要灵活变通。\n> 12.  不要给信息归档，用的时候去搜索就行了。\n> 13.  大脑中只保存真正需要记忆的内容。\n> 14.  大块内容要化整为零。\n> 15.  每周拿出些时间回顾关键信息。\n> 16.  没有一个完美无缺的组织方法。\n> 17.  在数字信息中加上相应的关键词，以便日后容易找到。\n> 18.  尽量使用已经上手的工具。\n","slug":"google-organization","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8o001ezvr3p58rdjwy","content":"<p>读了一本书《Google工作整理术》，里面提到很多方法论，以下摘录个人比较喜欢的：</p>\n<blockquote>\n<p>较之为了构建自己的“独门”知识或者为了向大家证明你是拥有特殊知识的唯一人选而没日没夜的疯狂工作，这是好得多的方法。成立一个团队，搞清楚什么是你擅长的，坦承什么是你不熟悉的。把你不擅长的工作委派给别人，并且要信任他们，放手让他们去做。经常尝试和那些比自己聪明，其背景、眼界与技能跟自己迥然不同的人共事，这样会更好。分享自己的所知，鼓励别人也这么做，你就会从他们那里学有所获，他们也可以从你这里学到东西，然后你们都会胜任更好的工作。这不是你首先应该努力的目标吗？<br>工作以后，我们会发现，经常自己陷入了一个“无限加班”的困境，倒不会抱怨什么，反而觉得自己做的事情特别有意义，证明自己很有“存在感”。文中的这个观点，我觉得要学习下，弄清楚自己擅长什么，也要坦承自己不擅长什么，给自己给别人做更合适的事情，比自己什么都扛下来要更加有意义和价值。</p>\n</blockquote>\n<blockquote>\n<p>每个人的组织模式不是一模一样的。</p>\n<p>我们今天需要的是一种全新的有序组织方法，这种方法能够辨别我们的个体差异，考虑我们自身的制约和弱点，充分利用无所不在的可能技术。这种新式组织方法甚至赋予我们脱离组织的自由。</p>\n<p>不需要强求跟别人的组织模式保持一致，按自己的习惯走，作者喜欢用Google系的搜索、gmail、docs等工具进行组织，而我喜欢用搜索、印象笔记和日历收集记录，萝卜青菜各有所爱，花点心思了解自己和日常生活、工作，找到适合自己的组织模式吧~</p>\n<p>每周都抽出一定的时间，回顾温习本周搜集的信息 —— 会议记录、电子邮件、收藏网页，如此等等。需要关注某个主题的时候，再次回顾温习相关信息，有助于记住这些信息。需要用到信息的时候能够轻松记起，就会更加有条不紊，也更容易取得成功。</p>\n<p>在信息爆炸时代，我们日常接收到的信息是非常非常多的，正如我平时每天会写工作日记，然后在浏览网页或者朋友推荐的各种吃喝玩乐信息收集之后，如果我不去整理会怎么样呢？我也许根本想不起自己收集过什么信息，也就mark一下，这样的信息对我可能就没有任何作用了，所以我们需要每周（定期）review这段时间收集到的信息，打tag、分类等组织它们，等到后面我们忽然想要用的时候能方便找到。</p>\n</blockquote>\n<p>最后，给大家带来书中提到的方法论合集，有关“有序组织”的原理：</p>\n<blockquote>\n<ol>\n<li>为了实现大脑压力最小化，要把生活组织得有条不紊。</li>\n<li>让信息尽可能快地离开大脑。</li>\n<li>多重任务通常会让你降低效率。</li>\n<li>利用故事去记忆。</li>\n<li>仅仅因为一直都是按照某种特定方式做某事，并不意味着就该永远这样做。</li>\n<li>知识不是力量，共享只是才是力量。</li>\n<li>进行组织安排时，要绕开的是实际制约而不是假性制约。</li>\n<li>对自己要坦诚，但是千万不要自我评判。</li>\n<li>要懂得什么时候忽略制约。</li>\n<li>在发动汽车之前，一定要确切的搞清楚自己要到哪里去，还要知道选择什么途径去。</li>\n<li>在实现目标的方式上要灵活变通。</li>\n<li>不要给信息归档，用的时候去搜索就行了。</li>\n<li>大脑中只保存真正需要记忆的内容。</li>\n<li>大块内容要化整为零。</li>\n<li>每周拿出些时间回顾关键信息。</li>\n<li>没有一个完美无缺的组织方法。</li>\n<li>在数字信息中加上相应的关键词，以便日后容易找到。</li>\n<li>尽量使用已经上手的工具。</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>读了一本书《Google工作整理术》，里面提到很多方法论，以下摘录个人比较喜欢的：</p>\n<blockquote>\n<p>较之为了构建自己的“独门”知识或者为了向大家证明你是拥有特殊知识的唯一人选而没日没夜的疯狂工作，这是好得多的方法。成立一个团队，搞清楚什么是你擅长的，坦承什么是你不熟悉的。把你不擅长的工作委派给别人，并且要信任他们，放手让他们去做。经常尝试和那些比自己聪明，其背景、眼界与技能跟自己迥然不同的人共事，这样会更好。分享自己的所知，鼓励别人也这么做，你就会从他们那里学有所获，他们也可以从你这里学到东西，然后你们都会胜任更好的工作。这不是你首先应该努力的目标吗？<br>工作以后，我们会发现，经常自己陷入了一个“无限加班”的困境，倒不会抱怨什么，反而觉得自己做的事情特别有意义，证明自己很有“存在感”。文中的这个观点，我觉得要学习下，弄清楚自己擅长什么，也要坦承自己不擅长什么，给自己给别人做更合适的事情，比自己什么都扛下来要更加有意义和价值。</p>\n</blockquote>\n<blockquote>\n<p>每个人的组织模式不是一模一样的。</p>\n<p>我们今天需要的是一种全新的有序组织方法，这种方法能够辨别我们的个体差异，考虑我们自身的制约和弱点，充分利用无所不在的可能技术。这种新式组织方法甚至赋予我们脱离组织的自由。</p>\n<p>不需要强求跟别人的组织模式保持一致，按自己的习惯走，作者喜欢用Google系的搜索、gmail、docs等工具进行组织，而我喜欢用搜索、印象笔记和日历收集记录，萝卜青菜各有所爱，花点心思了解自己和日常生活、工作，找到适合自己的组织模式吧~</p>\n<p>每周都抽出一定的时间，回顾温习本周搜集的信息 —— 会议记录、电子邮件、收藏网页，如此等等。需要关注某个主题的时候，再次回顾温习相关信息，有助于记住这些信息。需要用到信息的时候能够轻松记起，就会更加有条不紊，也更容易取得成功。</p>\n<p>在信息爆炸时代，我们日常接收到的信息是非常非常多的，正如我平时每天会写工作日记，然后在浏览网页或者朋友推荐的各种吃喝玩乐信息收集之后，如果我不去整理会怎么样呢？我也许根本想不起自己收集过什么信息，也就mark一下，这样的信息对我可能就没有任何作用了，所以我们需要每周（定期）review这段时间收集到的信息，打tag、分类等组织它们，等到后面我们忽然想要用的时候能方便找到。</p>\n</blockquote>\n<p>最后，给大家带来书中提到的方法论合集，有关“有序组织”的原理：</p>\n<blockquote>\n<ol>\n<li>为了实现大脑压力最小化，要把生活组织得有条不紊。</li>\n<li>让信息尽可能快地离开大脑。</li>\n<li>多重任务通常会让你降低效率。</li>\n<li>利用故事去记忆。</li>\n<li>仅仅因为一直都是按照某种特定方式做某事，并不意味着就该永远这样做。</li>\n<li>知识不是力量，共享只是才是力量。</li>\n<li>进行组织安排时，要绕开的是实际制约而不是假性制约。</li>\n<li>对自己要坦诚，但是千万不要自我评判。</li>\n<li>要懂得什么时候忽略制约。</li>\n<li>在发动汽车之前，一定要确切的搞清楚自己要到哪里去，还要知道选择什么途径去。</li>\n<li>在实现目标的方式上要灵活变通。</li>\n<li>不要给信息归档，用的时候去搜索就行了。</li>\n<li>大脑中只保存真正需要记忆的内容。</li>\n<li>大块内容要化整为零。</li>\n<li>每周拿出些时间回顾关键信息。</li>\n<li>没有一个完美无缺的组织方法。</li>\n<li>在数字信息中加上相应的关键词，以便日后容易找到。</li>\n<li>尽量使用已经上手的工具。</li>\n</ol>\n</blockquote>\n"},{"title":"怎么把Moves数据（.gpx）导入到Google Map","date":"2016-11-19T12:06:18.000Z","type":"photo","cover":"http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg","_content":"\n装逼我们是认真的，论怎样高逼格的暴露自己的行踪~\n\n<!-- more -->\n\n所以本文的目标，说到底只是想暴露一下我的第一次9小时的雪山穿越~\n\n![\"Tongariro Alpine Crossing in Tongariro Nation Park\"](http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg)\n\n不打算介绍高逼格、记录行踪神器[Moves](https://www.moves-app.com/)和[Google Map](https://www.google.co.nz/maps/)了~所以本文只适合已经知道这些的盆友们。\n\n## 从Moves导出定位数据 —— gpx文件\n\n1. 进入Moves相关应用 —— Moves Export的页面\n2. 点击”GET STARTED”获取Moves授权的PIN码\n3. PIN码页面上有授权提示啦，其实就是在手机上的Moves输入PIN码完成授权过程\n4. 页面自动跳转，在Moves Export的菜单栏，选择”Your Storylines“，看到某天某个时间段的行踪了吧~\n5. 选好日期，在右侧一堆按钮里选择绿色”GPX”，把GPX文件保存到本地。\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/1getGpx.jpg)\n\n## 在Google Map创建自己的地图\n\n菜单 -> 您的地点 -> 地图 -> 创建地图 -> 导入GPX文件\n\n![\"创建地图\"](http://cdn.sinacloud.net/woodysblog/gpx/2createMap.jpg)\n\n![\"导入gpx数据\"](http://cdn.sinacloud.net/woodysblog/gpx/3import.jpg)\n\n## 地图编辑\n\n1.新增标记、绘制线条、添加路线等\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/4create.jpg)\n\n2.图层数据编辑(重命名、编辑原始数据表、删除图层)\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/5layer.jpg)\n\n3.某个点的图标、定义编辑\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/6pointEdit.jpg)\n\n4.在编辑菜单拉到最下面的“基本地图”，是要选择你想怎样显示地图，包括默认视图、卫星、地形等等。本文例子的穿越高山主题，所以地图我选择了”地形”展示。\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/6map.jpg)\n\n## 分享\n\n1.设置地图的访问权限：共享 - “私密” -> “在网络公开”\n\n![\"共享\"](http://cdn.sinacloud.net/woodysblog/gpx/7share1.jpg)\n\n![\"私密\"](http://cdn.sinacloud.net/woodysblog/gpx/7share2.jpg)\n\n![\"公开\"](http://cdn.sinacloud.net/woodysblog/gpx/7share3.jpg)\n\n2.分享\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/7share4.jpg)\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/7share5.jpg)\n\ni. 图片（自行截图或打印）\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg)\n\nii. 分享链接\n\n```\nhttps://drive.google.com/open?id=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU&usp=sharing\n```\n\niii.嵌入到网站(具体以官方代码为准哈，此处为适应博客主题，iframe样式有调整过)\n\n```\n<iframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\" width=\"640\" height=\"480\"></iframe>\n```\n\n下面是Google Map的iframe~可能没有翻墙会看不到 T_T\n\n<iframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\" width=\"100%\" height=\"480\"></iframe>\n","source":"_posts/gpx.md","raw":"---\ntitle: 怎么把Moves数据（.gpx）导入到Google Map\ntags:\n  - Google Map\n  - gpx\ndate: 2016-11-19 20:06:18\ntype: photo\ncover: http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg\n---\n\n装逼我们是认真的，论怎样高逼格的暴露自己的行踪~\n\n<!-- more -->\n\n所以本文的目标，说到底只是想暴露一下我的第一次9小时的雪山穿越~\n\n![\"Tongariro Alpine Crossing in Tongariro Nation Park\"](http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg)\n\n不打算介绍高逼格、记录行踪神器[Moves](https://www.moves-app.com/)和[Google Map](https://www.google.co.nz/maps/)了~所以本文只适合已经知道这些的盆友们。\n\n## 从Moves导出定位数据 —— gpx文件\n\n1. 进入Moves相关应用 —— Moves Export的页面\n2. 点击”GET STARTED”获取Moves授权的PIN码\n3. PIN码页面上有授权提示啦，其实就是在手机上的Moves输入PIN码完成授权过程\n4. 页面自动跳转，在Moves Export的菜单栏，选择”Your Storylines“，看到某天某个时间段的行踪了吧~\n5. 选好日期，在右侧一堆按钮里选择绿色”GPX”，把GPX文件保存到本地。\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/1getGpx.jpg)\n\n## 在Google Map创建自己的地图\n\n菜单 -> 您的地点 -> 地图 -> 创建地图 -> 导入GPX文件\n\n![\"创建地图\"](http://cdn.sinacloud.net/woodysblog/gpx/2createMap.jpg)\n\n![\"导入gpx数据\"](http://cdn.sinacloud.net/woodysblog/gpx/3import.jpg)\n\n## 地图编辑\n\n1.新增标记、绘制线条、添加路线等\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/4create.jpg)\n\n2.图层数据编辑(重命名、编辑原始数据表、删除图层)\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/5layer.jpg)\n\n3.某个点的图标、定义编辑\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/6pointEdit.jpg)\n\n4.在编辑菜单拉到最下面的“基本地图”，是要选择你想怎样显示地图，包括默认视图、卫星、地形等等。本文例子的穿越高山主题，所以地图我选择了”地形”展示。\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/6map.jpg)\n\n## 分享\n\n1.设置地图的访问权限：共享 - “私密” -> “在网络公开”\n\n![\"共享\"](http://cdn.sinacloud.net/woodysblog/gpx/7share1.jpg)\n\n![\"私密\"](http://cdn.sinacloud.net/woodysblog/gpx/7share2.jpg)\n\n![\"公开\"](http://cdn.sinacloud.net/woodysblog/gpx/7share3.jpg)\n\n2.分享\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/7share4.jpg)\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/7share5.jpg)\n\ni. 图片（自行截图或打印）\n\n![](http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg)\n\nii. 分享链接\n\n```\nhttps://drive.google.com/open?id=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU&usp=sharing\n```\n\niii.嵌入到网站(具体以官方代码为准哈，此处为适应博客主题，iframe样式有调整过)\n\n```\n<iframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\" width=\"640\" height=\"480\"></iframe>\n```\n\n下面是Google Map的iframe~可能没有翻墙会看不到 T_T\n\n<iframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\" width=\"100%\" height=\"480\"></iframe>\n","slug":"gpx","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8p001gzvr3h8mu62bg","content":"<p>装逼我们是认真的，论怎样高逼格的暴露自己的行踪~</p>\n<a id=\"more\"></a>\n<p>所以本文的目标，说到底只是想暴露一下我的第一次9小时的雪山穿越~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg\" alt=\"&quot;Tongariro Alpine Crossing in Tongariro Nation Park&quot;\"></p>\n<p>不打算介绍高逼格、记录行踪神器<a href=\"https://www.moves-app.com/\" target=\"_blank\" rel=\"noopener\">Moves</a>和<a href=\"https://www.google.co.nz/maps/\" target=\"_blank\" rel=\"noopener\">Google Map</a>了~所以本文只适合已经知道这些的盆友们。</p>\n<h2 id=\"从Moves导出定位数据-——-gpx文件\"><a href=\"#从Moves导出定位数据-——-gpx文件\" class=\"headerlink\" title=\"从Moves导出定位数据 —— gpx文件\"></a>从Moves导出定位数据 —— gpx文件</h2><ol>\n<li>进入Moves相关应用 —— Moves Export的页面</li>\n<li>点击”GET STARTED”获取Moves授权的PIN码</li>\n<li>PIN码页面上有授权提示啦，其实就是在手机上的Moves输入PIN码完成授权过程</li>\n<li>页面自动跳转，在Moves Export的菜单栏，选择”Your Storylines“，看到某天某个时间段的行踪了吧~</li>\n<li>选好日期，在右侧一堆按钮里选择绿色”GPX”，把GPX文件保存到本地。</li>\n</ol>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/1getGpx.jpg\" alt=\"\"></p>\n<h2 id=\"在Google-Map创建自己的地图\"><a href=\"#在Google-Map创建自己的地图\" class=\"headerlink\" title=\"在Google Map创建自己的地图\"></a>在Google Map创建自己的地图</h2><p>菜单 -&gt; 您的地点 -&gt; 地图 -&gt; 创建地图 -&gt; 导入GPX文件</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/2createMap.jpg\" alt=\"&quot;创建地图&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/3import.jpg\" alt=\"&quot;导入gpx数据&quot;\"></p>\n<h2 id=\"地图编辑\"><a href=\"#地图编辑\" class=\"headerlink\" title=\"地图编辑\"></a>地图编辑</h2><p>1.新增标记、绘制线条、添加路线等</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/4create.jpg\" alt=\"\"></p>\n<p>2.图层数据编辑(重命名、编辑原始数据表、删除图层)</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/5layer.jpg\" alt=\"\"></p>\n<p>3.某个点的图标、定义编辑</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/6pointEdit.jpg\" alt=\"\"></p>\n<p>4.在编辑菜单拉到最下面的“基本地图”，是要选择你想怎样显示地图，包括默认视图、卫星、地形等等。本文例子的穿越高山主题，所以地图我选择了”地形”展示。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/6map.jpg\" alt=\"\"></p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p>1.设置地图的访问权限：共享 - “私密” -&gt; “在网络公开”</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share1.jpg\" alt=\"&quot;共享&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share2.jpg\" alt=\"&quot;私密&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share3.jpg\" alt=\"&quot;公开&quot;\"></p>\n<p>2.分享</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share4.jpg\" alt=\"\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share5.jpg\" alt=\"\"></p>\n<p>i. 图片（自行截图或打印）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg\" alt=\"\"></p>\n<p>ii. 分享链接</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http<span class=\"variable\">s:</span>//drive.google.<span class=\"keyword\">com</span>/<span class=\"keyword\">open</span>?id=<span class=\"number\">1</span>O9TyJoQQ3lCV3lh9pAJkMoHYyiU&amp;usp=sharing</span><br></pre></td></tr></table></figure>\n<p>iii.嵌入到网站(具体以官方代码为准哈，此处为适应博客主题，iframe样式有调整过)</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe <span class=\"attribute\">src</span>=<span class=\"string\">\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\"</span> <span class=\"attribute\">width</span>=<span class=\"string\">\"640\"</span> <span class=\"attribute\">height</span>=<span class=\"string\">\"480\"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n<p>下面是Google Map的iframe~可能没有翻墙会看不到 T_T</p>\n<iframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\" width=\"100%\" height=\"480\"></iframe>\n","site":{"data":{}},"excerpt":"<p>装逼我们是认真的，论怎样高逼格的暴露自己的行踪~</p>","more":"<p>所以本文的目标，说到底只是想暴露一下我的第一次9小时的雪山穿越~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg\" alt=\"&quot;Tongariro Alpine Crossing in Tongariro Nation Park&quot;\"></p>\n<p>不打算介绍高逼格、记录行踪神器<a href=\"https://www.moves-app.com/\" target=\"_blank\" rel=\"noopener\">Moves</a>和<a href=\"https://www.google.co.nz/maps/\" target=\"_blank\" rel=\"noopener\">Google Map</a>了~所以本文只适合已经知道这些的盆友们。</p>\n<h2 id=\"从Moves导出定位数据-——-gpx文件\"><a href=\"#从Moves导出定位数据-——-gpx文件\" class=\"headerlink\" title=\"从Moves导出定位数据 —— gpx文件\"></a>从Moves导出定位数据 —— gpx文件</h2><ol>\n<li>进入Moves相关应用 —— Moves Export的页面</li>\n<li>点击”GET STARTED”获取Moves授权的PIN码</li>\n<li>PIN码页面上有授权提示啦，其实就是在手机上的Moves输入PIN码完成授权过程</li>\n<li>页面自动跳转，在Moves Export的菜单栏，选择”Your Storylines“，看到某天某个时间段的行踪了吧~</li>\n<li>选好日期，在右侧一堆按钮里选择绿色”GPX”，把GPX文件保存到本地。</li>\n</ol>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/1getGpx.jpg\" alt=\"\"></p>\n<h2 id=\"在Google-Map创建自己的地图\"><a href=\"#在Google-Map创建自己的地图\" class=\"headerlink\" title=\"在Google Map创建自己的地图\"></a>在Google Map创建自己的地图</h2><p>菜单 -&gt; 您的地点 -&gt; 地图 -&gt; 创建地图 -&gt; 导入GPX文件</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/2createMap.jpg\" alt=\"&quot;创建地图&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/3import.jpg\" alt=\"&quot;导入gpx数据&quot;\"></p>\n<h2 id=\"地图编辑\"><a href=\"#地图编辑\" class=\"headerlink\" title=\"地图编辑\"></a>地图编辑</h2><p>1.新增标记、绘制线条、添加路线等</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/4create.jpg\" alt=\"\"></p>\n<p>2.图层数据编辑(重命名、编辑原始数据表、删除图层)</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/5layer.jpg\" alt=\"\"></p>\n<p>3.某个点的图标、定义编辑</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/6pointEdit.jpg\" alt=\"\"></p>\n<p>4.在编辑菜单拉到最下面的“基本地图”，是要选择你想怎样显示地图，包括默认视图、卫星、地形等等。本文例子的穿越高山主题，所以地图我选择了”地形”展示。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/6map.jpg\" alt=\"\"></p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p>1.设置地图的访问权限：共享 - “私密” -&gt; “在网络公开”</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share1.jpg\" alt=\"&quot;共享&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share2.jpg\" alt=\"&quot;私密&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share3.jpg\" alt=\"&quot;公开&quot;\"></p>\n<p>2.分享</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share4.jpg\" alt=\"\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/7share5.jpg\" alt=\"\"></p>\n<p>i. 图片（自行截图或打印）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/gpx/8show.jpg\" alt=\"\"></p>\n<p>ii. 分享链接</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http<span class=\"variable\">s:</span>//drive.google.<span class=\"keyword\">com</span>/<span class=\"keyword\">open</span>?id=<span class=\"number\">1</span>O9TyJoQQ3lCV3lh9pAJkMoHYyiU&amp;usp=sharing</span><br></pre></td></tr></table></figure>\n<p>iii.嵌入到网站(具体以官方代码为准哈，此处为适应博客主题，iframe样式有调整过)</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe <span class=\"attribute\">src</span>=<span class=\"string\">\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\"</span> <span class=\"attribute\">width</span>=<span class=\"string\">\"640\"</span> <span class=\"attribute\">height</span>=<span class=\"string\">\"480\"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n<p>下面是Google Map的iframe~可能没有翻墙会看不到 T_T</p>\n<iframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1O9TyJoQQ3lCV3lh9pAJkMoHYyiU\" width=\"100%\" height=\"480\"></iframe>"},{"title":"GraphQL in Action","date":"2018-08-15T15:11:24.000Z","_content":"\n## REST-ful Routing\n\nGiven a collection of records on a server, there should be a uniform URL and HTTP request method to utilize that collection of records.\n\n![](http://sinacloud.net/woodysblog/img/restful-api.png)\n\n## GraphQL解决什么问题？\n\n![](http://sinacloud.net/woodysblog/img/what-problem-GraphQL-solve.png)\n\n在REST-ful API中，我们会一层一层地定义路由，但假如出现上图的多层结构，我们希望：\n\n* 查询“当前用户的所有朋友的公司名” \n  * 利用当前用户查询朋友的userId，再用每个人的userId查询company `users/currentUserID/friends` -> `users/friendUserID/company`\n  * `users/currentUserID/friends/companies` \n* 获取”当前用户的所有朋友的公司名+位置“\n  * `users/currentUserID/friends_with_position_and_company`\n\n有可能需要提供3个或更多不同的路由。\n\n若是层级嵌套或组合更多，REST-ful的路由规则会越来越多和复杂，GraphQL就是解决这类问题的利器。\n\n![](http://sinacloud.net/woodysblog/img/graph.png)\n\nGraph（图）表达了节点和节点间的Edges（路径）。\n\n同样地要实现”获取当前用户的所有朋友的公司名+位置“，我们会这样告诉GraphQL：\n\n1. 查询`userID`为`N`的当前用户`WYY`\n2. 查询所有朋友为`WYY`的用户数组`X`\n3. 查询每个`X`下的`company`和`position`\n\n```\nquery{\n  user(id: \"N\") {\n    friends {\n      company {\n        name\n      }\n      position {\n        address\n      }\n    }\n  }\n}\n```\n\n## GraphQL服务器作为代理层\n\n### 当数据库在自己的服务器\n\n![](http://sinacloud.net/woodysblog/img/graphql-as-proxy-1.png)\n\n### 当我们使用第三方数据源\n\n![](http://sinacloud.net/woodysblog/img/graphql-as-proxy-2.png)\n\n### 中间层：Express/GraphQL Server\n\n当我们的服务需要结合本地数据源和第三方数据源时，可以通过Express/GraphQL服务器统一处理数据源的聚合和结构抹平，再把api提供给前端应用使用。\n\n## 什么情况下，我们需要Resolver\n\n![](http://sinacloud.net/woodysblog/img/what-resolver-does.png)\n\n如上图，当数据库的model设计的字段`companyId`，和GraphQL的query需要获取的字段`companyName`不一致时，需要在GraphQLType定义字段`companyName`中添加对应的resolver，以入参`companyId`查询数据库中对应的项，再return对应`companyName`。\n\n也就是说，当数据库model和GraphQL对象的字段对应不上，返回数据和入参需要特别处理时，`resolver`来完成这样的工作。\n\n```\nconst UserType = new GraphQLObjectType({\n  name: 'User',\n  fields: () => ({\n    id: { type: GraphQLID },\n    firstName: { type: GraphQLString },\n    age: { type: GraphQLInt },\n    company: {\n      type: new GraphQLList(CompanyType),\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n        return CompanyDBModel.find({\n          companyId: parent.companyId\n        });\n      }\n    }\n  })\n});\n```\n\n## DB model和GraphQL的设计差异\n\n![](http://sinacloud.net/woodysblog/img/model-in-reality.png)\n\n数据库中的表结构：  \n`User`的属性`companyId`，关联着`Company`的`id`属性。\n\n![](http://sinacloud.net/woodysblog/img/query-in-graphql.png)\n\nGraph（图）结构：  \n\n* 0级：RootQueryType，属性`user`类型为`UserType`\n* 1级：`UserType`通过数据库中的`companyId`查询到`company`的数据，再返回到`UserType.company`\n\n## Query语法\n\n### 别名\n\n```\n{\n  apple: company(id: \"1\") {\n    id\n  }\n  google: compnay(id: \"2\") {\n    id\n  }\n}\n```\n\n请求了两次company，入参id分别为1和2，返回结果是：\n\n```\n{\n  data: {\n    apple: {\n      id: \"1\"\n    },\n    google: {\n      id: \"2\"\n    }\n  }\n}\n```\n\n### query fragment 查询片段\n\n有时候多个query会共享一些查询属性，如：\n\n```\n{\n  apple: company(id: \"1\") {\n    id\n    name\n    description\n  }\n  google: compnay(id: \"2\") {\n    id\n    name\n    description\n  }\n}\n```\n\n两个query查询一致的字段（`id`、`name`、`desciption`），加入需要修改，需要多处修改。这个时候，我们可以声明一段query fragment，维护这份公用的query字段。\n\n```\n{\n  apple: company(id: \"1\") {\n    ...companyFields\n  }\n  google: compnay(id: \"2\") {\n    ...companyFields\n  }\n}\n\nfragment companyFields on Company {\n  id\n  name\n  description\n}\n```\n\n划重点：\n\n1. 用关键字`fragment`声明查询片段`companyFields`；\n2. 关键字`on`后是GraphQLType`Company`，表明以下字段属于类型`Company`，GraphQL\b也会对这些字段作类型和是否存在的检查；\n3. 在query语句中，使用`...companyFields`。\n\n## \b当GraphQL遇到前端\n\n![](http://sinacloud.net/woodysblog/img/graph-come-across-frontend.png)\n\n> DB -> \bExpress/GraphQL Server -> GraphQL Client -> ReactJS\n\n其中，GraphQL Client担当了类似GraphiQL的角色，把query转化为HTTP请求。\n\n以下是几个\bGraphQL Client框架的介绍和对比。\n\n![](http://sinacloud.net/woodysblog/img/graphql-client.png)\n","source":"_posts/graphql-in-action.md","raw":"---\ntitle: GraphQL in Action\ntags:\n  - GraphQL\ndate: 2018-08-15 23:11:24\n---\n\n## REST-ful Routing\n\nGiven a collection of records on a server, there should be a uniform URL and HTTP request method to utilize that collection of records.\n\n![](http://sinacloud.net/woodysblog/img/restful-api.png)\n\n## GraphQL解决什么问题？\n\n![](http://sinacloud.net/woodysblog/img/what-problem-GraphQL-solve.png)\n\n在REST-ful API中，我们会一层一层地定义路由，但假如出现上图的多层结构，我们希望：\n\n* 查询“当前用户的所有朋友的公司名” \n  * 利用当前用户查询朋友的userId，再用每个人的userId查询company `users/currentUserID/friends` -> `users/friendUserID/company`\n  * `users/currentUserID/friends/companies` \n* 获取”当前用户的所有朋友的公司名+位置“\n  * `users/currentUserID/friends_with_position_and_company`\n\n有可能需要提供3个或更多不同的路由。\n\n若是层级嵌套或组合更多，REST-ful的路由规则会越来越多和复杂，GraphQL就是解决这类问题的利器。\n\n![](http://sinacloud.net/woodysblog/img/graph.png)\n\nGraph（图）表达了节点和节点间的Edges（路径）。\n\n同样地要实现”获取当前用户的所有朋友的公司名+位置“，我们会这样告诉GraphQL：\n\n1. 查询`userID`为`N`的当前用户`WYY`\n2. 查询所有朋友为`WYY`的用户数组`X`\n3. 查询每个`X`下的`company`和`position`\n\n```\nquery{\n  user(id: \"N\") {\n    friends {\n      company {\n        name\n      }\n      position {\n        address\n      }\n    }\n  }\n}\n```\n\n## GraphQL服务器作为代理层\n\n### 当数据库在自己的服务器\n\n![](http://sinacloud.net/woodysblog/img/graphql-as-proxy-1.png)\n\n### 当我们使用第三方数据源\n\n![](http://sinacloud.net/woodysblog/img/graphql-as-proxy-2.png)\n\n### 中间层：Express/GraphQL Server\n\n当我们的服务需要结合本地数据源和第三方数据源时，可以通过Express/GraphQL服务器统一处理数据源的聚合和结构抹平，再把api提供给前端应用使用。\n\n## 什么情况下，我们需要Resolver\n\n![](http://sinacloud.net/woodysblog/img/what-resolver-does.png)\n\n如上图，当数据库的model设计的字段`companyId`，和GraphQL的query需要获取的字段`companyName`不一致时，需要在GraphQLType定义字段`companyName`中添加对应的resolver，以入参`companyId`查询数据库中对应的项，再return对应`companyName`。\n\n也就是说，当数据库model和GraphQL对象的字段对应不上，返回数据和入参需要特别处理时，`resolver`来完成这样的工作。\n\n```\nconst UserType = new GraphQLObjectType({\n  name: 'User',\n  fields: () => ({\n    id: { type: GraphQLID },\n    firstName: { type: GraphQLString },\n    age: { type: GraphQLInt },\n    company: {\n      type: new GraphQLList(CompanyType),\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n        return CompanyDBModel.find({\n          companyId: parent.companyId\n        });\n      }\n    }\n  })\n});\n```\n\n## DB model和GraphQL的设计差异\n\n![](http://sinacloud.net/woodysblog/img/model-in-reality.png)\n\n数据库中的表结构：  \n`User`的属性`companyId`，关联着`Company`的`id`属性。\n\n![](http://sinacloud.net/woodysblog/img/query-in-graphql.png)\n\nGraph（图）结构：  \n\n* 0级：RootQueryType，属性`user`类型为`UserType`\n* 1级：`UserType`通过数据库中的`companyId`查询到`company`的数据，再返回到`UserType.company`\n\n## Query语法\n\n### 别名\n\n```\n{\n  apple: company(id: \"1\") {\n    id\n  }\n  google: compnay(id: \"2\") {\n    id\n  }\n}\n```\n\n请求了两次company，入参id分别为1和2，返回结果是：\n\n```\n{\n  data: {\n    apple: {\n      id: \"1\"\n    },\n    google: {\n      id: \"2\"\n    }\n  }\n}\n```\n\n### query fragment 查询片段\n\n有时候多个query会共享一些查询属性，如：\n\n```\n{\n  apple: company(id: \"1\") {\n    id\n    name\n    description\n  }\n  google: compnay(id: \"2\") {\n    id\n    name\n    description\n  }\n}\n```\n\n两个query查询一致的字段（`id`、`name`、`desciption`），加入需要修改，需要多处修改。这个时候，我们可以声明一段query fragment，维护这份公用的query字段。\n\n```\n{\n  apple: company(id: \"1\") {\n    ...companyFields\n  }\n  google: compnay(id: \"2\") {\n    ...companyFields\n  }\n}\n\nfragment companyFields on Company {\n  id\n  name\n  description\n}\n```\n\n划重点：\n\n1. 用关键字`fragment`声明查询片段`companyFields`；\n2. 关键字`on`后是GraphQLType`Company`，表明以下字段属于类型`Company`，GraphQL\b也会对这些字段作类型和是否存在的检查；\n3. 在query语句中，使用`...companyFields`。\n\n## \b当GraphQL遇到前端\n\n![](http://sinacloud.net/woodysblog/img/graph-come-across-frontend.png)\n\n> DB -> \bExpress/GraphQL Server -> GraphQL Client -> ReactJS\n\n其中，GraphQL Client担当了类似GraphiQL的角色，把query转化为HTTP请求。\n\n以下是几个\bGraphQL Client框架的介绍和对比。\n\n![](http://sinacloud.net/woodysblog/img/graphql-client.png)\n","slug":"graphql-in-action","published":1,"updated":"2018-08-20T15:17:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8r001kzvr3exdqz2c4","content":"<h2 id=\"REST-ful-Routing\"><a href=\"#REST-ful-Routing\" class=\"headerlink\" title=\"REST-ful Routing\"></a>REST-ful Routing</h2><p>Given a collection of records on a server, there should be a uniform URL and HTTP request method to utilize that collection of records.</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/restful-api.png\" alt=\"\"></p>\n<h2 id=\"GraphQL解决什么问题？\"><a href=\"#GraphQL解决什么问题？\" class=\"headerlink\" title=\"GraphQL解决什么问题？\"></a>GraphQL解决什么问题？</h2><p><img src=\"http://sinacloud.net/woodysblog/img/what-problem-GraphQL-solve.png\" alt=\"\"></p>\n<p>在REST-ful API中，我们会一层一层地定义路由，但假如出现上图的多层结构，我们希望：</p>\n<ul>\n<li>查询“当前用户的所有朋友的公司名” <ul>\n<li>利用当前用户查询朋友的userId，再用每个人的userId查询company <code>users/currentUserID/friends</code> -&gt; <code>users/friendUserID/company</code></li>\n<li><code>users/currentUserID/friends/companies</code> </li>\n</ul>\n</li>\n<li>获取”当前用户的所有朋友的公司名+位置“<ul>\n<li><code>users/currentUserID/friends_with_position_and_company</code></li>\n</ul>\n</li>\n</ul>\n<p>有可能需要提供3个或更多不同的路由。</p>\n<p>若是层级嵌套或组合更多，REST-ful的路由规则会越来越多和复杂，GraphQL就是解决这类问题的利器。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/graph.png\" alt=\"\"></p>\n<p>Graph（图）表达了节点和节点间的Edges（路径）。</p>\n<p>同样地要实现”获取当前用户的所有朋友的公司名+位置“，我们会这样告诉GraphQL：</p>\n<ol>\n<li>查询<code>userID</code>为<code>N</code>的当前用户<code>WYY</code></li>\n<li>查询所有朋友为<code>WYY</code>的用户数组<code>X</code></li>\n<li>查询每个<code>X</code>下的<code>company</code>和<code>position</code></li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query&#123;</span><br><span class=\"line\">  user(id: <span class=\"string\">\"N\"</span>) &#123;</span><br><span class=\"line\">    friends &#123;</span><br><span class=\"line\">      company &#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      position &#123;</span><br><span class=\"line\">        address</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GraphQL服务器作为代理层\"><a href=\"#GraphQL服务器作为代理层\" class=\"headerlink\" title=\"GraphQL服务器作为代理层\"></a>GraphQL服务器作为代理层</h2><h3 id=\"当数据库在自己的服务器\"><a href=\"#当数据库在自己的服务器\" class=\"headerlink\" title=\"当数据库在自己的服务器\"></a>当数据库在自己的服务器</h3><p><img src=\"http://sinacloud.net/woodysblog/img/graphql-as-proxy-1.png\" alt=\"\"></p>\n<h3 id=\"当我们使用第三方数据源\"><a href=\"#当我们使用第三方数据源\" class=\"headerlink\" title=\"当我们使用第三方数据源\"></a>当我们使用第三方数据源</h3><p><img src=\"http://sinacloud.net/woodysblog/img/graphql-as-proxy-2.png\" alt=\"\"></p>\n<h3 id=\"中间层：Express-GraphQL-Server\"><a href=\"#中间层：Express-GraphQL-Server\" class=\"headerlink\" title=\"中间层：Express/GraphQL Server\"></a>中间层：Express/GraphQL Server</h3><p>当我们的服务需要结合本地数据源和第三方数据源时，可以通过Express/GraphQL服务器统一处理数据源的聚合和结构抹平，再把api提供给前端应用使用。</p>\n<h2 id=\"什么情况下，我们需要Resolver\"><a href=\"#什么情况下，我们需要Resolver\" class=\"headerlink\" title=\"什么情况下，我们需要Resolver\"></a>什么情况下，我们需要Resolver</h2><p><img src=\"http://sinacloud.net/woodysblog/img/what-resolver-does.png\" alt=\"\"></p>\n<p>如上图，当数据库的model设计的字段<code>companyId</code>，和GraphQL的query需要获取的字段<code>companyName</code>不一致时，需要在GraphQLType定义字段<code>companyName</code>中添加对应的resolver，以入参<code>companyId</code>查询数据库中对应的项，再return对应<code>companyName</code>。</p>\n<p>也就是说，当数据库model和GraphQL对象的字段对应不上，返回数据和入参需要特别处理时，<code>resolver</code>来完成这样的工作。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">UserType</span> = <span class=\"keyword\">new</span> <span class=\"type\">GraphQLObjectType</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"symbol\">'Use</span>r',</span><br><span class=\"line\">  fields: () =&gt; (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLID</span> &#125;,</span><br><span class=\"line\">    firstName: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    age: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLInt</span> &#125;,</span><br><span class=\"line\">    company: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"keyword\">new</span> <span class=\"type\">GraphQLList</span>(<span class=\"type\">CompanyType</span>),</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CompanyDBModel</span>.find(&#123;</span><br><span class=\"line\">          companyId: parent.companyId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DB-model和GraphQL的设计差异\"><a href=\"#DB-model和GraphQL的设计差异\" class=\"headerlink\" title=\"DB model和GraphQL的设计差异\"></a>DB model和GraphQL的设计差异</h2><p><img src=\"http://sinacloud.net/woodysblog/img/model-in-reality.png\" alt=\"\"></p>\n<p>数据库中的表结构：<br><code>User</code>的属性<code>companyId</code>，关联着<code>Company</code>的<code>id</code>属性。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/query-in-graphql.png\" alt=\"\"></p>\n<p>Graph（图）结构：  </p>\n<ul>\n<li>0级：RootQueryType，属性<code>user</code>类型为<code>UserType</code></li>\n<li>1级：<code>UserType</code>通过数据库中的<code>companyId</code>查询到<code>company</code>的数据，再返回到<code>UserType.company</code></li>\n</ul>\n<h2 id=\"Query语法\"><a href=\"#Query语法\" class=\"headerlink\" title=\"Query语法\"></a>Query语法</h2><h3 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  apple: company(<span class=\"name\">id:</span> <span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  google: compnay(<span class=\"name\">id:</span> <span class=\"string\">\"2\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请求了两次company，入参id分别为1和2，返回结果是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">data</span>: &#123;</span><br><span class=\"line\">    apple: &#123;</span><br><span class=\"line\">      id: <span class=\"string\">\"1\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">id</span>: <span class=\"string\">\"2\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"query-fragment-查询片段\"><a href=\"#query-fragment-查询片段\" class=\"headerlink\" title=\"query fragment 查询片段\"></a>query fragment 查询片段</h3><p>有时候多个query会共享一些查询属性，如：</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  apple: company(<span class=\"name\">id:</span> <span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    description</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  google: compnay(<span class=\"name\">id:</span> <span class=\"string\">\"2\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    description</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个query查询一致的字段（<code>id</code>、<code>name</code>、<code>desciption</code>），加入需要修改，需要多处修改。这个时候，我们可以声明一段query fragment，维护这份公用的query字段。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  apple: company(<span class=\"built_in\">id</span>: <span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">    ...companyFields</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  google: compnay(<span class=\"built_in\">id</span>: <span class=\"string\">\"2\"</span>) &#123;</span><br><span class=\"line\">    ...companyFields</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fragment companyFields <span class=\"keyword\">on</span> Company &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span></span><br><span class=\"line\">  <span class=\"built_in\">name</span></span><br><span class=\"line\">  description</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>划重点：</p>\n<ol>\n<li>用关键字<code>fragment</code>声明查询片段<code>companyFields</code>；</li>\n<li>关键字<code>on</code>后是GraphQLType<code>Company</code>，表明以下字段属于类型<code>Company</code>，GraphQL\b也会对这些字段作类型和是否存在的检查；</li>\n<li>在query语句中，使用<code>...companyFields</code>。</li>\n</ol>\n<h2 id=\"当GraphQL遇到前端\"><a href=\"#当GraphQL遇到前端\" class=\"headerlink\" title=\"\b当GraphQL遇到前端\"></a>\b当GraphQL遇到前端</h2><p><img src=\"http://sinacloud.net/woodysblog/img/graph-come-across-frontend.png\" alt=\"\"></p>\n<blockquote>\n<p>DB -&gt; \bExpress/GraphQL Server -&gt; GraphQL Client -&gt; ReactJS</p>\n</blockquote>\n<p>其中，GraphQL Client担当了类似GraphiQL的角色，把query转化为HTTP请求。</p>\n<p>以下是几个\bGraphQL Client框架的介绍和对比。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/graphql-client.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"REST-ful-Routing\"><a href=\"#REST-ful-Routing\" class=\"headerlink\" title=\"REST-ful Routing\"></a>REST-ful Routing</h2><p>Given a collection of records on a server, there should be a uniform URL and HTTP request method to utilize that collection of records.</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/restful-api.png\" alt=\"\"></p>\n<h2 id=\"GraphQL解决什么问题？\"><a href=\"#GraphQL解决什么问题？\" class=\"headerlink\" title=\"GraphQL解决什么问题？\"></a>GraphQL解决什么问题？</h2><p><img src=\"http://sinacloud.net/woodysblog/img/what-problem-GraphQL-solve.png\" alt=\"\"></p>\n<p>在REST-ful API中，我们会一层一层地定义路由，但假如出现上图的多层结构，我们希望：</p>\n<ul>\n<li>查询“当前用户的所有朋友的公司名” <ul>\n<li>利用当前用户查询朋友的userId，再用每个人的userId查询company <code>users/currentUserID/friends</code> -&gt; <code>users/friendUserID/company</code></li>\n<li><code>users/currentUserID/friends/companies</code> </li>\n</ul>\n</li>\n<li>获取”当前用户的所有朋友的公司名+位置“<ul>\n<li><code>users/currentUserID/friends_with_position_and_company</code></li>\n</ul>\n</li>\n</ul>\n<p>有可能需要提供3个或更多不同的路由。</p>\n<p>若是层级嵌套或组合更多，REST-ful的路由规则会越来越多和复杂，GraphQL就是解决这类问题的利器。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/graph.png\" alt=\"\"></p>\n<p>Graph（图）表达了节点和节点间的Edges（路径）。</p>\n<p>同样地要实现”获取当前用户的所有朋友的公司名+位置“，我们会这样告诉GraphQL：</p>\n<ol>\n<li>查询<code>userID</code>为<code>N</code>的当前用户<code>WYY</code></li>\n<li>查询所有朋友为<code>WYY</code>的用户数组<code>X</code></li>\n<li>查询每个<code>X</code>下的<code>company</code>和<code>position</code></li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query&#123;</span><br><span class=\"line\">  user(id: <span class=\"string\">\"N\"</span>) &#123;</span><br><span class=\"line\">    friends &#123;</span><br><span class=\"line\">      company &#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      position &#123;</span><br><span class=\"line\">        address</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GraphQL服务器作为代理层\"><a href=\"#GraphQL服务器作为代理层\" class=\"headerlink\" title=\"GraphQL服务器作为代理层\"></a>GraphQL服务器作为代理层</h2><h3 id=\"当数据库在自己的服务器\"><a href=\"#当数据库在自己的服务器\" class=\"headerlink\" title=\"当数据库在自己的服务器\"></a>当数据库在自己的服务器</h3><p><img src=\"http://sinacloud.net/woodysblog/img/graphql-as-proxy-1.png\" alt=\"\"></p>\n<h3 id=\"当我们使用第三方数据源\"><a href=\"#当我们使用第三方数据源\" class=\"headerlink\" title=\"当我们使用第三方数据源\"></a>当我们使用第三方数据源</h3><p><img src=\"http://sinacloud.net/woodysblog/img/graphql-as-proxy-2.png\" alt=\"\"></p>\n<h3 id=\"中间层：Express-GraphQL-Server\"><a href=\"#中间层：Express-GraphQL-Server\" class=\"headerlink\" title=\"中间层：Express/GraphQL Server\"></a>中间层：Express/GraphQL Server</h3><p>当我们的服务需要结合本地数据源和第三方数据源时，可以通过Express/GraphQL服务器统一处理数据源的聚合和结构抹平，再把api提供给前端应用使用。</p>\n<h2 id=\"什么情况下，我们需要Resolver\"><a href=\"#什么情况下，我们需要Resolver\" class=\"headerlink\" title=\"什么情况下，我们需要Resolver\"></a>什么情况下，我们需要Resolver</h2><p><img src=\"http://sinacloud.net/woodysblog/img/what-resolver-does.png\" alt=\"\"></p>\n<p>如上图，当数据库的model设计的字段<code>companyId</code>，和GraphQL的query需要获取的字段<code>companyName</code>不一致时，需要在GraphQLType定义字段<code>companyName</code>中添加对应的resolver，以入参<code>companyId</code>查询数据库中对应的项，再return对应<code>companyName</code>。</p>\n<p>也就是说，当数据库model和GraphQL对象的字段对应不上，返回数据和入参需要特别处理时，<code>resolver</code>来完成这样的工作。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">UserType</span> = <span class=\"keyword\">new</span> <span class=\"type\">GraphQLObjectType</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"symbol\">'Use</span>r',</span><br><span class=\"line\">  fields: () =&gt; (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLID</span> &#125;,</span><br><span class=\"line\">    firstName: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    age: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLInt</span> &#125;,</span><br><span class=\"line\">    company: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"keyword\">new</span> <span class=\"type\">GraphQLList</span>(<span class=\"type\">CompanyType</span>),</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CompanyDBModel</span>.find(&#123;</span><br><span class=\"line\">          companyId: parent.companyId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"DB-model和GraphQL的设计差异\"><a href=\"#DB-model和GraphQL的设计差异\" class=\"headerlink\" title=\"DB model和GraphQL的设计差异\"></a>DB model和GraphQL的设计差异</h2><p><img src=\"http://sinacloud.net/woodysblog/img/model-in-reality.png\" alt=\"\"></p>\n<p>数据库中的表结构：<br><code>User</code>的属性<code>companyId</code>，关联着<code>Company</code>的<code>id</code>属性。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/query-in-graphql.png\" alt=\"\"></p>\n<p>Graph（图）结构：  </p>\n<ul>\n<li>0级：RootQueryType，属性<code>user</code>类型为<code>UserType</code></li>\n<li>1级：<code>UserType</code>通过数据库中的<code>companyId</code>查询到<code>company</code>的数据，再返回到<code>UserType.company</code></li>\n</ul>\n<h2 id=\"Query语法\"><a href=\"#Query语法\" class=\"headerlink\" title=\"Query语法\"></a>Query语法</h2><h3 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  apple: company(<span class=\"name\">id:</span> <span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  google: compnay(<span class=\"name\">id:</span> <span class=\"string\">\"2\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请求了两次company，入参id分别为1和2，返回结果是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">data</span>: &#123;</span><br><span class=\"line\">    apple: &#123;</span><br><span class=\"line\">      id: <span class=\"string\">\"1\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">id</span>: <span class=\"string\">\"2\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"query-fragment-查询片段\"><a href=\"#query-fragment-查询片段\" class=\"headerlink\" title=\"query fragment 查询片段\"></a>query fragment 查询片段</h3><p>有时候多个query会共享一些查询属性，如：</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  apple: company(<span class=\"name\">id:</span> <span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    description</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  google: compnay(<span class=\"name\">id:</span> <span class=\"string\">\"2\"</span>) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    description</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个query查询一致的字段（<code>id</code>、<code>name</code>、<code>desciption</code>），加入需要修改，需要多处修改。这个时候，我们可以声明一段query fragment，维护这份公用的query字段。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  apple: company(<span class=\"built_in\">id</span>: <span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">    ...companyFields</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  google: compnay(<span class=\"built_in\">id</span>: <span class=\"string\">\"2\"</span>) &#123;</span><br><span class=\"line\">    ...companyFields</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fragment companyFields <span class=\"keyword\">on</span> Company &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span></span><br><span class=\"line\">  <span class=\"built_in\">name</span></span><br><span class=\"line\">  description</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>划重点：</p>\n<ol>\n<li>用关键字<code>fragment</code>声明查询片段<code>companyFields</code>；</li>\n<li>关键字<code>on</code>后是GraphQLType<code>Company</code>，表明以下字段属于类型<code>Company</code>，GraphQL\b也会对这些字段作类型和是否存在的检查；</li>\n<li>在query语句中，使用<code>...companyFields</code>。</li>\n</ol>\n<h2 id=\"当GraphQL遇到前端\"><a href=\"#当GraphQL遇到前端\" class=\"headerlink\" title=\"\b当GraphQL遇到前端\"></a>\b当GraphQL遇到前端</h2><p><img src=\"http://sinacloud.net/woodysblog/img/graph-come-across-frontend.png\" alt=\"\"></p>\n<blockquote>\n<p>DB -&gt; \bExpress/GraphQL Server -&gt; GraphQL Client -&gt; ReactJS</p>\n</blockquote>\n<p>其中，GraphQL Client担当了类似GraphiQL的角色，把query转化为HTTP请求。</p>\n<p>以下是几个\bGraphQL Client框架的介绍和对比。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/graphql-client.png\" alt=\"\"></p>\n"},{"title":"GraphQL小记","date":"2018-06-26T13:32:09.000Z","_content":"\n![\"structure\"](http://sinacloud.net/woodysblog/graphql/structure.png)\n\n基于GraphQL、express、MongoDB、Apollo、React.js的小应用。\n->> 项目源码[github传送门](https://github.com/YuyingWu/playground/tree/master/graphql-playlist)\n\n内容包括：\n\n* 如何搭建基于GraphQL、express、MongoDB的后台服务器\n* 如何定义数据模型\n* 如何通过GraphiQL测试query和获取的数据结构，包括query（查询）和mutation（更新）\n* 如何搭建可以跟graphql query通信的Apollo-React前端应用\n\n<!-- more -->\n\n## Server\n\n### 环境\n\n* express\n  * express-graphql\n* graphql\n* mongoose，连接server和数据库（mLab）\n* [mLab](https://mlab.com/)，云端mongoDB\n\n### 定义Book的Schema\n\n```\n// schema.js\nconst graphql = require('graphql');\nconst { GraphQLObjectType, GraphQLString } = graphql;\nconst BookType = new GraphQLObjectType({\n  name: 'Book',\n  fields: () => ({\n    id: { type: GraphQLString },\n    genre: { type: GraphQLString },\n    name: { type: GraphQLString },\n  })\n});\n```\n\n### 定义RootQuery\n\n* book的类型是一个Graphql对象类型`BookType`；\n* args是发起这个query时，需要传入什么参数，这里是`id`；\n* resolve是根据参数从数据库查询数据的逻辑。\n\n```\n// schema.js\nconst RootQuery = new GraphQLObjectType({\n  name: 'RootQueryType',\n  fields: {\n    book: {\n      type: BookType,\n      args: {\n        id: { type: GraphQLString }\n      },\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n      }\n    }\n  }\n});\n```\n\n### 打开服务器的GraphiQL的面板\n\n```\n// server.js\n// 访问 http://127.0.0.1:5000/graphql\n\nconst express = require('express');\nconst graphqlHTTP = require('express-graphql');\nconst schema = require('./schema/schema');\nconst app = express();\n\napp.use('/graphql', graphqlHTTP({\n  schema,\n  graphiql: true\n}));\napp.listen(5000, () => {\n  console.log('now listening for requests on port 5000, http://127.0.0.1:5000/');\n});\n```\n\n然后在GraphiQL面板，查询对应book的内容。\n\n```\n# Graphiql的查询语句\n{\n  book(id: \"1\") {\n    name\n  }\n}\n\n# {\n#   \"data\": {\n#    \"book\": {\n#      \"name\": \"Name of the Wind\"\n#     }\n#   }\n# }\n```\n\n### Graphql提供的类型/方法\n\n**GraphQLID**，接受query中的字符串或数字类型的参数，转成JavaScript的string类型。\n**GraphQLInt**，number类型。\n**GraphQLNonNull**，使用方式`type: new GraphQLNonNull(GraphQLInt)`，说明该字段的数据类型为int且必填。\n\n### 关联类型（relative type）\n\n把AuthorType作为BookType的关联类型（实现功能，每本书有个作者）\n\n* 声明一个字段`author`，类型为`AuthorType`\n* 在`resolve`中，参数`parent`带有当前query的返回结果，从数据库中查询`id`等于当前book的`authorId`的作者信息，作为`author`的返回值\n\n```\nconst BookType = new GraphQLObjectType({\n  name: 'Book',\n  fields: () => ({\n    id: { type: GraphQLID },\n    genre: { type: GraphQLString },\n    name: { type: GraphQLString },\n    author: {\n      type: AuthorType,\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n        return _.find(authors, {\n          id: parent.authorId\n        });\n      }\n    }\n  })\n});\n```\n\n当关联类型需要返回一个数组\n\n字段`books`返回`BookType`的数组，借助`GraphQLList`。\n\n```\nconst AuthorType = new GraphQLObjectType({\n  name: 'Author',\n  fields: () => ({\n    id: { type: GraphQLID },\n    name: { type: GraphQLString },\n    age: { type: GraphQLInt },\n    books: {\n      type: new GraphQLList(BookType),\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n        return _.filter(books, {\n          authorId: parent.id\n        });\n      }\n    }\n  })\n});\n```\n\n### Mutation\n\n数据库model的声明。\n\n```\n// models/author.js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst authorSchema = new Schema({\n  name: String,\n  age: Number\n});\n\nmodule.exports = mongoose.model('Author', authorSchema);\n```\n\n在GraphQL schema中声明mutation`addAuthor`方法，把model`Author`的实例保存到数据库，且`return`相应数据。\n\n```\n// schema.js\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    addAuthor: {\n      type: AuthorType,\n      args: {\n        name: { type: GraphQLString },\n        age: { type: GraphQLInt }\n      },\n      resolve(parent, args) {\n        // 创建mongoose model `Author` 实例\n        let author = new Author({\n          name: args.name,\n          age: args.age\n        });\n\n        // mongoose model 实例的方法\n        return author.save();\n      }\n    }\n  }\n});\n```\n\n在GraphiQL中调用该mutation，执行添加author的操作，且获取添加后的数据结果。\n\n```\n// GraphiQL\nmutation {\n  addAuthor(name: \"wyy\", age: 28) {\n    name\n    age\n  }\n}\n// 返回结果\n{\n  \"data\": {\n    \"addAuthor\": {\n      \"name\": \"wyy\",\n      \"age\": 28\n    }\n  }\n}\n```\n\n## Client\n\n### 环境\n\n* React.js\n  * create-react-app\n* Apollo系\n  * apollo-boost\n  * graphql\n  * react-apollo\n\n### Step 1：连接React component和Apollo Provider\n\n在整个React应用中，通过ApolloClient，打通graphql和react组件的连接。\n\n```\n// App.js\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div>\n          <h1>hello, world</h1>\n          <BookList />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n```\n\n### Step 2：graphql query和React组件的数据交互\n\n#### 1.声明graphql query\n\n```\n// components/BookList.js\nimport { gql } from 'apollo-boost';\nconst getBooksQuery = gql`\n{\n  books {\n    id\n    name\n  }\n}\n`;\n```\n\n#### 2.利用Apollo连接`gq query`和react component\n\n结合`react-apollo`的`graphql`，以及刚才声明的query，把请求数据打进`BookList`的`props`。\n\n```\nimport { graphql } from 'react-apollo';\n\nclass BookList extends Component {\n  // 具体组件实现 blah blah\n}\n\nexport default graphql(getBooksQuery)(BookList);\n```\n\n假如，在一个组件内，需要注入多个query，可以利用`react-apollo`提供的`compose`方法。\n\n```\nimport { graphql, compose } from 'react-apollo';\n\nclass BookList extends Component {\n  // 具体组件实现 blah blah\n}\n\nexport default compose(\n  graphql(gqlQuery1, { name: 'gqlQuery1' }),\n  graphql(gqlQuery2, { name: 'gqlQuery2' }),\n)(BookList);\n```\n\n![\"graphql compose\"](http://sinacloud.net/woodysblog/graphql/gql-compose.png)\n\n#### 3.通过this.props.data获取请求数据\n\n在server的graphiQL查询的数据结构如下。\n\n```\n{\n  \"data\": {\n    \"books\": [\n      {\n        \"id\": \"5b374cdd5806e47eefce3734\",\n        \"name\": \"test\"\n      }\n    ]\n  }\n}\n```\n\n在render输出client的this.props.data，可以发现props更新了两次。区别在于`loading`这个字段，这也可以作为一个判断的flag，当`loading`为`true`时，再进一步分析接口返回的数据结构。\n\n第一次，`loading`为`true`，没有`books`这个字段。\n\n![\"loading\"](http://sinacloud.net/woodysblog/graphql/apollo-loading.png)\n\n第二次，`loading`为`false`，而`books`返回了一个数组。\n\n![\"loaded\"](http://sinacloud.net/woodysblog/graphql/apollo-loaded.png)\n\n#### 4. Mutation\n\ni. query的声明\n\n值得注意的是，当调用mutation时，我们可能需要传入参数，如何获取从react组件传入的参数？可以利用query variables（query变量）实现。\n\n```\n// query.js\nconst addBookMutation = gql`\nmutation($name: String!, $genre: String!, $authorId: ID!) {\n  addBook(name: $name, genre: $genre, authorId: $authorId) {\n    name\n    id\n  }\n}\n`\n```\n\nii. react component的数据交互\n\n利用`react-apollo`的`compose`，把`addBookMutation`注入到`this.props`，通过`varibales`传入query变量。\n\n而当我们希望在mutation之后重新获取某个query的数据时，可以在mutation操作中添加`refetchQueries`的回调。\n\n```\n// addBook.js\naddBook() {\n  // formData为点击表单提交后，获取各项input/select的数据对象\n  this.props.addBookMutation({\n    variables: {\n      name: formData.name,\n      genre: formData.genre,\n      authorId: formData.authorId,\n    },\n    refetchQueries: [{\n      query: anotherQueryWantedToBeRefetched\n    }]\n  })\n}\n```\n\n#### 5. Query\n\n需要从组件传入参数，进行参数查询的gql query（引入query变量）。\n\n```\n// query.js\nconst getBooksQuery = gql`\nquery ($id: ID!) {\n  book(id: $id) {\n    id\n    name\n  }\n}\n`;\n\n// getBook.js\n// 在绑定组件和graphql数据前，把props.id注入到query的variables里\nexport default graphql(getBookQuery, {\n  options: props => ({\n    variables: {\n      id: props.id\n    }\n  })\n})(getBookComponentName);\n```\n\n## Tips\n\n`问` 为什么在声明GraphQLObjectType实例时，fields不直接使用对象，而使用了函数？\n`答` 因为js的执行时机，直接使用对象的话，代码从上往下执行，fields中引用别的类型，如BookType和AuthorType有互相引用，会报错BookType或者AuthorType undefined。而使用函数的话，执行到函数内部逻辑时，外部的声明已经完成了。","source":"_posts/graphql.md","raw":"---\ntitle: GraphQL小记\ndate: 2018-06-26 21:32:09\ntags:\n- front-end\n- graphql\n---\n\n![\"structure\"](http://sinacloud.net/woodysblog/graphql/structure.png)\n\n基于GraphQL、express、MongoDB、Apollo、React.js的小应用。\n->> 项目源码[github传送门](https://github.com/YuyingWu/playground/tree/master/graphql-playlist)\n\n内容包括：\n\n* 如何搭建基于GraphQL、express、MongoDB的后台服务器\n* 如何定义数据模型\n* 如何通过GraphiQL测试query和获取的数据结构，包括query（查询）和mutation（更新）\n* 如何搭建可以跟graphql query通信的Apollo-React前端应用\n\n<!-- more -->\n\n## Server\n\n### 环境\n\n* express\n  * express-graphql\n* graphql\n* mongoose，连接server和数据库（mLab）\n* [mLab](https://mlab.com/)，云端mongoDB\n\n### 定义Book的Schema\n\n```\n// schema.js\nconst graphql = require('graphql');\nconst { GraphQLObjectType, GraphQLString } = graphql;\nconst BookType = new GraphQLObjectType({\n  name: 'Book',\n  fields: () => ({\n    id: { type: GraphQLString },\n    genre: { type: GraphQLString },\n    name: { type: GraphQLString },\n  })\n});\n```\n\n### 定义RootQuery\n\n* book的类型是一个Graphql对象类型`BookType`；\n* args是发起这个query时，需要传入什么参数，这里是`id`；\n* resolve是根据参数从数据库查询数据的逻辑。\n\n```\n// schema.js\nconst RootQuery = new GraphQLObjectType({\n  name: 'RootQueryType',\n  fields: {\n    book: {\n      type: BookType,\n      args: {\n        id: { type: GraphQLString }\n      },\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n      }\n    }\n  }\n});\n```\n\n### 打开服务器的GraphiQL的面板\n\n```\n// server.js\n// 访问 http://127.0.0.1:5000/graphql\n\nconst express = require('express');\nconst graphqlHTTP = require('express-graphql');\nconst schema = require('./schema/schema');\nconst app = express();\n\napp.use('/graphql', graphqlHTTP({\n  schema,\n  graphiql: true\n}));\napp.listen(5000, () => {\n  console.log('now listening for requests on port 5000, http://127.0.0.1:5000/');\n});\n```\n\n然后在GraphiQL面板，查询对应book的内容。\n\n```\n# Graphiql的查询语句\n{\n  book(id: \"1\") {\n    name\n  }\n}\n\n# {\n#   \"data\": {\n#    \"book\": {\n#      \"name\": \"Name of the Wind\"\n#     }\n#   }\n# }\n```\n\n### Graphql提供的类型/方法\n\n**GraphQLID**，接受query中的字符串或数字类型的参数，转成JavaScript的string类型。\n**GraphQLInt**，number类型。\n**GraphQLNonNull**，使用方式`type: new GraphQLNonNull(GraphQLInt)`，说明该字段的数据类型为int且必填。\n\n### 关联类型（relative type）\n\n把AuthorType作为BookType的关联类型（实现功能，每本书有个作者）\n\n* 声明一个字段`author`，类型为`AuthorType`\n* 在`resolve`中，参数`parent`带有当前query的返回结果，从数据库中查询`id`等于当前book的`authorId`的作者信息，作为`author`的返回值\n\n```\nconst BookType = new GraphQLObjectType({\n  name: 'Book',\n  fields: () => ({\n    id: { type: GraphQLID },\n    genre: { type: GraphQLString },\n    name: { type: GraphQLString },\n    author: {\n      type: AuthorType,\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n        return _.find(authors, {\n          id: parent.authorId\n        });\n      }\n    }\n  })\n});\n```\n\n当关联类型需要返回一个数组\n\n字段`books`返回`BookType`的数组，借助`GraphQLList`。\n\n```\nconst AuthorType = new GraphQLObjectType({\n  name: 'Author',\n  fields: () => ({\n    id: { type: GraphQLID },\n    name: { type: GraphQLString },\n    age: { type: GraphQLInt },\n    books: {\n      type: new GraphQLList(BookType),\n      resolve(parent, args) {\n        // code to get data from db / other source\n        // args.id\n        return _.filter(books, {\n          authorId: parent.id\n        });\n      }\n    }\n  })\n});\n```\n\n### Mutation\n\n数据库model的声明。\n\n```\n// models/author.js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst authorSchema = new Schema({\n  name: String,\n  age: Number\n});\n\nmodule.exports = mongoose.model('Author', authorSchema);\n```\n\n在GraphQL schema中声明mutation`addAuthor`方法，把model`Author`的实例保存到数据库，且`return`相应数据。\n\n```\n// schema.js\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    addAuthor: {\n      type: AuthorType,\n      args: {\n        name: { type: GraphQLString },\n        age: { type: GraphQLInt }\n      },\n      resolve(parent, args) {\n        // 创建mongoose model `Author` 实例\n        let author = new Author({\n          name: args.name,\n          age: args.age\n        });\n\n        // mongoose model 实例的方法\n        return author.save();\n      }\n    }\n  }\n});\n```\n\n在GraphiQL中调用该mutation，执行添加author的操作，且获取添加后的数据结果。\n\n```\n// GraphiQL\nmutation {\n  addAuthor(name: \"wyy\", age: 28) {\n    name\n    age\n  }\n}\n// 返回结果\n{\n  \"data\": {\n    \"addAuthor\": {\n      \"name\": \"wyy\",\n      \"age\": 28\n    }\n  }\n}\n```\n\n## Client\n\n### 环境\n\n* React.js\n  * create-react-app\n* Apollo系\n  * apollo-boost\n  * graphql\n  * react-apollo\n\n### Step 1：连接React component和Apollo Provider\n\n在整个React应用中，通过ApolloClient，打通graphql和react组件的连接。\n\n```\n// App.js\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div>\n          <h1>hello, world</h1>\n          <BookList />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n```\n\n### Step 2：graphql query和React组件的数据交互\n\n#### 1.声明graphql query\n\n```\n// components/BookList.js\nimport { gql } from 'apollo-boost';\nconst getBooksQuery = gql`\n{\n  books {\n    id\n    name\n  }\n}\n`;\n```\n\n#### 2.利用Apollo连接`gq query`和react component\n\n结合`react-apollo`的`graphql`，以及刚才声明的query，把请求数据打进`BookList`的`props`。\n\n```\nimport { graphql } from 'react-apollo';\n\nclass BookList extends Component {\n  // 具体组件实现 blah blah\n}\n\nexport default graphql(getBooksQuery)(BookList);\n```\n\n假如，在一个组件内，需要注入多个query，可以利用`react-apollo`提供的`compose`方法。\n\n```\nimport { graphql, compose } from 'react-apollo';\n\nclass BookList extends Component {\n  // 具体组件实现 blah blah\n}\n\nexport default compose(\n  graphql(gqlQuery1, { name: 'gqlQuery1' }),\n  graphql(gqlQuery2, { name: 'gqlQuery2' }),\n)(BookList);\n```\n\n![\"graphql compose\"](http://sinacloud.net/woodysblog/graphql/gql-compose.png)\n\n#### 3.通过this.props.data获取请求数据\n\n在server的graphiQL查询的数据结构如下。\n\n```\n{\n  \"data\": {\n    \"books\": [\n      {\n        \"id\": \"5b374cdd5806e47eefce3734\",\n        \"name\": \"test\"\n      }\n    ]\n  }\n}\n```\n\n在render输出client的this.props.data，可以发现props更新了两次。区别在于`loading`这个字段，这也可以作为一个判断的flag，当`loading`为`true`时，再进一步分析接口返回的数据结构。\n\n第一次，`loading`为`true`，没有`books`这个字段。\n\n![\"loading\"](http://sinacloud.net/woodysblog/graphql/apollo-loading.png)\n\n第二次，`loading`为`false`，而`books`返回了一个数组。\n\n![\"loaded\"](http://sinacloud.net/woodysblog/graphql/apollo-loaded.png)\n\n#### 4. Mutation\n\ni. query的声明\n\n值得注意的是，当调用mutation时，我们可能需要传入参数，如何获取从react组件传入的参数？可以利用query variables（query变量）实现。\n\n```\n// query.js\nconst addBookMutation = gql`\nmutation($name: String!, $genre: String!, $authorId: ID!) {\n  addBook(name: $name, genre: $genre, authorId: $authorId) {\n    name\n    id\n  }\n}\n`\n```\n\nii. react component的数据交互\n\n利用`react-apollo`的`compose`，把`addBookMutation`注入到`this.props`，通过`varibales`传入query变量。\n\n而当我们希望在mutation之后重新获取某个query的数据时，可以在mutation操作中添加`refetchQueries`的回调。\n\n```\n// addBook.js\naddBook() {\n  // formData为点击表单提交后，获取各项input/select的数据对象\n  this.props.addBookMutation({\n    variables: {\n      name: formData.name,\n      genre: formData.genre,\n      authorId: formData.authorId,\n    },\n    refetchQueries: [{\n      query: anotherQueryWantedToBeRefetched\n    }]\n  })\n}\n```\n\n#### 5. Query\n\n需要从组件传入参数，进行参数查询的gql query（引入query变量）。\n\n```\n// query.js\nconst getBooksQuery = gql`\nquery ($id: ID!) {\n  book(id: $id) {\n    id\n    name\n  }\n}\n`;\n\n// getBook.js\n// 在绑定组件和graphql数据前，把props.id注入到query的variables里\nexport default graphql(getBookQuery, {\n  options: props => ({\n    variables: {\n      id: props.id\n    }\n  })\n})(getBookComponentName);\n```\n\n## Tips\n\n`问` 为什么在声明GraphQLObjectType实例时，fields不直接使用对象，而使用了函数？\n`答` 因为js的执行时机，直接使用对象的话，代码从上往下执行，fields中引用别的类型，如BookType和AuthorType有互相引用，会报错BookType或者AuthorType undefined。而使用函数的话，执行到函数内部逻辑时，外部的声明已经完成了。","slug":"graphql","published":1,"updated":"2018-07-04T05:37:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8s001nzvr3ixbvpt2n","content":"<p><img src=\"http://sinacloud.net/woodysblog/graphql/structure.png\" alt=\"&quot;structure&quot;\"></p>\n<p>基于GraphQL、express、MongoDB、Apollo、React.js的小应用。<br>-&gt;&gt; 项目源码<a href=\"https://github.com/YuyingWu/playground/tree/master/graphql-playlist\" target=\"_blank\" rel=\"noopener\">github传送门</a></p>\n<p>内容包括：</p>\n<ul>\n<li>如何搭建基于GraphQL、express、MongoDB的后台服务器</li>\n<li>如何定义数据模型</li>\n<li>如何通过GraphiQL测试query和获取的数据结构，包括query（查询）和mutation（更新）</li>\n<li>如何搭建可以跟graphql query通信的Apollo-React前端应用</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>express<ul>\n<li>express-graphql</li>\n</ul>\n</li>\n<li>graphql</li>\n<li>mongoose，连接server和数据库（mLab）</li>\n<li><a href=\"https://mlab.com/\" target=\"_blank\" rel=\"noopener\">mLab</a>，云端mongoDB</li>\n</ul>\n<h3 id=\"定义Book的Schema\"><a href=\"#定义Book的Schema\" class=\"headerlink\" title=\"定义Book的Schema\"></a>定义Book的Schema</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> graphql = <span class=\"built_in\">require</span>(<span class=\"string\">'graphql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; GraphQLObjectType, GraphQLString &#125; = graphql;</span><br><span class=\"line\"><span class=\"keyword\">const</span> BookType = <span class=\"keyword\">new</span> GraphQLObjectType(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Book'</span>,</span><br><span class=\"line\">  fields: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"keyword\">type</span>: GraphQLString &#125;,</span><br><span class=\"line\">    genre: &#123; <span class=\"keyword\">type</span>: GraphQLString &#125;,</span><br><span class=\"line\">    name: &#123; <span class=\"keyword\">type</span>: GraphQLString &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义RootQuery\"><a href=\"#定义RootQuery\" class=\"headerlink\" title=\"定义RootQuery\"></a>定义RootQuery</h3><ul>\n<li>book的类型是一个Graphql对象类型<code>BookType</code>；</li>\n<li>args是发起这个query时，需要传入什么参数，这里是<code>id</code>；</li>\n<li>resolve是根据参数从数据库查询数据的逻辑。</li>\n</ul>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> RootQuery = <span class=\"keyword\">new</span> GraphQLObjectType(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">name</span>: <span class=\"string\">'RootQueryType'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">fields</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">book</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">type</span>: BookType,</span><br><span class=\"line\">      <span class=\"attribute\">args</span>: &#123;</span><br><span class=\"line\">        <span class=\"attribute\">id:</span><span class=\"string\"> &#123; type</span>: GraphQLString &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      resolve(<span class=\"built_in\">parent</span>, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开服务器的GraphiQL的面板\"><a href=\"#打开服务器的GraphiQL的面板\" class=\"headerlink\" title=\"打开服务器的GraphiQL的面板\"></a>打开服务器的GraphiQL的面板</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\"><span class=\"comment\">// 访问 http://127.0.0.1:5000/graphql</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> graphqlHTTP = <span class=\"built_in\">require</span>(<span class=\"string\">'express-graphql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> schema = <span class=\"built_in\">require</span>(<span class=\"string\">'./schema/schema'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/graphql'</span>, graphqlHTTP(&#123;</span><br><span class=\"line\">  schema,</span><br><span class=\"line\">  graphiql: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'now listening for requests on port 5000, http://127.0.0.1:5000/'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后在GraphiQL面板，查询对应book的内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Graphiql的查询语句</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  book(id: \"1\") &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   <span class=\"string\">\"data\"</span>: &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    <span class=\"string\">\"book\"</span>: &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Name of the Wind\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">     &#125;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   &#125;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Graphql提供的类型-方法\"><a href=\"#Graphql提供的类型-方法\" class=\"headerlink\" title=\"Graphql提供的类型/方法\"></a>Graphql提供的类型/方法</h3><p><strong>GraphQLID</strong>，接受query中的字符串或数字类型的参数，转成JavaScript的string类型。<br><strong>GraphQLInt</strong>，number类型。<br><strong>GraphQLNonNull</strong>，使用方式<code>type: new GraphQLNonNull(GraphQLInt)</code>，说明该字段的数据类型为int且必填。</p>\n<h3 id=\"关联类型（relative-type）\"><a href=\"#关联类型（relative-type）\" class=\"headerlink\" title=\"关联类型（relative type）\"></a>关联类型（relative type）</h3><p>把AuthorType作为BookType的关联类型（实现功能，每本书有个作者）</p>\n<ul>\n<li>声明一个字段<code>author</code>，类型为<code>AuthorType</code></li>\n<li>在<code>resolve</code>中，参数<code>parent</code>带有当前query的返回结果，从数据库中查询<code>id</code>等于当前book的<code>authorId</code>的作者信息，作为<code>author</code>的返回值</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">BookType</span> = <span class=\"keyword\">new</span> <span class=\"type\">GraphQLObjectType</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"symbol\">'Boo</span>k',</span><br><span class=\"line\">  fields: () =&gt; (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLID</span> &#125;,</span><br><span class=\"line\">    genre: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    name: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    author: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">AuthorType</span>,</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _.find(authors, &#123;</span><br><span class=\"line\">          id: parent.authorId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当关联类型需要返回一个数组</p>\n<p>字段<code>books</code>返回<code>BookType</code>的数组，借助<code>GraphQLList</code>。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">AuthorType</span> = <span class=\"keyword\">new</span> <span class=\"type\">GraphQLObjectType</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"symbol\">'Autho</span>r',</span><br><span class=\"line\">  fields: () =&gt; (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLID</span> &#125;,</span><br><span class=\"line\">    name: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    age: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLInt</span> &#125;,</span><br><span class=\"line\">    books: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"keyword\">new</span> <span class=\"type\">GraphQLList</span>(<span class=\"type\">BookType</span>),</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _.filter(books, &#123;</span><br><span class=\"line\">          authorId: parent.id</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><p>数据库model的声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// models/author.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Schema = mongoose.Schema;</span><br><span class=\"line\"><span class=\"keyword\">const</span> authorSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'Author'</span>, authorSchema);</span><br></pre></td></tr></table></figure>\n<p>在GraphQL schema中声明mutation<code>addAuthor</code>方法，把model<code>Author</code>的实例保存到数据库，且<code>return</code>相应数据。</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// schema.js</span></span><br><span class=\"line\">const Mutation = <span class=\"keyword\">new</span> GraphQLObjectType(&#123;</span><br><span class=\"line\">  name: 'Mutation',</span><br><span class=\"line\">  fields: &#123;</span><br><span class=\"line\">    addAuthor: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">AuthorType</span>,</span></span><br><span class=\"line\">      args: &#123;</span><br><span class=\"line\">        name: &#123; <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">GraphQLString</span> &#125;,</span></span><br><span class=\"line\">        age: &#123; <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">GraphQLInt</span> &#125;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建mongoose model `Author` 实例</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> author = <span class=\"keyword\">new</span> Author(&#123;</span><br><span class=\"line\">          name: args.name,</span><br><span class=\"line\">          age: args.age</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// mongoose model 实例的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> author.save();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在GraphiQL中调用该mutation，执行添加author的操作，且获取添加后的数据结果。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// GraphiQL</span><br><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  addAuthor(name: <span class=\"string\">\"wyy\"</span>, age: <span class=\"number\">28</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 返回结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"addAuthor\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"wyy\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h2><h3 id=\"环境-1\"><a href=\"#环境-1\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>React.js<ul>\n<li>create-react-app</li>\n</ul>\n</li>\n<li>Apollo系<ul>\n<li>apollo-boost</li>\n<li>graphql</li>\n<li>react-apollo</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Step-1：连接React-component和Apollo-Provider\"><a href=\"#Step-1：连接React-component和Apollo-Provider\" class=\"headerlink\" title=\"Step 1：连接React component和Apollo Provider\"></a>Step 1：连接React component和Apollo Provider</h3><p>在整个React应用中，通过ApolloClient，打通graphql和react组件的连接。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ApolloClient <span class=\"keyword\">from</span> <span class=\"string\">'apollo-boost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloProvider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> ApolloClient(&#123;</span><br><span class=\"line\">  uri: <span class=\"string\">'http://localhost:5000/graphql'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ApolloProvider client=&#123;client&#125;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h1&gt;hello, world&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;BookList /</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>ApolloProvider&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2：graphql-query和React组件的数据交互\"><a href=\"#Step-2：graphql-query和React组件的数据交互\" class=\"headerlink\" title=\"Step 2：graphql query和React组件的数据交互\"></a>Step 2：graphql query和React组件的数据交互</h3><h4 id=\"1-声明graphql-query\"><a href=\"#1-声明graphql-query\" class=\"headerlink\" title=\"1.声明graphql query\"></a>1.声明graphql query</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// components/BookList.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; gql &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-boost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getBooksQuery = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  books &#123;</span></span><br><span class=\"line\"><span class=\"string\">    id</span></span><br><span class=\"line\"><span class=\"string\">    name</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-利用Apollo连接gq-query和react-component\"><a href=\"#2-利用Apollo连接gq-query和react-component\" class=\"headerlink\" title=\"2.利用Apollo连接gq query和react component\"></a>2.利用Apollo连接<code>gq query</code>和react component</h4><p>结合<code>react-apollo</code>的<code>graphql</code>，以及刚才声明的query，把请求数据打进<code>BookList</code>的<code>props</code>。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; graphql &#125; from <span class=\"symbol\">'react</span>-apollo';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 具体组件实现 blah blah</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> graphql(getBooksQuery)(<span class=\"type\">BookList</span>);</span><br></pre></td></tr></table></figure>\n<p>假如，在一个组件内，需要注入多个query，可以利用<code>react-apollo</code>提供的<code>compose</code>方法。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; graphql, compose &#125; from <span class=\"symbol\">'react</span>-apollo';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 具体组件实现 blah blah</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> compose(</span><br><span class=\"line\">  graphql(gqlQuery1, &#123; name: <span class=\"symbol\">'gqlQuery</span>1' &#125;),</span><br><span class=\"line\">  graphql(gqlQuery2, &#123; name: <span class=\"symbol\">'gqlQuery</span>2' &#125;),</span><br><span class=\"line\">)(<span class=\"type\">BookList</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://sinacloud.net/woodysblog/graphql/gql-compose.png\" alt=\"&quot;graphql compose&quot;\"></p>\n<h4 id=\"3-通过this-props-data获取请求数据\"><a href=\"#3-通过this-props-data获取请求数据\" class=\"headerlink\" title=\"3.通过this.props.data获取请求数据\"></a>3.通过this.props.data获取请求数据</h4><p>在server的graphiQL查询的数据结构如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"books\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"5b374cdd5806e47eefce3734\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在render输出client的this.props.data，可以发现props更新了两次。区别在于<code>loading</code>这个字段，这也可以作为一个判断的flag，当<code>loading</code>为<code>true</code>时，再进一步分析接口返回的数据结构。</p>\n<p>第一次，<code>loading</code>为<code>true</code>，没有<code>books</code>这个字段。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/graphql/apollo-loading.png\" alt=\"&quot;loading&quot;\"></p>\n<p>第二次，<code>loading</code>为<code>false</code>，而<code>books</code>返回了一个数组。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/graphql/apollo-loaded.png\" alt=\"&quot;loaded&quot;\"></p>\n<h4 id=\"4-Mutation\"><a href=\"#4-Mutation\" class=\"headerlink\" title=\"4. Mutation\"></a>4. Mutation</h4><p>i. query的声明</p>\n<p>值得注意的是，当调用mutation时，我们可能需要传入参数，如何获取从react组件传入的参数？可以利用query variables（query变量）实现。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// query.js</span></span><br><span class=\"line\">const addBookMutation = gql`</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mutation</span><span class=\"params\">(<span class=\"variable\">$name</span>: String!, <span class=\"variable\">$genre</span>: String!, <span class=\"variable\">$authorId</span>: ID!)</span></span> &#123;</span><br><span class=\"line\">  addBook(name: <span class=\"variable\">$name</span>, genre: <span class=\"variable\">$genre</span>, authorId: <span class=\"variable\">$authorId</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>ii. react component的数据交互</p>\n<p>利用<code>react-apollo</code>的<code>compose</code>，把<code>addBookMutation</code>注入到<code>this.props</code>，通过<code>varibales</code>传入query变量。</p>\n<p>而当我们希望在mutation之后重新获取某个query的数据时，可以在mutation操作中添加<code>refetchQueries</code>的回调。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// addBook.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">addBook</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// formData为点击表单提交后，获取各项input/select的数据对象</span></span><br><span class=\"line\">  this<span class=\"selector-class\">.props</span><span class=\"selector-class\">.addBookMutation</span>(&#123;</span><br><span class=\"line\">    variables: &#123;</span><br><span class=\"line\">      name: formData<span class=\"selector-class\">.name</span>,</span><br><span class=\"line\">      genre: formData<span class=\"selector-class\">.genre</span>,</span><br><span class=\"line\">      authorId: formData<span class=\"selector-class\">.authorId</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    refetchQueries: [&#123;</span><br><span class=\"line\">      query: anotherQueryWantedToBeRefetched</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-Query\"><a href=\"#5-Query\" class=\"headerlink\" title=\"5. Query\"></a>5. Query</h4><p>需要从组件传入参数，进行参数查询的gql query（引入query变量）。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// query.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getBooksQuery = gql`</span><br><span class=\"line\">query ($<span class=\"keyword\">id</span>: ID!) &#123;</span><br><span class=\"line\">  book(<span class=\"keyword\">id</span>: $<span class=\"keyword\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span></span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getBook.js</span></span><br><span class=\"line\"><span class=\"comment\">// 在绑定组件和graphql数据前，把props.id注入到query的variables里</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> graphql(getBookQuery, &#123;</span><br><span class=\"line\">  options: props =&gt; (&#123;</span><br><span class=\"line\">    variables: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">id</span>: props.id</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)(getBookComponentName);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><p><code>问</code> 为什么在声明GraphQLObjectType实例时，fields不直接使用对象，而使用了函数？<br><code>答</code> 因为js的执行时机，直接使用对象的话，代码从上往下执行，fields中引用别的类型，如BookType和AuthorType有互相引用，会报错BookType或者AuthorType undefined。而使用函数的话，执行到函数内部逻辑时，外部的声明已经完成了。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://sinacloud.net/woodysblog/graphql/structure.png\" alt=\"&quot;structure&quot;\"></p>\n<p>基于GraphQL、express、MongoDB、Apollo、React.js的小应用。<br>-&gt;&gt; 项目源码<a href=\"https://github.com/YuyingWu/playground/tree/master/graphql-playlist\" target=\"_blank\" rel=\"noopener\">github传送门</a></p>\n<p>内容包括：</p>\n<ul>\n<li>如何搭建基于GraphQL、express、MongoDB的后台服务器</li>\n<li>如何定义数据模型</li>\n<li>如何通过GraphiQL测试query和获取的数据结构，包括query（查询）和mutation（更新）</li>\n<li>如何搭建可以跟graphql query通信的Apollo-React前端应用</li>\n</ul>","more":"<h2 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>express<ul>\n<li>express-graphql</li>\n</ul>\n</li>\n<li>graphql</li>\n<li>mongoose，连接server和数据库（mLab）</li>\n<li><a href=\"https://mlab.com/\" target=\"_blank\" rel=\"noopener\">mLab</a>，云端mongoDB</li>\n</ul>\n<h3 id=\"定义Book的Schema\"><a href=\"#定义Book的Schema\" class=\"headerlink\" title=\"定义Book的Schema\"></a>定义Book的Schema</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> graphql = <span class=\"built_in\">require</span>(<span class=\"string\">'graphql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; GraphQLObjectType, GraphQLString &#125; = graphql;</span><br><span class=\"line\"><span class=\"keyword\">const</span> BookType = <span class=\"keyword\">new</span> GraphQLObjectType(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Book'</span>,</span><br><span class=\"line\">  fields: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"keyword\">type</span>: GraphQLString &#125;,</span><br><span class=\"line\">    genre: &#123; <span class=\"keyword\">type</span>: GraphQLString &#125;,</span><br><span class=\"line\">    name: &#123; <span class=\"keyword\">type</span>: GraphQLString &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义RootQuery\"><a href=\"#定义RootQuery\" class=\"headerlink\" title=\"定义RootQuery\"></a>定义RootQuery</h3><ul>\n<li>book的类型是一个Graphql对象类型<code>BookType</code>；</li>\n<li>args是发起这个query时，需要传入什么参数，这里是<code>id</code>；</li>\n<li>resolve是根据参数从数据库查询数据的逻辑。</li>\n</ul>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> RootQuery = <span class=\"keyword\">new</span> GraphQLObjectType(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">name</span>: <span class=\"string\">'RootQueryType'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">fields</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">book</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">type</span>: BookType,</span><br><span class=\"line\">      <span class=\"attribute\">args</span>: &#123;</span><br><span class=\"line\">        <span class=\"attribute\">id:</span><span class=\"string\"> &#123; type</span>: GraphQLString &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      resolve(<span class=\"built_in\">parent</span>, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开服务器的GraphiQL的面板\"><a href=\"#打开服务器的GraphiQL的面板\" class=\"headerlink\" title=\"打开服务器的GraphiQL的面板\"></a>打开服务器的GraphiQL的面板</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\"><span class=\"comment\">// 访问 http://127.0.0.1:5000/graphql</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> graphqlHTTP = <span class=\"built_in\">require</span>(<span class=\"string\">'express-graphql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> schema = <span class=\"built_in\">require</span>(<span class=\"string\">'./schema/schema'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/graphql'</span>, graphqlHTTP(&#123;</span><br><span class=\"line\">  schema,</span><br><span class=\"line\">  graphiql: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'now listening for requests on port 5000, http://127.0.0.1:5000/'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后在GraphiQL面板，查询对应book的内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Graphiql的查询语句</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  book(id: \"1\") &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   <span class=\"string\">\"data\"</span>: &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    <span class=\"string\">\"book\"</span>: &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Name of the Wind\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">     &#125;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   &#125;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Graphql提供的类型-方法\"><a href=\"#Graphql提供的类型-方法\" class=\"headerlink\" title=\"Graphql提供的类型/方法\"></a>Graphql提供的类型/方法</h3><p><strong>GraphQLID</strong>，接受query中的字符串或数字类型的参数，转成JavaScript的string类型。<br><strong>GraphQLInt</strong>，number类型。<br><strong>GraphQLNonNull</strong>，使用方式<code>type: new GraphQLNonNull(GraphQLInt)</code>，说明该字段的数据类型为int且必填。</p>\n<h3 id=\"关联类型（relative-type）\"><a href=\"#关联类型（relative-type）\" class=\"headerlink\" title=\"关联类型（relative type）\"></a>关联类型（relative type）</h3><p>把AuthorType作为BookType的关联类型（实现功能，每本书有个作者）</p>\n<ul>\n<li>声明一个字段<code>author</code>，类型为<code>AuthorType</code></li>\n<li>在<code>resolve</code>中，参数<code>parent</code>带有当前query的返回结果，从数据库中查询<code>id</code>等于当前book的<code>authorId</code>的作者信息，作为<code>author</code>的返回值</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">BookType</span> = <span class=\"keyword\">new</span> <span class=\"type\">GraphQLObjectType</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"symbol\">'Boo</span>k',</span><br><span class=\"line\">  fields: () =&gt; (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLID</span> &#125;,</span><br><span class=\"line\">    genre: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    name: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    author: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">AuthorType</span>,</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _.find(authors, &#123;</span><br><span class=\"line\">          id: parent.authorId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当关联类型需要返回一个数组</p>\n<p>字段<code>books</code>返回<code>BookType</code>的数组，借助<code>GraphQLList</code>。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">AuthorType</span> = <span class=\"keyword\">new</span> <span class=\"type\">GraphQLObjectType</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"symbol\">'Autho</span>r',</span><br><span class=\"line\">  fields: () =&gt; (&#123;</span><br><span class=\"line\">    id: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLID</span> &#125;,</span><br><span class=\"line\">    name: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLString</span> &#125;,</span><br><span class=\"line\">    age: &#123; <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"type\">GraphQLInt</span> &#125;,</span><br><span class=\"line\">    books: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"keyword\">new</span> <span class=\"type\">GraphQLList</span>(<span class=\"type\">BookType</span>),</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// code to get data from db / other source</span></span><br><span class=\"line\">        <span class=\"comment\">// args.id</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _.filter(books, &#123;</span><br><span class=\"line\">          authorId: parent.id</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><p>数据库model的声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// models/author.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Schema = mongoose.Schema;</span><br><span class=\"line\"><span class=\"keyword\">const</span> authorSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'Author'</span>, authorSchema);</span><br></pre></td></tr></table></figure>\n<p>在GraphQL schema中声明mutation<code>addAuthor</code>方法，把model<code>Author</code>的实例保存到数据库，且<code>return</code>相应数据。</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// schema.js</span></span><br><span class=\"line\">const Mutation = <span class=\"keyword\">new</span> GraphQLObjectType(&#123;</span><br><span class=\"line\">  name: 'Mutation',</span><br><span class=\"line\">  fields: &#123;</span><br><span class=\"line\">    addAuthor: &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">AuthorType</span>,</span></span><br><span class=\"line\">      args: &#123;</span><br><span class=\"line\">        name: &#123; <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">GraphQLString</span> &#125;,</span></span><br><span class=\"line\">        age: &#123; <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">GraphQLInt</span> &#125;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      resolve(parent, args) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建mongoose model `Author` 实例</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> author = <span class=\"keyword\">new</span> Author(&#123;</span><br><span class=\"line\">          name: args.name,</span><br><span class=\"line\">          age: args.age</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// mongoose model 实例的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> author.save();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在GraphiQL中调用该mutation，执行添加author的操作，且获取添加后的数据结果。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// GraphiQL</span><br><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  addAuthor(name: <span class=\"string\">\"wyy\"</span>, age: <span class=\"number\">28</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 返回结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"addAuthor\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"wyy\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"age\"</span>: <span class=\"number\">28</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h2><h3 id=\"环境-1\"><a href=\"#环境-1\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>React.js<ul>\n<li>create-react-app</li>\n</ul>\n</li>\n<li>Apollo系<ul>\n<li>apollo-boost</li>\n<li>graphql</li>\n<li>react-apollo</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Step-1：连接React-component和Apollo-Provider\"><a href=\"#Step-1：连接React-component和Apollo-Provider\" class=\"headerlink\" title=\"Step 1：连接React component和Apollo Provider\"></a>Step 1：连接React component和Apollo Provider</h3><p>在整个React应用中，通过ApolloClient，打通graphql和react组件的连接。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ApolloClient <span class=\"keyword\">from</span> <span class=\"string\">'apollo-boost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloProvider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> ApolloClient(&#123;</span><br><span class=\"line\">  uri: <span class=\"string\">'http://localhost:5000/graphql'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ApolloProvider client=&#123;client&#125;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;h1&gt;hello, world&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;BookList /</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>ApolloProvider&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2：graphql-query和React组件的数据交互\"><a href=\"#Step-2：graphql-query和React组件的数据交互\" class=\"headerlink\" title=\"Step 2：graphql query和React组件的数据交互\"></a>Step 2：graphql query和React组件的数据交互</h3><h4 id=\"1-声明graphql-query\"><a href=\"#1-声明graphql-query\" class=\"headerlink\" title=\"1.声明graphql query\"></a>1.声明graphql query</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// components/BookList.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; gql &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-boost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getBooksQuery = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  books &#123;</span></span><br><span class=\"line\"><span class=\"string\">    id</span></span><br><span class=\"line\"><span class=\"string\">    name</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-利用Apollo连接gq-query和react-component\"><a href=\"#2-利用Apollo连接gq-query和react-component\" class=\"headerlink\" title=\"2.利用Apollo连接gq query和react component\"></a>2.利用Apollo连接<code>gq query</code>和react component</h4><p>结合<code>react-apollo</code>的<code>graphql</code>，以及刚才声明的query，把请求数据打进<code>BookList</code>的<code>props</code>。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; graphql &#125; from <span class=\"symbol\">'react</span>-apollo';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 具体组件实现 blah blah</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> graphql(getBooksQuery)(<span class=\"type\">BookList</span>);</span><br></pre></td></tr></table></figure>\n<p>假如，在一个组件内，需要注入多个query，可以利用<code>react-apollo</code>提供的<code>compose</code>方法。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; graphql, compose &#125; from <span class=\"symbol\">'react</span>-apollo';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 具体组件实现 blah blah</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> compose(</span><br><span class=\"line\">  graphql(gqlQuery1, &#123; name: <span class=\"symbol\">'gqlQuery</span>1' &#125;),</span><br><span class=\"line\">  graphql(gqlQuery2, &#123; name: <span class=\"symbol\">'gqlQuery</span>2' &#125;),</span><br><span class=\"line\">)(<span class=\"type\">BookList</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://sinacloud.net/woodysblog/graphql/gql-compose.png\" alt=\"&quot;graphql compose&quot;\"></p>\n<h4 id=\"3-通过this-props-data获取请求数据\"><a href=\"#3-通过this-props-data获取请求数据\" class=\"headerlink\" title=\"3.通过this.props.data获取请求数据\"></a>3.通过this.props.data获取请求数据</h4><p>在server的graphiQL查询的数据结构如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"books\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"5b374cdd5806e47eefce3734\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在render输出client的this.props.data，可以发现props更新了两次。区别在于<code>loading</code>这个字段，这也可以作为一个判断的flag，当<code>loading</code>为<code>true</code>时，再进一步分析接口返回的数据结构。</p>\n<p>第一次，<code>loading</code>为<code>true</code>，没有<code>books</code>这个字段。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/graphql/apollo-loading.png\" alt=\"&quot;loading&quot;\"></p>\n<p>第二次，<code>loading</code>为<code>false</code>，而<code>books</code>返回了一个数组。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/graphql/apollo-loaded.png\" alt=\"&quot;loaded&quot;\"></p>\n<h4 id=\"4-Mutation\"><a href=\"#4-Mutation\" class=\"headerlink\" title=\"4. Mutation\"></a>4. Mutation</h4><p>i. query的声明</p>\n<p>值得注意的是，当调用mutation时，我们可能需要传入参数，如何获取从react组件传入的参数？可以利用query variables（query变量）实现。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// query.js</span></span><br><span class=\"line\">const addBookMutation = gql`</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mutation</span><span class=\"params\">(<span class=\"variable\">$name</span>: String!, <span class=\"variable\">$genre</span>: String!, <span class=\"variable\">$authorId</span>: ID!)</span></span> &#123;</span><br><span class=\"line\">  addBook(name: <span class=\"variable\">$name</span>, genre: <span class=\"variable\">$genre</span>, authorId: <span class=\"variable\">$authorId</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>ii. react component的数据交互</p>\n<p>利用<code>react-apollo</code>的<code>compose</code>，把<code>addBookMutation</code>注入到<code>this.props</code>，通过<code>varibales</code>传入query变量。</p>\n<p>而当我们希望在mutation之后重新获取某个query的数据时，可以在mutation操作中添加<code>refetchQueries</code>的回调。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// addBook.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">addBook</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// formData为点击表单提交后，获取各项input/select的数据对象</span></span><br><span class=\"line\">  this<span class=\"selector-class\">.props</span><span class=\"selector-class\">.addBookMutation</span>(&#123;</span><br><span class=\"line\">    variables: &#123;</span><br><span class=\"line\">      name: formData<span class=\"selector-class\">.name</span>,</span><br><span class=\"line\">      genre: formData<span class=\"selector-class\">.genre</span>,</span><br><span class=\"line\">      authorId: formData<span class=\"selector-class\">.authorId</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    refetchQueries: [&#123;</span><br><span class=\"line\">      query: anotherQueryWantedToBeRefetched</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-Query\"><a href=\"#5-Query\" class=\"headerlink\" title=\"5. Query\"></a>5. Query</h4><p>需要从组件传入参数，进行参数查询的gql query（引入query变量）。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// query.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getBooksQuery = gql`</span><br><span class=\"line\">query ($<span class=\"keyword\">id</span>: ID!) &#123;</span><br><span class=\"line\">  book(<span class=\"keyword\">id</span>: $<span class=\"keyword\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span></span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getBook.js</span></span><br><span class=\"line\"><span class=\"comment\">// 在绑定组件和graphql数据前，把props.id注入到query的variables里</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> graphql(getBookQuery, &#123;</span><br><span class=\"line\">  options: props =&gt; (&#123;</span><br><span class=\"line\">    variables: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">id</span>: props.id</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)(getBookComponentName);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><p><code>问</code> 为什么在声明GraphQLObjectType实例时，fields不直接使用对象，而使用了函数？<br><code>答</code> 因为js的执行时机，直接使用对象的话，代码从上往下执行，fields中引用别的类型，如BookType和AuthorType有互相引用，会报错BookType或者AuthorType undefined。而使用函数的话，执行到函数内部逻辑时，外部的声明已经完成了。</p>"},{"title":"书摘-增长黑客","date":"2018-08-26T12:55:09.000Z","_content":"\n增长黑客们试图用更聪明的方式解答产品得以增长的奥秘，并使之成为助力产品增长的长效机制。他们通常采用的手段包括A/B测试、搜索引擎优化、电子邮件召回、病毒营销等，而页面加载速度、注册转化率、E-mail到达水平、病毒因子这些指标成为他们日常关注的对象。\n\n换句话说，**增长黑客就是一群以数据驱动营销、以市场指导产品，通过技术化手段贯彻增长目标的人**。\n\n<!--more-->\n\n> 在每一封用Hotmail发出的邮件末尾签名处，增加了一行附言：“我爱你。快来Hotmail申请你的免费邮箱。”（PS:I love you.Get your free E-mail at Hotmail.）这一改动在仅仅几个小时之后，使Hotmail的用户注册曲线发生了戏剧性的变化，原本无人问津的服务，开始以每天3000个新用户的速度增长。\n\n作为企业发展的助推者，增长黑客必须真正懂得产品的核心价值，能用最简单的语言描述这个产品是什么、解决什么问题，在此基础上清晰定位有关增长的问题，并寻求解答。\n\n{% douban \"https://book.douban.com/subject/26541801\" %}\n\n## 一、增长黑客的崛起\n\n为什么直到最近，“增长黑客”的概念才开始流行呢？\n\n一方面，越来越多的第三方工具降低了初创团队的开发门槛，Google Analytics、Mixpanel等“即插即用”的服务只需开发者在程序/网页内嵌入几行代码，就能一条龙式地以低成本实现数据采集、渠道统计、设备追踪、用户使用行为分析等功能。初创企业再也无须抽调专门人力“重复发明轮子”，就能用最小的代价快速搭建和测试产品，获取影响产品性能的各项指标。配套工具的唾手可得，让初创团队得以着眼于产品增长本身。\n\n另一方面，越来越多的行业巨头出于扩大市场份额、构建生态系统、完善配套服务、探索盈利途径等需要，建立了属于自己的开放生态，并发布了配套的API供开发者调用。开发者通过接入平台，能够直接调用平台的身份授权、用户关系、内容数据，以及计算能力。产业的融合为初创企业带来更多变革和创新机会，也为富于寻找增长点的增长黑客们提供了闪转腾挪的全新舞台。\n\n### 增长黑客与市场营销\n\n首次接触“增长黑客”概念的人，可能会将它与市场营销混淆。\n\n#### 市场营销\n\n市场部的设立更适合有一定资源优势的企业，尤其是那些商业模式已得到验证、正在或已经建立了持久稳定的用户获取渠道，且能将成本压缩在合理范围内的较成熟企业。\n\n#### 低成本的增长\n\n尚未建立起对市场足够了解的初创公司，一上来就狠狠砸钱并非明智之举。当务之急是引入增长黑客，通过测试取样、建模修正和无数的试验，去发现更多被低估的低成本的有效增长途径。任何一个关键环节都存在不断优化的可能性。\n\n### 谁更适合做增长黑客\n\n从现有的发展情况看，**工程师可能是最接近和容易成为增长黑客的一群人**。因为从能力角度看，增长黑客不仅需要想法，更需要将想法落实到行动的能力，包括自研工具、采集样本、分析数据、大规模推广，光会纸上谈兵是行不通的。懂技术，未必能变成好的增长黑客，而倘若不懂技术，无异于刘姥姥进大观园。\n\n**增长黑客的价值**就是通过数据分析快速找到机会和问题，并迅速地设置各种规模的试验去验证，找到可持续的方法来增长。\n\n## 二、AARRR转化漏洞模型\n\n![\"AARRR model\"](http://sinacloud.net/woodysblog/img/AARRR.png)\n\n增长的对象不仅包含用户量的累加，更囊括了产品生命周期中各个阶段的重要指标。根据不同阶段用户参与行为的深度和类型，我们可以将增长目标拆分并概括为“AARRR”转化漏洞模型。\n\n增长黑客的价值正是通过不断地“头脑风暴-排定优先级-测试-分析-常态化部署”来优化产品策略，减少这当中每个环节的不必要损耗，提高转化效率，从而不断扩大自己用户群体的数量和质量。\n\n### 1. Acquisition（获取用户）\n\n获取用户，指让潜在用户首次接触到产品，或者可以更宽泛地理解为“吸引流量”、“用户量增长”。\n\n### 2. Activation（激发活跃）\n\n激发活跃，获取到用户后下一步是引导用户完成某些“指定动作”，使之成为长期活跃的忠实用户。\n\n### 3. Retention（提高留存）\n\n提高留存，在解决了用户的活跃度问题后，另一个问题又冒了出来。用户来得快，走得也快。提高用户留存，是维持产品价值、延长生命周期的重要手段。\n\n### 4. Revenue（增加收入）\n\n在互联网行业，除了直接向用户收费，还可以通过广告展示、业务分成等方式向其他利益方收取费用。\n\n### 5. Referral（传播推荐）\n\n社交网络的兴起促成了基于用户关系的病毒传播，这是低成本推广产品的全新方式，运用妥当将可能引发奇妙的链式增长。\n\n## 三、Facebook用户增长的经验\n\n安迪对于自己一手组建起来的Facebook用户增长团队所肩负的职责，总结为以下五点。\n\n* **用户获取** —— 用户增长团队内有一部分人负责互联网营销渠道，如SEO（Search Engine Optimization，搜索引擎优化）、PPC（Pay Per Click，点击付费广告）或是电子邮件广告等，每一项都包括一套极为缜密的优化流程；\n* **产品研发** —— 用户增长团队的意见将指导产品研发的各个关键部分，例如登录页面、新用户引导流程、评论互动功能和支付系统等。基本上你能想到的任何地方都留下了用户增长团队的智慧成果；\n* **文化建设** —— 团队文化对凝聚整个公司至关重要。用户增长团队协助树立数据驱动的理念，确保所有人目标一致地快速执行，并随时准备迎战风险；\n* **人才招聘** —— 初创公司招募团队成员是一项困难的工作，并非人人都愿意冒险加入一家前途未卜的小公司。但在用户增长团队的帮助下，如果公司的用户量达到五千万甚至五亿，那么情况就大为不同了。\n\n**数据分析** —— 用户增长团队建立在对大数据的分析衡量基础之上。\n\n大部分时候，用户增长的工作就是在进行测试、调整并重复这个流程。他们需要与数据科学团队紧密协作，通过内部工具研究驱使数据提升或下降的因素。\n\n进行数据分析的首要环节是**明确分析的目的**。脱离具体目标的单纯数据查看没有任何价值。其次是要**了解数据来源的相关信息**，包括各项指标的定义、采集点和上报机制。\n\n> 上报机制，数据上报的时机、内容和技术实现形式。\n> 定性分析，就是对事物的性质作出判断，究竟它“是什么”。\n> 定量分析，是指对事物的数量作出统计，衡量它“有多少”。\n\n数据分析就是定性分析与定量分析相互结合，不断验证的过程。提出假设、设计方案、分析数据、验证或推翻假设，最终抽丝剥茧，逐渐接近真相。数据是相互验证的，彼此之间有如通过无形的网络纵横连接，只需轻轻按动其中一个，就会驱使另外一个或一组产生变化。通过数据分析得出的结论，应当能反推出其他数据，或是与其他数据分析得出的结果相一致。\n\n## 四、创造正确的产品\n\n### 如何判断需求是否足够大\n\n通常可采用两种方式。\n\n一种是先估计目标用户的基数、消费能力、意愿预算，再把这些数字通过相乘等方式得出一个大概的数字，并与该行业或近似行业的公开报告进行比对验证；\n\n另一种则是评估打算进入的市场，原本具有多少产值，而你的产品通过提供更低的价格、更长的使用周期等，能提升多少效率、节省多少成本，从而折算出相对于原产值的全新规模。\n\n### 最小化可行产品 MVP\n\n《精益创业》中提出的“最小化可行产品（Minimum Viable Product，简称MVP）”概念。\n\n#### MVP三要素\n\n精益创业是指开发团队通过提供最小化可行产品获取用户反馈，在此基础上持续快速迭代（或谋求转型），直至产品达到PMF阶段。它包含如下三个要素。\n\n1. 最小化可行产品：即所谓的MVP（Minimum Viable Product）是指将产品原型用最简洁的实现方式开发出来，过滤掉冗余杂音和高级特性，快速投放市场让目标用户上手使用，然后通过不断地听取反馈掌握有价值的信息，由此对产品原型迭代优化，尽早达到PMF状态；\n2. 用户反馈：指通过直接或间接方式，从产品的最终用户那里获得针对该产品的意见；\n3. 快速迭代：“天下武功，唯快不破”。\n\n#### MVP的三大必备模块\n\n如果问开发一个MVP必须具备哪些模块，那么我会不假思索地告诉你：除了待验证的基本功能外，反馈渠道、公告看板、自动升级和使用行为统计这四件事必须纳入考量。\n\n## 五、获取用户\n\n### 种子用户\n\n**“冷启动”**原本是数据挖掘领域的一个专业术语，运用到产品运营中，指在产品之初尚未形成完善的生态体系并能提供足够多可消费内容的情况下，从零开始导入第一批用户和制造内容的过程。选择高质量的早期用户加入和建立充足的数据沉淀，将可作为引燃产品持续增长的燎原之火，为日后发展奠定良好基础。\n\n种子用户的三层含义：\n\n1. 这批人数量少，获取不易；\n2. 他们进入产品的阶段较早；\n3. 种子用户如同种子一样孕育着希望，具有成长为参天大树的可能性。\n\n### 走访和了解用户\n\n走访和了解用户，掌握真实需求，是一件复杂困难的事情。就像1000个人心中有1000个哈姆雷特一样，不同人对产品的需求和评判标准不尽相同。从最笨的事情做起的过程，同时也是走进用户内心的过程。将用户视作活生生的个体，通过面对面的沟通，吸纳意见并获得鼓舞，帮助许多初创公司走过了从零开始举步维艰的阶段。\n\n### 内容营销\n\n内容营销的作用主要分为三方面：\n\n* 吸引流量\n* 培养潜在用户\n* 劝诱转化\n\n内容营销的注意事项：\n\n1. 知道你的目标受众是谁\n2. 打造一台内容持续输出的引擎\n3. 撰写耸动的标题\n4. 保证文章长度\n5. 鼓励受众参与互动\n6. 选择合适的发布渠道\n\n有了足够可写的内容素材后，文章的谋篇布局可以遵循以下顺序：简要概述→话题事件→核心特色→主要功能→团队访谈→未来计划→有奖活动→转化引导。\n\n## 六、A/B测试\n\n### A/B测试的基本思想\n\n* 提供两个方案并行测试；\n* 不同方案之间只存在一个变量，排除其他干扰因素；\n* 以某种标准判定结果优劣，筛出最优方案。\n\n> Airbnb曾测试过把“保存到心愿单”的收藏图标由星形改为爱心，结果仅凭这一改动就让心愿列表的使用率提升了30%。\n\n### A/B的成本\n\n谷歌为了找出在两种蓝色方案中哪一种更好，索性测试了41种不同的蓝色来做比较。对与时间赛跑的创业团队而言，这样的精力付出简直太过奢侈。如果你的产品还没达到零点几个百分比的下降都意味着几百万美元损失的地步的话，还是多花些时间在那些真正有跃进式提升的地方吧。\n\n## 七、留存\n\n> “当陪你的人要下车时，即使不舍，也该心存感激，然后挥手道别。”——《千与千寻》，宫崎骏\n\n根据美国贝恩公司的调查，在商业社会中5%的客户留存率增长意味着公司利润30%的增长，而把产品卖给老客户的概率是卖给新客户的3倍。所以在“增长黑客”圈内有一句名言：留住已有的用户胜过拓展新的客户。也就是俗称的“一鸟在手，胜过双鸟在林”。\n\n### 留存率低的原因\n\n1. 存在程序漏洞、性能瓶颈\n2. 用户被频繁骚扰\n3. 话题产品的热度减退\n4. 有更好的替代品\n5. 其他因素如游戏通关、设备遗失、需求不再存在、产品生命周期终结等，都可能成为用户流失的因素\n\n> Pinterest也采取了与Twitter类似的做法，先让新用户有事可做。很快，这些测试用户发现他们的账号被安排订阅了一批系统推荐的账号，页面中顿时充满了令人赏心悦目的花卉文玩、服装穿搭、艺术家居和风景摄影。\n\n### 留存率衡量指标\n\n留存率的衡量衡量产品留存率的常用指标包括**次日留存率、7日留存（周留存）率、30日留存（月留存）率**，其计算公式为：第1天的新增用户中，在往后的第N天依然在使用的用户数/第1天的新增用户数。其中的N对应的就是留存指标中代表天数的2、7或30。\n\n* 次日留存率：关注产品的次日留存率，可于第一时间发现产品新版本的品质变动和渠道优劣；\n* 7日留存：可反映出用户完成一个完整体验周期后的去留状况；\n* 30日留存，更能反映出一次版本迭代后的稳定性，辅助判断产品的演进方向是否合理。\n\n除了按照不同天数周期来比较留存率外，**渠道留存**也是一项值得钻研玩味的指标。由于渠道来源不一，用户质量也千差万别，所以有必要针对渠道用户单独剥离进行留存率分析，选择留存率较高的优质渠道进行重点投放。\n\n### 有损服务\n\n有损服务，顾名思义是指刻意输出在品质上存在某些损失的服务，目的是以此牺牲换取其他方面（速度、稳定性、成功执行的几率）的优化。\n\n在实施有损服务的方案时，有两条基本原则：1）发生问题时，优先保证核心功能的运转，非核心功能不可以影响核心功能；2）在条件允许的情况下，牺牲的特性越少越好。\n\n### 唤醒机制\n\n唤醒机制是指互联网产品中专为召回流失用户而设计的产品机制。\n\n常用的唤醒机制包括：\n\n* 电子邮件唤醒\n* 消息推送通知\n* 移动网页唤醒应用\n* 其他\n\n推送通知的通常用法，考验的是运营人员的基本功，即如何筛选合适的推送人群、根据使用场景和时间段制定推送内容、制作和优化推送到达的着陆页。根据目标人群的使用场景，推送符合其兴趣和需要的优质内容，就能带来更高的黏性。\n\n## 八、增加收入\n\n免费模式如何赚钱？\n\n1. 基本功能免费，高级功能收费的Freemium策略；\n2. 交叉补贴交叉补贴策略，思路是通过有意识地以优惠甚至亏本的价格出售一种产品（称为“优惠产品”），从而达到促进销售另一种盈利更多的产品（称为“盈利产品”）；\n3. 三方市场的流量变现“当你在使用免费服务时，你自己就是商品。” 的确，免费的流量本身不会凭空变出钱来，但如果将这批流量导入另一项服务，或许就能麻雀变凤凰，攫取出更大价值；\n\n## 九、病毒传播\n\n《引爆点》的作者马尔科姆将引爆流行的要素总结为个别人物法则、附着力法则和环境威力法则。他认为，本身就认识很多人且对他人有一定影响力的那些人，在传播中充当了关键性节点的角色，在他们的助力下，原本容易被注意、感知和记忆的信息更容易抵达受众的面前，并在一定的外部环境催化下，成为一股流行趋势。\n\n### 衡量指标\n\n衡量病毒传播的两大核心指标是K因子（K Factor）和病毒循环周期（Virial Cycle Time）。\n\n1. **K因子**，用于评判病毒传播的覆盖面。其公式为：K因子=感染率X转化率；\n2. **病毒循环周期**，是指从用户发出病毒邀请，到新用户完成转化（如点击阅读、注册、消费的行为）所花费的时间。\n\n### 传播心理学\n\n互联网是人性的试炼场，互联网产品的病毒传播策略如果能把握群体心理中的一些特征共性，就能从深层次激发人们的传播动力。\n\n1. 喜爱。人们总是比较愿意答应自己认识和喜欢的人提出的请求，还乐意主动传播自己喜爱的事物，借以表达一种倾向，阐发一种观点，寻求志同道合的伙伴，融入有归属感的圈子。\n2. 逐利：天下熙熙皆为利来，天下攘攘皆为利往。有时候，简单粗暴的利益交换，能换来立竿见影的传播效果。\n3. 互惠：基于理性经济人假说的传统经济学认为，经济行为主体是单纯追求个人利益最大化的，人们的复杂行为和社会参与，都是基于成本收益的计算。互惠是逐利的一种变体，是人类社会日常交际的基础。\n4. 求助\n5. 炫耀：爱炫耀是人的内心渴求被关注被肯定的表现，人们喜欢通过炫耀来展示自己最好的一面，或是借以表达自己理想中的状态。从深层次讲，人类之所以对炫耀乐此不疲，是因为它在某种程度上能够产生权利的幻觉，让身处竞争压力中的个体感觉更好一些，以及在择偶中占据优势。\n6. 稀缺：稀缺资源引发人们的好奇争抢，而邀请机制则将病毒传播的效果成倍放大。\n7. 害怕失去或错过\n8. 懒惰：人天生是懒惰的。当产生分享传播的冲动时，如果需要用户费事打开操作网页、编写一套原创说辞，操作成本过高，无形之中会将一部分人阻拦在外。作为产品开发者，应当充分利用人们懒惰的心理，提供便利的分享方式，如一键分享按钮、跳转手机客户端直接获取身份认证等。\n\n> ## 移动导购社区产品规律。\n> 1. 几种平台的终端用户中，使用手机网页版访问的小白用户居多，看到便宜东西容易冲动消费；iPhone用户消费能力强，对价格不太敏感；安卓用户最抠门，消费不多，但广告的点击率却是iPhone用户的几倍，呈现出一种“啥都好奇，啥都试试，但就是不买单”的状况。\n> 2. 女性导购类社区需要立足高端机型。iPad用户的购买力最强，低端机型碍于屏幕尺寸限制，导购体验很难做好。\n> 3. 在用户构成上，使用2000元以上机型的用户占据80%, iOS用户和安卓整体接近，但前者的总收入是后者的2至2.5倍。\n> 4. 在用户的行为数据中，最喜欢的动作是“喜欢”，收藏起来自己欣赏，日均点击数达到百万次。对比之下利他的“分享”则点击比较少。\n","source":"_posts/growth-hacker.md","raw":"---\ntitle: \"书摘-增长黑客\"\ndate: 2018-08-26 20:55:09\ntags:\n- reading\n- growth hacker\n---\n\n增长黑客们试图用更聪明的方式解答产品得以增长的奥秘，并使之成为助力产品增长的长效机制。他们通常采用的手段包括A/B测试、搜索引擎优化、电子邮件召回、病毒营销等，而页面加载速度、注册转化率、E-mail到达水平、病毒因子这些指标成为他们日常关注的对象。\n\n换句话说，**增长黑客就是一群以数据驱动营销、以市场指导产品，通过技术化手段贯彻增长目标的人**。\n\n<!--more-->\n\n> 在每一封用Hotmail发出的邮件末尾签名处，增加了一行附言：“我爱你。快来Hotmail申请你的免费邮箱。”（PS:I love you.Get your free E-mail at Hotmail.）这一改动在仅仅几个小时之后，使Hotmail的用户注册曲线发生了戏剧性的变化，原本无人问津的服务，开始以每天3000个新用户的速度增长。\n\n作为企业发展的助推者，增长黑客必须真正懂得产品的核心价值，能用最简单的语言描述这个产品是什么、解决什么问题，在此基础上清晰定位有关增长的问题，并寻求解答。\n\n{% douban \"https://book.douban.com/subject/26541801\" %}\n\n## 一、增长黑客的崛起\n\n为什么直到最近，“增长黑客”的概念才开始流行呢？\n\n一方面，越来越多的第三方工具降低了初创团队的开发门槛，Google Analytics、Mixpanel等“即插即用”的服务只需开发者在程序/网页内嵌入几行代码，就能一条龙式地以低成本实现数据采集、渠道统计、设备追踪、用户使用行为分析等功能。初创企业再也无须抽调专门人力“重复发明轮子”，就能用最小的代价快速搭建和测试产品，获取影响产品性能的各项指标。配套工具的唾手可得，让初创团队得以着眼于产品增长本身。\n\n另一方面，越来越多的行业巨头出于扩大市场份额、构建生态系统、完善配套服务、探索盈利途径等需要，建立了属于自己的开放生态，并发布了配套的API供开发者调用。开发者通过接入平台，能够直接调用平台的身份授权、用户关系、内容数据，以及计算能力。产业的融合为初创企业带来更多变革和创新机会，也为富于寻找增长点的增长黑客们提供了闪转腾挪的全新舞台。\n\n### 增长黑客与市场营销\n\n首次接触“增长黑客”概念的人，可能会将它与市场营销混淆。\n\n#### 市场营销\n\n市场部的设立更适合有一定资源优势的企业，尤其是那些商业模式已得到验证、正在或已经建立了持久稳定的用户获取渠道，且能将成本压缩在合理范围内的较成熟企业。\n\n#### 低成本的增长\n\n尚未建立起对市场足够了解的初创公司，一上来就狠狠砸钱并非明智之举。当务之急是引入增长黑客，通过测试取样、建模修正和无数的试验，去发现更多被低估的低成本的有效增长途径。任何一个关键环节都存在不断优化的可能性。\n\n### 谁更适合做增长黑客\n\n从现有的发展情况看，**工程师可能是最接近和容易成为增长黑客的一群人**。因为从能力角度看，增长黑客不仅需要想法，更需要将想法落实到行动的能力，包括自研工具、采集样本、分析数据、大规模推广，光会纸上谈兵是行不通的。懂技术，未必能变成好的增长黑客，而倘若不懂技术，无异于刘姥姥进大观园。\n\n**增长黑客的价值**就是通过数据分析快速找到机会和问题，并迅速地设置各种规模的试验去验证，找到可持续的方法来增长。\n\n## 二、AARRR转化漏洞模型\n\n![\"AARRR model\"](http://sinacloud.net/woodysblog/img/AARRR.png)\n\n增长的对象不仅包含用户量的累加，更囊括了产品生命周期中各个阶段的重要指标。根据不同阶段用户参与行为的深度和类型，我们可以将增长目标拆分并概括为“AARRR”转化漏洞模型。\n\n增长黑客的价值正是通过不断地“头脑风暴-排定优先级-测试-分析-常态化部署”来优化产品策略，减少这当中每个环节的不必要损耗，提高转化效率，从而不断扩大自己用户群体的数量和质量。\n\n### 1. Acquisition（获取用户）\n\n获取用户，指让潜在用户首次接触到产品，或者可以更宽泛地理解为“吸引流量”、“用户量增长”。\n\n### 2. Activation（激发活跃）\n\n激发活跃，获取到用户后下一步是引导用户完成某些“指定动作”，使之成为长期活跃的忠实用户。\n\n### 3. Retention（提高留存）\n\n提高留存，在解决了用户的活跃度问题后，另一个问题又冒了出来。用户来得快，走得也快。提高用户留存，是维持产品价值、延长生命周期的重要手段。\n\n### 4. Revenue（增加收入）\n\n在互联网行业，除了直接向用户收费，还可以通过广告展示、业务分成等方式向其他利益方收取费用。\n\n### 5. Referral（传播推荐）\n\n社交网络的兴起促成了基于用户关系的病毒传播，这是低成本推广产品的全新方式，运用妥当将可能引发奇妙的链式增长。\n\n## 三、Facebook用户增长的经验\n\n安迪对于自己一手组建起来的Facebook用户增长团队所肩负的职责，总结为以下五点。\n\n* **用户获取** —— 用户增长团队内有一部分人负责互联网营销渠道，如SEO（Search Engine Optimization，搜索引擎优化）、PPC（Pay Per Click，点击付费广告）或是电子邮件广告等，每一项都包括一套极为缜密的优化流程；\n* **产品研发** —— 用户增长团队的意见将指导产品研发的各个关键部分，例如登录页面、新用户引导流程、评论互动功能和支付系统等。基本上你能想到的任何地方都留下了用户增长团队的智慧成果；\n* **文化建设** —— 团队文化对凝聚整个公司至关重要。用户增长团队协助树立数据驱动的理念，确保所有人目标一致地快速执行，并随时准备迎战风险；\n* **人才招聘** —— 初创公司招募团队成员是一项困难的工作，并非人人都愿意冒险加入一家前途未卜的小公司。但在用户增长团队的帮助下，如果公司的用户量达到五千万甚至五亿，那么情况就大为不同了。\n\n**数据分析** —— 用户增长团队建立在对大数据的分析衡量基础之上。\n\n大部分时候，用户增长的工作就是在进行测试、调整并重复这个流程。他们需要与数据科学团队紧密协作，通过内部工具研究驱使数据提升或下降的因素。\n\n进行数据分析的首要环节是**明确分析的目的**。脱离具体目标的单纯数据查看没有任何价值。其次是要**了解数据来源的相关信息**，包括各项指标的定义、采集点和上报机制。\n\n> 上报机制，数据上报的时机、内容和技术实现形式。\n> 定性分析，就是对事物的性质作出判断，究竟它“是什么”。\n> 定量分析，是指对事物的数量作出统计，衡量它“有多少”。\n\n数据分析就是定性分析与定量分析相互结合，不断验证的过程。提出假设、设计方案、分析数据、验证或推翻假设，最终抽丝剥茧，逐渐接近真相。数据是相互验证的，彼此之间有如通过无形的网络纵横连接，只需轻轻按动其中一个，就会驱使另外一个或一组产生变化。通过数据分析得出的结论，应当能反推出其他数据，或是与其他数据分析得出的结果相一致。\n\n## 四、创造正确的产品\n\n### 如何判断需求是否足够大\n\n通常可采用两种方式。\n\n一种是先估计目标用户的基数、消费能力、意愿预算，再把这些数字通过相乘等方式得出一个大概的数字，并与该行业或近似行业的公开报告进行比对验证；\n\n另一种则是评估打算进入的市场，原本具有多少产值，而你的产品通过提供更低的价格、更长的使用周期等，能提升多少效率、节省多少成本，从而折算出相对于原产值的全新规模。\n\n### 最小化可行产品 MVP\n\n《精益创业》中提出的“最小化可行产品（Minimum Viable Product，简称MVP）”概念。\n\n#### MVP三要素\n\n精益创业是指开发团队通过提供最小化可行产品获取用户反馈，在此基础上持续快速迭代（或谋求转型），直至产品达到PMF阶段。它包含如下三个要素。\n\n1. 最小化可行产品：即所谓的MVP（Minimum Viable Product）是指将产品原型用最简洁的实现方式开发出来，过滤掉冗余杂音和高级特性，快速投放市场让目标用户上手使用，然后通过不断地听取反馈掌握有价值的信息，由此对产品原型迭代优化，尽早达到PMF状态；\n2. 用户反馈：指通过直接或间接方式，从产品的最终用户那里获得针对该产品的意见；\n3. 快速迭代：“天下武功，唯快不破”。\n\n#### MVP的三大必备模块\n\n如果问开发一个MVP必须具备哪些模块，那么我会不假思索地告诉你：除了待验证的基本功能外，反馈渠道、公告看板、自动升级和使用行为统计这四件事必须纳入考量。\n\n## 五、获取用户\n\n### 种子用户\n\n**“冷启动”**原本是数据挖掘领域的一个专业术语，运用到产品运营中，指在产品之初尚未形成完善的生态体系并能提供足够多可消费内容的情况下，从零开始导入第一批用户和制造内容的过程。选择高质量的早期用户加入和建立充足的数据沉淀，将可作为引燃产品持续增长的燎原之火，为日后发展奠定良好基础。\n\n种子用户的三层含义：\n\n1. 这批人数量少，获取不易；\n2. 他们进入产品的阶段较早；\n3. 种子用户如同种子一样孕育着希望，具有成长为参天大树的可能性。\n\n### 走访和了解用户\n\n走访和了解用户，掌握真实需求，是一件复杂困难的事情。就像1000个人心中有1000个哈姆雷特一样，不同人对产品的需求和评判标准不尽相同。从最笨的事情做起的过程，同时也是走进用户内心的过程。将用户视作活生生的个体，通过面对面的沟通，吸纳意见并获得鼓舞，帮助许多初创公司走过了从零开始举步维艰的阶段。\n\n### 内容营销\n\n内容营销的作用主要分为三方面：\n\n* 吸引流量\n* 培养潜在用户\n* 劝诱转化\n\n内容营销的注意事项：\n\n1. 知道你的目标受众是谁\n2. 打造一台内容持续输出的引擎\n3. 撰写耸动的标题\n4. 保证文章长度\n5. 鼓励受众参与互动\n6. 选择合适的发布渠道\n\n有了足够可写的内容素材后，文章的谋篇布局可以遵循以下顺序：简要概述→话题事件→核心特色→主要功能→团队访谈→未来计划→有奖活动→转化引导。\n\n## 六、A/B测试\n\n### A/B测试的基本思想\n\n* 提供两个方案并行测试；\n* 不同方案之间只存在一个变量，排除其他干扰因素；\n* 以某种标准判定结果优劣，筛出最优方案。\n\n> Airbnb曾测试过把“保存到心愿单”的收藏图标由星形改为爱心，结果仅凭这一改动就让心愿列表的使用率提升了30%。\n\n### A/B的成本\n\n谷歌为了找出在两种蓝色方案中哪一种更好，索性测试了41种不同的蓝色来做比较。对与时间赛跑的创业团队而言，这样的精力付出简直太过奢侈。如果你的产品还没达到零点几个百分比的下降都意味着几百万美元损失的地步的话，还是多花些时间在那些真正有跃进式提升的地方吧。\n\n## 七、留存\n\n> “当陪你的人要下车时，即使不舍，也该心存感激，然后挥手道别。”——《千与千寻》，宫崎骏\n\n根据美国贝恩公司的调查，在商业社会中5%的客户留存率增长意味着公司利润30%的增长，而把产品卖给老客户的概率是卖给新客户的3倍。所以在“增长黑客”圈内有一句名言：留住已有的用户胜过拓展新的客户。也就是俗称的“一鸟在手，胜过双鸟在林”。\n\n### 留存率低的原因\n\n1. 存在程序漏洞、性能瓶颈\n2. 用户被频繁骚扰\n3. 话题产品的热度减退\n4. 有更好的替代品\n5. 其他因素如游戏通关、设备遗失、需求不再存在、产品生命周期终结等，都可能成为用户流失的因素\n\n> Pinterest也采取了与Twitter类似的做法，先让新用户有事可做。很快，这些测试用户发现他们的账号被安排订阅了一批系统推荐的账号，页面中顿时充满了令人赏心悦目的花卉文玩、服装穿搭、艺术家居和风景摄影。\n\n### 留存率衡量指标\n\n留存率的衡量衡量产品留存率的常用指标包括**次日留存率、7日留存（周留存）率、30日留存（月留存）率**，其计算公式为：第1天的新增用户中，在往后的第N天依然在使用的用户数/第1天的新增用户数。其中的N对应的就是留存指标中代表天数的2、7或30。\n\n* 次日留存率：关注产品的次日留存率，可于第一时间发现产品新版本的品质变动和渠道优劣；\n* 7日留存：可反映出用户完成一个完整体验周期后的去留状况；\n* 30日留存，更能反映出一次版本迭代后的稳定性，辅助判断产品的演进方向是否合理。\n\n除了按照不同天数周期来比较留存率外，**渠道留存**也是一项值得钻研玩味的指标。由于渠道来源不一，用户质量也千差万别，所以有必要针对渠道用户单独剥离进行留存率分析，选择留存率较高的优质渠道进行重点投放。\n\n### 有损服务\n\n有损服务，顾名思义是指刻意输出在品质上存在某些损失的服务，目的是以此牺牲换取其他方面（速度、稳定性、成功执行的几率）的优化。\n\n在实施有损服务的方案时，有两条基本原则：1）发生问题时，优先保证核心功能的运转，非核心功能不可以影响核心功能；2）在条件允许的情况下，牺牲的特性越少越好。\n\n### 唤醒机制\n\n唤醒机制是指互联网产品中专为召回流失用户而设计的产品机制。\n\n常用的唤醒机制包括：\n\n* 电子邮件唤醒\n* 消息推送通知\n* 移动网页唤醒应用\n* 其他\n\n推送通知的通常用法，考验的是运营人员的基本功，即如何筛选合适的推送人群、根据使用场景和时间段制定推送内容、制作和优化推送到达的着陆页。根据目标人群的使用场景，推送符合其兴趣和需要的优质内容，就能带来更高的黏性。\n\n## 八、增加收入\n\n免费模式如何赚钱？\n\n1. 基本功能免费，高级功能收费的Freemium策略；\n2. 交叉补贴交叉补贴策略，思路是通过有意识地以优惠甚至亏本的价格出售一种产品（称为“优惠产品”），从而达到促进销售另一种盈利更多的产品（称为“盈利产品”）；\n3. 三方市场的流量变现“当你在使用免费服务时，你自己就是商品。” 的确，免费的流量本身不会凭空变出钱来，但如果将这批流量导入另一项服务，或许就能麻雀变凤凰，攫取出更大价值；\n\n## 九、病毒传播\n\n《引爆点》的作者马尔科姆将引爆流行的要素总结为个别人物法则、附着力法则和环境威力法则。他认为，本身就认识很多人且对他人有一定影响力的那些人，在传播中充当了关键性节点的角色，在他们的助力下，原本容易被注意、感知和记忆的信息更容易抵达受众的面前，并在一定的外部环境催化下，成为一股流行趋势。\n\n### 衡量指标\n\n衡量病毒传播的两大核心指标是K因子（K Factor）和病毒循环周期（Virial Cycle Time）。\n\n1. **K因子**，用于评判病毒传播的覆盖面。其公式为：K因子=感染率X转化率；\n2. **病毒循环周期**，是指从用户发出病毒邀请，到新用户完成转化（如点击阅读、注册、消费的行为）所花费的时间。\n\n### 传播心理学\n\n互联网是人性的试炼场，互联网产品的病毒传播策略如果能把握群体心理中的一些特征共性，就能从深层次激发人们的传播动力。\n\n1. 喜爱。人们总是比较愿意答应自己认识和喜欢的人提出的请求，还乐意主动传播自己喜爱的事物，借以表达一种倾向，阐发一种观点，寻求志同道合的伙伴，融入有归属感的圈子。\n2. 逐利：天下熙熙皆为利来，天下攘攘皆为利往。有时候，简单粗暴的利益交换，能换来立竿见影的传播效果。\n3. 互惠：基于理性经济人假说的传统经济学认为，经济行为主体是单纯追求个人利益最大化的，人们的复杂行为和社会参与，都是基于成本收益的计算。互惠是逐利的一种变体，是人类社会日常交际的基础。\n4. 求助\n5. 炫耀：爱炫耀是人的内心渴求被关注被肯定的表现，人们喜欢通过炫耀来展示自己最好的一面，或是借以表达自己理想中的状态。从深层次讲，人类之所以对炫耀乐此不疲，是因为它在某种程度上能够产生权利的幻觉，让身处竞争压力中的个体感觉更好一些，以及在择偶中占据优势。\n6. 稀缺：稀缺资源引发人们的好奇争抢，而邀请机制则将病毒传播的效果成倍放大。\n7. 害怕失去或错过\n8. 懒惰：人天生是懒惰的。当产生分享传播的冲动时，如果需要用户费事打开操作网页、编写一套原创说辞，操作成本过高，无形之中会将一部分人阻拦在外。作为产品开发者，应当充分利用人们懒惰的心理，提供便利的分享方式，如一键分享按钮、跳转手机客户端直接获取身份认证等。\n\n> ## 移动导购社区产品规律。\n> 1. 几种平台的终端用户中，使用手机网页版访问的小白用户居多，看到便宜东西容易冲动消费；iPhone用户消费能力强，对价格不太敏感；安卓用户最抠门，消费不多，但广告的点击率却是iPhone用户的几倍，呈现出一种“啥都好奇，啥都试试，但就是不买单”的状况。\n> 2. 女性导购类社区需要立足高端机型。iPad用户的购买力最强，低端机型碍于屏幕尺寸限制，导购体验很难做好。\n> 3. 在用户构成上，使用2000元以上机型的用户占据80%, iOS用户和安卓整体接近，但前者的总收入是后者的2至2.5倍。\n> 4. 在用户的行为数据中，最喜欢的动作是“喜欢”，收藏起来自己欣赏，日均点击数达到百万次。对比之下利他的“分享”则点击比较少。\n","slug":"growth-hacker","published":1,"updated":"2018-08-28T15:28:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8u001qzvr3cpaxthu1","content":"<p>增长黑客们试图用更聪明的方式解答产品得以增长的奥秘，并使之成为助力产品增长的长效机制。他们通常采用的手段包括A/B测试、搜索引擎优化、电子邮件召回、病毒营销等，而页面加载速度、注册转化率、E-mail到达水平、病毒因子这些指标成为他们日常关注的对象。</p>\n<p>换句话说，<strong>增长黑客就是一群以数据驱动营销、以市场指导产品，通过技术化手段贯彻增长目标的人</strong>。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>在每一封用Hotmail发出的邮件末尾签名处，增加了一行附言：“我爱你。快来Hotmail申请你的免费邮箱。”（PS:I love you.Get your free E-mail at Hotmail.）这一改动在仅仅几个小时之后，使Hotmail的用户注册曲线发生了戏剧性的变化，原本无人问津的服务，开始以每天3000个新用户的速度增长。</p>\n</blockquote>\n<p>作为企业发展的助推者，增长黑客必须真正懂得产品的核心价值，能用最简单的语言描述这个产品是什么、解决什么问题，在此基础上清晰定位有关增长的问题，并寻求解答。</p>\n<div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/26541801/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img1.doubanio.com/view/subject/m/public/s28369197.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"增长黑客\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：增长黑客</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"电子工业出版社\">出版社：电子工业出版社</p><p style=\"margin:0; font-size: 14px;\">出版日期：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">作者：范冰</p><p style=\"margin:0; font-size: 14px;\">出版年：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">定价：CNY 59.00</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div>\n<h2 id=\"一、增长黑客的崛起\"><a href=\"#一、增长黑客的崛起\" class=\"headerlink\" title=\"一、增长黑客的崛起\"></a>一、增长黑客的崛起</h2><p>为什么直到最近，“增长黑客”的概念才开始流行呢？</p>\n<p>一方面，越来越多的第三方工具降低了初创团队的开发门槛，Google Analytics、Mixpanel等“即插即用”的服务只需开发者在程序/网页内嵌入几行代码，就能一条龙式地以低成本实现数据采集、渠道统计、设备追踪、用户使用行为分析等功能。初创企业再也无须抽调专门人力“重复发明轮子”，就能用最小的代价快速搭建和测试产品，获取影响产品性能的各项指标。配套工具的唾手可得，让初创团队得以着眼于产品增长本身。</p>\n<p>另一方面，越来越多的行业巨头出于扩大市场份额、构建生态系统、完善配套服务、探索盈利途径等需要，建立了属于自己的开放生态，并发布了配套的API供开发者调用。开发者通过接入平台，能够直接调用平台的身份授权、用户关系、内容数据，以及计算能力。产业的融合为初创企业带来更多变革和创新机会，也为富于寻找增长点的增长黑客们提供了闪转腾挪的全新舞台。</p>\n<h3 id=\"增长黑客与市场营销\"><a href=\"#增长黑客与市场营销\" class=\"headerlink\" title=\"增长黑客与市场营销\"></a>增长黑客与市场营销</h3><p>首次接触“增长黑客”概念的人，可能会将它与市场营销混淆。</p>\n<h4 id=\"市场营销\"><a href=\"#市场营销\" class=\"headerlink\" title=\"市场营销\"></a>市场营销</h4><p>市场部的设立更适合有一定资源优势的企业，尤其是那些商业模式已得到验证、正在或已经建立了持久稳定的用户获取渠道，且能将成本压缩在合理范围内的较成熟企业。</p>\n<h4 id=\"低成本的增长\"><a href=\"#低成本的增长\" class=\"headerlink\" title=\"低成本的增长\"></a>低成本的增长</h4><p>尚未建立起对市场足够了解的初创公司，一上来就狠狠砸钱并非明智之举。当务之急是引入增长黑客，通过测试取样、建模修正和无数的试验，去发现更多被低估的低成本的有效增长途径。任何一个关键环节都存在不断优化的可能性。</p>\n<h3 id=\"谁更适合做增长黑客\"><a href=\"#谁更适合做增长黑客\" class=\"headerlink\" title=\"谁更适合做增长黑客\"></a>谁更适合做增长黑客</h3><p>从现有的发展情况看，<strong>工程师可能是最接近和容易成为增长黑客的一群人</strong>。因为从能力角度看，增长黑客不仅需要想法，更需要将想法落实到行动的能力，包括自研工具、采集样本、分析数据、大规模推广，光会纸上谈兵是行不通的。懂技术，未必能变成好的增长黑客，而倘若不懂技术，无异于刘姥姥进大观园。</p>\n<p><strong>增长黑客的价值</strong>就是通过数据分析快速找到机会和问题，并迅速地设置各种规模的试验去验证，找到可持续的方法来增长。</p>\n<h2 id=\"二、AARRR转化漏洞模型\"><a href=\"#二、AARRR转化漏洞模型\" class=\"headerlink\" title=\"二、AARRR转化漏洞模型\"></a>二、AARRR转化漏洞模型</h2><p><img src=\"http://sinacloud.net/woodysblog/img/AARRR.png\" alt=\"&quot;AARRR model&quot;\"></p>\n<p>增长的对象不仅包含用户量的累加，更囊括了产品生命周期中各个阶段的重要指标。根据不同阶段用户参与行为的深度和类型，我们可以将增长目标拆分并概括为“AARRR”转化漏洞模型。</p>\n<p>增长黑客的价值正是通过不断地“头脑风暴-排定优先级-测试-分析-常态化部署”来优化产品策略，减少这当中每个环节的不必要损耗，提高转化效率，从而不断扩大自己用户群体的数量和质量。</p>\n<h3 id=\"1-Acquisition（获取用户）\"><a href=\"#1-Acquisition（获取用户）\" class=\"headerlink\" title=\"1. Acquisition（获取用户）\"></a>1. Acquisition（获取用户）</h3><p>获取用户，指让潜在用户首次接触到产品，或者可以更宽泛地理解为“吸引流量”、“用户量增长”。</p>\n<h3 id=\"2-Activation（激发活跃）\"><a href=\"#2-Activation（激发活跃）\" class=\"headerlink\" title=\"2. Activation（激发活跃）\"></a>2. Activation（激发活跃）</h3><p>激发活跃，获取到用户后下一步是引导用户完成某些“指定动作”，使之成为长期活跃的忠实用户。</p>\n<h3 id=\"3-Retention（提高留存）\"><a href=\"#3-Retention（提高留存）\" class=\"headerlink\" title=\"3. Retention（提高留存）\"></a>3. Retention（提高留存）</h3><p>提高留存，在解决了用户的活跃度问题后，另一个问题又冒了出来。用户来得快，走得也快。提高用户留存，是维持产品价值、延长生命周期的重要手段。</p>\n<h3 id=\"4-Revenue（增加收入）\"><a href=\"#4-Revenue（增加收入）\" class=\"headerlink\" title=\"4. Revenue（增加收入）\"></a>4. Revenue（增加收入）</h3><p>在互联网行业，除了直接向用户收费，还可以通过广告展示、业务分成等方式向其他利益方收取费用。</p>\n<h3 id=\"5-Referral（传播推荐）\"><a href=\"#5-Referral（传播推荐）\" class=\"headerlink\" title=\"5. Referral（传播推荐）\"></a>5. Referral（传播推荐）</h3><p>社交网络的兴起促成了基于用户关系的病毒传播，这是低成本推广产品的全新方式，运用妥当将可能引发奇妙的链式增长。</p>\n<h2 id=\"三、Facebook用户增长的经验\"><a href=\"#三、Facebook用户增长的经验\" class=\"headerlink\" title=\"三、Facebook用户增长的经验\"></a>三、Facebook用户增长的经验</h2><p>安迪对于自己一手组建起来的Facebook用户增长团队所肩负的职责，总结为以下五点。</p>\n<ul>\n<li><strong>用户获取</strong> —— 用户增长团队内有一部分人负责互联网营销渠道，如SEO（Search Engine Optimization，搜索引擎优化）、PPC（Pay Per Click，点击付费广告）或是电子邮件广告等，每一项都包括一套极为缜密的优化流程；</li>\n<li><strong>产品研发</strong> —— 用户增长团队的意见将指导产品研发的各个关键部分，例如登录页面、新用户引导流程、评论互动功能和支付系统等。基本上你能想到的任何地方都留下了用户增长团队的智慧成果；</li>\n<li><strong>文化建设</strong> —— 团队文化对凝聚整个公司至关重要。用户增长团队协助树立数据驱动的理念，确保所有人目标一致地快速执行，并随时准备迎战风险；</li>\n<li><strong>人才招聘</strong> —— 初创公司招募团队成员是一项困难的工作，并非人人都愿意冒险加入一家前途未卜的小公司。但在用户增长团队的帮助下，如果公司的用户量达到五千万甚至五亿，那么情况就大为不同了。</li>\n</ul>\n<p><strong>数据分析</strong> —— 用户增长团队建立在对大数据的分析衡量基础之上。</p>\n<p>大部分时候，用户增长的工作就是在进行测试、调整并重复这个流程。他们需要与数据科学团队紧密协作，通过内部工具研究驱使数据提升或下降的因素。</p>\n<p>进行数据分析的首要环节是<strong>明确分析的目的</strong>。脱离具体目标的单纯数据查看没有任何价值。其次是要<strong>了解数据来源的相关信息</strong>，包括各项指标的定义、采集点和上报机制。</p>\n<blockquote>\n<p>上报机制，数据上报的时机、内容和技术实现形式。<br>定性分析，就是对事物的性质作出判断，究竟它“是什么”。<br>定量分析，是指对事物的数量作出统计，衡量它“有多少”。</p>\n</blockquote>\n<p>数据分析就是定性分析与定量分析相互结合，不断验证的过程。提出假设、设计方案、分析数据、验证或推翻假设，最终抽丝剥茧，逐渐接近真相。数据是相互验证的，彼此之间有如通过无形的网络纵横连接，只需轻轻按动其中一个，就会驱使另外一个或一组产生变化。通过数据分析得出的结论，应当能反推出其他数据，或是与其他数据分析得出的结果相一致。</p>\n<h2 id=\"四、创造正确的产品\"><a href=\"#四、创造正确的产品\" class=\"headerlink\" title=\"四、创造正确的产品\"></a>四、创造正确的产品</h2><h3 id=\"如何判断需求是否足够大\"><a href=\"#如何判断需求是否足够大\" class=\"headerlink\" title=\"如何判断需求是否足够大\"></a>如何判断需求是否足够大</h3><p>通常可采用两种方式。</p>\n<p>一种是先估计目标用户的基数、消费能力、意愿预算，再把这些数字通过相乘等方式得出一个大概的数字，并与该行业或近似行业的公开报告进行比对验证；</p>\n<p>另一种则是评估打算进入的市场，原本具有多少产值，而你的产品通过提供更低的价格、更长的使用周期等，能提升多少效率、节省多少成本，从而折算出相对于原产值的全新规模。</p>\n<h3 id=\"最小化可行产品-MVP\"><a href=\"#最小化可行产品-MVP\" class=\"headerlink\" title=\"最小化可行产品 MVP\"></a>最小化可行产品 MVP</h3><p>《精益创业》中提出的“最小化可行产品（Minimum Viable Product，简称MVP）”概念。</p>\n<h4 id=\"MVP三要素\"><a href=\"#MVP三要素\" class=\"headerlink\" title=\"MVP三要素\"></a>MVP三要素</h4><p>精益创业是指开发团队通过提供最小化可行产品获取用户反馈，在此基础上持续快速迭代（或谋求转型），直至产品达到PMF阶段。它包含如下三个要素。</p>\n<ol>\n<li>最小化可行产品：即所谓的MVP（Minimum Viable Product）是指将产品原型用最简洁的实现方式开发出来，过滤掉冗余杂音和高级特性，快速投放市场让目标用户上手使用，然后通过不断地听取反馈掌握有价值的信息，由此对产品原型迭代优化，尽早达到PMF状态；</li>\n<li>用户反馈：指通过直接或间接方式，从产品的最终用户那里获得针对该产品的意见；</li>\n<li>快速迭代：“天下武功，唯快不破”。</li>\n</ol>\n<h4 id=\"MVP的三大必备模块\"><a href=\"#MVP的三大必备模块\" class=\"headerlink\" title=\"MVP的三大必备模块\"></a>MVP的三大必备模块</h4><p>如果问开发一个MVP必须具备哪些模块，那么我会不假思索地告诉你：除了待验证的基本功能外，反馈渠道、公告看板、自动升级和使用行为统计这四件事必须纳入考量。</p>\n<h2 id=\"五、获取用户\"><a href=\"#五、获取用户\" class=\"headerlink\" title=\"五、获取用户\"></a>五、获取用户</h2><h3 id=\"种子用户\"><a href=\"#种子用户\" class=\"headerlink\" title=\"种子用户\"></a>种子用户</h3><p><strong>“冷启动”</strong>原本是数据挖掘领域的一个专业术语，运用到产品运营中，指在产品之初尚未形成完善的生态体系并能提供足够多可消费内容的情况下，从零开始导入第一批用户和制造内容的过程。选择高质量的早期用户加入和建立充足的数据沉淀，将可作为引燃产品持续增长的燎原之火，为日后发展奠定良好基础。</p>\n<p>种子用户的三层含义：</p>\n<ol>\n<li>这批人数量少，获取不易；</li>\n<li>他们进入产品的阶段较早；</li>\n<li>种子用户如同种子一样孕育着希望，具有成长为参天大树的可能性。</li>\n</ol>\n<h3 id=\"走访和了解用户\"><a href=\"#走访和了解用户\" class=\"headerlink\" title=\"走访和了解用户\"></a>走访和了解用户</h3><p>走访和了解用户，掌握真实需求，是一件复杂困难的事情。就像1000个人心中有1000个哈姆雷特一样，不同人对产品的需求和评判标准不尽相同。从最笨的事情做起的过程，同时也是走进用户内心的过程。将用户视作活生生的个体，通过面对面的沟通，吸纳意见并获得鼓舞，帮助许多初创公司走过了从零开始举步维艰的阶段。</p>\n<h3 id=\"内容营销\"><a href=\"#内容营销\" class=\"headerlink\" title=\"内容营销\"></a>内容营销</h3><p>内容营销的作用主要分为三方面：</p>\n<ul>\n<li>吸引流量</li>\n<li>培养潜在用户</li>\n<li>劝诱转化</li>\n</ul>\n<p>内容营销的注意事项：</p>\n<ol>\n<li>知道你的目标受众是谁</li>\n<li>打造一台内容持续输出的引擎</li>\n<li>撰写耸动的标题</li>\n<li>保证文章长度</li>\n<li>鼓励受众参与互动</li>\n<li>选择合适的发布渠道</li>\n</ol>\n<p>有了足够可写的内容素材后，文章的谋篇布局可以遵循以下顺序：简要概述→话题事件→核心特色→主要功能→团队访谈→未来计划→有奖活动→转化引导。</p>\n<h2 id=\"六、A-B测试\"><a href=\"#六、A-B测试\" class=\"headerlink\" title=\"六、A/B测试\"></a>六、A/B测试</h2><h3 id=\"A-B测试的基本思想\"><a href=\"#A-B测试的基本思想\" class=\"headerlink\" title=\"A/B测试的基本思想\"></a>A/B测试的基本思想</h3><ul>\n<li>提供两个方案并行测试；</li>\n<li>不同方案之间只存在一个变量，排除其他干扰因素；</li>\n<li>以某种标准判定结果优劣，筛出最优方案。</li>\n</ul>\n<blockquote>\n<p>Airbnb曾测试过把“保存到心愿单”的收藏图标由星形改为爱心，结果仅凭这一改动就让心愿列表的使用率提升了30%。</p>\n</blockquote>\n<h3 id=\"A-B的成本\"><a href=\"#A-B的成本\" class=\"headerlink\" title=\"A/B的成本\"></a>A/B的成本</h3><p>谷歌为了找出在两种蓝色方案中哪一种更好，索性测试了41种不同的蓝色来做比较。对与时间赛跑的创业团队而言，这样的精力付出简直太过奢侈。如果你的产品还没达到零点几个百分比的下降都意味着几百万美元损失的地步的话，还是多花些时间在那些真正有跃进式提升的地方吧。</p>\n<h2 id=\"七、留存\"><a href=\"#七、留存\" class=\"headerlink\" title=\"七、留存\"></a>七、留存</h2><blockquote>\n<p>“当陪你的人要下车时，即使不舍，也该心存感激，然后挥手道别。”——《千与千寻》，宫崎骏</p>\n</blockquote>\n<p>根据美国贝恩公司的调查，在商业社会中5%的客户留存率增长意味着公司利润30%的增长，而把产品卖给老客户的概率是卖给新客户的3倍。所以在“增长黑客”圈内有一句名言：留住已有的用户胜过拓展新的客户。也就是俗称的“一鸟在手，胜过双鸟在林”。</p>\n<h3 id=\"留存率低的原因\"><a href=\"#留存率低的原因\" class=\"headerlink\" title=\"留存率低的原因\"></a>留存率低的原因</h3><ol>\n<li>存在程序漏洞、性能瓶颈</li>\n<li>用户被频繁骚扰</li>\n<li>话题产品的热度减退</li>\n<li>有更好的替代品</li>\n<li>其他因素如游戏通关、设备遗失、需求不再存在、产品生命周期终结等，都可能成为用户流失的因素</li>\n</ol>\n<blockquote>\n<p>Pinterest也采取了与Twitter类似的做法，先让新用户有事可做。很快，这些测试用户发现他们的账号被安排订阅了一批系统推荐的账号，页面中顿时充满了令人赏心悦目的花卉文玩、服装穿搭、艺术家居和风景摄影。</p>\n</blockquote>\n<h3 id=\"留存率衡量指标\"><a href=\"#留存率衡量指标\" class=\"headerlink\" title=\"留存率衡量指标\"></a>留存率衡量指标</h3><p>留存率的衡量衡量产品留存率的常用指标包括<strong>次日留存率、7日留存（周留存）率、30日留存（月留存）率</strong>，其计算公式为：第1天的新增用户中，在往后的第N天依然在使用的用户数/第1天的新增用户数。其中的N对应的就是留存指标中代表天数的2、7或30。</p>\n<ul>\n<li>次日留存率：关注产品的次日留存率，可于第一时间发现产品新版本的品质变动和渠道优劣；</li>\n<li>7日留存：可反映出用户完成一个完整体验周期后的去留状况；</li>\n<li>30日留存，更能反映出一次版本迭代后的稳定性，辅助判断产品的演进方向是否合理。</li>\n</ul>\n<p>除了按照不同天数周期来比较留存率外，<strong>渠道留存</strong>也是一项值得钻研玩味的指标。由于渠道来源不一，用户质量也千差万别，所以有必要针对渠道用户单独剥离进行留存率分析，选择留存率较高的优质渠道进行重点投放。</p>\n<h3 id=\"有损服务\"><a href=\"#有损服务\" class=\"headerlink\" title=\"有损服务\"></a>有损服务</h3><p>有损服务，顾名思义是指刻意输出在品质上存在某些损失的服务，目的是以此牺牲换取其他方面（速度、稳定性、成功执行的几率）的优化。</p>\n<p>在实施有损服务的方案时，有两条基本原则：1）发生问题时，优先保证核心功能的运转，非核心功能不可以影响核心功能；2）在条件允许的情况下，牺牲的特性越少越好。</p>\n<h3 id=\"唤醒机制\"><a href=\"#唤醒机制\" class=\"headerlink\" title=\"唤醒机制\"></a>唤醒机制</h3><p>唤醒机制是指互联网产品中专为召回流失用户而设计的产品机制。</p>\n<p>常用的唤醒机制包括：</p>\n<ul>\n<li>电子邮件唤醒</li>\n<li>消息推送通知</li>\n<li>移动网页唤醒应用</li>\n<li>其他</li>\n</ul>\n<p>推送通知的通常用法，考验的是运营人员的基本功，即如何筛选合适的推送人群、根据使用场景和时间段制定推送内容、制作和优化推送到达的着陆页。根据目标人群的使用场景，推送符合其兴趣和需要的优质内容，就能带来更高的黏性。</p>\n<h2 id=\"八、增加收入\"><a href=\"#八、增加收入\" class=\"headerlink\" title=\"八、增加收入\"></a>八、增加收入</h2><p>免费模式如何赚钱？</p>\n<ol>\n<li>基本功能免费，高级功能收费的Freemium策略；</li>\n<li>交叉补贴交叉补贴策略，思路是通过有意识地以优惠甚至亏本的价格出售一种产品（称为“优惠产品”），从而达到促进销售另一种盈利更多的产品（称为“盈利产品”）；</li>\n<li>三方市场的流量变现“当你在使用免费服务时，你自己就是商品。” 的确，免费的流量本身不会凭空变出钱来，但如果将这批流量导入另一项服务，或许就能麻雀变凤凰，攫取出更大价值；</li>\n</ol>\n<h2 id=\"九、病毒传播\"><a href=\"#九、病毒传播\" class=\"headerlink\" title=\"九、病毒传播\"></a>九、病毒传播</h2><p>《引爆点》的作者马尔科姆将引爆流行的要素总结为个别人物法则、附着力法则和环境威力法则。他认为，本身就认识很多人且对他人有一定影响力的那些人，在传播中充当了关键性节点的角色，在他们的助力下，原本容易被注意、感知和记忆的信息更容易抵达受众的面前，并在一定的外部环境催化下，成为一股流行趋势。</p>\n<h3 id=\"衡量指标\"><a href=\"#衡量指标\" class=\"headerlink\" title=\"衡量指标\"></a>衡量指标</h3><p>衡量病毒传播的两大核心指标是K因子（K Factor）和病毒循环周期（Virial Cycle Time）。</p>\n<ol>\n<li><strong>K因子</strong>，用于评判病毒传播的覆盖面。其公式为：K因子=感染率X转化率；</li>\n<li><strong>病毒循环周期</strong>，是指从用户发出病毒邀请，到新用户完成转化（如点击阅读、注册、消费的行为）所花费的时间。</li>\n</ol>\n<h3 id=\"传播心理学\"><a href=\"#传播心理学\" class=\"headerlink\" title=\"传播心理学\"></a>传播心理学</h3><p>互联网是人性的试炼场，互联网产品的病毒传播策略如果能把握群体心理中的一些特征共性，就能从深层次激发人们的传播动力。</p>\n<ol>\n<li>喜爱。人们总是比较愿意答应自己认识和喜欢的人提出的请求，还乐意主动传播自己喜爱的事物，借以表达一种倾向，阐发一种观点，寻求志同道合的伙伴，融入有归属感的圈子。</li>\n<li>逐利：天下熙熙皆为利来，天下攘攘皆为利往。有时候，简单粗暴的利益交换，能换来立竿见影的传播效果。</li>\n<li>互惠：基于理性经济人假说的传统经济学认为，经济行为主体是单纯追求个人利益最大化的，人们的复杂行为和社会参与，都是基于成本收益的计算。互惠是逐利的一种变体，是人类社会日常交际的基础。</li>\n<li>求助</li>\n<li>炫耀：爱炫耀是人的内心渴求被关注被肯定的表现，人们喜欢通过炫耀来展示自己最好的一面，或是借以表达自己理想中的状态。从深层次讲，人类之所以对炫耀乐此不疲，是因为它在某种程度上能够产生权利的幻觉，让身处竞争压力中的个体感觉更好一些，以及在择偶中占据优势。</li>\n<li>稀缺：稀缺资源引发人们的好奇争抢，而邀请机制则将病毒传播的效果成倍放大。</li>\n<li>害怕失去或错过</li>\n<li>懒惰：人天生是懒惰的。当产生分享传播的冲动时，如果需要用户费事打开操作网页、编写一套原创说辞，操作成本过高，无形之中会将一部分人阻拦在外。作为产品开发者，应当充分利用人们懒惰的心理，提供便利的分享方式，如一键分享按钮、跳转手机客户端直接获取身份认证等。</li>\n</ol>\n<blockquote>\n<h2 id=\"移动导购社区产品规律。\"><a href=\"#移动导购社区产品规律。\" class=\"headerlink\" title=\"移动导购社区产品规律。\"></a>移动导购社区产品规律。</h2><ol>\n<li>几种平台的终端用户中，使用手机网页版访问的小白用户居多，看到便宜东西容易冲动消费；iPhone用户消费能力强，对价格不太敏感；安卓用户最抠门，消费不多，但广告的点击率却是iPhone用户的几倍，呈现出一种“啥都好奇，啥都试试，但就是不买单”的状况。</li>\n<li>女性导购类社区需要立足高端机型。iPad用户的购买力最强，低端机型碍于屏幕尺寸限制，导购体验很难做好。</li>\n<li>在用户构成上，使用2000元以上机型的用户占据80%, iOS用户和安卓整体接近，但前者的总收入是后者的2至2.5倍。</li>\n<li>在用户的行为数据中，最喜欢的动作是“喜欢”，收藏起来自己欣赏，日均点击数达到百万次。对比之下利他的“分享”则点击比较少。</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>增长黑客们试图用更聪明的方式解答产品得以增长的奥秘，并使之成为助力产品增长的长效机制。他们通常采用的手段包括A/B测试、搜索引擎优化、电子邮件召回、病毒营销等，而页面加载速度、注册转化率、E-mail到达水平、病毒因子这些指标成为他们日常关注的对象。</p>\n<p>换句话说，<strong>增长黑客就是一群以数据驱动营销、以市场指导产品，通过技术化手段贯彻增长目标的人</strong>。</p>","more":"<blockquote>\n<p>在每一封用Hotmail发出的邮件末尾签名处，增加了一行附言：“我爱你。快来Hotmail申请你的免费邮箱。”（PS:I love you.Get your free E-mail at Hotmail.）这一改动在仅仅几个小时之后，使Hotmail的用户注册曲线发生了戏剧性的变化，原本无人问津的服务，开始以每天3000个新用户的速度增长。</p>\n</blockquote>\n<p>作为企业发展的助推者，增长黑客必须真正懂得产品的核心价值，能用最简单的语言描述这个产品是什么、解决什么问题，在此基础上清晰定位有关增长的问题，并寻求解答。</p>\n<div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/26541801/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img1.doubanio.com/view/subject/m/public/s28369197.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"增长黑客\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：增长黑客</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"电子工业出版社\">出版社：电子工业出版社</p><p style=\"margin:0; font-size: 14px;\">出版日期：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">作者：范冰</p><p style=\"margin:0; font-size: 14px;\">出版年：2015-7-1</p><p style=\"margin:0; font-size: 14px;\">定价：CNY 59.00</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div>\n<h2 id=\"一、增长黑客的崛起\"><a href=\"#一、增长黑客的崛起\" class=\"headerlink\" title=\"一、增长黑客的崛起\"></a>一、增长黑客的崛起</h2><p>为什么直到最近，“增长黑客”的概念才开始流行呢？</p>\n<p>一方面，越来越多的第三方工具降低了初创团队的开发门槛，Google Analytics、Mixpanel等“即插即用”的服务只需开发者在程序/网页内嵌入几行代码，就能一条龙式地以低成本实现数据采集、渠道统计、设备追踪、用户使用行为分析等功能。初创企业再也无须抽调专门人力“重复发明轮子”，就能用最小的代价快速搭建和测试产品，获取影响产品性能的各项指标。配套工具的唾手可得，让初创团队得以着眼于产品增长本身。</p>\n<p>另一方面，越来越多的行业巨头出于扩大市场份额、构建生态系统、完善配套服务、探索盈利途径等需要，建立了属于自己的开放生态，并发布了配套的API供开发者调用。开发者通过接入平台，能够直接调用平台的身份授权、用户关系、内容数据，以及计算能力。产业的融合为初创企业带来更多变革和创新机会，也为富于寻找增长点的增长黑客们提供了闪转腾挪的全新舞台。</p>\n<h3 id=\"增长黑客与市场营销\"><a href=\"#增长黑客与市场营销\" class=\"headerlink\" title=\"增长黑客与市场营销\"></a>增长黑客与市场营销</h3><p>首次接触“增长黑客”概念的人，可能会将它与市场营销混淆。</p>\n<h4 id=\"市场营销\"><a href=\"#市场营销\" class=\"headerlink\" title=\"市场营销\"></a>市场营销</h4><p>市场部的设立更适合有一定资源优势的企业，尤其是那些商业模式已得到验证、正在或已经建立了持久稳定的用户获取渠道，且能将成本压缩在合理范围内的较成熟企业。</p>\n<h4 id=\"低成本的增长\"><a href=\"#低成本的增长\" class=\"headerlink\" title=\"低成本的增长\"></a>低成本的增长</h4><p>尚未建立起对市场足够了解的初创公司，一上来就狠狠砸钱并非明智之举。当务之急是引入增长黑客，通过测试取样、建模修正和无数的试验，去发现更多被低估的低成本的有效增长途径。任何一个关键环节都存在不断优化的可能性。</p>\n<h3 id=\"谁更适合做增长黑客\"><a href=\"#谁更适合做增长黑客\" class=\"headerlink\" title=\"谁更适合做增长黑客\"></a>谁更适合做增长黑客</h3><p>从现有的发展情况看，<strong>工程师可能是最接近和容易成为增长黑客的一群人</strong>。因为从能力角度看，增长黑客不仅需要想法，更需要将想法落实到行动的能力，包括自研工具、采集样本、分析数据、大规模推广，光会纸上谈兵是行不通的。懂技术，未必能变成好的增长黑客，而倘若不懂技术，无异于刘姥姥进大观园。</p>\n<p><strong>增长黑客的价值</strong>就是通过数据分析快速找到机会和问题，并迅速地设置各种规模的试验去验证，找到可持续的方法来增长。</p>\n<h2 id=\"二、AARRR转化漏洞模型\"><a href=\"#二、AARRR转化漏洞模型\" class=\"headerlink\" title=\"二、AARRR转化漏洞模型\"></a>二、AARRR转化漏洞模型</h2><p><img src=\"http://sinacloud.net/woodysblog/img/AARRR.png\" alt=\"&quot;AARRR model&quot;\"></p>\n<p>增长的对象不仅包含用户量的累加，更囊括了产品生命周期中各个阶段的重要指标。根据不同阶段用户参与行为的深度和类型，我们可以将增长目标拆分并概括为“AARRR”转化漏洞模型。</p>\n<p>增长黑客的价值正是通过不断地“头脑风暴-排定优先级-测试-分析-常态化部署”来优化产品策略，减少这当中每个环节的不必要损耗，提高转化效率，从而不断扩大自己用户群体的数量和质量。</p>\n<h3 id=\"1-Acquisition（获取用户）\"><a href=\"#1-Acquisition（获取用户）\" class=\"headerlink\" title=\"1. Acquisition（获取用户）\"></a>1. Acquisition（获取用户）</h3><p>获取用户，指让潜在用户首次接触到产品，或者可以更宽泛地理解为“吸引流量”、“用户量增长”。</p>\n<h3 id=\"2-Activation（激发活跃）\"><a href=\"#2-Activation（激发活跃）\" class=\"headerlink\" title=\"2. Activation（激发活跃）\"></a>2. Activation（激发活跃）</h3><p>激发活跃，获取到用户后下一步是引导用户完成某些“指定动作”，使之成为长期活跃的忠实用户。</p>\n<h3 id=\"3-Retention（提高留存）\"><a href=\"#3-Retention（提高留存）\" class=\"headerlink\" title=\"3. Retention（提高留存）\"></a>3. Retention（提高留存）</h3><p>提高留存，在解决了用户的活跃度问题后，另一个问题又冒了出来。用户来得快，走得也快。提高用户留存，是维持产品价值、延长生命周期的重要手段。</p>\n<h3 id=\"4-Revenue（增加收入）\"><a href=\"#4-Revenue（增加收入）\" class=\"headerlink\" title=\"4. Revenue（增加收入）\"></a>4. Revenue（增加收入）</h3><p>在互联网行业，除了直接向用户收费，还可以通过广告展示、业务分成等方式向其他利益方收取费用。</p>\n<h3 id=\"5-Referral（传播推荐）\"><a href=\"#5-Referral（传播推荐）\" class=\"headerlink\" title=\"5. Referral（传播推荐）\"></a>5. Referral（传播推荐）</h3><p>社交网络的兴起促成了基于用户关系的病毒传播，这是低成本推广产品的全新方式，运用妥当将可能引发奇妙的链式增长。</p>\n<h2 id=\"三、Facebook用户增长的经验\"><a href=\"#三、Facebook用户增长的经验\" class=\"headerlink\" title=\"三、Facebook用户增长的经验\"></a>三、Facebook用户增长的经验</h2><p>安迪对于自己一手组建起来的Facebook用户增长团队所肩负的职责，总结为以下五点。</p>\n<ul>\n<li><strong>用户获取</strong> —— 用户增长团队内有一部分人负责互联网营销渠道，如SEO（Search Engine Optimization，搜索引擎优化）、PPC（Pay Per Click，点击付费广告）或是电子邮件广告等，每一项都包括一套极为缜密的优化流程；</li>\n<li><strong>产品研发</strong> —— 用户增长团队的意见将指导产品研发的各个关键部分，例如登录页面、新用户引导流程、评论互动功能和支付系统等。基本上你能想到的任何地方都留下了用户增长团队的智慧成果；</li>\n<li><strong>文化建设</strong> —— 团队文化对凝聚整个公司至关重要。用户增长团队协助树立数据驱动的理念，确保所有人目标一致地快速执行，并随时准备迎战风险；</li>\n<li><strong>人才招聘</strong> —— 初创公司招募团队成员是一项困难的工作，并非人人都愿意冒险加入一家前途未卜的小公司。但在用户增长团队的帮助下，如果公司的用户量达到五千万甚至五亿，那么情况就大为不同了。</li>\n</ul>\n<p><strong>数据分析</strong> —— 用户增长团队建立在对大数据的分析衡量基础之上。</p>\n<p>大部分时候，用户增长的工作就是在进行测试、调整并重复这个流程。他们需要与数据科学团队紧密协作，通过内部工具研究驱使数据提升或下降的因素。</p>\n<p>进行数据分析的首要环节是<strong>明确分析的目的</strong>。脱离具体目标的单纯数据查看没有任何价值。其次是要<strong>了解数据来源的相关信息</strong>，包括各项指标的定义、采集点和上报机制。</p>\n<blockquote>\n<p>上报机制，数据上报的时机、内容和技术实现形式。<br>定性分析，就是对事物的性质作出判断，究竟它“是什么”。<br>定量分析，是指对事物的数量作出统计，衡量它“有多少”。</p>\n</blockquote>\n<p>数据分析就是定性分析与定量分析相互结合，不断验证的过程。提出假设、设计方案、分析数据、验证或推翻假设，最终抽丝剥茧，逐渐接近真相。数据是相互验证的，彼此之间有如通过无形的网络纵横连接，只需轻轻按动其中一个，就会驱使另外一个或一组产生变化。通过数据分析得出的结论，应当能反推出其他数据，或是与其他数据分析得出的结果相一致。</p>\n<h2 id=\"四、创造正确的产品\"><a href=\"#四、创造正确的产品\" class=\"headerlink\" title=\"四、创造正确的产品\"></a>四、创造正确的产品</h2><h3 id=\"如何判断需求是否足够大\"><a href=\"#如何判断需求是否足够大\" class=\"headerlink\" title=\"如何判断需求是否足够大\"></a>如何判断需求是否足够大</h3><p>通常可采用两种方式。</p>\n<p>一种是先估计目标用户的基数、消费能力、意愿预算，再把这些数字通过相乘等方式得出一个大概的数字，并与该行业或近似行业的公开报告进行比对验证；</p>\n<p>另一种则是评估打算进入的市场，原本具有多少产值，而你的产品通过提供更低的价格、更长的使用周期等，能提升多少效率、节省多少成本，从而折算出相对于原产值的全新规模。</p>\n<h3 id=\"最小化可行产品-MVP\"><a href=\"#最小化可行产品-MVP\" class=\"headerlink\" title=\"最小化可行产品 MVP\"></a>最小化可行产品 MVP</h3><p>《精益创业》中提出的“最小化可行产品（Minimum Viable Product，简称MVP）”概念。</p>\n<h4 id=\"MVP三要素\"><a href=\"#MVP三要素\" class=\"headerlink\" title=\"MVP三要素\"></a>MVP三要素</h4><p>精益创业是指开发团队通过提供最小化可行产品获取用户反馈，在此基础上持续快速迭代（或谋求转型），直至产品达到PMF阶段。它包含如下三个要素。</p>\n<ol>\n<li>最小化可行产品：即所谓的MVP（Minimum Viable Product）是指将产品原型用最简洁的实现方式开发出来，过滤掉冗余杂音和高级特性，快速投放市场让目标用户上手使用，然后通过不断地听取反馈掌握有价值的信息，由此对产品原型迭代优化，尽早达到PMF状态；</li>\n<li>用户反馈：指通过直接或间接方式，从产品的最终用户那里获得针对该产品的意见；</li>\n<li>快速迭代：“天下武功，唯快不破”。</li>\n</ol>\n<h4 id=\"MVP的三大必备模块\"><a href=\"#MVP的三大必备模块\" class=\"headerlink\" title=\"MVP的三大必备模块\"></a>MVP的三大必备模块</h4><p>如果问开发一个MVP必须具备哪些模块，那么我会不假思索地告诉你：除了待验证的基本功能外，反馈渠道、公告看板、自动升级和使用行为统计这四件事必须纳入考量。</p>\n<h2 id=\"五、获取用户\"><a href=\"#五、获取用户\" class=\"headerlink\" title=\"五、获取用户\"></a>五、获取用户</h2><h3 id=\"种子用户\"><a href=\"#种子用户\" class=\"headerlink\" title=\"种子用户\"></a>种子用户</h3><p><strong>“冷启动”</strong>原本是数据挖掘领域的一个专业术语，运用到产品运营中，指在产品之初尚未形成完善的生态体系并能提供足够多可消费内容的情况下，从零开始导入第一批用户和制造内容的过程。选择高质量的早期用户加入和建立充足的数据沉淀，将可作为引燃产品持续增长的燎原之火，为日后发展奠定良好基础。</p>\n<p>种子用户的三层含义：</p>\n<ol>\n<li>这批人数量少，获取不易；</li>\n<li>他们进入产品的阶段较早；</li>\n<li>种子用户如同种子一样孕育着希望，具有成长为参天大树的可能性。</li>\n</ol>\n<h3 id=\"走访和了解用户\"><a href=\"#走访和了解用户\" class=\"headerlink\" title=\"走访和了解用户\"></a>走访和了解用户</h3><p>走访和了解用户，掌握真实需求，是一件复杂困难的事情。就像1000个人心中有1000个哈姆雷特一样，不同人对产品的需求和评判标准不尽相同。从最笨的事情做起的过程，同时也是走进用户内心的过程。将用户视作活生生的个体，通过面对面的沟通，吸纳意见并获得鼓舞，帮助许多初创公司走过了从零开始举步维艰的阶段。</p>\n<h3 id=\"内容营销\"><a href=\"#内容营销\" class=\"headerlink\" title=\"内容营销\"></a>内容营销</h3><p>内容营销的作用主要分为三方面：</p>\n<ul>\n<li>吸引流量</li>\n<li>培养潜在用户</li>\n<li>劝诱转化</li>\n</ul>\n<p>内容营销的注意事项：</p>\n<ol>\n<li>知道你的目标受众是谁</li>\n<li>打造一台内容持续输出的引擎</li>\n<li>撰写耸动的标题</li>\n<li>保证文章长度</li>\n<li>鼓励受众参与互动</li>\n<li>选择合适的发布渠道</li>\n</ol>\n<p>有了足够可写的内容素材后，文章的谋篇布局可以遵循以下顺序：简要概述→话题事件→核心特色→主要功能→团队访谈→未来计划→有奖活动→转化引导。</p>\n<h2 id=\"六、A-B测试\"><a href=\"#六、A-B测试\" class=\"headerlink\" title=\"六、A/B测试\"></a>六、A/B测试</h2><h3 id=\"A-B测试的基本思想\"><a href=\"#A-B测试的基本思想\" class=\"headerlink\" title=\"A/B测试的基本思想\"></a>A/B测试的基本思想</h3><ul>\n<li>提供两个方案并行测试；</li>\n<li>不同方案之间只存在一个变量，排除其他干扰因素；</li>\n<li>以某种标准判定结果优劣，筛出最优方案。</li>\n</ul>\n<blockquote>\n<p>Airbnb曾测试过把“保存到心愿单”的收藏图标由星形改为爱心，结果仅凭这一改动就让心愿列表的使用率提升了30%。</p>\n</blockquote>\n<h3 id=\"A-B的成本\"><a href=\"#A-B的成本\" class=\"headerlink\" title=\"A/B的成本\"></a>A/B的成本</h3><p>谷歌为了找出在两种蓝色方案中哪一种更好，索性测试了41种不同的蓝色来做比较。对与时间赛跑的创业团队而言，这样的精力付出简直太过奢侈。如果你的产品还没达到零点几个百分比的下降都意味着几百万美元损失的地步的话，还是多花些时间在那些真正有跃进式提升的地方吧。</p>\n<h2 id=\"七、留存\"><a href=\"#七、留存\" class=\"headerlink\" title=\"七、留存\"></a>七、留存</h2><blockquote>\n<p>“当陪你的人要下车时，即使不舍，也该心存感激，然后挥手道别。”——《千与千寻》，宫崎骏</p>\n</blockquote>\n<p>根据美国贝恩公司的调查，在商业社会中5%的客户留存率增长意味着公司利润30%的增长，而把产品卖给老客户的概率是卖给新客户的3倍。所以在“增长黑客”圈内有一句名言：留住已有的用户胜过拓展新的客户。也就是俗称的“一鸟在手，胜过双鸟在林”。</p>\n<h3 id=\"留存率低的原因\"><a href=\"#留存率低的原因\" class=\"headerlink\" title=\"留存率低的原因\"></a>留存率低的原因</h3><ol>\n<li>存在程序漏洞、性能瓶颈</li>\n<li>用户被频繁骚扰</li>\n<li>话题产品的热度减退</li>\n<li>有更好的替代品</li>\n<li>其他因素如游戏通关、设备遗失、需求不再存在、产品生命周期终结等，都可能成为用户流失的因素</li>\n</ol>\n<blockquote>\n<p>Pinterest也采取了与Twitter类似的做法，先让新用户有事可做。很快，这些测试用户发现他们的账号被安排订阅了一批系统推荐的账号，页面中顿时充满了令人赏心悦目的花卉文玩、服装穿搭、艺术家居和风景摄影。</p>\n</blockquote>\n<h3 id=\"留存率衡量指标\"><a href=\"#留存率衡量指标\" class=\"headerlink\" title=\"留存率衡量指标\"></a>留存率衡量指标</h3><p>留存率的衡量衡量产品留存率的常用指标包括<strong>次日留存率、7日留存（周留存）率、30日留存（月留存）率</strong>，其计算公式为：第1天的新增用户中，在往后的第N天依然在使用的用户数/第1天的新增用户数。其中的N对应的就是留存指标中代表天数的2、7或30。</p>\n<ul>\n<li>次日留存率：关注产品的次日留存率，可于第一时间发现产品新版本的品质变动和渠道优劣；</li>\n<li>7日留存：可反映出用户完成一个完整体验周期后的去留状况；</li>\n<li>30日留存，更能反映出一次版本迭代后的稳定性，辅助判断产品的演进方向是否合理。</li>\n</ul>\n<p>除了按照不同天数周期来比较留存率外，<strong>渠道留存</strong>也是一项值得钻研玩味的指标。由于渠道来源不一，用户质量也千差万别，所以有必要针对渠道用户单独剥离进行留存率分析，选择留存率较高的优质渠道进行重点投放。</p>\n<h3 id=\"有损服务\"><a href=\"#有损服务\" class=\"headerlink\" title=\"有损服务\"></a>有损服务</h3><p>有损服务，顾名思义是指刻意输出在品质上存在某些损失的服务，目的是以此牺牲换取其他方面（速度、稳定性、成功执行的几率）的优化。</p>\n<p>在实施有损服务的方案时，有两条基本原则：1）发生问题时，优先保证核心功能的运转，非核心功能不可以影响核心功能；2）在条件允许的情况下，牺牲的特性越少越好。</p>\n<h3 id=\"唤醒机制\"><a href=\"#唤醒机制\" class=\"headerlink\" title=\"唤醒机制\"></a>唤醒机制</h3><p>唤醒机制是指互联网产品中专为召回流失用户而设计的产品机制。</p>\n<p>常用的唤醒机制包括：</p>\n<ul>\n<li>电子邮件唤醒</li>\n<li>消息推送通知</li>\n<li>移动网页唤醒应用</li>\n<li>其他</li>\n</ul>\n<p>推送通知的通常用法，考验的是运营人员的基本功，即如何筛选合适的推送人群、根据使用场景和时间段制定推送内容、制作和优化推送到达的着陆页。根据目标人群的使用场景，推送符合其兴趣和需要的优质内容，就能带来更高的黏性。</p>\n<h2 id=\"八、增加收入\"><a href=\"#八、增加收入\" class=\"headerlink\" title=\"八、增加收入\"></a>八、增加收入</h2><p>免费模式如何赚钱？</p>\n<ol>\n<li>基本功能免费，高级功能收费的Freemium策略；</li>\n<li>交叉补贴交叉补贴策略，思路是通过有意识地以优惠甚至亏本的价格出售一种产品（称为“优惠产品”），从而达到促进销售另一种盈利更多的产品（称为“盈利产品”）；</li>\n<li>三方市场的流量变现“当你在使用免费服务时，你自己就是商品。” 的确，免费的流量本身不会凭空变出钱来，但如果将这批流量导入另一项服务，或许就能麻雀变凤凰，攫取出更大价值；</li>\n</ol>\n<h2 id=\"九、病毒传播\"><a href=\"#九、病毒传播\" class=\"headerlink\" title=\"九、病毒传播\"></a>九、病毒传播</h2><p>《引爆点》的作者马尔科姆将引爆流行的要素总结为个别人物法则、附着力法则和环境威力法则。他认为，本身就认识很多人且对他人有一定影响力的那些人，在传播中充当了关键性节点的角色，在他们的助力下，原本容易被注意、感知和记忆的信息更容易抵达受众的面前，并在一定的外部环境催化下，成为一股流行趋势。</p>\n<h3 id=\"衡量指标\"><a href=\"#衡量指标\" class=\"headerlink\" title=\"衡量指标\"></a>衡量指标</h3><p>衡量病毒传播的两大核心指标是K因子（K Factor）和病毒循环周期（Virial Cycle Time）。</p>\n<ol>\n<li><strong>K因子</strong>，用于评判病毒传播的覆盖面。其公式为：K因子=感染率X转化率；</li>\n<li><strong>病毒循环周期</strong>，是指从用户发出病毒邀请，到新用户完成转化（如点击阅读、注册、消费的行为）所花费的时间。</li>\n</ol>\n<h3 id=\"传播心理学\"><a href=\"#传播心理学\" class=\"headerlink\" title=\"传播心理学\"></a>传播心理学</h3><p>互联网是人性的试炼场，互联网产品的病毒传播策略如果能把握群体心理中的一些特征共性，就能从深层次激发人们的传播动力。</p>\n<ol>\n<li>喜爱。人们总是比较愿意答应自己认识和喜欢的人提出的请求，还乐意主动传播自己喜爱的事物，借以表达一种倾向，阐发一种观点，寻求志同道合的伙伴，融入有归属感的圈子。</li>\n<li>逐利：天下熙熙皆为利来，天下攘攘皆为利往。有时候，简单粗暴的利益交换，能换来立竿见影的传播效果。</li>\n<li>互惠：基于理性经济人假说的传统经济学认为，经济行为主体是单纯追求个人利益最大化的，人们的复杂行为和社会参与，都是基于成本收益的计算。互惠是逐利的一种变体，是人类社会日常交际的基础。</li>\n<li>求助</li>\n<li>炫耀：爱炫耀是人的内心渴求被关注被肯定的表现，人们喜欢通过炫耀来展示自己最好的一面，或是借以表达自己理想中的状态。从深层次讲，人类之所以对炫耀乐此不疲，是因为它在某种程度上能够产生权利的幻觉，让身处竞争压力中的个体感觉更好一些，以及在择偶中占据优势。</li>\n<li>稀缺：稀缺资源引发人们的好奇争抢，而邀请机制则将病毒传播的效果成倍放大。</li>\n<li>害怕失去或错过</li>\n<li>懒惰：人天生是懒惰的。当产生分享传播的冲动时，如果需要用户费事打开操作网页、编写一套原创说辞，操作成本过高，无形之中会将一部分人阻拦在外。作为产品开发者，应当充分利用人们懒惰的心理，提供便利的分享方式，如一键分享按钮、跳转手机客户端直接获取身份认证等。</li>\n</ol>\n<blockquote>\n<h2 id=\"移动导购社区产品规律。\"><a href=\"#移动导购社区产品规律。\" class=\"headerlink\" title=\"移动导购社区产品规律。\"></a>移动导购社区产品规律。</h2><ol>\n<li>几种平台的终端用户中，使用手机网页版访问的小白用户居多，看到便宜东西容易冲动消费；iPhone用户消费能力强，对价格不太敏感；安卓用户最抠门，消费不多，但广告的点击率却是iPhone用户的几倍，呈现出一种“啥都好奇，啥都试试，但就是不买单”的状况。</li>\n<li>女性导购类社区需要立足高端机型。iPad用户的购买力最强，低端机型碍于屏幕尺寸限制，导购体验很难做好。</li>\n<li>在用户构成上，使用2000元以上机型的用户占据80%, iOS用户和安卓整体接近，但前者的总收入是后者的2至2.5倍。</li>\n<li>在用户的行为数据中，最喜欢的动作是“喜欢”，收藏起来自己欣赏，日均点击数达到百万次。对比之下利他的“分享”则点击比较少。</li>\n</ol>\n</blockquote>"},{"title":"Hello blog","id":"11","date":"2015-04-21T06:06:44.000Z","_content":"\n从高中时期就有个人博客，q-zone、163、wordpress，至今差不多8年，偶尔会写博客，但是经常会因为换架构如wordpress还是jekyll）、换空间甚至不堪回首，等等等等的原因在辗转折腾几次之后，就没掉了大部分的博（hui）客（yi）。\n\n这一次，我真的下定决心要扎根在这了，不能再迁~\n\n<!-- more -->\n\nNever too late~\n\n写于2015.04.21，奎科科技大厦，北京","source":"_posts/hello-blog.md","raw":"---\ntitle: Hello blog\ntags:\n  - life\nid: 11\ncategories:\n  - life\ndate: 2015-04-21 14:06:44\n---\n\n从高中时期就有个人博客，q-zone、163、wordpress，至今差不多8年，偶尔会写博客，但是经常会因为换架构如wordpress还是jekyll）、换空间甚至不堪回首，等等等等的原因在辗转折腾几次之后，就没掉了大部分的博（hui）客（yi）。\n\n这一次，我真的下定决心要扎根在这了，不能再迁~\n\n<!-- more -->\n\nNever too late~\n\n写于2015.04.21，奎科科技大厦，北京","slug":"hello-blog","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8v001szvr3y4ucsteq","content":"<p>从高中时期就有个人博客，q-zone、163、wordpress，至今差不多8年，偶尔会写博客，但是经常会因为换架构如wordpress还是jekyll）、换空间甚至不堪回首，等等等等的原因在辗转折腾几次之后，就没掉了大部分的博（hui）客（yi）。</p>\n<p>这一次，我真的下定决心要扎根在这了，不能再迁~</p>\n<a id=\"more\"></a>\n<p>Never too late~</p>\n<p>写于2015.04.21，奎科科技大厦，北京</p>\n","site":{"data":{}},"excerpt":"<p>从高中时期就有个人博客，q-zone、163、wordpress，至今差不多8年，偶尔会写博客，但是经常会因为换架构如wordpress还是jekyll）、换空间甚至不堪回首，等等等等的原因在辗转折腾几次之后，就没掉了大部分的博（hui）客（yi）。</p>\n<p>这一次，我真的下定决心要扎根在这了，不能再迁~</p>","more":"<p>Never too late~</p>\n<p>写于2015.04.21，奎科科技大厦，北京</p>"},{"title":"书摘-用ABTest提升用户体验","date":"2018-09-16T09:06:07.000Z","type":"photo","cover":"http://sinacloud.net/blog-image/data-driven-types.png","_content":"\n{% douban \"https://book.douban.com/subject/26588592/\" %}\n\n## 三种基于数据的决策模式\n\n* data driven\n* data informed\n* data aware（本书提出）\n\n![\"三种数据决策模式\"](http://sinacloud.net/blog-image/data-driven-types.png)\n\n### Data-driven Design\n\n**数据驱动**（data-driven）意味着收集到的数据决定（驱动）了设计的决策。在某些场景下，这是非常对的方式。而有些时候，团队提出的问题可以被通过实验得到的数据回答，这些数据集可以得出一个清晰的设计的最佳实践。\n\n如果你清楚知道你要解决什么问题，目标是什么，确切知道自己想了解的问题是什么，那么数据驱动是合适的方式。还有另外一个前提，你的方法论和衡量方式是正确的，而你想要解决的问题是对应的数据能驱动做出决策的。这要求你对数据有可能带来的隐患有清晰的认知，然后采取相应的对策去解决它们。\n\n### Data-informed Design\n\n然而，在一些情况下，你的设计觉有可能有各种各样的细微差异，以及数据带来的答案，有可能不能覆盖所有的情况（not cut-and-dried）。这就是**数据启示**（data-informed）设计模式，团队只把数据作为决策过程的其中一项输入源。在这种设计模式下，输出也许不是一个明确的决策，但这也许会影响到下一个迭代和投入的立项。这样的方式适用的场景包括，需要做很多的资料搜集、需要结合不同类型的数据来源，以及在做一次跳跃性的项目创新。\n\n### Data-aware Design\n\n数据洞察（data-aware）设计模式，是一种创新的设计模式，设计的决策不仅仅来源于数据，而是回到数据收集方式的实践（系统是怎么产生的？数据类型是怎么捕获？数据是怎么合成的？），这才是设计本身要关注的问题。\n\n在数据洞察设计模式的观念中，你要了解一些现实，不同类型的数据可以是很多不同的问题的答案。如果你意识到，多种类型的解决方案可以回答你的大目标，那么你也会意识到所有不同类型的数据可以为你所用。你在持续地提问怎么样你才能最好的实现目标。这是一种更有策略的思考方式，数据可以怎么样启发你想要\b解决的问题。再次说明，在你没有做好数据洞察之前，你是没法直接到达“数据启示”阶段的。","source":"_posts/improve-ue-with-ab-testing.md","raw":"---\ntitle: \"书摘-用ABTest提升用户体验\"\ndate: 2018-09-16 17:06:07\ntags:\n- reading\n- ab testing\ntype: photo\ncover: http://sinacloud.net/blog-image/data-driven-types.png\n---\n\n{% douban \"https://book.douban.com/subject/26588592/\" %}\n\n## 三种基于数据的决策模式\n\n* data driven\n* data informed\n* data aware（本书提出）\n\n![\"三种数据决策模式\"](http://sinacloud.net/blog-image/data-driven-types.png)\n\n### Data-driven Design\n\n**数据驱动**（data-driven）意味着收集到的数据决定（驱动）了设计的决策。在某些场景下，这是非常对的方式。而有些时候，团队提出的问题可以被通过实验得到的数据回答，这些数据集可以得出一个清晰的设计的最佳实践。\n\n如果你清楚知道你要解决什么问题，目标是什么，确切知道自己想了解的问题是什么，那么数据驱动是合适的方式。还有另外一个前提，你的方法论和衡量方式是正确的，而你想要解决的问题是对应的数据能驱动做出决策的。这要求你对数据有可能带来的隐患有清晰的认知，然后采取相应的对策去解决它们。\n\n### Data-informed Design\n\n然而，在一些情况下，你的设计觉有可能有各种各样的细微差异，以及数据带来的答案，有可能不能覆盖所有的情况（not cut-and-dried）。这就是**数据启示**（data-informed）设计模式，团队只把数据作为决策过程的其中一项输入源。在这种设计模式下，输出也许不是一个明确的决策，但这也许会影响到下一个迭代和投入的立项。这样的方式适用的场景包括，需要做很多的资料搜集、需要结合不同类型的数据来源，以及在做一次跳跃性的项目创新。\n\n### Data-aware Design\n\n数据洞察（data-aware）设计模式，是一种创新的设计模式，设计的决策不仅仅来源于数据，而是回到数据收集方式的实践（系统是怎么产生的？数据类型是怎么捕获？数据是怎么合成的？），这才是设计本身要关注的问题。\n\n在数据洞察设计模式的观念中，你要了解一些现实，不同类型的数据可以是很多不同的问题的答案。如果你意识到，多种类型的解决方案可以回答你的大目标，那么你也会意识到所有不同类型的数据可以为你所用。你在持续地提问怎么样你才能最好的实现目标。这是一种更有策略的思考方式，数据可以怎么样启发你想要\b解决的问题。再次说明，在你没有做好数据洞察之前，你是没法直接到达“数据启示”阶段的。","slug":"improve-ue-with-ab-testing","published":1,"updated":"2018-09-16T10:48:14.000Z","_id":"cjm4n1x8w001vzvr3mw5pk71g","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/26588592/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img3.doubanio.com/view/subject/m/public/s29420245.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"Designing with Data\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：Designing with Data</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"O'Reilly Media\">出版社：O'Reilly Media</p><p style=\"margin:0; font-size: 14px;\">出版日期：2016-2-25</p><p style=\"margin:0; font-size: 14px;\">作者：Rochelle King,Elizabeth F Churchill</p><p style=\"margin:0; font-size: 14px;\">出版年：2016-2-25</p><p style=\"margin:0; font-size: 14px;\">定价：USD 39.99</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div>\n<h2 id=\"三种基于数据的决策模式\"><a href=\"#三种基于数据的决策模式\" class=\"headerlink\" title=\"三种基于数据的决策模式\"></a>三种基于数据的决策模式</h2><ul>\n<li>data driven</li>\n<li>data informed</li>\n<li>data aware（本书提出）</li>\n</ul>\n<p><img src=\"http://sinacloud.net/blog-image/data-driven-types.png\" alt=\"&quot;三种数据决策模式&quot;\"></p>\n<h3 id=\"Data-driven-Design\"><a href=\"#Data-driven-Design\" class=\"headerlink\" title=\"Data-driven Design\"></a>Data-driven Design</h3><p><strong>数据驱动</strong>（data-driven）意味着收集到的数据决定（驱动）了设计的决策。在某些场景下，这是非常对的方式。而有些时候，团队提出的问题可以被通过实验得到的数据回答，这些数据集可以得出一个清晰的设计的最佳实践。</p>\n<p>如果你清楚知道你要解决什么问题，目标是什么，确切知道自己想了解的问题是什么，那么数据驱动是合适的方式。还有另外一个前提，你的方法论和衡量方式是正确的，而你想要解决的问题是对应的数据能驱动做出决策的。这要求你对数据有可能带来的隐患有清晰的认知，然后采取相应的对策去解决它们。</p>\n<h3 id=\"Data-informed-Design\"><a href=\"#Data-informed-Design\" class=\"headerlink\" title=\"Data-informed Design\"></a>Data-informed Design</h3><p>然而，在一些情况下，你的设计觉有可能有各种各样的细微差异，以及数据带来的答案，有可能不能覆盖所有的情况（not cut-and-dried）。这就是<strong>数据启示</strong>（data-informed）设计模式，团队只把数据作为决策过程的其中一项输入源。在这种设计模式下，输出也许不是一个明确的决策，但这也许会影响到下一个迭代和投入的立项。这样的方式适用的场景包括，需要做很多的资料搜集、需要结合不同类型的数据来源，以及在做一次跳跃性的项目创新。</p>\n<h3 id=\"Data-aware-Design\"><a href=\"#Data-aware-Design\" class=\"headerlink\" title=\"Data-aware Design\"></a>Data-aware Design</h3><p>数据洞察（data-aware）设计模式，是一种创新的设计模式，设计的决策不仅仅来源于数据，而是回到数据收集方式的实践（系统是怎么产生的？数据类型是怎么捕获？数据是怎么合成的？），这才是设计本身要关注的问题。</p>\n<p>在数据洞察设计模式的观念中，你要了解一些现实，不同类型的数据可以是很多不同的问题的答案。如果你意识到，多种类型的解决方案可以回答你的大目标，那么你也会意识到所有不同类型的数据可以为你所用。你在持续地提问怎么样你才能最好的实现目标。这是一种更有策略的思考方式，数据可以怎么样启发你想要\b解决的问题。再次说明，在你没有做好数据洞察之前，你是没法直接到达“数据启示”阶段的。</p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"hexo-tag-douban\" style=\"position:relative;width:60%;border:1px solid #666;border-radius: 4px;margin:10px auto;padding: 10px;\"><a href=\"https://book.douban.com/subject/26588592/\" target=\"_blank\" style=\"color: #666;display:block;\"><img src=\"https://img3.doubanio.com/view/subject/m/public/s29420245.jpg?apikey=0e13da30b101d57c2a3b8e9213058074\" alt=\"Designing with Data\" style=\"width: 135px; height: 192px; display:inline-block; margin-right: 14px;\" referrerpolicy=\"no-referrer\"><div class=\"info\" style=\"display:inline-block; vertical-align: top;\"><p style=\"margin:0; font-size: 14px;\">书名：Designing with Data</p><p style=\"margin:0; font-size: 14px;width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\" title=\"O'Reilly Media\">出版社：O'Reilly Media</p><p style=\"margin:0; font-size: 14px;\">出版日期：2016-2-25</p><p style=\"margin:0; font-size: 14px;\">作者：Rochelle King,Elizabeth F Churchill</p><p style=\"margin:0; font-size: 14px;\">出版年：2016-2-25</p><p style=\"margin:0; font-size: 14px;\">定价：USD 39.99</p></div></a><div style=\"background: url(https://img3.doubanio.com/pics/douban-icons/favicon_24x24.png);width: 24px;height: 24px;position: absolute;right: 10px;bottom: 10px;\"></div><a href=\"https://github.com/YuyingWu/hexo-tag-douban\" title=\"hexo-tag-douban\" target=\"_blank\" style=\"display:block;width:24px;height:24px;position: absolute; bottom:10px;right: 39px;\"><img src=\"https://github.com/fluidicon.png\" alt=\"\" style=\"display:block;width:24px;height:24px;\"></a></div>\n<h2 id=\"三种基于数据的决策模式\"><a href=\"#三种基于数据的决策模式\" class=\"headerlink\" title=\"三种基于数据的决策模式\"></a>三种基于数据的决策模式</h2><ul>\n<li>data driven</li>\n<li>data informed</li>\n<li>data aware（本书提出）</li>\n</ul>\n<p><img src=\"http://sinacloud.net/blog-image/data-driven-types.png\" alt=\"&quot;三种数据决策模式&quot;\"></p>\n<h3 id=\"Data-driven-Design\"><a href=\"#Data-driven-Design\" class=\"headerlink\" title=\"Data-driven Design\"></a>Data-driven Design</h3><p><strong>数据驱动</strong>（data-driven）意味着收集到的数据决定（驱动）了设计的决策。在某些场景下，这是非常对的方式。而有些时候，团队提出的问题可以被通过实验得到的数据回答，这些数据集可以得出一个清晰的设计的最佳实践。</p>\n<p>如果你清楚知道你要解决什么问题，目标是什么，确切知道自己想了解的问题是什么，那么数据驱动是合适的方式。还有另外一个前提，你的方法论和衡量方式是正确的，而你想要解决的问题是对应的数据能驱动做出决策的。这要求你对数据有可能带来的隐患有清晰的认知，然后采取相应的对策去解决它们。</p>\n<h3 id=\"Data-informed-Design\"><a href=\"#Data-informed-Design\" class=\"headerlink\" title=\"Data-informed Design\"></a>Data-informed Design</h3><p>然而，在一些情况下，你的设计觉有可能有各种各样的细微差异，以及数据带来的答案，有可能不能覆盖所有的情况（not cut-and-dried）。这就是<strong>数据启示</strong>（data-informed）设计模式，团队只把数据作为决策过程的其中一项输入源。在这种设计模式下，输出也许不是一个明确的决策，但这也许会影响到下一个迭代和投入的立项。这样的方式适用的场景包括，需要做很多的资料搜集、需要结合不同类型的数据来源，以及在做一次跳跃性的项目创新。</p>\n<h3 id=\"Data-aware-Design\"><a href=\"#Data-aware-Design\" class=\"headerlink\" title=\"Data-aware Design\"></a>Data-aware Design</h3><p>数据洞察（data-aware）设计模式，是一种创新的设计模式，设计的决策不仅仅来源于数据，而是回到数据收集方式的实践（系统是怎么产生的？数据类型是怎么捕获？数据是怎么合成的？），这才是设计本身要关注的问题。</p>\n<p>在数据洞察设计模式的观念中，你要了解一些现实，不同类型的数据可以是很多不同的问题的答案。如果你意识到，多种类型的解决方案可以回答你的大目标，那么你也会意识到所有不同类型的数据可以为你所用。你在持续地提问怎么样你才能最好的实现目标。这是一种更有策略的思考方式，数据可以怎么样启发你想要\b解决的问题。再次说明，在你没有做好数据洞察之前，你是没法直接到达“数据启示”阶段的。</p>\n"},{"title":"Hexo主题的置顶功能","date":"2017-02-02T05:23:18.000Z","_content":"\n忽然想要一个置顶功能，可惜原生的`hexo-generator-index`没有提供这样的方法，那只能自己搞一个了~\n\n<!-- more -->\n\n## 一、hexo-generator-index修改\n\nHexo排序编译组件，一般默认安装的，默认配置（按date排序）\n\n```\nindex_generator:\n  per_page: 10\n  order_by: -date\n```\n\n如果没有安装的话，可执行：\n\n```bash\n$ npm install hexo-generator-index --save\n```\n\n在`node_modules/lib/generator.js`添加以下排序代码：\n\n```\n  posts.data = posts.data.sort(function(a, b) {\n    !a.top && (a.top = 0);\n    !b.top && (b.top = 0);\n\n    // 若top值一样则按照文章日期降序排，否则按照top值降序排\n    if(a.top == b.top){\n      return b.date - a.date; // \n    }else{\n      return b.top - a.top; // \n    }\n  });\n```\n\n## 二、日志配置\n\n在Front-matter添加top属性\n\n```\n---\ntitle: 我的2016\ntags:\n  - 总结\ndate: 2017-01-20 00:11:18\ntop: 1\n---\n```\n\n## 三、置顶文案/样式设定\n\n![](http://cdn.sinacloud.net/woodysblog/articles/top.png)\n\n简单在日期边上加了个“置顶”的箭头~\n\n添加一个模板`theme/landscape/layout/_partial/post/top.ejs`，判断当前日志是否有top属性（`post.top`）\n\n```html\n<% if (post.top){ %>\n    <i class=\"fa fa-arrow-up article-top\"></i>\n<% } %> \n```\n\n然后在你想添加的位置，引用该模板组件\n\n```\nblah blah ...\n\n<%- partial('post/top') %>\n\nblah blah ...\n```\n\nReference: \n[Netcan](http://www.netcan666.com)的[《解决hexo置顶问题》](http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/)\n","source":"_posts/hexo-top.md","raw":"---\ntitle: Hexo主题的置顶功能\ntags:\n  - blog\n  - theme\ndate: 2017-02-02 13:23:18\n---\n\n忽然想要一个置顶功能，可惜原生的`hexo-generator-index`没有提供这样的方法，那只能自己搞一个了~\n\n<!-- more -->\n\n## 一、hexo-generator-index修改\n\nHexo排序编译组件，一般默认安装的，默认配置（按date排序）\n\n```\nindex_generator:\n  per_page: 10\n  order_by: -date\n```\n\n如果没有安装的话，可执行：\n\n```bash\n$ npm install hexo-generator-index --save\n```\n\n在`node_modules/lib/generator.js`添加以下排序代码：\n\n```\n  posts.data = posts.data.sort(function(a, b) {\n    !a.top && (a.top = 0);\n    !b.top && (b.top = 0);\n\n    // 若top值一样则按照文章日期降序排，否则按照top值降序排\n    if(a.top == b.top){\n      return b.date - a.date; // \n    }else{\n      return b.top - a.top; // \n    }\n  });\n```\n\n## 二、日志配置\n\n在Front-matter添加top属性\n\n```\n---\ntitle: 我的2016\ntags:\n  - 总结\ndate: 2017-01-20 00:11:18\ntop: 1\n---\n```\n\n## 三、置顶文案/样式设定\n\n![](http://cdn.sinacloud.net/woodysblog/articles/top.png)\n\n简单在日期边上加了个“置顶”的箭头~\n\n添加一个模板`theme/landscape/layout/_partial/post/top.ejs`，判断当前日志是否有top属性（`post.top`）\n\n```html\n<% if (post.top){ %>\n    <i class=\"fa fa-arrow-up article-top\"></i>\n<% } %> \n```\n\n然后在你想添加的位置，引用该模板组件\n\n```\nblah blah ...\n\n<%- partial('post/top') %>\n\nblah blah ...\n```\n\nReference: \n[Netcan](http://www.netcan666.com)的[《解决hexo置顶问题》](http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/)\n","slug":"hexo-top","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8y001yzvr3qrsutnho","content":"<p>忽然想要一个置顶功能，可惜原生的<code>hexo-generator-index</code>没有提供这样的方法，那只能自己搞一个了~</p>\n<a id=\"more\"></a>\n<h2 id=\"一、hexo-generator-index修改\"><a href=\"#一、hexo-generator-index修改\" class=\"headerlink\" title=\"一、hexo-generator-index修改\"></a>一、hexo-generator-index修改</h2><p>Hexo排序编译组件，一般默认安装的，默认配置（按date排序）</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">index_generator:</span></span><br><span class=\"line\"><span class=\"symbol\">  per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">  order_by:</span> -date</span><br></pre></td></tr></table></figure>\n<p>如果没有安装的话，可执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure>\n<p>在<code>node_modules/lib/generator.js</code>添加以下排序代码：</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class=\"line\">  !a.<span class=\"built_in\">top</span> &amp;&amp; (a.<span class=\"built_in\">top</span> = <span class=\"number\">0</span>);</span><br><span class=\"line\">  !b.<span class=\"built_in\">top</span> &amp;&amp; (b.<span class=\"built_in\">top</span> = <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 若<span class=\"built_in\">top</span>值一样则按照文章日期降序排，否则按照<span class=\"built_in\">top</span>值降序排</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a.<span class=\"built_in\">top</span> == b.<span class=\"built_in\">top</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.date - a.date; // </span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.<span class=\"built_in\">top</span> - a.<span class=\"built_in\">top</span>; // </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、日志配置\"><a href=\"#二、日志配置\" class=\"headerlink\" title=\"二、日志配置\"></a>二、日志配置</h2><p>在Front-matter添加top属性</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">我的2016</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">总结</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-01</span><span class=\"bullet\">-20</span> <span class=\"number\">00</span><span class=\"string\">:11:18</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、置顶文案-样式设定\"><a href=\"#三、置顶文案-样式设定\" class=\"headerlink\" title=\"三、置顶文案/样式设定\"></a>三、置顶文案/样式设定</h2><p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/top.png\" alt=\"\"></p>\n<p>简单在日期边上加了个“置顶”的箭头~</p>\n<p>添加一个模板<code>theme/landscape/layout/_partial/post/top.ejs</code>，判断当前日志是否有top属性（<code>post.top</code>）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">post.top</span>)&#123; %&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-arrow-up article-top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后在你想添加的位置，引用该模板组件</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">blah</span></span> blah ...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'post/top'</span>) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">blah</span></span> blah ...</span><br></pre></td></tr></table></figure>\n<p>Reference:<br><a href=\"http://www.netcan666.com\" target=\"_blank\" rel=\"noopener\">Netcan</a>的<a href=\"http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/\" target=\"_blank\" rel=\"noopener\">《解决hexo置顶问题》</a></p>\n","site":{"data":{}},"excerpt":"<p>忽然想要一个置顶功能，可惜原生的<code>hexo-generator-index</code>没有提供这样的方法，那只能自己搞一个了~</p>","more":"<h2 id=\"一、hexo-generator-index修改\"><a href=\"#一、hexo-generator-index修改\" class=\"headerlink\" title=\"一、hexo-generator-index修改\"></a>一、hexo-generator-index修改</h2><p>Hexo排序编译组件，一般默认安装的，默认配置（按date排序）</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">index_generator:</span></span><br><span class=\"line\"><span class=\"symbol\">  per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">  order_by:</span> -date</span><br></pre></td></tr></table></figure>\n<p>如果没有安装的话，可执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure>\n<p>在<code>node_modules/lib/generator.js</code>添加以下排序代码：</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class=\"line\">  !a.<span class=\"built_in\">top</span> &amp;&amp; (a.<span class=\"built_in\">top</span> = <span class=\"number\">0</span>);</span><br><span class=\"line\">  !b.<span class=\"built_in\">top</span> &amp;&amp; (b.<span class=\"built_in\">top</span> = <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 若<span class=\"built_in\">top</span>值一样则按照文章日期降序排，否则按照<span class=\"built_in\">top</span>值降序排</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a.<span class=\"built_in\">top</span> == b.<span class=\"built_in\">top</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.date - a.date; // </span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.<span class=\"built_in\">top</span> - a.<span class=\"built_in\">top</span>; // </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、日志配置\"><a href=\"#二、日志配置\" class=\"headerlink\" title=\"二、日志配置\"></a>二、日志配置</h2><p>在Front-matter添加top属性</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">我的2016</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">总结</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-01</span><span class=\"bullet\">-20</span> <span class=\"number\">00</span><span class=\"string\">:11:18</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、置顶文案-样式设定\"><a href=\"#三、置顶文案-样式设定\" class=\"headerlink\" title=\"三、置顶文案/样式设定\"></a>三、置顶文案/样式设定</h2><p><img src=\"http://cdn.sinacloud.net/woodysblog/articles/top.png\" alt=\"\"></p>\n<p>简单在日期边上加了个“置顶”的箭头~</p>\n<p>添加一个模板<code>theme/landscape/layout/_partial/post/top.ejs</code>，判断当前日志是否有top属性（<code>post.top</code>）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">post.top</span>)&#123; %&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-arrow-up article-top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后在你想添加的位置，引用该模板组件</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">blah</span></span> blah ...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'post/top'</span>) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">blah</span></span> blah ...</span><br></pre></td></tr></table></figure>\n<p>Reference:<br><a href=\"http://www.netcan666.com\" target=\"_blank\" rel=\"noopener\">Netcan</a>的<a href=\"http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/\" target=\"_blank\" rel=\"noopener\">《解决hexo置顶问题》</a></p>"},{"title":"图解HTTP","id":"272","date":"2015-02-26T10:33:38.000Z","_content":"\n还记得刚开始工作，GET和POST请求我都不知道是什么，尽管在大学学过《计算机网络》。经过1年的工作，初步对此有了认识（发一个异步请求从服务器端获取我需要的东西），感谢 @maxiao 送我这本[《图解HTTP》](http://book.douban.com/subject/25863515/)，让我重新认识HTTP。\n\n全书的内容很多很多，包括HTTP诞生的背景、版本，它的method、报文结构以及具体参数的解释、状态码，更延伸出HTTPS、身份验证以及web安全等等的知识，有兴趣的同学不妨去读一读，很生动有趣~\n\n下面只摘录我了解的关于HTTP协议最基础的认识 :)\n<!--more-->\n\n### 一、各种协议和HTTP协议的关系\n\n1.  GET 获取资源\n2.  POST 传输实体主体\n3.  PUT 传输文件\n4.  HEAD 获得报文首部\n5.  DELETE 删除文件\n6.  OPTIONS 询问支持的方法\n7.  TRACE 追踪路径\n8.  CONNECT 要求用隧道协议连接代理\n![HTTP协议跟其他协议的关系](http://cdn.sinacloud.net/woodysblog/http/relation.jpg)\n\n### 二、HTTP的那些方法（method）\n\n![method-1](http://cdn.sinacloud.net/woodysblog/http/method-1.jpg)\n\n* * *\n\n![method-2](http://cdn.sinacloud.net/woodysblog/http/method-2.jpg)\n\n* * *\n\n![method-3](http://cdn.sinacloud.net/woodysblog/http/method-3.jpg)\n\n### 三、HTTP报文结构\n\n![content](http://cdn.sinacloud.net/woodysblog/http/content.jpg)\n\n### 四、状态码\n\n| 状态码        | 类别           | 原因短语  |\n| ------------- |:-------------:| -----:|\n| 1XX      | information（信息性状态码） | 接收的请求正在处理 |\n| 2XX      | success（成功状态码）      |   请求正常处理完毕 |\n| 3XX | redirection（重定向状态码）      |    需要进行附加操作以完成请求 |\n| 4XX      | client error（客户端错误状态码）      |   服务器无法处理请求 |\n| 5XX | server error（服务器错误状态码）      |    服务器处理请求出错 |\n\n![status](http://cdn.sinacloud.net/woodysblog/http/status.jpg)\n","source":"_posts/http.md","raw":"---\ntitle: 图解HTTP\ntags:\n  - reading\n  - tech\nid: 272\ncategories:\n  - 未分类\ndate: 2015-02-26 18:33:38\n---\n\n还记得刚开始工作，GET和POST请求我都不知道是什么，尽管在大学学过《计算机网络》。经过1年的工作，初步对此有了认识（发一个异步请求从服务器端获取我需要的东西），感谢 @maxiao 送我这本[《图解HTTP》](http://book.douban.com/subject/25863515/)，让我重新认识HTTP。\n\n全书的内容很多很多，包括HTTP诞生的背景、版本，它的method、报文结构以及具体参数的解释、状态码，更延伸出HTTPS、身份验证以及web安全等等的知识，有兴趣的同学不妨去读一读，很生动有趣~\n\n下面只摘录我了解的关于HTTP协议最基础的认识 :)\n<!--more-->\n\n### 一、各种协议和HTTP协议的关系\n\n1.  GET 获取资源\n2.  POST 传输实体主体\n3.  PUT 传输文件\n4.  HEAD 获得报文首部\n5.  DELETE 删除文件\n6.  OPTIONS 询问支持的方法\n7.  TRACE 追踪路径\n8.  CONNECT 要求用隧道协议连接代理\n![HTTP协议跟其他协议的关系](http://cdn.sinacloud.net/woodysblog/http/relation.jpg)\n\n### 二、HTTP的那些方法（method）\n\n![method-1](http://cdn.sinacloud.net/woodysblog/http/method-1.jpg)\n\n* * *\n\n![method-2](http://cdn.sinacloud.net/woodysblog/http/method-2.jpg)\n\n* * *\n\n![method-3](http://cdn.sinacloud.net/woodysblog/http/method-3.jpg)\n\n### 三、HTTP报文结构\n\n![content](http://cdn.sinacloud.net/woodysblog/http/content.jpg)\n\n### 四、状态码\n\n| 状态码        | 类别           | 原因短语  |\n| ------------- |:-------------:| -----:|\n| 1XX      | information（信息性状态码） | 接收的请求正在处理 |\n| 2XX      | success（成功状态码）      |   请求正常处理完毕 |\n| 3XX | redirection（重定向状态码）      |    需要进行附加操作以完成请求 |\n| 4XX      | client error（客户端错误状态码）      |   服务器无法处理请求 |\n| 5XX | server error（服务器错误状态码）      |    服务器处理请求出错 |\n\n![status](http://cdn.sinacloud.net/woodysblog/http/status.jpg)\n","slug":"http","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x8z0021zvr3a92gayqc","content":"<p>还记得刚开始工作，GET和POST请求我都不知道是什么，尽管在大学学过《计算机网络》。经过1年的工作，初步对此有了认识（发一个异步请求从服务器端获取我需要的东西），感谢 @maxiao 送我这本<a href=\"http://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">《图解HTTP》</a>，让我重新认识HTTP。</p>\n<p>全书的内容很多很多，包括HTTP诞生的背景、版本，它的method、报文结构以及具体参数的解释、状态码，更延伸出HTTPS、身份验证以及web安全等等的知识，有兴趣的同学不妨去读一读，很生动有趣~</p>\n<p>下面只摘录我了解的关于HTTP协议最基础的认识 :)<br><a id=\"more\"></a></p>\n<h3 id=\"一、各种协议和HTTP协议的关系\"><a href=\"#一、各种协议和HTTP协议的关系\" class=\"headerlink\" title=\"一、各种协议和HTTP协议的关系\"></a>一、各种协议和HTTP协议的关系</h3><ol>\n<li>GET 获取资源</li>\n<li>POST 传输实体主体</li>\n<li>PUT 传输文件</li>\n<li>HEAD 获得报文首部</li>\n<li>DELETE 删除文件</li>\n<li>OPTIONS 询问支持的方法</li>\n<li>TRACE 追踪路径</li>\n<li>CONNECT 要求用隧道协议连接代理<br><img src=\"http://cdn.sinacloud.net/woodysblog/http/relation.jpg\" alt=\"HTTP协议跟其他协议的关系\"></li>\n</ol>\n<h3 id=\"二、HTTP的那些方法（method）\"><a href=\"#二、HTTP的那些方法（method）\" class=\"headerlink\" title=\"二、HTTP的那些方法（method）\"></a>二、HTTP的那些方法（method）</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/http/method-1.jpg\" alt=\"method-1\"></p>\n<hr>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/http/method-2.jpg\" alt=\"method-2\"></p>\n<hr>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/http/method-3.jpg\" alt=\"method-3\"></p>\n<h3 id=\"三、HTTP报文结构\"><a href=\"#三、HTTP报文结构\" class=\"headerlink\" title=\"三、HTTP报文结构\"></a>三、HTTP报文结构</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/http/content.jpg\" alt=\"content\"></p>\n<h3 id=\"四、状态码\"><a href=\"#四、状态码\" class=\"headerlink\" title=\"四、状态码\"></a>四、状态码</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:right\">原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td style=\"text-align:center\">information（信息性状态码）</td>\n<td style=\"text-align:right\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td style=\"text-align:center\">success（成功状态码）</td>\n<td style=\"text-align:right\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td style=\"text-align:center\">redirection（重定向状态码）</td>\n<td style=\"text-align:right\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td style=\"text-align:center\">client error（客户端错误状态码）</td>\n<td style=\"text-align:right\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td style=\"text-align:center\">server error（服务器错误状态码）</td>\n<td style=\"text-align:right\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/http/status.jpg\" alt=\"status\"></p>\n","site":{"data":{}},"excerpt":"<p>还记得刚开始工作，GET和POST请求我都不知道是什么，尽管在大学学过《计算机网络》。经过1年的工作，初步对此有了认识（发一个异步请求从服务器端获取我需要的东西），感谢 @maxiao 送我这本<a href=\"http://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">《图解HTTP》</a>，让我重新认识HTTP。</p>\n<p>全书的内容很多很多，包括HTTP诞生的背景、版本，它的method、报文结构以及具体参数的解释、状态码，更延伸出HTTPS、身份验证以及web安全等等的知识，有兴趣的同学不妨去读一读，很生动有趣~</p>\n<p>下面只摘录我了解的关于HTTP协议最基础的认识 :)<br>","more":"</p>\n<h3 id=\"一、各种协议和HTTP协议的关系\"><a href=\"#一、各种协议和HTTP协议的关系\" class=\"headerlink\" title=\"一、各种协议和HTTP协议的关系\"></a>一、各种协议和HTTP协议的关系</h3><ol>\n<li>GET 获取资源</li>\n<li>POST 传输实体主体</li>\n<li>PUT 传输文件</li>\n<li>HEAD 获得报文首部</li>\n<li>DELETE 删除文件</li>\n<li>OPTIONS 询问支持的方法</li>\n<li>TRACE 追踪路径</li>\n<li>CONNECT 要求用隧道协议连接代理<br><img src=\"http://cdn.sinacloud.net/woodysblog/http/relation.jpg\" alt=\"HTTP协议跟其他协议的关系\"></li>\n</ol>\n<h3 id=\"二、HTTP的那些方法（method）\"><a href=\"#二、HTTP的那些方法（method）\" class=\"headerlink\" title=\"二、HTTP的那些方法（method）\"></a>二、HTTP的那些方法（method）</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/http/method-1.jpg\" alt=\"method-1\"></p>\n<hr>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/http/method-2.jpg\" alt=\"method-2\"></p>\n<hr>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/http/method-3.jpg\" alt=\"method-3\"></p>\n<h3 id=\"三、HTTP报文结构\"><a href=\"#三、HTTP报文结构\" class=\"headerlink\" title=\"三、HTTP报文结构\"></a>三、HTTP报文结构</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/http/content.jpg\" alt=\"content\"></p>\n<h3 id=\"四、状态码\"><a href=\"#四、状态码\" class=\"headerlink\" title=\"四、状态码\"></a>四、状态码</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:right\">原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td style=\"text-align:center\">information（信息性状态码）</td>\n<td style=\"text-align:right\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td style=\"text-align:center\">success（成功状态码）</td>\n<td style=\"text-align:right\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td style=\"text-align:center\">redirection（重定向状态码）</td>\n<td style=\"text-align:right\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td style=\"text-align:center\">client error（客户端错误状态码）</td>\n<td style=\"text-align:right\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td style=\"text-align:center\">server error（服务器错误状态码）</td>\n<td style=\"text-align:right\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/http/status.jpg\" alt=\"status\"></p>"},{"title":"开箱即用，Hexo博客的github+server自动部署","date":"2018-05-26T06:35:18.000Z","_content":"\n![\"Travis CI\"](http://lc-wpyqjumv.cn-n1.lcfile.com/9fb19e9b112f127c1adc.jpg)\n\n用了一段时间HEXO搭建个人的博客，但每次发布文章，都需要打开电脑`hexo g`编译之后，再提交到服务器上，确实挺麻烦的，和小伙伴聊完他的日志发布方式之后，痛定思痛，**快捷发布日志**这个问题需要解决一下了！Travis CLI搞起来！\n\n## 闲聊日志的快捷发布\n\n前几天，跟小伙伴Pipe一起参加个分享会，看到他做了笔记，结束后我说你发给我呀，他说直接看我博客（[《工作思维方式简记》](https://zhoukekestar.github.io/notes/2018/05/25/better-me.html)）呀！我的天，写完瞬间就发到站点去了！Pipe非常高产，去看看他的[博客](https://zhoukekestar.github.io/notes)，用“高产似母猪”来描述都不足为过，5月份还没有过完，发布了7篇日志。\n\n我问他，怎么做到那么高产？Pipe说，第一点是他的日志是碎片化的偏记录的，不一定要憋出大文章才发，然后就是博客系统要方便，随写随发。\n\n反观我的博客，更新频率真的很低，一方面是喜欢憋专题文章，拖着拖着，然后就没有然后了。另一方面也是发布确实麻烦，电脑编辑好markdown，还要执行各种命令，最后push到github和自己的服务器，文章才能被大家看到，一开始觉得还好蛮geek的，但后来确实由于这些门槛，有打击到那些随时来的写作思绪。\n\nBy the way，Pipe用的是`jekyll`，跟github的持续集成是天生的，而HEXO没有这样的优势。从Hexo换到Jekyll吧，也不是很麻烦，但是我在Hexo生态做了一些东西，还是有点不舍哈。\n\n* [github blog](https://github.com/YuyingWu/blog)：我的博客分支\n* [hexo-generator-index-plus](https://github.com/YuyingWu/hexo-generator-index-plus/blob/master/README.md)：hexo小插件，首页排序生成器，和原生的index-generator比较显著的区别是加了置顶功能，可以在front-matter添加`top`属性即可。\n* [hexo-theme-fresh](https://github.com/YuyingWu/hexo-theme-fresh)：hexo博客主题，绿色小清新，Medium风格。\n\n![\"hexo-theme-fresh效果截屏\"](//lc-wpyqjumv.cn-n1.lcfile.com/3061dbf0241049f3b646.gif)\n\n## HEXO的开发分支与生产分支\n\n仓库分成2个分支，主开发开支dev，以及生产环境的gh-pages分支。\n查看博客可以通过访问[github pages](https://yuyingwu.github.io/blog/)，又或者直接访问我的域名 [wuyuying.com/blog](http://www.wuyuying.com/blog/archives/hexo-travis/)。\n\n### 开发分支 dev\n\n在我的博客里，开发分支是`dev`，目录结构就是一开始`hexo init`后的结构。\n\n```\n- scaffolds // 页面的模板，包括草稿（draft.md）、页面（page.md）、文章（post.md）以及其他自定义模板\n- source // 放页面和文章markdown文档\n- themes // 博客主题\n- _config.yml // 配置文件\n- package.json\n- .travis.yml // 持续集成服务travis的文件\n```\n\n本地开发流程一般是这样。\n\n```\n// hexo server, 启动本地服务器，预览我的文章\nhexo s \n\n// hexo generate，编译文章，把 `source` 里面的页面和文章编译成 `public` 里面的html文件\nhexo g\n\n// hexo deploy，如果 _config.yml 有配置deploy的内容，执行该命令是会执行相应的部署逻辑\nhexo d\n```\n\nHEXO的详细科普和指令在这里就不写了哈，官方文档里都有 [>> 传送门](https://hexo.io/docs/)。\n\n### 生产分支 gh-pages\n\n在`dev`分支里，执行了`hexo g`编译之后，编译后的静态文件会存在`public`文件夹里，而我们就把里面的内容挪到最终的生产环境分支`gh-pages`里，也就是最终我们看到的静态博客。\n\n当我们在github里把github-pages服务打开，并渲染`gh-pages`分支，我们就能访问自己的博客了（[https://yuyingwu.github.io/blog/](https://yuyingwu.github.io/blog/)）。\n\n![\"看看我的博客\"](//lc-wpyqjumv.cn-n1.lcfile.com/d3ebf243ea2b0dfd9dd1.png)\n\n## Travis CI\n\n在大致了解HEXO的开发流程之后，我们可以开始考虑，如果要实现快捷发布，是要做什么？  \n`User Story`：**希望可以在github上写一篇文章，提交之后，可以直接在我的线上博客看到**。\n\n在这里，我们用到了提供持续集成（CI, Continuous Integration）服务的[Travis CI](https://travis-ci.org/)，但其实用到的不是它提供的CI服务，而更多的是通过监听分支提交的动态，在集成成功后去执行我们自定义的部署逻辑。\n\n> 持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。\n\n噢，还有些事前准备：\n\n* 先在`dev`分支里，创建`.travis.yml`\n* 在[Travis CLI](https://travis-ci.org/)平台上打开这个分支的CI开关\n\n### 1. 编译并同步到gh-pages\n\n那直接上我的CI配置代码吧。\n\n```yml\nlanguage: node_js\nnode_js: stable\n\naddons: # Travis CI建议加的，自动更新api\n  apt:\n    update: true\n\ncache:\n  directories: \n  - node_modules # 缓存 node_modules\n\ninstall:\n- npm install # 初次安装，在CI环境中，执行安装npm依赖\n\n# before_script: \n\nscript:\n- hexo g # 执行 hexo generate，把文章编译到public中\n\nafter_success: # 执行script成功后，进入到public，把里面的代码提交到博客的gh-pages分支\n- cd ./public\n- git init\n- git config user.name \"Yuying Wu\"\n- git config user.email \"wuyuying1128@gmail.com\"\n- git add .\n- git commit -m \"Update site\"\n- git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:gh-pages\n\nbranches:\n  only:\n  - dev # CI 只针对分支 dev\n\nenv:\n  global: # 全局变量，上面的提交到github的命令有用到\n  - GH_REF: github.com/YuyingWu/blog.git\n  - secure: \n# secure是自动生成的，执行`travis encrypt 'GH_TOKEN=${your_github_personal_access_token}' --add`\n```\n\n相信代码和注释写得很清楚了，有个地方需要进一步解释的，github提交那part，涉及github access token的生成和加密。\n\n1. 生成github的[Personal Access Tokens](https://github.com/settings/tokens)（打开分支提交的权限）\n2. 安装Travis CLI `gem install travis`（如果登录遇到环境问题，可以看看下面参考文章里面的解决方案）\n3. 进入到本地`dev`目录下（带有`.travis.yml`），执行`travis login`登录，再执行`travis encrypt 'GH_TOKEN=${your_github_personal_access_token}' --add`加密你的personal access token（也就是后来`.travis.yml`的`env.global.secure`的值）\n\n把`.travis.yml`提交之后，看看Travis CLI上，开始持续集成了哈。\n\n![\"开始准备\"](//lc-wpyqjumv.cn-n1.lcfile.com/cbf00765c8f94a151965.png)\n![\"after_success把代码部署到gh-pages\"](//lc-wpyqjumv.cn-n1.lcfile.com/b82303e0f85deb2088ce.png)\n\n大功告成，集成之后，在github pages的页面上也能看到文章的更新。\n\n### 2. CI到我的服务器\n\n我的服务器是DO家（Digital Ocean）的，那一开始服务器初始化的过程，大家可以参考各个server商提供的setup文档哈，总的来说，在本地有个服务器信任的`id_rsa`的ssh文件，我们是可以通过`ssh user@ip_address`登录到服务器的。\n\n```\n# 这个命令会自动把 id_rsa 加密传送到 .git 指定的仓库对应的 travis 中去（在我本地这个文件叫qq_rsa，不是默认的id_rsa）\ntravis encrypt-file ~/.ssh/id_rsa --add\n```\n\n执行这个命令后，`.travis.yml`多了一行代码：（注意把其中的转义符`\\`干掉哈），也会在分支目录下生成一个`id_rsa.enc`的加密文件，记得把这个文件也提交上去哟。\n\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv\n  -in qq_rsa.enc -out ~/.ssh/id_rsa -d\n```\n\n然后为了保证在Travis里面能正常执行，我们处理下运行环境的rsa文件权限和输出提示信息，before_install如下。\n\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv\n  -in qq_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- echo -e \"Host 主机IP地址\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n```\n\n最后，在`after_success`里添加**拷贝目标文件到服务器目标目录**的操作，就大功告成了！\n\n```\nafter_success\n# other actions\n- scp -o stricthostkeychecking=no -r ./* root@138.68.161.48:/home/wyyNode/public/blog/\n```\n\n## 参考文章\n\n* [如何快速搭建一个有域名且持续集成的hexo博客(2.0版)](https://juejin.im/post/596e39916fb9a06baf2ed273) - [Eva-Yue](https://github.com/zytx121)\n* [Hexo 自动部署到 Github](http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/) - [三点水](http://lotabout.me/)\n* [持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html) - 阮一峰\n* [\"no implicit conversion of nil into String\" when logging in](https://github.com/travis-ci/travis.rb/issues/190) - 在执行`travis login`遇到的问题的解决方案\n* [Deploy to GitHub pages from Travis CI](https://iamstarkov.com/deploy-gh-pages-from-travis/)\n* [使用 Travis 将 GitHub 文件上传传至服务器](https://segmentfault.com/a/1190000009093621) - [Godi13](https://github.com/Godi13)\n","source":"_posts/hexo-travis.md","raw":"---\ntitle: 开箱即用，Hexo博客的github+server自动部署\ndate: 2018-05-26 14:35:18\ntags:\n  - blog\n  - travisCI\n  - CI\n  - hexo\n---\n\n![\"Travis CI\"](http://lc-wpyqjumv.cn-n1.lcfile.com/9fb19e9b112f127c1adc.jpg)\n\n用了一段时间HEXO搭建个人的博客，但每次发布文章，都需要打开电脑`hexo g`编译之后，再提交到服务器上，确实挺麻烦的，和小伙伴聊完他的日志发布方式之后，痛定思痛，**快捷发布日志**这个问题需要解决一下了！Travis CLI搞起来！\n\n## 闲聊日志的快捷发布\n\n前几天，跟小伙伴Pipe一起参加个分享会，看到他做了笔记，结束后我说你发给我呀，他说直接看我博客（[《工作思维方式简记》](https://zhoukekestar.github.io/notes/2018/05/25/better-me.html)）呀！我的天，写完瞬间就发到站点去了！Pipe非常高产，去看看他的[博客](https://zhoukekestar.github.io/notes)，用“高产似母猪”来描述都不足为过，5月份还没有过完，发布了7篇日志。\n\n我问他，怎么做到那么高产？Pipe说，第一点是他的日志是碎片化的偏记录的，不一定要憋出大文章才发，然后就是博客系统要方便，随写随发。\n\n反观我的博客，更新频率真的很低，一方面是喜欢憋专题文章，拖着拖着，然后就没有然后了。另一方面也是发布确实麻烦，电脑编辑好markdown，还要执行各种命令，最后push到github和自己的服务器，文章才能被大家看到，一开始觉得还好蛮geek的，但后来确实由于这些门槛，有打击到那些随时来的写作思绪。\n\nBy the way，Pipe用的是`jekyll`，跟github的持续集成是天生的，而HEXO没有这样的优势。从Hexo换到Jekyll吧，也不是很麻烦，但是我在Hexo生态做了一些东西，还是有点不舍哈。\n\n* [github blog](https://github.com/YuyingWu/blog)：我的博客分支\n* [hexo-generator-index-plus](https://github.com/YuyingWu/hexo-generator-index-plus/blob/master/README.md)：hexo小插件，首页排序生成器，和原生的index-generator比较显著的区别是加了置顶功能，可以在front-matter添加`top`属性即可。\n* [hexo-theme-fresh](https://github.com/YuyingWu/hexo-theme-fresh)：hexo博客主题，绿色小清新，Medium风格。\n\n![\"hexo-theme-fresh效果截屏\"](//lc-wpyqjumv.cn-n1.lcfile.com/3061dbf0241049f3b646.gif)\n\n## HEXO的开发分支与生产分支\n\n仓库分成2个分支，主开发开支dev，以及生产环境的gh-pages分支。\n查看博客可以通过访问[github pages](https://yuyingwu.github.io/blog/)，又或者直接访问我的域名 [wuyuying.com/blog](http://www.wuyuying.com/blog/archives/hexo-travis/)。\n\n### 开发分支 dev\n\n在我的博客里，开发分支是`dev`，目录结构就是一开始`hexo init`后的结构。\n\n```\n- scaffolds // 页面的模板，包括草稿（draft.md）、页面（page.md）、文章（post.md）以及其他自定义模板\n- source // 放页面和文章markdown文档\n- themes // 博客主题\n- _config.yml // 配置文件\n- package.json\n- .travis.yml // 持续集成服务travis的文件\n```\n\n本地开发流程一般是这样。\n\n```\n// hexo server, 启动本地服务器，预览我的文章\nhexo s \n\n// hexo generate，编译文章，把 `source` 里面的页面和文章编译成 `public` 里面的html文件\nhexo g\n\n// hexo deploy，如果 _config.yml 有配置deploy的内容，执行该命令是会执行相应的部署逻辑\nhexo d\n```\n\nHEXO的详细科普和指令在这里就不写了哈，官方文档里都有 [>> 传送门](https://hexo.io/docs/)。\n\n### 生产分支 gh-pages\n\n在`dev`分支里，执行了`hexo g`编译之后，编译后的静态文件会存在`public`文件夹里，而我们就把里面的内容挪到最终的生产环境分支`gh-pages`里，也就是最终我们看到的静态博客。\n\n当我们在github里把github-pages服务打开，并渲染`gh-pages`分支，我们就能访问自己的博客了（[https://yuyingwu.github.io/blog/](https://yuyingwu.github.io/blog/)）。\n\n![\"看看我的博客\"](//lc-wpyqjumv.cn-n1.lcfile.com/d3ebf243ea2b0dfd9dd1.png)\n\n## Travis CI\n\n在大致了解HEXO的开发流程之后，我们可以开始考虑，如果要实现快捷发布，是要做什么？  \n`User Story`：**希望可以在github上写一篇文章，提交之后，可以直接在我的线上博客看到**。\n\n在这里，我们用到了提供持续集成（CI, Continuous Integration）服务的[Travis CI](https://travis-ci.org/)，但其实用到的不是它提供的CI服务，而更多的是通过监听分支提交的动态，在集成成功后去执行我们自定义的部署逻辑。\n\n> 持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。\n\n噢，还有些事前准备：\n\n* 先在`dev`分支里，创建`.travis.yml`\n* 在[Travis CLI](https://travis-ci.org/)平台上打开这个分支的CI开关\n\n### 1. 编译并同步到gh-pages\n\n那直接上我的CI配置代码吧。\n\n```yml\nlanguage: node_js\nnode_js: stable\n\naddons: # Travis CI建议加的，自动更新api\n  apt:\n    update: true\n\ncache:\n  directories: \n  - node_modules # 缓存 node_modules\n\ninstall:\n- npm install # 初次安装，在CI环境中，执行安装npm依赖\n\n# before_script: \n\nscript:\n- hexo g # 执行 hexo generate，把文章编译到public中\n\nafter_success: # 执行script成功后，进入到public，把里面的代码提交到博客的gh-pages分支\n- cd ./public\n- git init\n- git config user.name \"Yuying Wu\"\n- git config user.email \"wuyuying1128@gmail.com\"\n- git add .\n- git commit -m \"Update site\"\n- git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:gh-pages\n\nbranches:\n  only:\n  - dev # CI 只针对分支 dev\n\nenv:\n  global: # 全局变量，上面的提交到github的命令有用到\n  - GH_REF: github.com/YuyingWu/blog.git\n  - secure: \n# secure是自动生成的，执行`travis encrypt 'GH_TOKEN=${your_github_personal_access_token}' --add`\n```\n\n相信代码和注释写得很清楚了，有个地方需要进一步解释的，github提交那part，涉及github access token的生成和加密。\n\n1. 生成github的[Personal Access Tokens](https://github.com/settings/tokens)（打开分支提交的权限）\n2. 安装Travis CLI `gem install travis`（如果登录遇到环境问题，可以看看下面参考文章里面的解决方案）\n3. 进入到本地`dev`目录下（带有`.travis.yml`），执行`travis login`登录，再执行`travis encrypt 'GH_TOKEN=${your_github_personal_access_token}' --add`加密你的personal access token（也就是后来`.travis.yml`的`env.global.secure`的值）\n\n把`.travis.yml`提交之后，看看Travis CLI上，开始持续集成了哈。\n\n![\"开始准备\"](//lc-wpyqjumv.cn-n1.lcfile.com/cbf00765c8f94a151965.png)\n![\"after_success把代码部署到gh-pages\"](//lc-wpyqjumv.cn-n1.lcfile.com/b82303e0f85deb2088ce.png)\n\n大功告成，集成之后，在github pages的页面上也能看到文章的更新。\n\n### 2. CI到我的服务器\n\n我的服务器是DO家（Digital Ocean）的，那一开始服务器初始化的过程，大家可以参考各个server商提供的setup文档哈，总的来说，在本地有个服务器信任的`id_rsa`的ssh文件，我们是可以通过`ssh user@ip_address`登录到服务器的。\n\n```\n# 这个命令会自动把 id_rsa 加密传送到 .git 指定的仓库对应的 travis 中去（在我本地这个文件叫qq_rsa，不是默认的id_rsa）\ntravis encrypt-file ~/.ssh/id_rsa --add\n```\n\n执行这个命令后，`.travis.yml`多了一行代码：（注意把其中的转义符`\\`干掉哈），也会在分支目录下生成一个`id_rsa.enc`的加密文件，记得把这个文件也提交上去哟。\n\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv\n  -in qq_rsa.enc -out ~/.ssh/id_rsa -d\n```\n\n然后为了保证在Travis里面能正常执行，我们处理下运行环境的rsa文件权限和输出提示信息，before_install如下。\n\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv\n  -in qq_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- echo -e \"Host 主机IP地址\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n```\n\n最后，在`after_success`里添加**拷贝目标文件到服务器目标目录**的操作，就大功告成了！\n\n```\nafter_success\n# other actions\n- scp -o stricthostkeychecking=no -r ./* root@138.68.161.48:/home/wyyNode/public/blog/\n```\n\n## 参考文章\n\n* [如何快速搭建一个有域名且持续集成的hexo博客(2.0版)](https://juejin.im/post/596e39916fb9a06baf2ed273) - [Eva-Yue](https://github.com/zytx121)\n* [Hexo 自动部署到 Github](http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/) - [三点水](http://lotabout.me/)\n* [持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html) - 阮一峰\n* [\"no implicit conversion of nil into String\" when logging in](https://github.com/travis-ci/travis.rb/issues/190) - 在执行`travis login`遇到的问题的解决方案\n* [Deploy to GitHub pages from Travis CI](https://iamstarkov.com/deploy-gh-pages-from-travis/)\n* [使用 Travis 将 GitHub 文件上传传至服务器](https://segmentfault.com/a/1190000009093621) - [Godi13](https://github.com/Godi13)\n","slug":"hexo-travis","published":1,"updated":"2018-06-02T12:20:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x900023zvr3758vwsvu","content":"<p><img src=\"http://lc-wpyqjumv.cn-n1.lcfile.com/9fb19e9b112f127c1adc.jpg\" alt=\"&quot;Travis CI&quot;\"></p>\n<p>用了一段时间HEXO搭建个人的博客，但每次发布文章，都需要打开电脑<code>hexo g</code>编译之后，再提交到服务器上，确实挺麻烦的，和小伙伴聊完他的日志发布方式之后，痛定思痛，<strong>快捷发布日志</strong>这个问题需要解决一下了！Travis CLI搞起来！</p>\n<h2 id=\"闲聊日志的快捷发布\"><a href=\"#闲聊日志的快捷发布\" class=\"headerlink\" title=\"闲聊日志的快捷发布\"></a>闲聊日志的快捷发布</h2><p>前几天，跟小伙伴Pipe一起参加个分享会，看到他做了笔记，结束后我说你发给我呀，他说直接看我博客（<a href=\"https://zhoukekestar.github.io/notes/2018/05/25/better-me.html\" target=\"_blank\" rel=\"noopener\">《工作思维方式简记》</a>）呀！我的天，写完瞬间就发到站点去了！Pipe非常高产，去看看他的<a href=\"https://zhoukekestar.github.io/notes\" target=\"_blank\" rel=\"noopener\">博客</a>，用“高产似母猪”来描述都不足为过，5月份还没有过完，发布了7篇日志。</p>\n<p>我问他，怎么做到那么高产？Pipe说，第一点是他的日志是碎片化的偏记录的，不一定要憋出大文章才发，然后就是博客系统要方便，随写随发。</p>\n<p>反观我的博客，更新频率真的很低，一方面是喜欢憋专题文章，拖着拖着，然后就没有然后了。另一方面也是发布确实麻烦，电脑编辑好markdown，还要执行各种命令，最后push到github和自己的服务器，文章才能被大家看到，一开始觉得还好蛮geek的，但后来确实由于这些门槛，有打击到那些随时来的写作思绪。</p>\n<p>By the way，Pipe用的是<code>jekyll</code>，跟github的持续集成是天生的，而HEXO没有这样的优势。从Hexo换到Jekyll吧，也不是很麻烦，但是我在Hexo生态做了一些东西，还是有点不舍哈。</p>\n<ul>\n<li><a href=\"https://github.com/YuyingWu/blog\" target=\"_blank\" rel=\"noopener\">github blog</a>：我的博客分支</li>\n<li><a href=\"https://github.com/YuyingWu/hexo-generator-index-plus/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">hexo-generator-index-plus</a>：hexo小插件，首页排序生成器，和原生的index-generator比较显著的区别是加了置顶功能，可以在front-matter添加<code>top</code>属性即可。</li>\n<li><a href=\"https://github.com/YuyingWu/hexo-theme-fresh\" target=\"_blank\" rel=\"noopener\">hexo-theme-fresh</a>：hexo博客主题，绿色小清新，Medium风格。</li>\n</ul>\n<p><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/3061dbf0241049f3b646.gif\" alt=\"&quot;hexo-theme-fresh效果截屏&quot;\"></p>\n<h2 id=\"HEXO的开发分支与生产分支\"><a href=\"#HEXO的开发分支与生产分支\" class=\"headerlink\" title=\"HEXO的开发分支与生产分支\"></a>HEXO的开发分支与生产分支</h2><p>仓库分成2个分支，主开发开支dev，以及生产环境的gh-pages分支。<br>查看博客可以通过访问<a href=\"https://yuyingwu.github.io/blog/\" target=\"_blank\" rel=\"noopener\">github pages</a>，又或者直接访问我的域名 <a href=\"http://www.wuyuying.com/blog/archives/hexo-travis/\" target=\"_blank\" rel=\"noopener\">wuyuying.com/blog</a>。</p>\n<h3 id=\"开发分支-dev\"><a href=\"#开发分支-dev\" class=\"headerlink\" title=\"开发分支 dev\"></a>开发分支 dev</h3><p>在我的博客里，开发分支是<code>dev</code>，目录结构就是一开始<code>hexo init</code>后的结构。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\"> scaffolds /<span class=\"regexp\">/ 页面的模板，包括草稿（draft.md）、页面（page.md）、文章（post.md）以及其他自定义模板</span></span></span><br><span class=\"line\"><span class=\"ruby\">- source /<span class=\"regexp\">/ 放页面和文章markdown文档</span></span></span><br><span class=\"line\"><span class=\"ruby\">- themes /<span class=\"regexp\">/ 博客主题</span></span></span><br><span class=\"line\"><span class=\"ruby\">- _config.yml /<span class=\"regexp\">/ 配置文件</span></span></span><br><span class=\"line\"><span class=\"ruby\">- package.json</span></span><br><span class=\"line\"><span class=\"ruby\">- .travis.yml /<span class=\"regexp\">/ 持续集成服务travis的文件</span></span></span><br></pre></td></tr></table></figure>\n<p>本地开发流程一般是这样。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> hexo server, 启动本地服务器，预览我的文章</span><br><span class=\"line\">hexo s </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> hexo generate，编译文章，把 `source` 里面的页面和文章编译成 `public` 里面的html文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> hexo <span class=\"keyword\">deploy</span>，如果 _config.yml 有配置<span class=\"keyword\">deploy</span>的内容，执行该命令是会执行相应的部署逻辑</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>HEXO的详细科普和指令在这里就不写了哈，官方文档里都有 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">&gt;&gt; 传送门</a>。</p>\n<h3 id=\"生产分支-gh-pages\"><a href=\"#生产分支-gh-pages\" class=\"headerlink\" title=\"生产分支 gh-pages\"></a>生产分支 gh-pages</h3><p>在<code>dev</code>分支里，执行了<code>hexo g</code>编译之后，编译后的静态文件会存在<code>public</code>文件夹里，而我们就把里面的内容挪到最终的生产环境分支<code>gh-pages</code>里，也就是最终我们看到的静态博客。</p>\n<p>当我们在github里把github-pages服务打开，并渲染<code>gh-pages</code>分支，我们就能访问自己的博客了（<a href=\"https://yuyingwu.github.io/blog/\" target=\"_blank\" rel=\"noopener\">https://yuyingwu.github.io/blog/</a>）。</p>\n<p><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/d3ebf243ea2b0dfd9dd1.png\" alt=\"&quot;看看我的博客&quot;\"></p>\n<h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p>在大致了解HEXO的开发流程之后，我们可以开始考虑，如果要实现快捷发布，是要做什么？<br><code>User Story</code>：<strong>希望可以在github上写一篇文章，提交之后，可以直接在我的线上博客看到</strong>。</p>\n<p>在这里，我们用到了提供持续集成（CI, Continuous Integration）服务的<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI</a>，但其实用到的不是它提供的CI服务，而更多的是通过监听分支提交的动态，在集成成功后去执行我们自定义的部署逻辑。</p>\n<blockquote>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<p>噢，还有些事前准备：</p>\n<ul>\n<li>先在<code>dev</code>分支里，创建<code>.travis.yml</code></li>\n<li>在<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CLI</a>平台上打开这个分支的CI开关</li>\n</ul>\n<h3 id=\"1-编译并同步到gh-pages\"><a href=\"#1-编译并同步到gh-pages\" class=\"headerlink\" title=\"1. 编译并同步到gh-pages\"></a>1. 编译并同步到gh-pages</h3><p>那直接上我的CI配置代码吧。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">addons:</span> <span class=\"comment\"># Travis CI建议加的，自动更新api</span></span><br><span class=\"line\"><span class=\"attr\">  apt:</span></span><br><span class=\"line\"><span class=\"attr\">    update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span> </span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">node_modules</span> <span class=\"comment\"># 缓存 node_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"comment\"># 初次安装，在CI环境中，执行安装npm依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># before_script: </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span> <span class=\"comment\"># 执行 hexo generate，把文章编译到public中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_success:</span> <span class=\"comment\"># 执行script成功后，进入到public，把里面的代码提交到博客的gh-pages分支</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"Yuying Wu\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">\"wuyuying1128@gmail.com\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"bullet\">-m</span> <span class=\"string\">\"Update site\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"bullet\">--force</span> <span class=\"bullet\">--quiet</span> <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> <span class=\"attr\">master:gh-pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">dev</span> <span class=\"comment\"># CI 只针对分支 dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">  global:</span> <span class=\"comment\"># 全局变量，上面的提交到github的命令有用到</span></span><br><span class=\"line\"><span class=\"attr\">  - GH_REF:</span> <span class=\"string\">github.com/YuyingWu/blog.git</span></span><br><span class=\"line\"><span class=\"attr\">  - secure:</span> </span><br><span class=\"line\"><span class=\"comment\"># secure是自动生成的，执行`travis encrypt 'GH_TOKEN=$&#123;your_github_personal_access_token&#125;' --add`</span></span><br></pre></td></tr></table></figure>\n<p>相信代码和注释写得很清楚了，有个地方需要进一步解释的，github提交那part，涉及github access token的生成和加密。</p>\n<ol>\n<li>生成github的<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">Personal Access Tokens</a>（打开分支提交的权限）</li>\n<li>安装Travis CLI <code>gem install travis</code>（如果登录遇到环境问题，可以看看下面参考文章里面的解决方案）</li>\n<li>进入到本地<code>dev</code>目录下（带有<code>.travis.yml</code>），执行<code>travis login</code>登录，再执行<code>travis encrypt &#39;GH_TOKEN=${your_github_personal_access_token}&#39; --add</code>加密你的personal access token（也就是后来<code>.travis.yml</code>的<code>env.global.secure</code>的值）</li>\n</ol>\n<p>把<code>.travis.yml</code>提交之后，看看Travis CLI上，开始持续集成了哈。</p>\n<p><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/cbf00765c8f94a151965.png\" alt=\"&quot;开始准备&quot;\"><br><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/b82303e0f85deb2088ce.png\" alt=\"&quot;after_success把代码部署到gh-pages&quot;\"></p>\n<p>大功告成，集成之后，在github pages的页面上也能看到文章的更新。</p>\n<h3 id=\"2-CI到我的服务器\"><a href=\"#2-CI到我的服务器\" class=\"headerlink\" title=\"2. CI到我的服务器\"></a>2. CI到我的服务器</h3><p>我的服务器是DO家（Digital Ocean）的，那一开始服务器初始化的过程，大家可以参考各个server商提供的setup文档哈，总的来说，在本地有个服务器信任的<code>id_rsa</code>的ssh文件，我们是可以通过<code>ssh user@ip_address</code>登录到服务器的。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个命令会自动把 id_rsa 加密传送到 .git 指定的仓库对应的 travis 中去（在我本地这个文件叫qq_rsa，不是默认的id_rsa）</span></span><br><span class=\"line\">travis <span class=\"built_in\">encrypt</span>-<span class=\"built_in\">file</span> ~/.ssh/id_rsa <span class=\"comment\">--add</span></span><br></pre></td></tr></table></figure>\n<p>执行这个命令后，<code>.travis.yml</code>多了一行代码：（注意把其中的转义符<code>\\</code>干掉哈），也会在分支目录下生成一个<code>id_rsa.enc</code>的加密文件，记得把这个文件也提交上去哟。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">-<span class=\"ruby\"> openssl aes-<span class=\"number\">256</span>-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv</span></span><br><span class=\"line\"><span class=\"ruby\">  -<span class=\"keyword\">in</span> qq_rsa.enc -out ~<span class=\"regexp\">/.ssh/id</span>_rsa -d</span></span><br></pre></td></tr></table></figure>\n<p>然后为了保证在Travis里面能正常执行，我们处理下运行环境的rsa文件权限和输出提示信息，before_install如下。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">-<span class=\"ruby\"> openssl aes-<span class=\"number\">256</span>-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv</span></span><br><span class=\"line\"><span class=\"ruby\">  -<span class=\"keyword\">in</span> qq_rsa.enc -out ~<span class=\"regexp\">/.ssh/id</span>_rsa -d</span></span><br><span class=\"line\"><span class=\"ruby\">- chmod <span class=\"number\">600</span> ~<span class=\"regexp\">/.ssh/id</span>_rsa</span></span><br><span class=\"line\"><span class=\"ruby\">- echo -e <span class=\"string\">\"Host 主机IP地址\\n\\tStrictHostKeyChecking no\\n\"</span> <span class=\"meta\">&gt;&gt; </span>~<span class=\"regexp\">/.ssh/config</span></span></span><br></pre></td></tr></table></figure>\n<p>最后，在<code>after_success</code>里添加<strong>拷贝目标文件到服务器目标目录</strong>的操作，就大功告成了！</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_success</span><br><span class=\"line\"><span class=\"comment\"># other actions</span></span><br><span class=\"line\">- scp -o stricthostkeychecking=no -r ./* root<span class=\"variable\">@138</span>.<span class=\"number\">68.161</span>.<span class=\"number\">48</span><span class=\"symbol\">:/home/wyyNode/public/blog/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://juejin.im/post/596e39916fb9a06baf2ed273\" target=\"_blank\" rel=\"noopener\">如何快速搭建一个有域名且持续集成的hexo博客(2.0版)</a> - <a href=\"https://github.com/zytx121\" target=\"_blank\" rel=\"noopener\">Eva-Yue</a></li>\n<li><a href=\"http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/\" target=\"_blank\" rel=\"noopener\">Hexo 自动部署到 Github</a> - <a href=\"http://lotabout.me/\" target=\"_blank\" rel=\"noopener\">三点水</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a> - 阮一峰</li>\n<li><a href=\"https://github.com/travis-ci/travis.rb/issues/190\" target=\"_blank\" rel=\"noopener\">“no implicit conversion of nil into String” when logging in</a> - 在执行<code>travis login</code>遇到的问题的解决方案</li>\n<li><a href=\"https://iamstarkov.com/deploy-gh-pages-from-travis/\" target=\"_blank\" rel=\"noopener\">Deploy to GitHub pages from Travis CI</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000009093621\" target=\"_blank\" rel=\"noopener\">使用 Travis 将 GitHub 文件上传传至服务器</a> - <a href=\"https://github.com/Godi13\" target=\"_blank\" rel=\"noopener\">Godi13</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://lc-wpyqjumv.cn-n1.lcfile.com/9fb19e9b112f127c1adc.jpg\" alt=\"&quot;Travis CI&quot;\"></p>\n<p>用了一段时间HEXO搭建个人的博客，但每次发布文章，都需要打开电脑<code>hexo g</code>编译之后，再提交到服务器上，确实挺麻烦的，和小伙伴聊完他的日志发布方式之后，痛定思痛，<strong>快捷发布日志</strong>这个问题需要解决一下了！Travis CLI搞起来！</p>\n<h2 id=\"闲聊日志的快捷发布\"><a href=\"#闲聊日志的快捷发布\" class=\"headerlink\" title=\"闲聊日志的快捷发布\"></a>闲聊日志的快捷发布</h2><p>前几天，跟小伙伴Pipe一起参加个分享会，看到他做了笔记，结束后我说你发给我呀，他说直接看我博客（<a href=\"https://zhoukekestar.github.io/notes/2018/05/25/better-me.html\" target=\"_blank\" rel=\"noopener\">《工作思维方式简记》</a>）呀！我的天，写完瞬间就发到站点去了！Pipe非常高产，去看看他的<a href=\"https://zhoukekestar.github.io/notes\" target=\"_blank\" rel=\"noopener\">博客</a>，用“高产似母猪”来描述都不足为过，5月份还没有过完，发布了7篇日志。</p>\n<p>我问他，怎么做到那么高产？Pipe说，第一点是他的日志是碎片化的偏记录的，不一定要憋出大文章才发，然后就是博客系统要方便，随写随发。</p>\n<p>反观我的博客，更新频率真的很低，一方面是喜欢憋专题文章，拖着拖着，然后就没有然后了。另一方面也是发布确实麻烦，电脑编辑好markdown，还要执行各种命令，最后push到github和自己的服务器，文章才能被大家看到，一开始觉得还好蛮geek的，但后来确实由于这些门槛，有打击到那些随时来的写作思绪。</p>\n<p>By the way，Pipe用的是<code>jekyll</code>，跟github的持续集成是天生的，而HEXO没有这样的优势。从Hexo换到Jekyll吧，也不是很麻烦，但是我在Hexo生态做了一些东西，还是有点不舍哈。</p>\n<ul>\n<li><a href=\"https://github.com/YuyingWu/blog\" target=\"_blank\" rel=\"noopener\">github blog</a>：我的博客分支</li>\n<li><a href=\"https://github.com/YuyingWu/hexo-generator-index-plus/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">hexo-generator-index-plus</a>：hexo小插件，首页排序生成器，和原生的index-generator比较显著的区别是加了置顶功能，可以在front-matter添加<code>top</code>属性即可。</li>\n<li><a href=\"https://github.com/YuyingWu/hexo-theme-fresh\" target=\"_blank\" rel=\"noopener\">hexo-theme-fresh</a>：hexo博客主题，绿色小清新，Medium风格。</li>\n</ul>\n<p><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/3061dbf0241049f3b646.gif\" alt=\"&quot;hexo-theme-fresh效果截屏&quot;\"></p>\n<h2 id=\"HEXO的开发分支与生产分支\"><a href=\"#HEXO的开发分支与生产分支\" class=\"headerlink\" title=\"HEXO的开发分支与生产分支\"></a>HEXO的开发分支与生产分支</h2><p>仓库分成2个分支，主开发开支dev，以及生产环境的gh-pages分支。<br>查看博客可以通过访问<a href=\"https://yuyingwu.github.io/blog/\" target=\"_blank\" rel=\"noopener\">github pages</a>，又或者直接访问我的域名 <a href=\"http://www.wuyuying.com/blog/archives/hexo-travis/\" target=\"_blank\" rel=\"noopener\">wuyuying.com/blog</a>。</p>\n<h3 id=\"开发分支-dev\"><a href=\"#开发分支-dev\" class=\"headerlink\" title=\"开发分支 dev\"></a>开发分支 dev</h3><p>在我的博客里，开发分支是<code>dev</code>，目录结构就是一开始<code>hexo init</code>后的结构。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\"> scaffolds /<span class=\"regexp\">/ 页面的模板，包括草稿（draft.md）、页面（page.md）、文章（post.md）以及其他自定义模板</span></span></span><br><span class=\"line\"><span class=\"ruby\">- source /<span class=\"regexp\">/ 放页面和文章markdown文档</span></span></span><br><span class=\"line\"><span class=\"ruby\">- themes /<span class=\"regexp\">/ 博客主题</span></span></span><br><span class=\"line\"><span class=\"ruby\">- _config.yml /<span class=\"regexp\">/ 配置文件</span></span></span><br><span class=\"line\"><span class=\"ruby\">- package.json</span></span><br><span class=\"line\"><span class=\"ruby\">- .travis.yml /<span class=\"regexp\">/ 持续集成服务travis的文件</span></span></span><br></pre></td></tr></table></figure>\n<p>本地开发流程一般是这样。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> hexo server, 启动本地服务器，预览我的文章</span><br><span class=\"line\">hexo s </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> hexo generate，编译文章，把 `source` 里面的页面和文章编译成 `public` 里面的html文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> hexo <span class=\"keyword\">deploy</span>，如果 _config.yml 有配置<span class=\"keyword\">deploy</span>的内容，执行该命令是会执行相应的部署逻辑</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>HEXO的详细科普和指令在这里就不写了哈，官方文档里都有 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">&gt;&gt; 传送门</a>。</p>\n<h3 id=\"生产分支-gh-pages\"><a href=\"#生产分支-gh-pages\" class=\"headerlink\" title=\"生产分支 gh-pages\"></a>生产分支 gh-pages</h3><p>在<code>dev</code>分支里，执行了<code>hexo g</code>编译之后，编译后的静态文件会存在<code>public</code>文件夹里，而我们就把里面的内容挪到最终的生产环境分支<code>gh-pages</code>里，也就是最终我们看到的静态博客。</p>\n<p>当我们在github里把github-pages服务打开，并渲染<code>gh-pages</code>分支，我们就能访问自己的博客了（<a href=\"https://yuyingwu.github.io/blog/\" target=\"_blank\" rel=\"noopener\">https://yuyingwu.github.io/blog/</a>）。</p>\n<p><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/d3ebf243ea2b0dfd9dd1.png\" alt=\"&quot;看看我的博客&quot;\"></p>\n<h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p>在大致了解HEXO的开发流程之后，我们可以开始考虑，如果要实现快捷发布，是要做什么？<br><code>User Story</code>：<strong>希望可以在github上写一篇文章，提交之后，可以直接在我的线上博客看到</strong>。</p>\n<p>在这里，我们用到了提供持续集成（CI, Continuous Integration）服务的<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI</a>，但其实用到的不是它提供的CI服务，而更多的是通过监听分支提交的动态，在集成成功后去执行我们自定义的部署逻辑。</p>\n<blockquote>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<p>噢，还有些事前准备：</p>\n<ul>\n<li>先在<code>dev</code>分支里，创建<code>.travis.yml</code></li>\n<li>在<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CLI</a>平台上打开这个分支的CI开关</li>\n</ul>\n<h3 id=\"1-编译并同步到gh-pages\"><a href=\"#1-编译并同步到gh-pages\" class=\"headerlink\" title=\"1. 编译并同步到gh-pages\"></a>1. 编译并同步到gh-pages</h3><p>那直接上我的CI配置代码吧。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">addons:</span> <span class=\"comment\"># Travis CI建议加的，自动更新api</span></span><br><span class=\"line\"><span class=\"attr\">  apt:</span></span><br><span class=\"line\"><span class=\"attr\">    update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span> </span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">node_modules</span> <span class=\"comment\"># 缓存 node_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"comment\"># 初次安装，在CI环境中，执行安装npm依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># before_script: </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span> <span class=\"comment\"># 执行 hexo generate，把文章编译到public中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_success:</span> <span class=\"comment\"># 执行script成功后，进入到public，把里面的代码提交到博客的gh-pages分支</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"Yuying Wu\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">\"wuyuying1128@gmail.com\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"bullet\">-m</span> <span class=\"string\">\"Update site\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"bullet\">--force</span> <span class=\"bullet\">--quiet</span> <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> <span class=\"attr\">master:gh-pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">dev</span> <span class=\"comment\"># CI 只针对分支 dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">  global:</span> <span class=\"comment\"># 全局变量，上面的提交到github的命令有用到</span></span><br><span class=\"line\"><span class=\"attr\">  - GH_REF:</span> <span class=\"string\">github.com/YuyingWu/blog.git</span></span><br><span class=\"line\"><span class=\"attr\">  - secure:</span> </span><br><span class=\"line\"><span class=\"comment\"># secure是自动生成的，执行`travis encrypt 'GH_TOKEN=$&#123;your_github_personal_access_token&#125;' --add`</span></span><br></pre></td></tr></table></figure>\n<p>相信代码和注释写得很清楚了，有个地方需要进一步解释的，github提交那part，涉及github access token的生成和加密。</p>\n<ol>\n<li>生成github的<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">Personal Access Tokens</a>（打开分支提交的权限）</li>\n<li>安装Travis CLI <code>gem install travis</code>（如果登录遇到环境问题，可以看看下面参考文章里面的解决方案）</li>\n<li>进入到本地<code>dev</code>目录下（带有<code>.travis.yml</code>），执行<code>travis login</code>登录，再执行<code>travis encrypt &#39;GH_TOKEN=${your_github_personal_access_token}&#39; --add</code>加密你的personal access token（也就是后来<code>.travis.yml</code>的<code>env.global.secure</code>的值）</li>\n</ol>\n<p>把<code>.travis.yml</code>提交之后，看看Travis CLI上，开始持续集成了哈。</p>\n<p><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/cbf00765c8f94a151965.png\" alt=\"&quot;开始准备&quot;\"><br><img src=\"//lc-wpyqjumv.cn-n1.lcfile.com/b82303e0f85deb2088ce.png\" alt=\"&quot;after_success把代码部署到gh-pages&quot;\"></p>\n<p>大功告成，集成之后，在github pages的页面上也能看到文章的更新。</p>\n<h3 id=\"2-CI到我的服务器\"><a href=\"#2-CI到我的服务器\" class=\"headerlink\" title=\"2. CI到我的服务器\"></a>2. CI到我的服务器</h3><p>我的服务器是DO家（Digital Ocean）的，那一开始服务器初始化的过程，大家可以参考各个server商提供的setup文档哈，总的来说，在本地有个服务器信任的<code>id_rsa</code>的ssh文件，我们是可以通过<code>ssh user@ip_address</code>登录到服务器的。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个命令会自动把 id_rsa 加密传送到 .git 指定的仓库对应的 travis 中去（在我本地这个文件叫qq_rsa，不是默认的id_rsa）</span></span><br><span class=\"line\">travis <span class=\"built_in\">encrypt</span>-<span class=\"built_in\">file</span> ~/.ssh/id_rsa <span class=\"comment\">--add</span></span><br></pre></td></tr></table></figure>\n<p>执行这个命令后，<code>.travis.yml</code>多了一行代码：（注意把其中的转义符<code>\\</code>干掉哈），也会在分支目录下生成一个<code>id_rsa.enc</code>的加密文件，记得把这个文件也提交上去哟。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">-<span class=\"ruby\"> openssl aes-<span class=\"number\">256</span>-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv</span></span><br><span class=\"line\"><span class=\"ruby\">  -<span class=\"keyword\">in</span> qq_rsa.enc -out ~<span class=\"regexp\">/.ssh/id</span>_rsa -d</span></span><br></pre></td></tr></table></figure>\n<p>然后为了保证在Travis里面能正常执行，我们处理下运行环境的rsa文件权限和输出提示信息，before_install如下。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">-<span class=\"ruby\"> openssl aes-<span class=\"number\">256</span>-cbc -K $encrypted_3cf6c1fd150f_key -iv $encrypted_3cf6c1fd150f_iv</span></span><br><span class=\"line\"><span class=\"ruby\">  -<span class=\"keyword\">in</span> qq_rsa.enc -out ~<span class=\"regexp\">/.ssh/id</span>_rsa -d</span></span><br><span class=\"line\"><span class=\"ruby\">- chmod <span class=\"number\">600</span> ~<span class=\"regexp\">/.ssh/id</span>_rsa</span></span><br><span class=\"line\"><span class=\"ruby\">- echo -e <span class=\"string\">\"Host 主机IP地址\\n\\tStrictHostKeyChecking no\\n\"</span> <span class=\"meta\">&gt;&gt; </span>~<span class=\"regexp\">/.ssh/config</span></span></span><br></pre></td></tr></table></figure>\n<p>最后，在<code>after_success</code>里添加<strong>拷贝目标文件到服务器目标目录</strong>的操作，就大功告成了！</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_success</span><br><span class=\"line\"><span class=\"comment\"># other actions</span></span><br><span class=\"line\">- scp -o stricthostkeychecking=no -r ./* root<span class=\"variable\">@138</span>.<span class=\"number\">68.161</span>.<span class=\"number\">48</span><span class=\"symbol\">:/home/wyyNode/public/blog/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://juejin.im/post/596e39916fb9a06baf2ed273\" target=\"_blank\" rel=\"noopener\">如何快速搭建一个有域名且持续集成的hexo博客(2.0版)</a> - <a href=\"https://github.com/zytx121\" target=\"_blank\" rel=\"noopener\">Eva-Yue</a></li>\n<li><a href=\"http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/\" target=\"_blank\" rel=\"noopener\">Hexo 自动部署到 Github</a> - <a href=\"http://lotabout.me/\" target=\"_blank\" rel=\"noopener\">三点水</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a> - 阮一峰</li>\n<li><a href=\"https://github.com/travis-ci/travis.rb/issues/190\" target=\"_blank\" rel=\"noopener\">“no implicit conversion of nil into String” when logging in</a> - 在执行<code>travis login</code>遇到的问题的解决方案</li>\n<li><a href=\"https://iamstarkov.com/deploy-gh-pages-from-travis/\" target=\"_blank\" rel=\"noopener\">Deploy to GitHub pages from Travis CI</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000009093621\" target=\"_blank\" rel=\"noopener\">使用 Travis 将 GitHub 文件上传传至服务器</a> - <a href=\"https://github.com/Godi13\" target=\"_blank\" rel=\"noopener\">Godi13</a></li>\n</ul>\n"},{"title":"信息爆炸时代，今天你整理了吗？","id":"216","date":"2016-02-27T09:33:08.000Z","_content":"\n最近在读一本书[《Google工作整理术》](http://book.douban.com/subject/26671649/)，读下来感觉更像是Google产品的大型广告书，书中2个观点非常值得mark：\n\n1.  每个人的组织模式是有个体差异的，希望大家都可以找到适合自己的整理术\n2.  每周抽时间回顾关键信息\n不过如果你想知道整理&amp;记录可以怎么样改变你的生活工作，个人更推荐[《记事本圆梦计划》](http://book.douban.com/subject/2033803/)和[《Evernote超效率数字笔记术》](http://book.douban.com/subject/24524405/)，里面的一些方法、技巧更加详细和具有实战意义。\n\n<!--more-->\n\n## 为什么我们需要整理？\n\n*   信息量爆炸，脑子装不下（好记性不如烂笔头），也没必要全记下\n*   个人成长的记录&amp;回忆（防止各种总结或计划时断片，不记得过去自己干了啥）\n\n### 我最喜欢用的信息收集&amp;整理工具 —— Evernote\n\n再一次强烈推荐看看《Evernote超效率数字笔记术》，搭建属于你自己的印象笔记工作台/生活空间。  \n![evernote-下载](http://cdn.sinacloud.net/woodysblog/information-organize/evernote-download.jpg)\n  \n我从2013年开始使用印象笔记，至今几乎每天都在记录，包括自己写的工作日记、邮件&amp;网页剪贴、旅行攻略等等，现在积累的1500+篇笔记，偶尔有人问起一些久远的项目的详情，我随时能查阅到，笔记在我生活或者工作中起到非常重要的作用，感觉已经离不开了，哈哈，活生生的变成evernote的脑残粉。  \n分类好不好，其实会严重影响到我们用evernote用得是否顺手。建议根据自己的日常需求、偏好来设定自己的目录，也有人习惯直接用搜索，我习惯分类+搜索，萝卜青菜各有所爱吧，开心就好了。  \n（小tips：给每个笔记本设数字前缀，evernote会按照数字大小达到你的目标排序）\n  \n这是我的印象笔记目录，可以大致给大家说说这些分类是干嘛的：\n\n1.  行动\n\n    *   便利贴：具有临时性的任何记录，后面再整理分类\n    *   工作板：一般放工作日记，每天上班第一件事是列出今天的todo list，下班前检查是否完成工作（哪些是可以删除或者延迟的），一般每周末整理一次，把某个项目的进度整理到该项目的项目进度，整理后挪到“工作日记”笔记本归档\n\n2.  专案：为某些分类单独立项，存放记录下来的文档，如摄影、读书等等\n3.  工作：工作中遇到的问题、解决方法、小贴士等的记录\n4.  项目&amp;需求：\n\n    *   需求收集箱：还没有确认人力和排期的需求池\n    *   具体立项的各个项目，存放着项目调研、技术设计、每天的项目进展、bug list和项目收益等，等该项目结束后，整个笔记本会被挪到“封存”笔记本\n\n5.  旅游：分为公共部分（如打包清单）和不同目的地部分（每个目的地新建一个笔记本，记录出发前攻略或者期间的记录）\n6.  前端相关\n7.  封存：相当于“归档”，把不需要care但偶尔需要查阅的文档放里面来\n8.  记录：对工作日记、总结&amp;计划的归档\n  \n![woody’s evernote](http://cdn.sinacloud.net/woodysblog/information-organize/woody-evernote.png)\n\n* * *\n\n除了信息收集分类，日常的提醒、日程和其他零散的时间管理也很重要，我想推荐些自己比较喜欢的工具：\n\n### 提醒 —— Due\n\n![due-下载](http://cdn.sinacloud.net/woodysblog/information-organize/due-download.jpg)\n  \n给某件事情定个完成的时间点然后到点提醒，原理很普通，支持自然语言输入，但我最喜欢Due的特点是它非常具有破坏性的提醒，除非你mark完成，否则会每分钟提醒一次，震到你接受治疗为止，就喜欢它的简单而粗暴！\n  \n![due](http://cdn.sinacloud.net/woodysblog/information-organize/due.png)</div>\n</div>\n&nbsp;\n\n* * *\n\n### 日历 —— Fantastical 2\n  \n其实我觉得苹果自带的日历APP也挺好用的，但更喜欢fantastical多一点，为什么？人家颜值高啊，UI漂亮到爆炸！而且新建事件支持自然语言输入，譬如标题上写“date with xxx at tomorrow 6pm”，时间、地点、人物会自动填好，不用手动输入，方便快捷！  \n![fantastical2-下载](http://cdn.sinacloud.net/woodysblog/information-organize/fantastical2-download.jpg)\n\nfantastical小技巧：\n\n* 时间：at 1pm tommorow / at 11:30 Tuesday / from September 11-27\n* 地点：at somewhere\n* 人员：with whom\n* 重复：every Wednesday 8pm / every year on 9/15 / on the 3nd Sunday of every month at 6pm\n* 待办：task / todo / reminder / remind me to\n* 提醒：alert 5min\n  \n![fantastical2 全家福](http://cdn.sinacloud.net/woodysblog/information-organize/fantastical-2.png)\n","source":"_posts/information-organize.md","raw":"---\ntitle: 信息爆炸时代，今天你整理了吗？\ntags:\n  - reading\n  - work\nid: 216\ncategories:\n  - reading\n  - work\ndate: 2016-02-27 17:33:08\n---\n\n最近在读一本书[《Google工作整理术》](http://book.douban.com/subject/26671649/)，读下来感觉更像是Google产品的大型广告书，书中2个观点非常值得mark：\n\n1.  每个人的组织模式是有个体差异的，希望大家都可以找到适合自己的整理术\n2.  每周抽时间回顾关键信息\n不过如果你想知道整理&amp;记录可以怎么样改变你的生活工作，个人更推荐[《记事本圆梦计划》](http://book.douban.com/subject/2033803/)和[《Evernote超效率数字笔记术》](http://book.douban.com/subject/24524405/)，里面的一些方法、技巧更加详细和具有实战意义。\n\n<!--more-->\n\n## 为什么我们需要整理？\n\n*   信息量爆炸，脑子装不下（好记性不如烂笔头），也没必要全记下\n*   个人成长的记录&amp;回忆（防止各种总结或计划时断片，不记得过去自己干了啥）\n\n### 我最喜欢用的信息收集&amp;整理工具 —— Evernote\n\n再一次强烈推荐看看《Evernote超效率数字笔记术》，搭建属于你自己的印象笔记工作台/生活空间。  \n![evernote-下载](http://cdn.sinacloud.net/woodysblog/information-organize/evernote-download.jpg)\n  \n我从2013年开始使用印象笔记，至今几乎每天都在记录，包括自己写的工作日记、邮件&amp;网页剪贴、旅行攻略等等，现在积累的1500+篇笔记，偶尔有人问起一些久远的项目的详情，我随时能查阅到，笔记在我生活或者工作中起到非常重要的作用，感觉已经离不开了，哈哈，活生生的变成evernote的脑残粉。  \n分类好不好，其实会严重影响到我们用evernote用得是否顺手。建议根据自己的日常需求、偏好来设定自己的目录，也有人习惯直接用搜索，我习惯分类+搜索，萝卜青菜各有所爱吧，开心就好了。  \n（小tips：给每个笔记本设数字前缀，evernote会按照数字大小达到你的目标排序）\n  \n这是我的印象笔记目录，可以大致给大家说说这些分类是干嘛的：\n\n1.  行动\n\n    *   便利贴：具有临时性的任何记录，后面再整理分类\n    *   工作板：一般放工作日记，每天上班第一件事是列出今天的todo list，下班前检查是否完成工作（哪些是可以删除或者延迟的），一般每周末整理一次，把某个项目的进度整理到该项目的项目进度，整理后挪到“工作日记”笔记本归档\n\n2.  专案：为某些分类单独立项，存放记录下来的文档，如摄影、读书等等\n3.  工作：工作中遇到的问题、解决方法、小贴士等的记录\n4.  项目&amp;需求：\n\n    *   需求收集箱：还没有确认人力和排期的需求池\n    *   具体立项的各个项目，存放着项目调研、技术设计、每天的项目进展、bug list和项目收益等，等该项目结束后，整个笔记本会被挪到“封存”笔记本\n\n5.  旅游：分为公共部分（如打包清单）和不同目的地部分（每个目的地新建一个笔记本，记录出发前攻略或者期间的记录）\n6.  前端相关\n7.  封存：相当于“归档”，把不需要care但偶尔需要查阅的文档放里面来\n8.  记录：对工作日记、总结&amp;计划的归档\n  \n![woody’s evernote](http://cdn.sinacloud.net/woodysblog/information-organize/woody-evernote.png)\n\n* * *\n\n除了信息收集分类，日常的提醒、日程和其他零散的时间管理也很重要，我想推荐些自己比较喜欢的工具：\n\n### 提醒 —— Due\n\n![due-下载](http://cdn.sinacloud.net/woodysblog/information-organize/due-download.jpg)\n  \n给某件事情定个完成的时间点然后到点提醒，原理很普通，支持自然语言输入，但我最喜欢Due的特点是它非常具有破坏性的提醒，除非你mark完成，否则会每分钟提醒一次，震到你接受治疗为止，就喜欢它的简单而粗暴！\n  \n![due](http://cdn.sinacloud.net/woodysblog/information-organize/due.png)</div>\n</div>\n&nbsp;\n\n* * *\n\n### 日历 —— Fantastical 2\n  \n其实我觉得苹果自带的日历APP也挺好用的，但更喜欢fantastical多一点，为什么？人家颜值高啊，UI漂亮到爆炸！而且新建事件支持自然语言输入，譬如标题上写“date with xxx at tomorrow 6pm”，时间、地点、人物会自动填好，不用手动输入，方便快捷！  \n![fantastical2-下载](http://cdn.sinacloud.net/woodysblog/information-organize/fantastical2-download.jpg)\n\nfantastical小技巧：\n\n* 时间：at 1pm tommorow / at 11:30 Tuesday / from September 11-27\n* 地点：at somewhere\n* 人员：with whom\n* 重复：every Wednesday 8pm / every year on 9/15 / on the 3nd Sunday of every month at 6pm\n* 待办：task / todo / reminder / remind me to\n* 提醒：alert 5min\n  \n![fantastical2 全家福](http://cdn.sinacloud.net/woodysblog/information-organize/fantastical-2.png)\n","slug":"information-organize","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x920025zvr36uindsdb","content":"<p>最近在读一本书<a href=\"http://book.douban.com/subject/26671649/\" target=\"_blank\" rel=\"noopener\">《Google工作整理术》</a>，读下来感觉更像是Google产品的大型广告书，书中2个观点非常值得mark：</p>\n<ol>\n<li>每个人的组织模式是有个体差异的，希望大家都可以找到适合自己的整理术</li>\n<li>每周抽时间回顾关键信息<br>不过如果你想知道整理&amp;记录可以怎么样改变你的生活工作，个人更推荐<a href=\"http://book.douban.com/subject/2033803/\" target=\"_blank\" rel=\"noopener\">《记事本圆梦计划》</a>和<a href=\"http://book.douban.com/subject/24524405/\" target=\"_blank\" rel=\"noopener\">《Evernote超效率数字笔记术》</a>，里面的一些方法、技巧更加详细和具有实战意义。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"为什么我们需要整理？\"><a href=\"#为什么我们需要整理？\" class=\"headerlink\" title=\"为什么我们需要整理？\"></a>为什么我们需要整理？</h2><ul>\n<li>信息量爆炸，脑子装不下（好记性不如烂笔头），也没必要全记下</li>\n<li>个人成长的记录&amp;回忆（防止各种总结或计划时断片，不记得过去自己干了啥）</li>\n</ul>\n<h3 id=\"我最喜欢用的信息收集-amp-整理工具-——-Evernote\"><a href=\"#我最喜欢用的信息收集-amp-整理工具-——-Evernote\" class=\"headerlink\" title=\"我最喜欢用的信息收集&amp;整理工具 —— Evernote\"></a>我最喜欢用的信息收集&amp;整理工具 —— Evernote</h3><p>再一次强烈推荐看看《Evernote超效率数字笔记术》，搭建属于你自己的印象笔记工作台/生活空间。<br><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/evernote-download.jpg\" alt=\"evernote-下载\"></p>\n<p>我从2013年开始使用印象笔记，至今几乎每天都在记录，包括自己写的工作日记、邮件&amp;网页剪贴、旅行攻略等等，现在积累的1500+篇笔记，偶尔有人问起一些久远的项目的详情，我随时能查阅到，笔记在我生活或者工作中起到非常重要的作用，感觉已经离不开了，哈哈，活生生的变成evernote的脑残粉。<br>分类好不好，其实会严重影响到我们用evernote用得是否顺手。建议根据自己的日常需求、偏好来设定自己的目录，也有人习惯直接用搜索，我习惯分类+搜索，萝卜青菜各有所爱吧，开心就好了。<br>（小tips：给每个笔记本设数字前缀，evernote会按照数字大小达到你的目标排序）</p>\n<p>这是我的印象笔记目录，可以大致给大家说说这些分类是干嘛的：</p>\n<ol>\n<li><p>行动</p>\n<ul>\n<li>便利贴：具有临时性的任何记录，后面再整理分类</li>\n<li>工作板：一般放工作日记，每天上班第一件事是列出今天的todo list，下班前检查是否完成工作（哪些是可以删除或者延迟的），一般每周末整理一次，把某个项目的进度整理到该项目的项目进度，整理后挪到“工作日记”笔记本归档</li>\n</ul>\n</li>\n<li><p>专案：为某些分类单独立项，存放记录下来的文档，如摄影、读书等等</p>\n</li>\n<li>工作：工作中遇到的问题、解决方法、小贴士等的记录</li>\n<li><p>项目&amp;需求：</p>\n<ul>\n<li>需求收集箱：还没有确认人力和排期的需求池</li>\n<li>具体立项的各个项目，存放着项目调研、技术设计、每天的项目进展、bug list和项目收益等，等该项目结束后，整个笔记本会被挪到“封存”笔记本</li>\n</ul>\n</li>\n<li><p>旅游：分为公共部分（如打包清单）和不同目的地部分（每个目的地新建一个笔记本，记录出发前攻略或者期间的记录）</p>\n</li>\n<li>前端相关</li>\n<li>封存：相当于“归档”，把不需要care但偶尔需要查阅的文档放里面来</li>\n<li>记录：对工作日记、总结&amp;计划的归档</li>\n</ol>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/woody-evernote.png\" alt=\"woody’s evernote\"></p>\n<hr>\n<p>除了信息收集分类，日常的提醒、日程和其他零散的时间管理也很重要，我想推荐些自己比较喜欢的工具：</p>\n<h3 id=\"提醒-——-Due\"><a href=\"#提醒-——-Due\" class=\"headerlink\" title=\"提醒 —— Due\"></a>提醒 —— Due</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/due-download.jpg\" alt=\"due-下载\"></p>\n<p>给某件事情定个完成的时间点然后到点提醒，原理很普通，支持自然语言输入，但我最喜欢Due的特点是它非常具有破坏性的提醒，除非你mark完成，否则会每分钟提醒一次，震到你接受治疗为止，就喜欢它的简单而粗暴！</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/due.png\" alt=\"due\"><br><br>&nbsp;</p>\n<hr>\n<h3 id=\"日历-——-Fantastical-2\"><a href=\"#日历-——-Fantastical-2\" class=\"headerlink\" title=\"日历 —— Fantastical 2\"></a>日历 —— Fantastical 2</h3><p>其实我觉得苹果自带的日历APP也挺好用的，但更喜欢fantastical多一点，为什么？人家颜值高啊，UI漂亮到爆炸！而且新建事件支持自然语言输入，譬如标题上写“date with xxx at tomorrow 6pm”，时间、地点、人物会自动填好，不用手动输入，方便快捷！<br><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/fantastical2-download.jpg\" alt=\"fantastical2-下载\"></p>\n<p>fantastical小技巧：</p>\n<ul>\n<li>时间：at 1pm tommorow / at 11:30 Tuesday / from September 11-27</li>\n<li>地点：at somewhere</li>\n<li>人员：with whom</li>\n<li>重复：every Wednesday 8pm / every year on 9/15 / on the 3nd Sunday of every month at 6pm</li>\n<li>待办：task / todo / reminder / remind me to</li>\n<li>提醒：alert 5min</li>\n</ul>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/fantastical-2.png\" alt=\"fantastical2 全家福\"></p>\n","site":{"data":{}},"excerpt":"<p>最近在读一本书<a href=\"http://book.douban.com/subject/26671649/\" target=\"_blank\" rel=\"noopener\">《Google工作整理术》</a>，读下来感觉更像是Google产品的大型广告书，书中2个观点非常值得mark：</p>\n<ol>\n<li>每个人的组织模式是有个体差异的，希望大家都可以找到适合自己的整理术</li>\n<li>每周抽时间回顾关键信息<br>不过如果你想知道整理&amp;记录可以怎么样改变你的生活工作，个人更推荐<a href=\"http://book.douban.com/subject/2033803/\" target=\"_blank\" rel=\"noopener\">《记事本圆梦计划》</a>和<a href=\"http://book.douban.com/subject/24524405/\" target=\"_blank\" rel=\"noopener\">《Evernote超效率数字笔记术》</a>，里面的一些方法、技巧更加详细和具有实战意义。</li>\n</ol>","more":"<h2 id=\"为什么我们需要整理？\"><a href=\"#为什么我们需要整理？\" class=\"headerlink\" title=\"为什么我们需要整理？\"></a>为什么我们需要整理？</h2><ul>\n<li>信息量爆炸，脑子装不下（好记性不如烂笔头），也没必要全记下</li>\n<li>个人成长的记录&amp;回忆（防止各种总结或计划时断片，不记得过去自己干了啥）</li>\n</ul>\n<h3 id=\"我最喜欢用的信息收集-amp-整理工具-——-Evernote\"><a href=\"#我最喜欢用的信息收集-amp-整理工具-——-Evernote\" class=\"headerlink\" title=\"我最喜欢用的信息收集&amp;整理工具 —— Evernote\"></a>我最喜欢用的信息收集&amp;整理工具 —— Evernote</h3><p>再一次强烈推荐看看《Evernote超效率数字笔记术》，搭建属于你自己的印象笔记工作台/生活空间。<br><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/evernote-download.jpg\" alt=\"evernote-下载\"></p>\n<p>我从2013年开始使用印象笔记，至今几乎每天都在记录，包括自己写的工作日记、邮件&amp;网页剪贴、旅行攻略等等，现在积累的1500+篇笔记，偶尔有人问起一些久远的项目的详情，我随时能查阅到，笔记在我生活或者工作中起到非常重要的作用，感觉已经离不开了，哈哈，活生生的变成evernote的脑残粉。<br>分类好不好，其实会严重影响到我们用evernote用得是否顺手。建议根据自己的日常需求、偏好来设定自己的目录，也有人习惯直接用搜索，我习惯分类+搜索，萝卜青菜各有所爱吧，开心就好了。<br>（小tips：给每个笔记本设数字前缀，evernote会按照数字大小达到你的目标排序）</p>\n<p>这是我的印象笔记目录，可以大致给大家说说这些分类是干嘛的：</p>\n<ol>\n<li><p>行动</p>\n<ul>\n<li>便利贴：具有临时性的任何记录，后面再整理分类</li>\n<li>工作板：一般放工作日记，每天上班第一件事是列出今天的todo list，下班前检查是否完成工作（哪些是可以删除或者延迟的），一般每周末整理一次，把某个项目的进度整理到该项目的项目进度，整理后挪到“工作日记”笔记本归档</li>\n</ul>\n</li>\n<li><p>专案：为某些分类单独立项，存放记录下来的文档，如摄影、读书等等</p>\n</li>\n<li>工作：工作中遇到的问题、解决方法、小贴士等的记录</li>\n<li><p>项目&amp;需求：</p>\n<ul>\n<li>需求收集箱：还没有确认人力和排期的需求池</li>\n<li>具体立项的各个项目，存放着项目调研、技术设计、每天的项目进展、bug list和项目收益等，等该项目结束后，整个笔记本会被挪到“封存”笔记本</li>\n</ul>\n</li>\n<li><p>旅游：分为公共部分（如打包清单）和不同目的地部分（每个目的地新建一个笔记本，记录出发前攻略或者期间的记录）</p>\n</li>\n<li>前端相关</li>\n<li>封存：相当于“归档”，把不需要care但偶尔需要查阅的文档放里面来</li>\n<li>记录：对工作日记、总结&amp;计划的归档</li>\n</ol>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/woody-evernote.png\" alt=\"woody’s evernote\"></p>\n<hr>\n<p>除了信息收集分类，日常的提醒、日程和其他零散的时间管理也很重要，我想推荐些自己比较喜欢的工具：</p>\n<h3 id=\"提醒-——-Due\"><a href=\"#提醒-——-Due\" class=\"headerlink\" title=\"提醒 —— Due\"></a>提醒 —— Due</h3><p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/due-download.jpg\" alt=\"due-下载\"></p>\n<p>给某件事情定个完成的时间点然后到点提醒，原理很普通，支持自然语言输入，但我最喜欢Due的特点是它非常具有破坏性的提醒，除非你mark完成，否则会每分钟提醒一次，震到你接受治疗为止，就喜欢它的简单而粗暴！</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/due.png\" alt=\"due\"><br><br>&nbsp;</p>\n<hr>\n<h3 id=\"日历-——-Fantastical-2\"><a href=\"#日历-——-Fantastical-2\" class=\"headerlink\" title=\"日历 —— Fantastical 2\"></a>日历 —— Fantastical 2</h3><p>其实我觉得苹果自带的日历APP也挺好用的，但更喜欢fantastical多一点，为什么？人家颜值高啊，UI漂亮到爆炸！而且新建事件支持自然语言输入，譬如标题上写“date with xxx at tomorrow 6pm”，时间、地点、人物会自动填好，不用手动输入，方便快捷！<br><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/fantastical2-download.jpg\" alt=\"fantastical2-下载\"></p>\n<p>fantastical小技巧：</p>\n<ul>\n<li>时间：at 1pm tommorow / at 11:30 Tuesday / from September 11-27</li>\n<li>地点：at somewhere</li>\n<li>人员：with whom</li>\n<li>重复：every Wednesday 8pm / every year on 9/15 / on the 3nd Sunday of every month at 6pm</li>\n<li>待办：task / todo / reminder / remind me to</li>\n<li>提醒：alert 5min</li>\n</ul>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/information-organize/fantastical-2.png\" alt=\"fantastical2 全家福\"></p>"},{"title":"关于独立开发者","id":"94","date":"2015-05-01T02:14:57.000Z","_content":"\n今天在来青岛的高铁上，看了一本书《创造的乐趣：图灵访谈合集》，采访了各种各样的coder，我发现其实码农的世界很大，不能把自己圈在一个角落里。\n\n譬如 @老赵 说，爱美女，爱弹琴，最后才是写代码。（笑）\n\n印象最深刻的可能是 @罗晨 的访谈“罗晨：梦想照进现实，一个独立开发者的田园诗”，文章最后会摘录。\n\n在看 @罗晨 的访谈时，我问自己，到底有没有为自己写过那么一个demo？很久以来几乎没有，今天想起要写博客来一篇，明天项目做了什么想分享一下来一demo，但就是没有根据自己的需求去写个什么，感觉丧失了爱自己的能力啦（笑），所以一直没有做出一个较持续的博客或者作品来分享自己对coding或者对生活的思考。\n\n<!--more-->\n\n最近，其实有为自己写过一个demo（[woody's qrcode](http://www.wuyuying.com/demo#/qrcode)）关于生成二维码的，实现起来并不复杂，那是我工作中经常要用到的工具，之前一直用别人的而现在用自己写的，而且经常会用，所以满足感很强。\n\n@罗晨 也是，因为市面上没有一个满意的markdown编辑器，于是自己写了一个[mou](http://25.io/mou/)；在mac上想找一个好的html/css压缩工具，想要界面版的，市面上也没有找到，于是自己写了个[smaller](http://25.io/smaller/)。\n\n我觉得作为一个coder，生命力就是应该在于“创造”，也许独立开发者也是我未来想要成长追逐的一种方向。\n\n还在青岛玩，摘录回去再补吧~\n\n**@罗晨的图灵访谈：**[点此查看](http://www.ituring.com.cn/article/47972)\n","source":"_posts/independent-coder.md","raw":"---\ntitle: 关于独立开发者\ntags:\n  - life\n  - reading\nid: 94\ncategories:\n  - life\n  - reading\ndate: 2015-05-01 10:14:57\n---\n\n今天在来青岛的高铁上，看了一本书《创造的乐趣：图灵访谈合集》，采访了各种各样的coder，我发现其实码农的世界很大，不能把自己圈在一个角落里。\n\n譬如 @老赵 说，爱美女，爱弹琴，最后才是写代码。（笑）\n\n印象最深刻的可能是 @罗晨 的访谈“罗晨：梦想照进现实，一个独立开发者的田园诗”，文章最后会摘录。\n\n在看 @罗晨 的访谈时，我问自己，到底有没有为自己写过那么一个demo？很久以来几乎没有，今天想起要写博客来一篇，明天项目做了什么想分享一下来一demo，但就是没有根据自己的需求去写个什么，感觉丧失了爱自己的能力啦（笑），所以一直没有做出一个较持续的博客或者作品来分享自己对coding或者对生活的思考。\n\n<!--more-->\n\n最近，其实有为自己写过一个demo（[woody's qrcode](http://www.wuyuying.com/demo#/qrcode)）关于生成二维码的，实现起来并不复杂，那是我工作中经常要用到的工具，之前一直用别人的而现在用自己写的，而且经常会用，所以满足感很强。\n\n@罗晨 也是，因为市面上没有一个满意的markdown编辑器，于是自己写了一个[mou](http://25.io/mou/)；在mac上想找一个好的html/css压缩工具，想要界面版的，市面上也没有找到，于是自己写了个[smaller](http://25.io/smaller/)。\n\n我觉得作为一个coder，生命力就是应该在于“创造”，也许独立开发者也是我未来想要成长追逐的一种方向。\n\n还在青岛玩，摘录回去再补吧~\n\n**@罗晨的图灵访谈：**[点此查看](http://www.ituring.com.cn/article/47972)\n","slug":"independent-coder","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x930027zvr3m2x3kqna","content":"<p>今天在来青岛的高铁上，看了一本书《创造的乐趣：图灵访谈合集》，采访了各种各样的coder，我发现其实码农的世界很大，不能把自己圈在一个角落里。</p>\n<p>譬如 @老赵 说，爱美女，爱弹琴，最后才是写代码。（笑）</p>\n<p>印象最深刻的可能是 @罗晨 的访谈“罗晨：梦想照进现实，一个独立开发者的田园诗”，文章最后会摘录。</p>\n<p>在看 @罗晨 的访谈时，我问自己，到底有没有为自己写过那么一个demo？很久以来几乎没有，今天想起要写博客来一篇，明天项目做了什么想分享一下来一demo，但就是没有根据自己的需求去写个什么，感觉丧失了爱自己的能力啦（笑），所以一直没有做出一个较持续的博客或者作品来分享自己对coding或者对生活的思考。</p>\n<a id=\"more\"></a>\n<p>最近，其实有为自己写过一个demo（<a href=\"http://www.wuyuying.com/demo#/qrcode\" target=\"_blank\" rel=\"noopener\">woody’s qrcode</a>）关于生成二维码的，实现起来并不复杂，那是我工作中经常要用到的工具，之前一直用别人的而现在用自己写的，而且经常会用，所以满足感很强。</p>\n<p>@罗晨 也是，因为市面上没有一个满意的markdown编辑器，于是自己写了一个<a href=\"http://25.io/mou/\" target=\"_blank\" rel=\"noopener\">mou</a>；在mac上想找一个好的html/css压缩工具，想要界面版的，市面上也没有找到，于是自己写了个<a href=\"http://25.io/smaller/\" target=\"_blank\" rel=\"noopener\">smaller</a>。</p>\n<p>我觉得作为一个coder，生命力就是应该在于“创造”，也许独立开发者也是我未来想要成长追逐的一种方向。</p>\n<p>还在青岛玩，摘录回去再补吧~</p>\n<p><strong>@罗晨的图灵访谈：</strong><a href=\"http://www.ituring.com.cn/article/47972\" target=\"_blank\" rel=\"noopener\">点此查看</a></p>\n","site":{"data":{}},"excerpt":"<p>今天在来青岛的高铁上，看了一本书《创造的乐趣：图灵访谈合集》，采访了各种各样的coder，我发现其实码农的世界很大，不能把自己圈在一个角落里。</p>\n<p>譬如 @老赵 说，爱美女，爱弹琴，最后才是写代码。（笑）</p>\n<p>印象最深刻的可能是 @罗晨 的访谈“罗晨：梦想照进现实，一个独立开发者的田园诗”，文章最后会摘录。</p>\n<p>在看 @罗晨 的访谈时，我问自己，到底有没有为自己写过那么一个demo？很久以来几乎没有，今天想起要写博客来一篇，明天项目做了什么想分享一下来一demo，但就是没有根据自己的需求去写个什么，感觉丧失了爱自己的能力啦（笑），所以一直没有做出一个较持续的博客或者作品来分享自己对coding或者对生活的思考。</p>","more":"<p>最近，其实有为自己写过一个demo（<a href=\"http://www.wuyuying.com/demo#/qrcode\" target=\"_blank\" rel=\"noopener\">woody’s qrcode</a>）关于生成二维码的，实现起来并不复杂，那是我工作中经常要用到的工具，之前一直用别人的而现在用自己写的，而且经常会用，所以满足感很强。</p>\n<p>@罗晨 也是，因为市面上没有一个满意的markdown编辑器，于是自己写了一个<a href=\"http://25.io/mou/\" target=\"_blank\" rel=\"noopener\">mou</a>；在mac上想找一个好的html/css压缩工具，想要界面版的，市面上也没有找到，于是自己写了个<a href=\"http://25.io/smaller/\" target=\"_blank\" rel=\"noopener\">smaller</a>。</p>\n<p>我觉得作为一个coder，生命力就是应该在于“创造”，也许独立开发者也是我未来想要成长追逐的一种方向。</p>\n<p>还在青岛玩，摘录回去再补吧~</p>\n<p><strong>@罗晨的图灵访谈：</strong><a href=\"http://www.ituring.com.cn/article/47972\" target=\"_blank\" rel=\"noopener\">点此查看</a></p>"},{"title":"再手写table做EDM你就out啦","date":"2016-05-18T10:20:18.000Z","_content":"工作期间，有接触过产品线发的[EDM](http://baike.baidu.com/subview/1212416/8602812.htm#viewPageContent)(Email Direct Marketing 电子邮件营销)，也就是大家经常说的“垃圾邮件”，可能发EDM的账户会进部分邮箱的黑名单，有时候我自己测试发的邮件可能要到垃圾箱找 >3< \n\n不过EDM对于用户召回确实有非常显著的效果，偶尔来一发，也不失为一个重新激活目标用户的好办法。\n\n不小心扯远了，由于邮件浏览器可能会过滤掉对外部的CSS或者JS文件的引用，加上对很多css特性不支持（邮件商的兼容性也是个坑），所以很多时候我们会把整个psd垂直分成几张图片，采用**table** + **inline CSS** + **img** 的方式去弄。\n\n<!-- more -->\n\n好处：\n\n* 简单方便，直接切图，塞进img的src就好了，切图+拼html一般不超过半小时；\n\n缺点：\n\n* 没有所谓的样式，只是个写满style属性的table，很凌乱不便维护；\n* 纯图片拼接，对于一些默认屏蔽图片的邮件商，会白屏；图片太大，可能会加载比较久；\n* 不符合响应式设计，没法做pc和移动页面自适应\n\n***\n前几天，项目评审时说要发EDM，我上网搜了下，偶然看到一篇文章，介绍[Inky](http://foundation.zurb.com/emails/docs/index.html)，一个号称支持响应式设计、兼容各个email client的邮件模板编译工具。\n\n玩了一下下，发现还真的不错！看了下他们的[change log](https://github.com/zurb/foundation-emails/releases)，2013年11月的初版，今年3月都发了2.0啦，我是有多out，现在才知道，所以有了本文，希望更多不知道的小伙伴也可以enjoy这个方便的工具。\n\n## 零、Inky简介\n\nInky的技术栈：-> [传送门](http://foundation.zurb.com/emails/docs/zurb-stack.html)\n\n* Gulp\n* Sass\n* Inlining\n* Panini\n* BrowserSync\n* Image Compression\n\n它能为我们带来什么？下面是自带的组件列表：\n\n* The Grid：栅格化\n* Global Styles：核心的框架样式和Sass变量\n* Alignment Classes：对齐的CSS类（文本对齐和块元素对齐）\n* Buttons：一些默认样式、大小的button\n* Menu：菜单\n* Spacer：通过传入高度，自动生成定高的空白块\n* Wrapper：邮件正文100%宽的自定义背景块\n* Typography：默认排版（样式）\n* Visibility Classes：可以根据需求，设定在不同尺寸设备下（pc/wap）是否可见\n\n## 一、初始化步骤：\n\n传送门：[官方教程](http://foundation.zurb.com/emails/docs/sass-guide.html)\n\n### I. 安装fundation命令行工具\n\n```\nsudo npm install --global foundation-cli\n```\n\n### II. 初始化email开发环境\n\n进入你的项目目录内，执行初始化命令，如执行 cd my-project 后再执行：\n\n```\nfoundation new --framework emails\n```\n\n### III. 本地运行&调试\n\n执行完后，会自动打开浏览器窗口：\n\n```\nnpm start\n```\n\n### IV. 编译产出\n\n当你在本地调得差不多之后，就可以产出压缩、样式inline的html文件啦\n\n```\nnpm run build\n```\n\n## 二、看个demo\n下面看个demo，你就知道inky有多棒，不需要再手写table和inline css啦！\n\n* container是大容器\n* row代表一行，满宽栅格是12\n* small代表小屏，large代表大屏，可以分别设置在不同屏幕下的栅格比例，达到响应式设计\n\n```\n---\nsubject: My Email Subject\n---\n<container class=\"marine-container\">\n    <row class=\"info-area\"> \n        <columns small=\"12\" large=\"9\">\n            <div class=\"info\">\n                <h3>View...</h3>\n                <p>bala bala...</p>\n            </div>\n        </columns>\n        <columns small=\"12\" large=\"3\">\n            <a href=\"xxx\" class=\"btn-guide\">Click<br/>For Guide</a>\n        </columns>\n    </row>\n    <row>\n        <columns small=\"12\" large=\"12\">\n            <div class=\"person-area\">\n                <a href=\"\">Search...</a><br/>\n                <img src=\"http://cdn.sinacloud.net/mailchimp/marine.jpg\">\n                <p>\n                    Kate Carter<br/>\n                    Y...<br/>\n                    mobile: xxxx<br/>\n                    ...\n                </p>\n            </div>\n        </columns>\n    </row>\n    <row>\n        <columns small=\"12\" large=\"12\">\n            <div class=\"footer\">\n                <a href=\"\">xxxx</a>\n                <span>|</span>\n                <a href=\"\">xxxx</a>\n                <!-- 省略一万字 -->\n            </div>\n        </columns>\n    </row>\n</container>\n\n```\n\n![pc和wap对比图](http://cdn.sinacloud.net/woodysblog/inky/marine-pc-wap.jpg)\n\n## 三、相关链接：\n\n### 1. demo：  \n* 原始文件：[marine-original.html](http://cdn.sinacloud.net/woodysblog/inky/marine-original.html)  \n* 编译后文件：[marine-dist.html](http://cdn.sinacloud.net/woodysblog/inky/marine-dist.html)\n\n### 2. 官网\n\n* [Getting Started with Sass](http://foundation.zurb.com/emails/docs/sass-guide.html)  \n* [Foundation for Email](http://foundation.zurb.com/emails.html)\n","source":"_posts/inky.md","raw":"---\ntitle: 再手写table做EDM你就out啦\ntags:\n  - tech\ndate: 2016-05-18 18:20:18\n---\n工作期间，有接触过产品线发的[EDM](http://baike.baidu.com/subview/1212416/8602812.htm#viewPageContent)(Email Direct Marketing 电子邮件营销)，也就是大家经常说的“垃圾邮件”，可能发EDM的账户会进部分邮箱的黑名单，有时候我自己测试发的邮件可能要到垃圾箱找 >3< \n\n不过EDM对于用户召回确实有非常显著的效果，偶尔来一发，也不失为一个重新激活目标用户的好办法。\n\n不小心扯远了，由于邮件浏览器可能会过滤掉对外部的CSS或者JS文件的引用，加上对很多css特性不支持（邮件商的兼容性也是个坑），所以很多时候我们会把整个psd垂直分成几张图片，采用**table** + **inline CSS** + **img** 的方式去弄。\n\n<!-- more -->\n\n好处：\n\n* 简单方便，直接切图，塞进img的src就好了，切图+拼html一般不超过半小时；\n\n缺点：\n\n* 没有所谓的样式，只是个写满style属性的table，很凌乱不便维护；\n* 纯图片拼接，对于一些默认屏蔽图片的邮件商，会白屏；图片太大，可能会加载比较久；\n* 不符合响应式设计，没法做pc和移动页面自适应\n\n***\n前几天，项目评审时说要发EDM，我上网搜了下，偶然看到一篇文章，介绍[Inky](http://foundation.zurb.com/emails/docs/index.html)，一个号称支持响应式设计、兼容各个email client的邮件模板编译工具。\n\n玩了一下下，发现还真的不错！看了下他们的[change log](https://github.com/zurb/foundation-emails/releases)，2013年11月的初版，今年3月都发了2.0啦，我是有多out，现在才知道，所以有了本文，希望更多不知道的小伙伴也可以enjoy这个方便的工具。\n\n## 零、Inky简介\n\nInky的技术栈：-> [传送门](http://foundation.zurb.com/emails/docs/zurb-stack.html)\n\n* Gulp\n* Sass\n* Inlining\n* Panini\n* BrowserSync\n* Image Compression\n\n它能为我们带来什么？下面是自带的组件列表：\n\n* The Grid：栅格化\n* Global Styles：核心的框架样式和Sass变量\n* Alignment Classes：对齐的CSS类（文本对齐和块元素对齐）\n* Buttons：一些默认样式、大小的button\n* Menu：菜单\n* Spacer：通过传入高度，自动生成定高的空白块\n* Wrapper：邮件正文100%宽的自定义背景块\n* Typography：默认排版（样式）\n* Visibility Classes：可以根据需求，设定在不同尺寸设备下（pc/wap）是否可见\n\n## 一、初始化步骤：\n\n传送门：[官方教程](http://foundation.zurb.com/emails/docs/sass-guide.html)\n\n### I. 安装fundation命令行工具\n\n```\nsudo npm install --global foundation-cli\n```\n\n### II. 初始化email开发环境\n\n进入你的项目目录内，执行初始化命令，如执行 cd my-project 后再执行：\n\n```\nfoundation new --framework emails\n```\n\n### III. 本地运行&调试\n\n执行完后，会自动打开浏览器窗口：\n\n```\nnpm start\n```\n\n### IV. 编译产出\n\n当你在本地调得差不多之后，就可以产出压缩、样式inline的html文件啦\n\n```\nnpm run build\n```\n\n## 二、看个demo\n下面看个demo，你就知道inky有多棒，不需要再手写table和inline css啦！\n\n* container是大容器\n* row代表一行，满宽栅格是12\n* small代表小屏，large代表大屏，可以分别设置在不同屏幕下的栅格比例，达到响应式设计\n\n```\n---\nsubject: My Email Subject\n---\n<container class=\"marine-container\">\n    <row class=\"info-area\"> \n        <columns small=\"12\" large=\"9\">\n            <div class=\"info\">\n                <h3>View...</h3>\n                <p>bala bala...</p>\n            </div>\n        </columns>\n        <columns small=\"12\" large=\"3\">\n            <a href=\"xxx\" class=\"btn-guide\">Click<br/>For Guide</a>\n        </columns>\n    </row>\n    <row>\n        <columns small=\"12\" large=\"12\">\n            <div class=\"person-area\">\n                <a href=\"\">Search...</a><br/>\n                <img src=\"http://cdn.sinacloud.net/mailchimp/marine.jpg\">\n                <p>\n                    Kate Carter<br/>\n                    Y...<br/>\n                    mobile: xxxx<br/>\n                    ...\n                </p>\n            </div>\n        </columns>\n    </row>\n    <row>\n        <columns small=\"12\" large=\"12\">\n            <div class=\"footer\">\n                <a href=\"\">xxxx</a>\n                <span>|</span>\n                <a href=\"\">xxxx</a>\n                <!-- 省略一万字 -->\n            </div>\n        </columns>\n    </row>\n</container>\n\n```\n\n![pc和wap对比图](http://cdn.sinacloud.net/woodysblog/inky/marine-pc-wap.jpg)\n\n## 三、相关链接：\n\n### 1. demo：  \n* 原始文件：[marine-original.html](http://cdn.sinacloud.net/woodysblog/inky/marine-original.html)  \n* 编译后文件：[marine-dist.html](http://cdn.sinacloud.net/woodysblog/inky/marine-dist.html)\n\n### 2. 官网\n\n* [Getting Started with Sass](http://foundation.zurb.com/emails/docs/sass-guide.html)  \n* [Foundation for Email](http://foundation.zurb.com/emails.html)\n","slug":"inky","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x94002czvr3z7sjnfyo","content":"<p>工作期间，有接触过产品线发的<a href=\"http://baike.baidu.com/subview/1212416/8602812.htm#viewPageContent\" target=\"_blank\" rel=\"noopener\">EDM</a>(Email Direct Marketing 电子邮件营销)，也就是大家经常说的“垃圾邮件”，可能发EDM的账户会进部分邮箱的黑名单，有时候我自己测试发的邮件可能要到垃圾箱找 &gt;3&lt; </p>\n<p>不过EDM对于用户召回确实有非常显著的效果，偶尔来一发，也不失为一个重新激活目标用户的好办法。</p>\n<p>不小心扯远了，由于邮件浏览器可能会过滤掉对外部的CSS或者JS文件的引用，加上对很多css特性不支持（邮件商的兼容性也是个坑），所以很多时候我们会把整个psd垂直分成几张图片，采用<strong>table</strong> + <strong>inline CSS</strong> + <strong>img</strong> 的方式去弄。</p>\n<a id=\"more\"></a>\n<p>好处：</p>\n<ul>\n<li>简单方便，直接切图，塞进img的src就好了，切图+拼html一般不超过半小时；</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>没有所谓的样式，只是个写满style属性的table，很凌乱不便维护；</li>\n<li>纯图片拼接，对于一些默认屏蔽图片的邮件商，会白屏；图片太大，可能会加载比较久；</li>\n<li>不符合响应式设计，没法做pc和移动页面自适应</li>\n</ul>\n<hr>\n<p>前几天，项目评审时说要发EDM，我上网搜了下，偶然看到一篇文章，介绍<a href=\"http://foundation.zurb.com/emails/docs/index.html\" target=\"_blank\" rel=\"noopener\">Inky</a>，一个号称支持响应式设计、兼容各个email client的邮件模板编译工具。</p>\n<p>玩了一下下，发现还真的不错！看了下他们的<a href=\"https://github.com/zurb/foundation-emails/releases\" target=\"_blank\" rel=\"noopener\">change log</a>，2013年11月的初版，今年3月都发了2.0啦，我是有多out，现在才知道，所以有了本文，希望更多不知道的小伙伴也可以enjoy这个方便的工具。</p>\n<h2 id=\"零、Inky简介\"><a href=\"#零、Inky简介\" class=\"headerlink\" title=\"零、Inky简介\"></a>零、Inky简介</h2><p>Inky的技术栈：-&gt; <a href=\"http://foundation.zurb.com/emails/docs/zurb-stack.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<ul>\n<li>Gulp</li>\n<li>Sass</li>\n<li>Inlining</li>\n<li>Panini</li>\n<li>BrowserSync</li>\n<li>Image Compression</li>\n</ul>\n<p>它能为我们带来什么？下面是自带的组件列表：</p>\n<ul>\n<li>The Grid：栅格化</li>\n<li>Global Styles：核心的框架样式和Sass变量</li>\n<li>Alignment Classes：对齐的CSS类（文本对齐和块元素对齐）</li>\n<li>Buttons：一些默认样式、大小的button</li>\n<li>Menu：菜单</li>\n<li>Spacer：通过传入高度，自动生成定高的空白块</li>\n<li>Wrapper：邮件正文100%宽的自定义背景块</li>\n<li>Typography：默认排版（样式）</li>\n<li>Visibility Classes：可以根据需求，设定在不同尺寸设备下（pc/wap）是否可见</li>\n</ul>\n<h2 id=\"一、初始化步骤：\"><a href=\"#一、初始化步骤：\" class=\"headerlink\" title=\"一、初始化步骤：\"></a>一、初始化步骤：</h2><p>传送门：<a href=\"http://foundation.zurb.com/emails/docs/sass-guide.html\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"I-安装fundation命令行工具\"><a href=\"#I-安装fundation命令行工具\" class=\"headerlink\" title=\"I. 安装fundation命令行工具\"></a>I. 安装fundation命令行工具</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">npm</span> install --<span class=\"built_in\">global</span> foundation-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"II-初始化email开发环境\"><a href=\"#II-初始化email开发环境\" class=\"headerlink\" title=\"II. 初始化email开发环境\"></a>II. 初始化email开发环境</h3><p>进入你的项目目录内，执行初始化命令，如执行 cd my-project 后再执行：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foundation <span class=\"keyword\">new</span> <span class=\"comment\">--framework emails</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"III-本地运行-amp-调试\"><a href=\"#III-本地运行-amp-调试\" class=\"headerlink\" title=\"III. 本地运行&amp;调试\"></a>III. 本地运行&amp;调试</h3><p>执行完后，会自动打开浏览器窗口：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> start</span><br></pre></td></tr></table></figure>\n<h3 id=\"IV-编译产出\"><a href=\"#IV-编译产出\" class=\"headerlink\" title=\"IV. 编译产出\"></a>IV. 编译产出</h3><p>当你在本地调得差不多之后，就可以产出压缩、样式inline的html文件啦</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">run</span><span class=\"bash\"> build</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、看个demo\"><a href=\"#二、看个demo\" class=\"headerlink\" title=\"二、看个demo\"></a>二、看个demo</h2><p>下面看个demo，你就知道inky有多棒，不需要再手写table和inline css啦！</p>\n<ul>\n<li>container是大容器</li>\n<li>row代表一行，满宽栅格是12</li>\n<li>small代表小屏，large代表大屏，可以分别设置在不同屏幕下的栅格比例，达到响应式设计</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">subject: My Email Subject</span><br><span class=\"line\">---</span><br><span class=\"line\">&lt;container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"marine-container\"</span>&gt;</span><br><span class=\"line\">    &lt;row <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"info-area\"</span>&gt; </span><br><span class=\"line\">        &lt;columns small=<span class=\"string\">\"12\"</span> large=<span class=\"string\">\"9\"</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"info\"</span>&gt;</span><br><span class=\"line\">                &lt;h3&gt;View...&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;p&gt;bala bala...&lt;/</span>p&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>columns&gt;</span><br><span class=\"line\">        &lt;columns small=<span class=\"string\">\"12\"</span> large=<span class=\"string\">\"3\"</span>&gt;</span><br><span class=\"line\">            &lt;a href=<span class=\"string\">\"xxx\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"btn-guide\"</span>&gt;Click&lt;br/&gt;For Guide&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>columns&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/row&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;row&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;columns small=\"12\" large=\"12\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;div class=\"person-area\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;a href=\"\"&gt;Search...&lt;/</span>a&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\">                &lt;img src=<span class=\"string\">\"http://cdn.sinacloud.net/mailchimp/marine.jpg\"</span>&gt;</span><br><span class=\"line\">                &lt;p&gt;</span><br><span class=\"line\">                    Kate Carter&lt;br/&gt;</span><br><span class=\"line\">                    Y...&lt;br/&gt;</span><br><span class=\"line\">                    mobile: xxxx&lt;br/&gt;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/columns&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>row&gt;</span><br><span class=\"line\">    &lt;row&gt;</span><br><span class=\"line\">        &lt;columns small=<span class=\"string\">\"12\"</span> large=<span class=\"string\">\"12\"</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"footer\"</span>&gt;</span><br><span class=\"line\">                &lt;a href=<span class=\"string\">\"\"</span>&gt;xxxx&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;span&gt;|&lt;/</span>span&gt;</span><br><span class=\"line\">                &lt;a href=<span class=\"string\">\"\"</span>&gt;xxxx&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;!-- 省略一万字 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/columns&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>row&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/container&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/inky/marine-pc-wap.jpg\" alt=\"pc和wap对比图\"></p>\n<h2 id=\"三、相关链接：\"><a href=\"#三、相关链接：\" class=\"headerlink\" title=\"三、相关链接：\"></a>三、相关链接：</h2><h3 id=\"1-demo：\"><a href=\"#1-demo：\" class=\"headerlink\" title=\"1. demo：\"></a>1. demo：</h3><ul>\n<li>原始文件：<a href=\"http://cdn.sinacloud.net/woodysblog/inky/marine-original.html\" target=\"_blank\" rel=\"noopener\">marine-original.html</a>  </li>\n<li>编译后文件：<a href=\"http://cdn.sinacloud.net/woodysblog/inky/marine-dist.html\" target=\"_blank\" rel=\"noopener\">marine-dist.html</a></li>\n</ul>\n<h3 id=\"2-官网\"><a href=\"#2-官网\" class=\"headerlink\" title=\"2. 官网\"></a>2. 官网</h3><ul>\n<li><a href=\"http://foundation.zurb.com/emails/docs/sass-guide.html\" target=\"_blank\" rel=\"noopener\">Getting Started with Sass</a>  </li>\n<li><a href=\"http://foundation.zurb.com/emails.html\" target=\"_blank\" rel=\"noopener\">Foundation for Email</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>工作期间，有接触过产品线发的<a href=\"http://baike.baidu.com/subview/1212416/8602812.htm#viewPageContent\" target=\"_blank\" rel=\"noopener\">EDM</a>(Email Direct Marketing 电子邮件营销)，也就是大家经常说的“垃圾邮件”，可能发EDM的账户会进部分邮箱的黑名单，有时候我自己测试发的邮件可能要到垃圾箱找 &gt;3&lt; </p>\n<p>不过EDM对于用户召回确实有非常显著的效果，偶尔来一发，也不失为一个重新激活目标用户的好办法。</p>\n<p>不小心扯远了，由于邮件浏览器可能会过滤掉对外部的CSS或者JS文件的引用，加上对很多css特性不支持（邮件商的兼容性也是个坑），所以很多时候我们会把整个psd垂直分成几张图片，采用<strong>table</strong> + <strong>inline CSS</strong> + <strong>img</strong> 的方式去弄。</p>","more":"<p>好处：</p>\n<ul>\n<li>简单方便，直接切图，塞进img的src就好了，切图+拼html一般不超过半小时；</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>没有所谓的样式，只是个写满style属性的table，很凌乱不便维护；</li>\n<li>纯图片拼接，对于一些默认屏蔽图片的邮件商，会白屏；图片太大，可能会加载比较久；</li>\n<li>不符合响应式设计，没法做pc和移动页面自适应</li>\n</ul>\n<hr>\n<p>前几天，项目评审时说要发EDM，我上网搜了下，偶然看到一篇文章，介绍<a href=\"http://foundation.zurb.com/emails/docs/index.html\" target=\"_blank\" rel=\"noopener\">Inky</a>，一个号称支持响应式设计、兼容各个email client的邮件模板编译工具。</p>\n<p>玩了一下下，发现还真的不错！看了下他们的<a href=\"https://github.com/zurb/foundation-emails/releases\" target=\"_blank\" rel=\"noopener\">change log</a>，2013年11月的初版，今年3月都发了2.0啦，我是有多out，现在才知道，所以有了本文，希望更多不知道的小伙伴也可以enjoy这个方便的工具。</p>\n<h2 id=\"零、Inky简介\"><a href=\"#零、Inky简介\" class=\"headerlink\" title=\"零、Inky简介\"></a>零、Inky简介</h2><p>Inky的技术栈：-&gt; <a href=\"http://foundation.zurb.com/emails/docs/zurb-stack.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<ul>\n<li>Gulp</li>\n<li>Sass</li>\n<li>Inlining</li>\n<li>Panini</li>\n<li>BrowserSync</li>\n<li>Image Compression</li>\n</ul>\n<p>它能为我们带来什么？下面是自带的组件列表：</p>\n<ul>\n<li>The Grid：栅格化</li>\n<li>Global Styles：核心的框架样式和Sass变量</li>\n<li>Alignment Classes：对齐的CSS类（文本对齐和块元素对齐）</li>\n<li>Buttons：一些默认样式、大小的button</li>\n<li>Menu：菜单</li>\n<li>Spacer：通过传入高度，自动生成定高的空白块</li>\n<li>Wrapper：邮件正文100%宽的自定义背景块</li>\n<li>Typography：默认排版（样式）</li>\n<li>Visibility Classes：可以根据需求，设定在不同尺寸设备下（pc/wap）是否可见</li>\n</ul>\n<h2 id=\"一、初始化步骤：\"><a href=\"#一、初始化步骤：\" class=\"headerlink\" title=\"一、初始化步骤：\"></a>一、初始化步骤：</h2><p>传送门：<a href=\"http://foundation.zurb.com/emails/docs/sass-guide.html\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"I-安装fundation命令行工具\"><a href=\"#I-安装fundation命令行工具\" class=\"headerlink\" title=\"I. 安装fundation命令行工具\"></a>I. 安装fundation命令行工具</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">npm</span> install --<span class=\"built_in\">global</span> foundation-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"II-初始化email开发环境\"><a href=\"#II-初始化email开发环境\" class=\"headerlink\" title=\"II. 初始化email开发环境\"></a>II. 初始化email开发环境</h3><p>进入你的项目目录内，执行初始化命令，如执行 cd my-project 后再执行：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foundation <span class=\"keyword\">new</span> <span class=\"comment\">--framework emails</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"III-本地运行-amp-调试\"><a href=\"#III-本地运行-amp-调试\" class=\"headerlink\" title=\"III. 本地运行&amp;调试\"></a>III. 本地运行&amp;调试</h3><p>执行完后，会自动打开浏览器窗口：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> start</span><br></pre></td></tr></table></figure>\n<h3 id=\"IV-编译产出\"><a href=\"#IV-编译产出\" class=\"headerlink\" title=\"IV. 编译产出\"></a>IV. 编译产出</h3><p>当你在本地调得差不多之后，就可以产出压缩、样式inline的html文件啦</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">run</span><span class=\"bash\"> build</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、看个demo\"><a href=\"#二、看个demo\" class=\"headerlink\" title=\"二、看个demo\"></a>二、看个demo</h2><p>下面看个demo，你就知道inky有多棒，不需要再手写table和inline css啦！</p>\n<ul>\n<li>container是大容器</li>\n<li>row代表一行，满宽栅格是12</li>\n<li>small代表小屏，large代表大屏，可以分别设置在不同屏幕下的栅格比例，达到响应式设计</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">subject: My Email Subject</span><br><span class=\"line\">---</span><br><span class=\"line\">&lt;container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"marine-container\"</span>&gt;</span><br><span class=\"line\">    &lt;row <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"info-area\"</span>&gt; </span><br><span class=\"line\">        &lt;columns small=<span class=\"string\">\"12\"</span> large=<span class=\"string\">\"9\"</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"info\"</span>&gt;</span><br><span class=\"line\">                &lt;h3&gt;View...&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;p&gt;bala bala...&lt;/</span>p&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>columns&gt;</span><br><span class=\"line\">        &lt;columns small=<span class=\"string\">\"12\"</span> large=<span class=\"string\">\"3\"</span>&gt;</span><br><span class=\"line\">            &lt;a href=<span class=\"string\">\"xxx\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"btn-guide\"</span>&gt;Click&lt;br/&gt;For Guide&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>columns&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/row&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;row&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;columns small=\"12\" large=\"12\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;div class=\"person-area\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;a href=\"\"&gt;Search...&lt;/</span>a&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\">                &lt;img src=<span class=\"string\">\"http://cdn.sinacloud.net/mailchimp/marine.jpg\"</span>&gt;</span><br><span class=\"line\">                &lt;p&gt;</span><br><span class=\"line\">                    Kate Carter&lt;br/&gt;</span><br><span class=\"line\">                    Y...&lt;br/&gt;</span><br><span class=\"line\">                    mobile: xxxx&lt;br/&gt;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/columns&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>row&gt;</span><br><span class=\"line\">    &lt;row&gt;</span><br><span class=\"line\">        &lt;columns small=<span class=\"string\">\"12\"</span> large=<span class=\"string\">\"12\"</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"footer\"</span>&gt;</span><br><span class=\"line\">                &lt;a href=<span class=\"string\">\"\"</span>&gt;xxxx&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;span&gt;|&lt;/</span>span&gt;</span><br><span class=\"line\">                &lt;a href=<span class=\"string\">\"\"</span>&gt;xxxx&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;!-- 省略一万字 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/columns&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>row&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/container&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/inky/marine-pc-wap.jpg\" alt=\"pc和wap对比图\"></p>\n<h2 id=\"三、相关链接：\"><a href=\"#三、相关链接：\" class=\"headerlink\" title=\"三、相关链接：\"></a>三、相关链接：</h2><h3 id=\"1-demo：\"><a href=\"#1-demo：\" class=\"headerlink\" title=\"1. demo：\"></a>1. demo：</h3><ul>\n<li>原始文件：<a href=\"http://cdn.sinacloud.net/woodysblog/inky/marine-original.html\" target=\"_blank\" rel=\"noopener\">marine-original.html</a>  </li>\n<li>编译后文件：<a href=\"http://cdn.sinacloud.net/woodysblog/inky/marine-dist.html\" target=\"_blank\" rel=\"noopener\">marine-dist.html</a></li>\n</ul>\n<h3 id=\"2-官网\"><a href=\"#2-官网\" class=\"headerlink\" title=\"2. 官网\"></a>2. 官网</h3><ul>\n<li><a href=\"http://foundation.zurb.com/emails/docs/sass-guide.html\" target=\"_blank\" rel=\"noopener\">Getting Started with Sass</a>  </li>\n<li><a href=\"http://foundation.zurb.com/emails.html\" target=\"_blank\" rel=\"noopener\">Foundation for Email</a></li>\n</ul>"},{"title":"Katikati找工记-伍酱在纽村","date":"2016-10-26T06:22:00.000Z","_content":"\n叫我找工小能手！\n\n<!-- more -->\n\n我们在Whitianga的Albert Number 6换宿，其实还挺爽了，每天工作1个钟左右，都是些轻松愉快的活儿，cleaning、bedmaking、room service等，之后的时间就自由噜，下午写写代码、看看书、去海边散散步，就这样过去2周。\n\n直到有一天，我看到了Katikati的一个酒庄[wineportfolio](http://www.wineportfolio.co.nz/wineportfolio/)在招人，做wine bottling（生产线里把瓶子放到出酒口），那么轻松愉快又能近距离接触红酒生产的工作，我特别感兴趣，想在离开纽村前做一下，于是打电话过去问，确实要人，不过要本人去酒庄填表等消息。\n\n就这么愉快的决定了要去Katikati找工作，然而Katikati也是个奇异果+牛油果小镇，不如顺便也看看有没有packhouse在招人啰~\n\n无心插柳柳成荫，结果是酒庄没有要我们，但收获了2间packhouse的offer，未来3周我们就在Seeka开展了新一段赚钱之旅。\n\n上述其实都是背景故事啦，本文主要想聊一下怎么有效地找工作。但是工作经历有限，只有两次packhouse经验，嘎嘎 ：）\n\n# 第一份工作\n\n像我的第一份工作，kiwifruit repacking，在Opotiki的[Riverlock](http://www.riverlock.co.nz)，是怎么找到的呢？Walk in~\n\n```\n直接到果园、工厂所在地，到前台找相关负责人问相关岗位是否还缺人。一般会当场得到答复，或者填表等待通知。\n```\n\n我也是来了才知道的一种找工作方式，效果特别好，有时候打电话没用，亲自去前台问却会有满意答复。\n\n一开始，我们去Opotiki是因为联系到一个中间人Jess，她帮我们联系的工头，做kiwifruit pruning，但工头不想跟做得不够快的人签合同，因为签合同意味着必须给最低工资，于是叫你一直试工（计件不计时），确定你能达到最低工资要求了，再签约。这不是坑吗？不做被剥削的人民！不干~\n\n此时我看到微信群消息，Te puke的哪哪哪packhouse在招工。packhouse是什么？之前不知道有这个工种，都在找orchard的户外工作。Google一下，嗷，做包装的，特点是室内、工时稳定，订单多的时候工时还很长，存钱快。感觉做这个也挺好的，我在Google Map上一搜packhouse，咦，Opotiki也有很多家！走起~\n\nGoogle Map的搜索技巧很重要，\"opotiki packhouse\"、\"opotiki pack house\"、\"opotiki pack\"我都试了下，得到以下结果：\n\n![\"Opotiki pack results\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/opotikiPackhouse.png)\n\n接下来就是看着地图，挨家去walk in了。\n\nwalk in Opotiki的三家packhouse（Eastpack、OPAC、Riverlock），反正最后捏，Riverlock的老大Audrey叫我们下周一去上班，我们开始了持续1个半月的kiwifruit repacking工作。具体过程不再详述了，因为在之前的一篇日志[《当临时工1周，我买了辆车》](/nz/blog/archives/about-work/#关于“工作”这件小事)已经写过啦 ：）\n\n# 第二份工作\n\n回到文章的一开头，来Katikati找酒庄工作，却拿到了2个packhouse的offer，都是因为在对的时间去了合适的地方，后来了解到不是长期招人，刚好有一批员工离开。Katikati周边的packhouse和orchard都很多，特别多工作机会~\n\n故技重施，在Google Map上搜\"Katikati packhouse\"，结果超多：  \n![\"Katikati packhouse\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/katikatiPackhouse.png)\n\n我们花了一个多小时walk in，几乎全问了一遍，加上我们有repacking的经验（在一个领域有经验，后面找工作真的容易很多），最后Seeka和HUME都说要人，明天来签合同~Bingo！\n\n![\"找工记录\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/jobList.jpg)  \n![\"Seeka的合同\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaContract.jpg)  \n\n看看我们的工作时间公告牌和工作环境（内容）吧~\n![\"公告牌\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaWorktime.JPG)  \n![\"Seeka一角\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaScene.JPG)  \n\n# 找工tips\n\n* 留意各大working holiday群的工作消息，可以发现你原本不知道的工种；\n* 通过本地人介绍/去i-Site问，可能会了解到地图上搜不到的工厂；\n* 不做伸手党，自己Google和walk in；\n* 在一个领域有了经验，下次再找类似工作会更有优势。","source":"_posts/job-hunting-whv.md","raw":"---\ntitle: Katikati找工记-伍酱在纽村\ntags:\n  - working holiday\n  - whv\n  - New Zealand\ndate: 2016-10-26 14:22:00\n---\n\n叫我找工小能手！\n\n<!-- more -->\n\n我们在Whitianga的Albert Number 6换宿，其实还挺爽了，每天工作1个钟左右，都是些轻松愉快的活儿，cleaning、bedmaking、room service等，之后的时间就自由噜，下午写写代码、看看书、去海边散散步，就这样过去2周。\n\n直到有一天，我看到了Katikati的一个酒庄[wineportfolio](http://www.wineportfolio.co.nz/wineportfolio/)在招人，做wine bottling（生产线里把瓶子放到出酒口），那么轻松愉快又能近距离接触红酒生产的工作，我特别感兴趣，想在离开纽村前做一下，于是打电话过去问，确实要人，不过要本人去酒庄填表等消息。\n\n就这么愉快的决定了要去Katikati找工作，然而Katikati也是个奇异果+牛油果小镇，不如顺便也看看有没有packhouse在招人啰~\n\n无心插柳柳成荫，结果是酒庄没有要我们，但收获了2间packhouse的offer，未来3周我们就在Seeka开展了新一段赚钱之旅。\n\n上述其实都是背景故事啦，本文主要想聊一下怎么有效地找工作。但是工作经历有限，只有两次packhouse经验，嘎嘎 ：）\n\n# 第一份工作\n\n像我的第一份工作，kiwifruit repacking，在Opotiki的[Riverlock](http://www.riverlock.co.nz)，是怎么找到的呢？Walk in~\n\n```\n直接到果园、工厂所在地，到前台找相关负责人问相关岗位是否还缺人。一般会当场得到答复，或者填表等待通知。\n```\n\n我也是来了才知道的一种找工作方式，效果特别好，有时候打电话没用，亲自去前台问却会有满意答复。\n\n一开始，我们去Opotiki是因为联系到一个中间人Jess，她帮我们联系的工头，做kiwifruit pruning，但工头不想跟做得不够快的人签合同，因为签合同意味着必须给最低工资，于是叫你一直试工（计件不计时），确定你能达到最低工资要求了，再签约。这不是坑吗？不做被剥削的人民！不干~\n\n此时我看到微信群消息，Te puke的哪哪哪packhouse在招工。packhouse是什么？之前不知道有这个工种，都在找orchard的户外工作。Google一下，嗷，做包装的，特点是室内、工时稳定，订单多的时候工时还很长，存钱快。感觉做这个也挺好的，我在Google Map上一搜packhouse，咦，Opotiki也有很多家！走起~\n\nGoogle Map的搜索技巧很重要，\"opotiki packhouse\"、\"opotiki pack house\"、\"opotiki pack\"我都试了下，得到以下结果：\n\n![\"Opotiki pack results\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/opotikiPackhouse.png)\n\n接下来就是看着地图，挨家去walk in了。\n\nwalk in Opotiki的三家packhouse（Eastpack、OPAC、Riverlock），反正最后捏，Riverlock的老大Audrey叫我们下周一去上班，我们开始了持续1个半月的kiwifruit repacking工作。具体过程不再详述了，因为在之前的一篇日志[《当临时工1周，我买了辆车》](/nz/blog/archives/about-work/#关于“工作”这件小事)已经写过啦 ：）\n\n# 第二份工作\n\n回到文章的一开头，来Katikati找酒庄工作，却拿到了2个packhouse的offer，都是因为在对的时间去了合适的地方，后来了解到不是长期招人，刚好有一批员工离开。Katikati周边的packhouse和orchard都很多，特别多工作机会~\n\n故技重施，在Google Map上搜\"Katikati packhouse\"，结果超多：  \n![\"Katikati packhouse\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/katikatiPackhouse.png)\n\n我们花了一个多小时walk in，几乎全问了一遍，加上我们有repacking的经验（在一个领域有经验，后面找工作真的容易很多），最后Seeka和HUME都说要人，明天来签合同~Bingo！\n\n![\"找工记录\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/jobList.jpg)  \n![\"Seeka的合同\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaContract.jpg)  \n\n看看我们的工作时间公告牌和工作环境（内容）吧~\n![\"公告牌\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaWorktime.JPG)  \n![\"Seeka一角\"](http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaScene.JPG)  \n\n# 找工tips\n\n* 留意各大working holiday群的工作消息，可以发现你原本不知道的工种；\n* 通过本地人介绍/去i-Site问，可能会了解到地图上搜不到的工厂；\n* 不做伸手党，自己Google和walk in；\n* 在一个领域有了经验，下次再找类似工作会更有优势。","slug":"job-hunting-whv","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x95002dzvr3h6bpyygc","content":"<p>叫我找工小能手！</p>\n<a id=\"more\"></a>\n<p>我们在Whitianga的Albert Number 6换宿，其实还挺爽了，每天工作1个钟左右，都是些轻松愉快的活儿，cleaning、bedmaking、room service等，之后的时间就自由噜，下午写写代码、看看书、去海边散散步，就这样过去2周。</p>\n<p>直到有一天，我看到了Katikati的一个酒庄<a href=\"http://www.wineportfolio.co.nz/wineportfolio/\" target=\"_blank\" rel=\"noopener\">wineportfolio</a>在招人，做wine bottling（生产线里把瓶子放到出酒口），那么轻松愉快又能近距离接触红酒生产的工作，我特别感兴趣，想在离开纽村前做一下，于是打电话过去问，确实要人，不过要本人去酒庄填表等消息。</p>\n<p>就这么愉快的决定了要去Katikati找工作，然而Katikati也是个奇异果+牛油果小镇，不如顺便也看看有没有packhouse在招人啰~</p>\n<p>无心插柳柳成荫，结果是酒庄没有要我们，但收获了2间packhouse的offer，未来3周我们就在Seeka开展了新一段赚钱之旅。</p>\n<p>上述其实都是背景故事啦，本文主要想聊一下怎么有效地找工作。但是工作经历有限，只有两次packhouse经验，嘎嘎 ：）</p>\n<h1 id=\"第一份工作\"><a href=\"#第一份工作\" class=\"headerlink\" title=\"第一份工作\"></a>第一份工作</h1><p>像我的第一份工作，kiwifruit repacking，在Opotiki的<a href=\"http://www.riverlock.co.nz\" target=\"_blank\" rel=\"noopener\">Riverlock</a>，是怎么找到的呢？Walk in~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接到果园、工厂所在地，到前台找相关负责人问相关岗位是否还缺人。一般会当场得到答复，或者填表等待通知。</span><br></pre></td></tr></table></figure>\n<p>我也是来了才知道的一种找工作方式，效果特别好，有时候打电话没用，亲自去前台问却会有满意答复。</p>\n<p>一开始，我们去Opotiki是因为联系到一个中间人Jess，她帮我们联系的工头，做kiwifruit pruning，但工头不想跟做得不够快的人签合同，因为签合同意味着必须给最低工资，于是叫你一直试工（计件不计时），确定你能达到最低工资要求了，再签约。这不是坑吗？不做被剥削的人民！不干~</p>\n<p>此时我看到微信群消息，Te puke的哪哪哪packhouse在招工。packhouse是什么？之前不知道有这个工种，都在找orchard的户外工作。Google一下，嗷，做包装的，特点是室内、工时稳定，订单多的时候工时还很长，存钱快。感觉做这个也挺好的，我在Google Map上一搜packhouse，咦，Opotiki也有很多家！走起~</p>\n<p>Google Map的搜索技巧很重要，”opotiki packhouse”、”opotiki pack house”、”opotiki pack”我都试了下，得到以下结果：</p>\n<p><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/opotikiPackhouse.png\" alt=\"&quot;Opotiki pack results&quot;\"></p>\n<p>接下来就是看着地图，挨家去walk in了。</p>\n<p>walk in Opotiki的三家packhouse（Eastpack、OPAC、Riverlock），反正最后捏，Riverlock的老大Audrey叫我们下周一去上班，我们开始了持续1个半月的kiwifruit repacking工作。具体过程不再详述了，因为在之前的一篇日志<a href=\"/nz/blog/archives/about-work/#关于“工作”这件小事\">《当临时工1周，我买了辆车》</a>已经写过啦 ：）</p>\n<h1 id=\"第二份工作\"><a href=\"#第二份工作\" class=\"headerlink\" title=\"第二份工作\"></a>第二份工作</h1><p>回到文章的一开头，来Katikati找酒庄工作，却拿到了2个packhouse的offer，都是因为在对的时间去了合适的地方，后来了解到不是长期招人，刚好有一批员工离开。Katikati周边的packhouse和orchard都很多，特别多工作机会~</p>\n<p>故技重施，在Google Map上搜”Katikati packhouse”，结果超多：<br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/katikatiPackhouse.png\" alt=\"&quot;Katikati packhouse&quot;\"></p>\n<p>我们花了一个多小时walk in，几乎全问了一遍，加上我们有repacking的经验（在一个领域有经验，后面找工作真的容易很多），最后Seeka和HUME都说要人，明天来签合同~Bingo！</p>\n<p><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/jobList.jpg\" alt=\"&quot;找工记录&quot;\"><br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaContract.jpg\" alt=\"&quot;Seeka的合同&quot;\">  </p>\n<p>看看我们的工作时间公告牌和工作环境（内容）吧~<br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaWorktime.JPG\" alt=\"&quot;公告牌&quot;\"><br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaScene.JPG\" alt=\"&quot;Seeka一角&quot;\">  </p>\n<h1 id=\"找工tips\"><a href=\"#找工tips\" class=\"headerlink\" title=\"找工tips\"></a>找工tips</h1><ul>\n<li>留意各大working holiday群的工作消息，可以发现你原本不知道的工种；</li>\n<li>通过本地人介绍/去i-Site问，可能会了解到地图上搜不到的工厂；</li>\n<li>不做伸手党，自己Google和walk in；</li>\n<li>在一个领域有了经验，下次再找类似工作会更有优势。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>叫我找工小能手！</p>","more":"<p>我们在Whitianga的Albert Number 6换宿，其实还挺爽了，每天工作1个钟左右，都是些轻松愉快的活儿，cleaning、bedmaking、room service等，之后的时间就自由噜，下午写写代码、看看书、去海边散散步，就这样过去2周。</p>\n<p>直到有一天，我看到了Katikati的一个酒庄<a href=\"http://www.wineportfolio.co.nz/wineportfolio/\" target=\"_blank\" rel=\"noopener\">wineportfolio</a>在招人，做wine bottling（生产线里把瓶子放到出酒口），那么轻松愉快又能近距离接触红酒生产的工作，我特别感兴趣，想在离开纽村前做一下，于是打电话过去问，确实要人，不过要本人去酒庄填表等消息。</p>\n<p>就这么愉快的决定了要去Katikati找工作，然而Katikati也是个奇异果+牛油果小镇，不如顺便也看看有没有packhouse在招人啰~</p>\n<p>无心插柳柳成荫，结果是酒庄没有要我们，但收获了2间packhouse的offer，未来3周我们就在Seeka开展了新一段赚钱之旅。</p>\n<p>上述其实都是背景故事啦，本文主要想聊一下怎么有效地找工作。但是工作经历有限，只有两次packhouse经验，嘎嘎 ：）</p>\n<h1 id=\"第一份工作\"><a href=\"#第一份工作\" class=\"headerlink\" title=\"第一份工作\"></a>第一份工作</h1><p>像我的第一份工作，kiwifruit repacking，在Opotiki的<a href=\"http://www.riverlock.co.nz\" target=\"_blank\" rel=\"noopener\">Riverlock</a>，是怎么找到的呢？Walk in~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接到果园、工厂所在地，到前台找相关负责人问相关岗位是否还缺人。一般会当场得到答复，或者填表等待通知。</span><br></pre></td></tr></table></figure>\n<p>我也是来了才知道的一种找工作方式，效果特别好，有时候打电话没用，亲自去前台问却会有满意答复。</p>\n<p>一开始，我们去Opotiki是因为联系到一个中间人Jess，她帮我们联系的工头，做kiwifruit pruning，但工头不想跟做得不够快的人签合同，因为签合同意味着必须给最低工资，于是叫你一直试工（计件不计时），确定你能达到最低工资要求了，再签约。这不是坑吗？不做被剥削的人民！不干~</p>\n<p>此时我看到微信群消息，Te puke的哪哪哪packhouse在招工。packhouse是什么？之前不知道有这个工种，都在找orchard的户外工作。Google一下，嗷，做包装的，特点是室内、工时稳定，订单多的时候工时还很长，存钱快。感觉做这个也挺好的，我在Google Map上一搜packhouse，咦，Opotiki也有很多家！走起~</p>\n<p>Google Map的搜索技巧很重要，”opotiki packhouse”、”opotiki pack house”、”opotiki pack”我都试了下，得到以下结果：</p>\n<p><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/opotikiPackhouse.png\" alt=\"&quot;Opotiki pack results&quot;\"></p>\n<p>接下来就是看着地图，挨家去walk in了。</p>\n<p>walk in Opotiki的三家packhouse（Eastpack、OPAC、Riverlock），反正最后捏，Riverlock的老大Audrey叫我们下周一去上班，我们开始了持续1个半月的kiwifruit repacking工作。具体过程不再详述了，因为在之前的一篇日志<a href=\"/nz/blog/archives/about-work/#关于“工作”这件小事\">《当临时工1周，我买了辆车》</a>已经写过啦 ：）</p>\n<h1 id=\"第二份工作\"><a href=\"#第二份工作\" class=\"headerlink\" title=\"第二份工作\"></a>第二份工作</h1><p>回到文章的一开头，来Katikati找酒庄工作，却拿到了2个packhouse的offer，都是因为在对的时间去了合适的地方，后来了解到不是长期招人，刚好有一批员工离开。Katikati周边的packhouse和orchard都很多，特别多工作机会~</p>\n<p>故技重施，在Google Map上搜”Katikati packhouse”，结果超多：<br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/katikatiPackhouse.png\" alt=\"&quot;Katikati packhouse&quot;\"></p>\n<p>我们花了一个多小时walk in，几乎全问了一遍，加上我们有repacking的经验（在一个领域有经验，后面找工作真的容易很多），最后Seeka和HUME都说要人，明天来签合同~Bingo！</p>\n<p><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/jobList.jpg\" alt=\"&quot;找工记录&quot;\"><br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaContract.jpg\" alt=\"&quot;Seeka的合同&quot;\">  </p>\n<p>看看我们的工作时间公告牌和工作环境（内容）吧~<br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaWorktime.JPG\" alt=\"&quot;公告牌&quot;\"><br><img src=\"http://cdn.sinacloud.net/workingholiday/whv-job-hunting/seekaScene.JPG\" alt=\"&quot;Seeka一角&quot;\">  </p>\n<h1 id=\"找工tips\"><a href=\"#找工tips\" class=\"headerlink\" title=\"找工tips\"></a>找工tips</h1><ul>\n<li>留意各大working holiday群的工作消息，可以发现你原本不知道的工种；</li>\n<li>通过本地人介绍/去i-Site问，可能会了解到地图上搜不到的工厂；</li>\n<li>不做伸手党，自己Google和walk in；</li>\n<li>在一个领域有了经验，下次再找类似工作会更有优势。</li>\n</ul>"},{"title":"Kindle从5.6.1到5.4.4的降级+ 刷多看（Paperwhite 1代）","date":"2017-01-15T07:00:20.000Z","_content":"Kindle自动升级到5.6.1.1后，多看阅读就没办法装了，貌似是2年前就说在研发，但一直没有下文……最近多看出了本《S.》的电子本，特别想看，于是上网搜了下，咦，终于降级成功，在这简单分享一下吧。\n\n<!-- more -->\n\n## 准备材料：\n\n* Kindle 一台\n* Kindle 5.4.4 [降级包](https://pan.baidu.com/s/1c2by8cK)\n* 多看阅读 for kindle [安装包](http://www.miui.com/thread-2558456-1-1.html)（下载对应版本）\n\n## 降级\n1. Kindle连接电脑；\n2. 降级包（不要更改文件名）放到Kindle的根目录，即与document同级；\n3. **千万不要弹出Kindle（不要拔usb线）**，长按电源键，按到Kindle在电脑显示弹出状态为止。\n\n降级就那么轻松愉快地结束了！\n\n## 给Kindle刷多看阅读\n1. Kindle连接电脑；\n2. 安装包的文件（DK_System、update_kindle_巴拉巴拉）放在Kindle的根目录；\n3. 拷贝完成后，弹出Kindle（拔线）\n4. Kindle回到主目录，菜单/menu -> 设置/setting -> 更新你的Kindle/update your Kindle\n\n于是你的Kindle就开始自己玩，闪呀闪，重启呀重启，然后多看就这样在重启中装好了 ：）\n\n## 防止Kindle自动更新\n如果Kindle不小心连上了WiFi，又不小心自动升级到最新版的系统，那降级和多看都白刷了~所以我们想要把自动升级这个进程堵住。\n\n新建一个名叫**update.bin.tmp.partial**的文件，放在Kindle的根目录，这是半下载状态的升级包名字，打断系统自动下载新的升级包~\n\n\n\n","source":"_posts/kindle-duokan.md","raw":"---\ntitle: Kindle从5.6.1到5.4.4的降级+ 刷多看（Paperwhite 1代）\ndate: 2017-01-15 15:00:20\ntags:\n - tech\n---\nKindle自动升级到5.6.1.1后，多看阅读就没办法装了，貌似是2年前就说在研发，但一直没有下文……最近多看出了本《S.》的电子本，特别想看，于是上网搜了下，咦，终于降级成功，在这简单分享一下吧。\n\n<!-- more -->\n\n## 准备材料：\n\n* Kindle 一台\n* Kindle 5.4.4 [降级包](https://pan.baidu.com/s/1c2by8cK)\n* 多看阅读 for kindle [安装包](http://www.miui.com/thread-2558456-1-1.html)（下载对应版本）\n\n## 降级\n1. Kindle连接电脑；\n2. 降级包（不要更改文件名）放到Kindle的根目录，即与document同级；\n3. **千万不要弹出Kindle（不要拔usb线）**，长按电源键，按到Kindle在电脑显示弹出状态为止。\n\n降级就那么轻松愉快地结束了！\n\n## 给Kindle刷多看阅读\n1. Kindle连接电脑；\n2. 安装包的文件（DK_System、update_kindle_巴拉巴拉）放在Kindle的根目录；\n3. 拷贝完成后，弹出Kindle（拔线）\n4. Kindle回到主目录，菜单/menu -> 设置/setting -> 更新你的Kindle/update your Kindle\n\n于是你的Kindle就开始自己玩，闪呀闪，重启呀重启，然后多看就这样在重启中装好了 ：）\n\n## 防止Kindle自动更新\n如果Kindle不小心连上了WiFi，又不小心自动升级到最新版的系统，那降级和多看都白刷了~所以我们想要把自动升级这个进程堵住。\n\n新建一个名叫**update.bin.tmp.partial**的文件，放在Kindle的根目录，这是半下载状态的升级包名字，打断系统自动下载新的升级包~\n\n\n\n","slug":"kindle-duokan","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x97002gzvr342v5rdui","content":"<p>Kindle自动升级到5.6.1.1后，多看阅读就没办法装了，貌似是2年前就说在研发，但一直没有下文……最近多看出了本《S.》的电子本，特别想看，于是上网搜了下，咦，终于降级成功，在这简单分享一下吧。</p>\n<a id=\"more\"></a>\n<h2 id=\"准备材料：\"><a href=\"#准备材料：\" class=\"headerlink\" title=\"准备材料：\"></a>准备材料：</h2><ul>\n<li>Kindle 一台</li>\n<li>Kindle 5.4.4 <a href=\"https://pan.baidu.com/s/1c2by8cK\" target=\"_blank\" rel=\"noopener\">降级包</a></li>\n<li>多看阅读 for kindle <a href=\"http://www.miui.com/thread-2558456-1-1.html\" target=\"_blank\" rel=\"noopener\">安装包</a>（下载对应版本）</li>\n</ul>\n<h2 id=\"降级\"><a href=\"#降级\" class=\"headerlink\" title=\"降级\"></a>降级</h2><ol>\n<li>Kindle连接电脑；</li>\n<li>降级包（不要更改文件名）放到Kindle的根目录，即与document同级；</li>\n<li><strong>千万不要弹出Kindle（不要拔usb线）</strong>，长按电源键，按到Kindle在电脑显示弹出状态为止。</li>\n</ol>\n<p>降级就那么轻松愉快地结束了！</p>\n<h2 id=\"给Kindle刷多看阅读\"><a href=\"#给Kindle刷多看阅读\" class=\"headerlink\" title=\"给Kindle刷多看阅读\"></a>给Kindle刷多看阅读</h2><ol>\n<li>Kindle连接电脑；</li>\n<li>安装包的文件（DK_System、update_kindle_巴拉巴拉）放在Kindle的根目录；</li>\n<li>拷贝完成后，弹出Kindle（拔线）</li>\n<li>Kindle回到主目录，菜单/menu -&gt; 设置/setting -&gt; 更新你的Kindle/update your Kindle</li>\n</ol>\n<p>于是你的Kindle就开始自己玩，闪呀闪，重启呀重启，然后多看就这样在重启中装好了 ：）</p>\n<h2 id=\"防止Kindle自动更新\"><a href=\"#防止Kindle自动更新\" class=\"headerlink\" title=\"防止Kindle自动更新\"></a>防止Kindle自动更新</h2><p>如果Kindle不小心连上了WiFi，又不小心自动升级到最新版的系统，那降级和多看都白刷了~所以我们想要把自动升级这个进程堵住。</p>\n<p>新建一个名叫<strong>update.bin.tmp.partial</strong>的文件，放在Kindle的根目录，这是半下载状态的升级包名字，打断系统自动下载新的升级包~</p>\n","site":{"data":{}},"excerpt":"<p>Kindle自动升级到5.6.1.1后，多看阅读就没办法装了，貌似是2年前就说在研发，但一直没有下文……最近多看出了本《S.》的电子本，特别想看，于是上网搜了下，咦，终于降级成功，在这简单分享一下吧。</p>","more":"<h2 id=\"准备材料：\"><a href=\"#准备材料：\" class=\"headerlink\" title=\"准备材料：\"></a>准备材料：</h2><ul>\n<li>Kindle 一台</li>\n<li>Kindle 5.4.4 <a href=\"https://pan.baidu.com/s/1c2by8cK\" target=\"_blank\" rel=\"noopener\">降级包</a></li>\n<li>多看阅读 for kindle <a href=\"http://www.miui.com/thread-2558456-1-1.html\" target=\"_blank\" rel=\"noopener\">安装包</a>（下载对应版本）</li>\n</ul>\n<h2 id=\"降级\"><a href=\"#降级\" class=\"headerlink\" title=\"降级\"></a>降级</h2><ol>\n<li>Kindle连接电脑；</li>\n<li>降级包（不要更改文件名）放到Kindle的根目录，即与document同级；</li>\n<li><strong>千万不要弹出Kindle（不要拔usb线）</strong>，长按电源键，按到Kindle在电脑显示弹出状态为止。</li>\n</ol>\n<p>降级就那么轻松愉快地结束了！</p>\n<h2 id=\"给Kindle刷多看阅读\"><a href=\"#给Kindle刷多看阅读\" class=\"headerlink\" title=\"给Kindle刷多看阅读\"></a>给Kindle刷多看阅读</h2><ol>\n<li>Kindle连接电脑；</li>\n<li>安装包的文件（DK_System、update_kindle_巴拉巴拉）放在Kindle的根目录；</li>\n<li>拷贝完成后，弹出Kindle（拔线）</li>\n<li>Kindle回到主目录，菜单/menu -&gt; 设置/setting -&gt; 更新你的Kindle/update your Kindle</li>\n</ol>\n<p>于是你的Kindle就开始自己玩，闪呀闪，重启呀重启，然后多看就这样在重启中装好了 ：）</p>\n<h2 id=\"防止Kindle自动更新\"><a href=\"#防止Kindle自动更新\" class=\"headerlink\" title=\"防止Kindle自动更新\"></a>防止Kindle自动更新</h2><p>如果Kindle不小心连上了WiFi，又不小心自动升级到最新版的系统，那降级和多看都白刷了~所以我们想要把自动升级这个进程堵住。</p>\n<p>新建一个名叫<strong>update.bin.tmp.partial</strong>的文件，放在Kindle的根目录，这是半下载状态的升级包名字，打断系统自动下载新的升级包~</p>"},{"title":"Mac使用记录","id":"58","date":"2014-10-26T15:24:50.000Z","updateDate":"2017-04-21T09:02:00.000Z","type":"title","_content":"\n慢慢记录Mac OS那些好用的东东~\n\n## 程序员的那些软件/使用技巧\n\n### iTerm —— oh-my-zsh\n\n> Oh My Zsh will not make you a 10x developer...but you might feel like one.\n\n又一个程序员的装B神器~ 目前对我最有用的是可以直接看到git branch的信息，更重要的是很好看，哈哈 ：）\n\n![](http://sinacloud.net/woodysblog/articles/oh-my-zsh.png)\n\n```sh\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\nchsh -s /bin/zsh\n\n// 重启iTerm\n```\n\n更多详见[github](https://github.com/robbyrussell/oh-my-zsh)。\n\n### Sip\n超好用的取色小软件，在切图时尤其好用。附上[官网地址](http://sipapp.io)。\n\n### MWeb Lite\n也就是本文编辑的markdown IDE，UI挺漂亮的，有免费版和[付费版](http://zh.mweb.im/index.html)，嘿嘿，我在用免费版，使用外部模式，md文档同步百度云，也可以达到同步文档效果啦~\n\n\n## 实用小软件\n\n### Caffeine\n这杯小咖啡可以让你的Mac不会自动锁屏，有时候在写东西，走神一段时间，回神一看，屏幕锁了，多不开心呀，可以要把屏幕hold住~ 附上[官网](http://lightheadsw.com/caffeine/)。\n\n## OS使用技巧：\n\n写于2014年。\n\n入了mac pro，摸索了接近2个月，平时工作、生活上的使用基本ok；\n\n对于习惯使用windows的同学们，学习OS还是有点成本的，导致有的朋友把mac刷成windows了；\n\n在猩爷的带领下，学习[唠科](http://www.weibo.com/laotech?from=feed&amp;loc=nickname)大神的mac入门视频，有条理，入门很快，推荐一下[《深入浅出OS X》](http://v.youku.com/v_show/id_XNDk1NTA0OTU2.html?from=y1.2-1-105.3.10-2.1-1-1-9)\n\n期间也看过两本关于OS的书：\n\n1.  [《MacTalk 人生元编程》](http://book.douban.com/subject/25826578/)\n不是一本纯粹讲os技巧的书，更像文集，推荐的app和使用技巧挺有用的；\n2.  [《Mac功夫》](http://book.douban.com/subject/20256399/)\n300+条使用技巧，个人觉得太细了，很多功能其实用不上，在读书过程中整理出来的技巧，在唠科的视频教程中也有覆盖到~\n\n* 右键\n  * 选中目标，两根手指同时点到触摸板，唤出菜单栏\n* 移动\n  * 选中目标，三根手指点到触摸板，移动\n* 文件重命名\n  * 选中文件，按回车（return键），就可以rename\n* 显示桌面\n  * cmd + F3\n* 锁屏\n  * 系统偏好设置 - 安全性 - 通用，进入睡眠或者屏保，要求密码\n  * 键盘控制：control + shift + 开关键\n  * 触摸角\n    * 屏保设置：偏好设置 - mission control - 触发角 - 左下角（自定义） - 启动屏幕保护\n    * 触发：触摸板滑到自定义的触摸角锁屏\n* 剪切文件\n  * 复制 cmd + c\n  * 粘贴 cmd + v\n  * 剪切 cmd + option + v\n* 切换  \n  * 应用程序切换 cmd + tab\n  * 标签切换 control + shift + tab\n* 查看多个文件的信息（容量等）\n  * 选中多个文件\n  * option + cmd + i\n* 查看磁盘容量\n  * finder - 显示 - 显示状态栏\n* 缩放dock\n  * 上下拉动dock上的\"斑马线\"\n* 强行退出程序\n  * 命令：cmd + shift + esc\n  * 活动监视器：应用程序 - 实用工具 - 活动监视器，把没有响应的程序关闭\n* 保持mac的活动状态\n  * pmset noidle\n* 截屏\n  * 截图复制到粘贴板 cmd + shift + control + 4\n  * 截图并保存到桌面 cmd + shift + 4\n  * 截屏，到粘贴板或者保存到桌面，以上命令改为3\n* 滚动到顶/底部\n  * 按住option，点击滚动条的顶/底部","source":"_posts/mac-notes.md","raw":"---\ntitle: Mac使用记录\ntags:\n  - life\n  - mac\n  - study\nid: 58\ncategories:\n  - study\ndate: 2014-10-26 23:24:50\nupdateDate: 2017-04-21 17:02:00\ntype: title\n---\n\n慢慢记录Mac OS那些好用的东东~\n\n## 程序员的那些软件/使用技巧\n\n### iTerm —— oh-my-zsh\n\n> Oh My Zsh will not make you a 10x developer...but you might feel like one.\n\n又一个程序员的装B神器~ 目前对我最有用的是可以直接看到git branch的信息，更重要的是很好看，哈哈 ：）\n\n![](http://sinacloud.net/woodysblog/articles/oh-my-zsh.png)\n\n```sh\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\nchsh -s /bin/zsh\n\n// 重启iTerm\n```\n\n更多详见[github](https://github.com/robbyrussell/oh-my-zsh)。\n\n### Sip\n超好用的取色小软件，在切图时尤其好用。附上[官网地址](http://sipapp.io)。\n\n### MWeb Lite\n也就是本文编辑的markdown IDE，UI挺漂亮的，有免费版和[付费版](http://zh.mweb.im/index.html)，嘿嘿，我在用免费版，使用外部模式，md文档同步百度云，也可以达到同步文档效果啦~\n\n\n## 实用小软件\n\n### Caffeine\n这杯小咖啡可以让你的Mac不会自动锁屏，有时候在写东西，走神一段时间，回神一看，屏幕锁了，多不开心呀，可以要把屏幕hold住~ 附上[官网](http://lightheadsw.com/caffeine/)。\n\n## OS使用技巧：\n\n写于2014年。\n\n入了mac pro，摸索了接近2个月，平时工作、生活上的使用基本ok；\n\n对于习惯使用windows的同学们，学习OS还是有点成本的，导致有的朋友把mac刷成windows了；\n\n在猩爷的带领下，学习[唠科](http://www.weibo.com/laotech?from=feed&amp;loc=nickname)大神的mac入门视频，有条理，入门很快，推荐一下[《深入浅出OS X》](http://v.youku.com/v_show/id_XNDk1NTA0OTU2.html?from=y1.2-1-105.3.10-2.1-1-1-9)\n\n期间也看过两本关于OS的书：\n\n1.  [《MacTalk 人生元编程》](http://book.douban.com/subject/25826578/)\n不是一本纯粹讲os技巧的书，更像文集，推荐的app和使用技巧挺有用的；\n2.  [《Mac功夫》](http://book.douban.com/subject/20256399/)\n300+条使用技巧，个人觉得太细了，很多功能其实用不上，在读书过程中整理出来的技巧，在唠科的视频教程中也有覆盖到~\n\n* 右键\n  * 选中目标，两根手指同时点到触摸板，唤出菜单栏\n* 移动\n  * 选中目标，三根手指点到触摸板，移动\n* 文件重命名\n  * 选中文件，按回车（return键），就可以rename\n* 显示桌面\n  * cmd + F3\n* 锁屏\n  * 系统偏好设置 - 安全性 - 通用，进入睡眠或者屏保，要求密码\n  * 键盘控制：control + shift + 开关键\n  * 触摸角\n    * 屏保设置：偏好设置 - mission control - 触发角 - 左下角（自定义） - 启动屏幕保护\n    * 触发：触摸板滑到自定义的触摸角锁屏\n* 剪切文件\n  * 复制 cmd + c\n  * 粘贴 cmd + v\n  * 剪切 cmd + option + v\n* 切换  \n  * 应用程序切换 cmd + tab\n  * 标签切换 control + shift + tab\n* 查看多个文件的信息（容量等）\n  * 选中多个文件\n  * option + cmd + i\n* 查看磁盘容量\n  * finder - 显示 - 显示状态栏\n* 缩放dock\n  * 上下拉动dock上的\"斑马线\"\n* 强行退出程序\n  * 命令：cmd + shift + esc\n  * 活动监视器：应用程序 - 实用工具 - 活动监视器，把没有响应的程序关闭\n* 保持mac的活动状态\n  * pmset noidle\n* 截屏\n  * 截图复制到粘贴板 cmd + shift + control + 4\n  * 截图并保存到桌面 cmd + shift + 4\n  * 截屏，到粘贴板或者保存到桌面，以上命令改为3\n* 滚动到顶/底部\n  * 按住option，点击滚动条的顶/底部","slug":"mac-notes","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x98002jzvr3ff33su87","content":"<p>慢慢记录Mac OS那些好用的东东~</p>\n<h2 id=\"程序员的那些软件-使用技巧\"><a href=\"#程序员的那些软件-使用技巧\" class=\"headerlink\" title=\"程序员的那些软件/使用技巧\"></a>程序员的那些软件/使用技巧</h2><h3 id=\"iTerm-——-oh-my-zsh\"><a href=\"#iTerm-——-oh-my-zsh\" class=\"headerlink\" title=\"iTerm —— oh-my-zsh\"></a>iTerm —— oh-my-zsh</h3><blockquote>\n<p>Oh My Zsh will not make you a 10x developer…but you might feel like one.</p>\n</blockquote>\n<p>又一个程序员的装B神器~ 目前对我最有用的是可以直接看到git branch的信息，更重要的是很好看，哈哈 ：）</p>\n<p><img src=\"http://sinacloud.net/woodysblog/articles/oh-my-zsh.png\" alt=\"\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启iTerm</span><br></pre></td></tr></table></figure>\n<p>更多详见<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">github</a>。</p>\n<h3 id=\"Sip\"><a href=\"#Sip\" class=\"headerlink\" title=\"Sip\"></a>Sip</h3><p>超好用的取色小软件，在切图时尤其好用。附上<a href=\"http://sipapp.io\" target=\"_blank\" rel=\"noopener\">官网地址</a>。</p>\n<h3 id=\"MWeb-Lite\"><a href=\"#MWeb-Lite\" class=\"headerlink\" title=\"MWeb Lite\"></a>MWeb Lite</h3><p>也就是本文编辑的markdown IDE，UI挺漂亮的，有免费版和<a href=\"http://zh.mweb.im/index.html\" target=\"_blank\" rel=\"noopener\">付费版</a>，嘿嘿，我在用免费版，使用外部模式，md文档同步百度云，也可以达到同步文档效果啦~</p>\n<h2 id=\"实用小软件\"><a href=\"#实用小软件\" class=\"headerlink\" title=\"实用小软件\"></a>实用小软件</h2><h3 id=\"Caffeine\"><a href=\"#Caffeine\" class=\"headerlink\" title=\"Caffeine\"></a>Caffeine</h3><p>这杯小咖啡可以让你的Mac不会自动锁屏，有时候在写东西，走神一段时间，回神一看，屏幕锁了，多不开心呀，可以要把屏幕hold住~ 附上<a href=\"http://lightheadsw.com/caffeine/\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<h2 id=\"OS使用技巧：\"><a href=\"#OS使用技巧：\" class=\"headerlink\" title=\"OS使用技巧：\"></a>OS使用技巧：</h2><p>写于2014年。</p>\n<p>入了mac pro，摸索了接近2个月，平时工作、生活上的使用基本ok；</p>\n<p>对于习惯使用windows的同学们，学习OS还是有点成本的，导致有的朋友把mac刷成windows了；</p>\n<p>在猩爷的带领下，学习<a href=\"http://www.weibo.com/laotech?from=feed&amp;loc=nickname\" target=\"_blank\" rel=\"noopener\">唠科</a>大神的mac入门视频，有条理，入门很快，推荐一下<a href=\"http://v.youku.com/v_show/id_XNDk1NTA0OTU2.html?from=y1.2-1-105.3.10-2.1-1-1-9\" target=\"_blank\" rel=\"noopener\">《深入浅出OS X》</a></p>\n<p>期间也看过两本关于OS的书：</p>\n<ol>\n<li><a href=\"http://book.douban.com/subject/25826578/\" target=\"_blank\" rel=\"noopener\">《MacTalk 人生元编程》</a><br>不是一本纯粹讲os技巧的书，更像文集，推荐的app和使用技巧挺有用的；</li>\n<li><a href=\"http://book.douban.com/subject/20256399/\" target=\"_blank\" rel=\"noopener\">《Mac功夫》</a><br>300+条使用技巧，个人觉得太细了，很多功能其实用不上，在读书过程中整理出来的技巧，在唠科的视频教程中也有覆盖到~</li>\n</ol>\n<ul>\n<li>右键<ul>\n<li>选中目标，两根手指同时点到触摸板，唤出菜单栏</li>\n</ul>\n</li>\n<li>移动<ul>\n<li>选中目标，三根手指点到触摸板，移动</li>\n</ul>\n</li>\n<li>文件重命名<ul>\n<li>选中文件，按回车（return键），就可以rename</li>\n</ul>\n</li>\n<li>显示桌面<ul>\n<li>cmd + F3</li>\n</ul>\n</li>\n<li>锁屏<ul>\n<li>系统偏好设置 - 安全性 - 通用，进入睡眠或者屏保，要求密码</li>\n<li>键盘控制：control + shift + 开关键</li>\n<li>触摸角<ul>\n<li>屏保设置：偏好设置 - mission control - 触发角 - 左下角（自定义） - 启动屏幕保护</li>\n<li>触发：触摸板滑到自定义的触摸角锁屏</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>剪切文件<ul>\n<li>复制 cmd + c</li>\n<li>粘贴 cmd + v</li>\n<li>剪切 cmd + option + v</li>\n</ul>\n</li>\n<li>切换  <ul>\n<li>应用程序切换 cmd + tab</li>\n<li>标签切换 control + shift + tab</li>\n</ul>\n</li>\n<li>查看多个文件的信息（容量等）<ul>\n<li>选中多个文件</li>\n<li>option + cmd + i</li>\n</ul>\n</li>\n<li>查看磁盘容量<ul>\n<li>finder - 显示 - 显示状态栏</li>\n</ul>\n</li>\n<li>缩放dock<ul>\n<li>上下拉动dock上的”斑马线”</li>\n</ul>\n</li>\n<li>强行退出程序<ul>\n<li>命令：cmd + shift + esc</li>\n<li>活动监视器：应用程序 - 实用工具 - 活动监视器，把没有响应的程序关闭</li>\n</ul>\n</li>\n<li>保持mac的活动状态<ul>\n<li>pmset noidle</li>\n</ul>\n</li>\n<li>截屏<ul>\n<li>截图复制到粘贴板 cmd + shift + control + 4</li>\n<li>截图并保存到桌面 cmd + shift + 4</li>\n<li>截屏，到粘贴板或者保存到桌面，以上命令改为3</li>\n</ul>\n</li>\n<li>滚动到顶/底部<ul>\n<li>按住option，点击滚动条的顶/底部</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>慢慢记录Mac OS那些好用的东东~</p>\n<h2 id=\"程序员的那些软件-使用技巧\"><a href=\"#程序员的那些软件-使用技巧\" class=\"headerlink\" title=\"程序员的那些软件/使用技巧\"></a>程序员的那些软件/使用技巧</h2><h3 id=\"iTerm-——-oh-my-zsh\"><a href=\"#iTerm-——-oh-my-zsh\" class=\"headerlink\" title=\"iTerm —— oh-my-zsh\"></a>iTerm —— oh-my-zsh</h3><blockquote>\n<p>Oh My Zsh will not make you a 10x developer…but you might feel like one.</p>\n</blockquote>\n<p>又一个程序员的装B神器~ 目前对我最有用的是可以直接看到git branch的信息，更重要的是很好看，哈哈 ：）</p>\n<p><img src=\"http://sinacloud.net/woodysblog/articles/oh-my-zsh.png\" alt=\"\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启iTerm</span><br></pre></td></tr></table></figure>\n<p>更多详见<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">github</a>。</p>\n<h3 id=\"Sip\"><a href=\"#Sip\" class=\"headerlink\" title=\"Sip\"></a>Sip</h3><p>超好用的取色小软件，在切图时尤其好用。附上<a href=\"http://sipapp.io\" target=\"_blank\" rel=\"noopener\">官网地址</a>。</p>\n<h3 id=\"MWeb-Lite\"><a href=\"#MWeb-Lite\" class=\"headerlink\" title=\"MWeb Lite\"></a>MWeb Lite</h3><p>也就是本文编辑的markdown IDE，UI挺漂亮的，有免费版和<a href=\"http://zh.mweb.im/index.html\" target=\"_blank\" rel=\"noopener\">付费版</a>，嘿嘿，我在用免费版，使用外部模式，md文档同步百度云，也可以达到同步文档效果啦~</p>\n<h2 id=\"实用小软件\"><a href=\"#实用小软件\" class=\"headerlink\" title=\"实用小软件\"></a>实用小软件</h2><h3 id=\"Caffeine\"><a href=\"#Caffeine\" class=\"headerlink\" title=\"Caffeine\"></a>Caffeine</h3><p>这杯小咖啡可以让你的Mac不会自动锁屏，有时候在写东西，走神一段时间，回神一看，屏幕锁了，多不开心呀，可以要把屏幕hold住~ 附上<a href=\"http://lightheadsw.com/caffeine/\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<h2 id=\"OS使用技巧：\"><a href=\"#OS使用技巧：\" class=\"headerlink\" title=\"OS使用技巧：\"></a>OS使用技巧：</h2><p>写于2014年。</p>\n<p>入了mac pro，摸索了接近2个月，平时工作、生活上的使用基本ok；</p>\n<p>对于习惯使用windows的同学们，学习OS还是有点成本的，导致有的朋友把mac刷成windows了；</p>\n<p>在猩爷的带领下，学习<a href=\"http://www.weibo.com/laotech?from=feed&amp;loc=nickname\" target=\"_blank\" rel=\"noopener\">唠科</a>大神的mac入门视频，有条理，入门很快，推荐一下<a href=\"http://v.youku.com/v_show/id_XNDk1NTA0OTU2.html?from=y1.2-1-105.3.10-2.1-1-1-9\" target=\"_blank\" rel=\"noopener\">《深入浅出OS X》</a></p>\n<p>期间也看过两本关于OS的书：</p>\n<ol>\n<li><a href=\"http://book.douban.com/subject/25826578/\" target=\"_blank\" rel=\"noopener\">《MacTalk 人生元编程》</a><br>不是一本纯粹讲os技巧的书，更像文集，推荐的app和使用技巧挺有用的；</li>\n<li><a href=\"http://book.douban.com/subject/20256399/\" target=\"_blank\" rel=\"noopener\">《Mac功夫》</a><br>300+条使用技巧，个人觉得太细了，很多功能其实用不上，在读书过程中整理出来的技巧，在唠科的视频教程中也有覆盖到~</li>\n</ol>\n<ul>\n<li>右键<ul>\n<li>选中目标，两根手指同时点到触摸板，唤出菜单栏</li>\n</ul>\n</li>\n<li>移动<ul>\n<li>选中目标，三根手指点到触摸板，移动</li>\n</ul>\n</li>\n<li>文件重命名<ul>\n<li>选中文件，按回车（return键），就可以rename</li>\n</ul>\n</li>\n<li>显示桌面<ul>\n<li>cmd + F3</li>\n</ul>\n</li>\n<li>锁屏<ul>\n<li>系统偏好设置 - 安全性 - 通用，进入睡眠或者屏保，要求密码</li>\n<li>键盘控制：control + shift + 开关键</li>\n<li>触摸角<ul>\n<li>屏保设置：偏好设置 - mission control - 触发角 - 左下角（自定义） - 启动屏幕保护</li>\n<li>触发：触摸板滑到自定义的触摸角锁屏</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>剪切文件<ul>\n<li>复制 cmd + c</li>\n<li>粘贴 cmd + v</li>\n<li>剪切 cmd + option + v</li>\n</ul>\n</li>\n<li>切换  <ul>\n<li>应用程序切换 cmd + tab</li>\n<li>标签切换 control + shift + tab</li>\n</ul>\n</li>\n<li>查看多个文件的信息（容量等）<ul>\n<li>选中多个文件</li>\n<li>option + cmd + i</li>\n</ul>\n</li>\n<li>查看磁盘容量<ul>\n<li>finder - 显示 - 显示状态栏</li>\n</ul>\n</li>\n<li>缩放dock<ul>\n<li>上下拉动dock上的”斑马线”</li>\n</ul>\n</li>\n<li>强行退出程序<ul>\n<li>命令：cmd + shift + esc</li>\n<li>活动监视器：应用程序 - 实用工具 - 活动监视器，把没有响应的程序关闭</li>\n</ul>\n</li>\n<li>保持mac的活动状态<ul>\n<li>pmset noidle</li>\n</ul>\n</li>\n<li>截屏<ul>\n<li>截图复制到粘贴板 cmd + shift + control + 4</li>\n<li>截图并保存到桌面 cmd + shift + 4</li>\n<li>截屏，到粘贴板或者保存到桌面，以上命令改为3</li>\n</ul>\n</li>\n<li>滚动到顶/底部<ul>\n<li>按住option，点击滚动条的顶/底部</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JavaScript网页动画设计：velocity.js","date":"2016-04-22T08:46:19.000Z","_content":"\n最近读了一本讲js动画的书[《JavaScript网页动画设计》](https://book.douban.com/subject/26694195/)，看了开头就知道是本[velocity.js](http://www.julian.com/research/velocity/)的大型广告书，但不得不说，这个动画库可以给日常的动画开发带来许多的便利，在书中我也get到了一些动画开发的新思路，推荐一下~\n\n<!-- more -->\n\n## 一、动画代码优化\n* 单独把动画逻辑的js抽离成独立的文件\n* 定义一个对象（以动画目标命名），根据我们所需动画的设定，抽离出需要维护的参数，如动画的属性和选项\n\n```\nvar fadeIn = {\n    // p -> properties\n    p: {\n        opacity: 1,\n        top: \"50px\"\n    },\n    // o -> options\n    o: {\n        duration: 1000,\n        easing: \"linear\"\n    }\n};\n\n$element.velocity(fadeIn.p, fadeIn.o);\n```\n\n\n## 二、动画工作流\n\n### 1. 传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\n\n```\n// 设置element1的动画,紧接着设置element2的动画,紧接着设置element3的动画 $element1.velocity({ translateX: 100, opacity: 1 }, 1000, function() {\n$element2.velocity({ translateX: 200, opacity: 1 }, 1000, function() { $element3.velocity({ translateX: 300, opacity: 1 }, 1000);\n  }); 3 });\n```\n\n缺点：\n\n* 因为每一级都有嵌套,因此代码在横向上会迅速变长,这使得在IDE中编辑代码越来越 困难。\n* 在整个序列中,都无法轻易重新调整调用的顺序。(如果要调整的话,需要非常小心地复 制粘贴。)\n* 无法轻易指明哪些调用应该是并行运行的。比如在整个序列运行到一半的时候,想让两 幅图片从不同的起始点滑入视图。把这段代码写进去以后,怎么样嵌套并行的小序列之 后发生的动画,同时又不让原本已经难以维护的代码变得难上加难,就不是那么轻易能 办得到了。\n\n### 2. velocity序列触发（UI pack）\n\n```\n// 创建 Velocity 调用的数组 \nvar loadingSequence = [\n{ e: $element1, p: { translateX: 100, opacity: 1 }, o: { duration: 1000 } }, { e: $element2, p: { translateX: 200, opacity: 1 }, o: { duration: 1000,  sequenceQueue: false } }, { e: $element3, p: { translateX: 300, opacity: 1 }, o: { duration: 1000 } }\n];\n\n// 将数组传入 $.Velocity.RunSequence 函数中以启动序列 \n$.Velocity.RunSequence(loadingSequence);\n```\n优点：\n\n* 可以很容易地对整个序列重新排序,不需要担心破坏了嵌套结构。\n* 可以迅速看出各个调用的属性和选项的不同之处。\n* 你的代码对别人来说也非常易读,其意图也一目了然。\n* $element2的option中，设置了sequenceQueue:false，使得$element1和$element2会并行触发\n\n### 3. 设计技巧\n\n#### 3.1 定义全局定时乘数\n\n在每个动画调用中，将这个乘数与duration和delay选项值相乘\n\n```\nvar M = 1;\n\n$element1.animate({ opacity: 1 }, { duration: 1000 * M }); $element2.velocity({ opacity: 1 }, { delay: 250 * M });\n```\n\n好处：\n\n* 慢速可以更容易分析单个元素如何跟其他元素互动\n* 执行重复性UI测试，方便加快动画播放速度\n\nTips:  \nVelocity中的方法能实现类似的功能：\n\n```\n$.Velocity.mock = 5;\n```\n\n\n#### 3.2 VMD 动效设计器\n[VMD](http://julian.com/research/velocity/#vmd)\n\n## 三、文本动画\n字符串切割的js插件：[blast](Julian.com/research/blast)  \n以sentence、word、character切割文本，添加blast或者自定义classname\n\n* 用blast切割文本\n* 把文本元素隐藏\n* 逐个元素动画相继延迟出现\n\n```\n// 选择之前已拆分的文本 \n$(\"div .blast\").velocity(\n    // 使用适当的UI pack效果让现有文本以动画方式离开视图     \"transition.fadeOut\",\n    {\n        // 像错开进入动画一样错开离开动画\n        stagger: 50,\n        backwards: true,\n        // 当文本离开视图的动画完成以后,开始文本进入视图的动画 \n        complete: function() {\n            // 继续进行文本进入视图的动画 \n            $(\"div\")\n                .html(message)\n                .blast({ delimiter: \"word\"})\n                .css(\"opacity\": 0)\n                .velocity({opacity: 1}, {stagger: 50});\n        }\n    }\n);\n```\n\n## 四、最佳实践\n\n* 减少dom元素重复查询，尽量复用变量\n* 监听scroll或者resize时，对事件句柄进行反跳（[debounce](davidwalsh.name/javascript-debounce-function )）\n* 当检测到用户使用性能较弱的浏览器，使所有动画立即完成\n\n```\n    $.Velocity.mock = true;\n```\n \n\n## Reference\n\n* [webflow](https://webflow.com/)\n* [SVG口袋指南](https://github.com/jonitrythall/svgpocketguide)\n","source":"_posts/javascript-animation.md","raw":"---\ntitle: JavaScript网页动画设计：velocity.js\ntags:\n  - tech\n  - reading\n  - javascript animation\n  - animate\n  - velocity.js\ndate: 2016-04-22 16:46:19\n---\n\n最近读了一本讲js动画的书[《JavaScript网页动画设计》](https://book.douban.com/subject/26694195/)，看了开头就知道是本[velocity.js](http://www.julian.com/research/velocity/)的大型广告书，但不得不说，这个动画库可以给日常的动画开发带来许多的便利，在书中我也get到了一些动画开发的新思路，推荐一下~\n\n<!-- more -->\n\n## 一、动画代码优化\n* 单独把动画逻辑的js抽离成独立的文件\n* 定义一个对象（以动画目标命名），根据我们所需动画的设定，抽离出需要维护的参数，如动画的属性和选项\n\n```\nvar fadeIn = {\n    // p -> properties\n    p: {\n        opacity: 1,\n        top: \"50px\"\n    },\n    // o -> options\n    o: {\n        duration: 1000,\n        easing: \"linear\"\n    }\n};\n\n$element.velocity(fadeIn.p, fadeIn.o);\n```\n\n\n## 二、动画工作流\n\n### 1. 传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\n\n```\n// 设置element1的动画,紧接着设置element2的动画,紧接着设置element3的动画 $element1.velocity({ translateX: 100, opacity: 1 }, 1000, function() {\n$element2.velocity({ translateX: 200, opacity: 1 }, 1000, function() { $element3.velocity({ translateX: 300, opacity: 1 }, 1000);\n  }); 3 });\n```\n\n缺点：\n\n* 因为每一级都有嵌套,因此代码在横向上会迅速变长,这使得在IDE中编辑代码越来越 困难。\n* 在整个序列中,都无法轻易重新调整调用的顺序。(如果要调整的话,需要非常小心地复 制粘贴。)\n* 无法轻易指明哪些调用应该是并行运行的。比如在整个序列运行到一半的时候,想让两 幅图片从不同的起始点滑入视图。把这段代码写进去以后,怎么样嵌套并行的小序列之 后发生的动画,同时又不让原本已经难以维护的代码变得难上加难,就不是那么轻易能 办得到了。\n\n### 2. velocity序列触发（UI pack）\n\n```\n// 创建 Velocity 调用的数组 \nvar loadingSequence = [\n{ e: $element1, p: { translateX: 100, opacity: 1 }, o: { duration: 1000 } }, { e: $element2, p: { translateX: 200, opacity: 1 }, o: { duration: 1000,  sequenceQueue: false } }, { e: $element3, p: { translateX: 300, opacity: 1 }, o: { duration: 1000 } }\n];\n\n// 将数组传入 $.Velocity.RunSequence 函数中以启动序列 \n$.Velocity.RunSequence(loadingSequence);\n```\n优点：\n\n* 可以很容易地对整个序列重新排序,不需要担心破坏了嵌套结构。\n* 可以迅速看出各个调用的属性和选项的不同之处。\n* 你的代码对别人来说也非常易读,其意图也一目了然。\n* $element2的option中，设置了sequenceQueue:false，使得$element1和$element2会并行触发\n\n### 3. 设计技巧\n\n#### 3.1 定义全局定时乘数\n\n在每个动画调用中，将这个乘数与duration和delay选项值相乘\n\n```\nvar M = 1;\n\n$element1.animate({ opacity: 1 }, { duration: 1000 * M }); $element2.velocity({ opacity: 1 }, { delay: 250 * M });\n```\n\n好处：\n\n* 慢速可以更容易分析单个元素如何跟其他元素互动\n* 执行重复性UI测试，方便加快动画播放速度\n\nTips:  \nVelocity中的方法能实现类似的功能：\n\n```\n$.Velocity.mock = 5;\n```\n\n\n#### 3.2 VMD 动效设计器\n[VMD](http://julian.com/research/velocity/#vmd)\n\n## 三、文本动画\n字符串切割的js插件：[blast](Julian.com/research/blast)  \n以sentence、word、character切割文本，添加blast或者自定义classname\n\n* 用blast切割文本\n* 把文本元素隐藏\n* 逐个元素动画相继延迟出现\n\n```\n// 选择之前已拆分的文本 \n$(\"div .blast\").velocity(\n    // 使用适当的UI pack效果让现有文本以动画方式离开视图     \"transition.fadeOut\",\n    {\n        // 像错开进入动画一样错开离开动画\n        stagger: 50,\n        backwards: true,\n        // 当文本离开视图的动画完成以后,开始文本进入视图的动画 \n        complete: function() {\n            // 继续进行文本进入视图的动画 \n            $(\"div\")\n                .html(message)\n                .blast({ delimiter: \"word\"})\n                .css(\"opacity\": 0)\n                .velocity({opacity: 1}, {stagger: 50});\n        }\n    }\n);\n```\n\n## 四、最佳实践\n\n* 减少dom元素重复查询，尽量复用变量\n* 监听scroll或者resize时，对事件句柄进行反跳（[debounce](davidwalsh.name/javascript-debounce-function )）\n* 当检测到用户使用性能较弱的浏览器，使所有动画立即完成\n\n```\n    $.Velocity.mock = true;\n```\n \n\n## Reference\n\n* [webflow](https://webflow.com/)\n* [SVG口袋指南](https://github.com/jonitrythall/svgpocketguide)\n","slug":"javascript-animation","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9a002mzvr34gv0gj1u","content":"<p>最近读了一本讲js动画的书<a href=\"https://book.douban.com/subject/26694195/\" target=\"_blank\" rel=\"noopener\">《JavaScript网页动画设计》</a>，看了开头就知道是本<a href=\"http://www.julian.com/research/velocity/\" target=\"_blank\" rel=\"noopener\">velocity.js</a>的大型广告书，但不得不说，这个动画库可以给日常的动画开发带来许多的便利，在书中我也get到了一些动画开发的新思路，推荐一下~</p>\n<a id=\"more\"></a>\n<h2 id=\"一、动画代码优化\"><a href=\"#一、动画代码优化\" class=\"headerlink\" title=\"一、动画代码优化\"></a>一、动画代码优化</h2><ul>\n<li>单独把动画逻辑的js抽离成独立的文件</li>\n<li>定义一个对象（以动画目标命名），根据我们所需动画的设定，抽离出需要维护的参数，如动画的属性和选项</li>\n</ul>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fadeIn = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// p -&gt; properties</span></span><br><span class=\"line\"><span class=\"symbol\">    p:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">        opacity:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"symbol\">        top:</span> <span class=\"string\">\"50px\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// o -&gt; options</span></span><br><span class=\"line\"><span class=\"symbol\">    o:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">        duration:</span> <span class=\"number\">1000</span>,</span><br><span class=\"line\"><span class=\"symbol\">        easing:</span> <span class=\"string\">\"linear\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$element.velocity(fadeIn.p, fadeIn.o);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、动画工作流\"><a href=\"#二、动画工作流\" class=\"headerlink\" title=\"二、动画工作流\"></a>二、动画工作流</h2><h3 id=\"1-传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\"><a href=\"#1-传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\" class=\"headerlink\" title=\"1. 传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\"></a>1. 传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画</h3><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置element1的动画,紧接着设置element2的动画,紧接着设置element3的动画 $element1.velocity(&#123; translateX: <span class=\"number\">100</span>, opacity: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>, <span class=\"keyword\">function</span>() &#123;</span><br><span class=\"line\">$element2.velocity(&#123; translateX: <span class=\"number\">200</span>, opacity: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>, function() &#123; $element3.velocity(&#123; translateX: <span class=\"number\">300</span>, opacity: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;); <span class=\"number\">3</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ul>\n<li>因为每一级都有嵌套,因此代码在横向上会迅速变长,这使得在IDE中编辑代码越来越 困难。</li>\n<li>在整个序列中,都无法轻易重新调整调用的顺序。(如果要调整的话,需要非常小心地复 制粘贴。)</li>\n<li>无法轻易指明哪些调用应该是并行运行的。比如在整个序列运行到一半的时候,想让两 幅图片从不同的起始点滑入视图。把这段代码写进去以后,怎么样嵌套并行的小序列之 后发生的动画,同时又不让原本已经难以维护的代码变得难上加难,就不是那么轻易能 办得到了。</li>\n</ul>\n<h3 id=\"2-velocity序列触发（UI-pack）\"><a href=\"#2-velocity序列触发（UI-pack）\" class=\"headerlink\" title=\"2. velocity序列触发（UI pack）\"></a>2. velocity序列触发（UI pack）</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Velocity 调用的数组 </span></span><br><span class=\"line\">var loadingSequence = [</span><br><span class=\"line\">&#123; <span class=\"string\">e:</span> $element1, <span class=\"string\">p:</span> &#123; <span class=\"string\">translateX:</span> <span class=\"number\">100</span>, <span class=\"string\">opacity:</span> <span class=\"number\">1</span> &#125;, <span class=\"string\">o:</span> &#123; <span class=\"string\">duration:</span> <span class=\"number\">1000</span> &#125; &#125;, &#123; <span class=\"string\">e:</span> $element2, <span class=\"string\">p:</span> &#123; <span class=\"string\">translateX:</span> <span class=\"number\">200</span>, <span class=\"string\">opacity:</span> <span class=\"number\">1</span> &#125;, <span class=\"string\">o:</span> &#123; <span class=\"string\">duration:</span> <span class=\"number\">1000</span>,  <span class=\"string\">sequenceQueue:</span> <span class=\"literal\">false</span> &#125; &#125;, &#123; <span class=\"string\">e:</span> $element3, <span class=\"string\">p:</span> &#123; <span class=\"string\">translateX:</span> <span class=\"number\">300</span>, <span class=\"string\">opacity:</span> <span class=\"number\">1</span> &#125;, <span class=\"string\">o:</span> &#123; <span class=\"string\">duration:</span> <span class=\"number\">1000</span> &#125; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数组传入 $.Velocity.RunSequence 函数中以启动序列 </span></span><br><span class=\"line\">$.Velocity.RunSequence(loadingSequence);</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>可以很容易地对整个序列重新排序,不需要担心破坏了嵌套结构。</li>\n<li>可以迅速看出各个调用的属性和选项的不同之处。</li>\n<li>你的代码对别人来说也非常易读,其意图也一目了然。</li>\n<li>$element2的option中，设置了sequenceQueue:false，使得$element1和$element2会并行触发</li>\n</ul>\n<h3 id=\"3-设计技巧\"><a href=\"#3-设计技巧\" class=\"headerlink\" title=\"3. 设计技巧\"></a>3. 设计技巧</h3><h4 id=\"3-1-定义全局定时乘数\"><a href=\"#3-1-定义全局定时乘数\" class=\"headerlink\" title=\"3.1 定义全局定时乘数\"></a>3.1 定义全局定时乘数</h4><p>在每个动画调用中，将这个乘数与duration和delay选项值相乘</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var M = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$element1.animate(&#123; opacity: <span class=\"number\">1</span> &#125;, &#123; duration: <span class=\"number\">1000</span> * M &#125;); $element2.velocity(&#123; opacity: <span class=\"number\">1</span> &#125;, &#123; delay: <span class=\"number\">250</span> * M &#125;);</span><br></pre></td></tr></table></figure>\n<p>好处：</p>\n<ul>\n<li>慢速可以更容易分析单个元素如何跟其他元素互动</li>\n<li>执行重复性UI测试，方便加快动画播放速度</li>\n</ul>\n<p>Tips:<br>Velocity中的方法能实现类似的功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">.Velocity.mock = 5;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-VMD-动效设计器\"><a href=\"#3-2-VMD-动效设计器\" class=\"headerlink\" title=\"3.2 VMD 动效设计器\"></a>3.2 VMD 动效设计器</h4><p><a href=\"http://julian.com/research/velocity/#vmd\" target=\"_blank\" rel=\"noopener\">VMD</a></p>\n<h2 id=\"三、文本动画\"><a href=\"#三、文本动画\" class=\"headerlink\" title=\"三、文本动画\"></a>三、文本动画</h2><p>字符串切割的js插件：<a href=\"Julian.com/research/blast\">blast</a><br>以sentence、word、character切割文本，添加blast或者自定义classname</p>\n<ul>\n<li>用blast切割文本</li>\n<li>把文本元素隐藏</li>\n<li>逐个元素动画相继延迟出现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 选择之前已拆分的文本 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div .blast\"</span>).velocity(</span><br><span class=\"line\">    <span class=\"comment\">// 使用适当的UI pack效果让现有文本以动画方式离开视图     \"transition.fadeOut\",</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 像错开进入动画一样错开离开动画</span></span><br><span class=\"line\">        stagger: <span class=\"number\">50</span>,</span><br><span class=\"line\">        backwards: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 当文本离开视图的动画完成以后,开始文本进入视图的动画 </span></span><br><span class=\"line\">        complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 继续进行文本进入视图的动画 </span></span><br><span class=\"line\">            $(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">                .html(message)</span><br><span class=\"line\">                .blast(&#123; <span class=\"attr\">delimiter</span>: <span class=\"string\">\"word\"</span>&#125;)</span><br><span class=\"line\">                .css(<span class=\"string\">\"opacity\"</span>: <span class=\"number\">0</span>)</span><br><span class=\"line\">                .velocity(&#123;<span class=\"attr\">opacity</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">stagger</span>: <span class=\"number\">50</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、最佳实践\"><a href=\"#四、最佳实践\" class=\"headerlink\" title=\"四、最佳实践\"></a>四、最佳实践</h2><ul>\n<li>减少dom元素重复查询，尽量复用变量</li>\n<li>监听scroll或者resize时，对事件句柄进行反跳（<a href=\"davidwalsh.name/javascript-debounce-function\">debounce</a>）</li>\n<li>当检测到用户使用性能较弱的浏览器，使所有动画立即完成</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">.Velocity.mock = <span class=\"literal\">true</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://webflow.com/\" target=\"_blank\" rel=\"noopener\">webflow</a></li>\n<li><a href=\"https://github.com/jonitrythall/svgpocketguide\" target=\"_blank\" rel=\"noopener\">SVG口袋指南</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近读了一本讲js动画的书<a href=\"https://book.douban.com/subject/26694195/\" target=\"_blank\" rel=\"noopener\">《JavaScript网页动画设计》</a>，看了开头就知道是本<a href=\"http://www.julian.com/research/velocity/\" target=\"_blank\" rel=\"noopener\">velocity.js</a>的大型广告书，但不得不说，这个动画库可以给日常的动画开发带来许多的便利，在书中我也get到了一些动画开发的新思路，推荐一下~</p>","more":"<h2 id=\"一、动画代码优化\"><a href=\"#一、动画代码优化\" class=\"headerlink\" title=\"一、动画代码优化\"></a>一、动画代码优化</h2><ul>\n<li>单独把动画逻辑的js抽离成独立的文件</li>\n<li>定义一个对象（以动画目标命名），根据我们所需动画的设定，抽离出需要维护的参数，如动画的属性和选项</li>\n</ul>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fadeIn = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// p -&gt; properties</span></span><br><span class=\"line\"><span class=\"symbol\">    p:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">        opacity:</span> <span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"symbol\">        top:</span> <span class=\"string\">\"50px\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// o -&gt; options</span></span><br><span class=\"line\"><span class=\"symbol\">    o:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">        duration:</span> <span class=\"number\">1000</span>,</span><br><span class=\"line\"><span class=\"symbol\">        easing:</span> <span class=\"string\">\"linear\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$element.velocity(fadeIn.p, fadeIn.o);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、动画工作流\"><a href=\"#二、动画工作流\" class=\"headerlink\" title=\"二、动画工作流\"></a>二、动画工作流</h2><h3 id=\"1-传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\"><a href=\"#1-传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\" class=\"headerlink\" title=\"1. 传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画\"></a>1. 传统方式：按照动画顺序，完成一个元素的动画后，callback里嵌套另一个元素的动画</h3><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置element1的动画,紧接着设置element2的动画,紧接着设置element3的动画 $element1.velocity(&#123; translateX: <span class=\"number\">100</span>, opacity: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>, <span class=\"keyword\">function</span>() &#123;</span><br><span class=\"line\">$element2.velocity(&#123; translateX: <span class=\"number\">200</span>, opacity: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>, function() &#123; $element3.velocity(&#123; translateX: <span class=\"number\">300</span>, opacity: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;); <span class=\"number\">3</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ul>\n<li>因为每一级都有嵌套,因此代码在横向上会迅速变长,这使得在IDE中编辑代码越来越 困难。</li>\n<li>在整个序列中,都无法轻易重新调整调用的顺序。(如果要调整的话,需要非常小心地复 制粘贴。)</li>\n<li>无法轻易指明哪些调用应该是并行运行的。比如在整个序列运行到一半的时候,想让两 幅图片从不同的起始点滑入视图。把这段代码写进去以后,怎么样嵌套并行的小序列之 后发生的动画,同时又不让原本已经难以维护的代码变得难上加难,就不是那么轻易能 办得到了。</li>\n</ul>\n<h3 id=\"2-velocity序列触发（UI-pack）\"><a href=\"#2-velocity序列触发（UI-pack）\" class=\"headerlink\" title=\"2. velocity序列触发（UI pack）\"></a>2. velocity序列触发（UI pack）</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Velocity 调用的数组 </span></span><br><span class=\"line\">var loadingSequence = [</span><br><span class=\"line\">&#123; <span class=\"string\">e:</span> $element1, <span class=\"string\">p:</span> &#123; <span class=\"string\">translateX:</span> <span class=\"number\">100</span>, <span class=\"string\">opacity:</span> <span class=\"number\">1</span> &#125;, <span class=\"string\">o:</span> &#123; <span class=\"string\">duration:</span> <span class=\"number\">1000</span> &#125; &#125;, &#123; <span class=\"string\">e:</span> $element2, <span class=\"string\">p:</span> &#123; <span class=\"string\">translateX:</span> <span class=\"number\">200</span>, <span class=\"string\">opacity:</span> <span class=\"number\">1</span> &#125;, <span class=\"string\">o:</span> &#123; <span class=\"string\">duration:</span> <span class=\"number\">1000</span>,  <span class=\"string\">sequenceQueue:</span> <span class=\"literal\">false</span> &#125; &#125;, &#123; <span class=\"string\">e:</span> $element3, <span class=\"string\">p:</span> &#123; <span class=\"string\">translateX:</span> <span class=\"number\">300</span>, <span class=\"string\">opacity:</span> <span class=\"number\">1</span> &#125;, <span class=\"string\">o:</span> &#123; <span class=\"string\">duration:</span> <span class=\"number\">1000</span> &#125; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数组传入 $.Velocity.RunSequence 函数中以启动序列 </span></span><br><span class=\"line\">$.Velocity.RunSequence(loadingSequence);</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>可以很容易地对整个序列重新排序,不需要担心破坏了嵌套结构。</li>\n<li>可以迅速看出各个调用的属性和选项的不同之处。</li>\n<li>你的代码对别人来说也非常易读,其意图也一目了然。</li>\n<li>$element2的option中，设置了sequenceQueue:false，使得$element1和$element2会并行触发</li>\n</ul>\n<h3 id=\"3-设计技巧\"><a href=\"#3-设计技巧\" class=\"headerlink\" title=\"3. 设计技巧\"></a>3. 设计技巧</h3><h4 id=\"3-1-定义全局定时乘数\"><a href=\"#3-1-定义全局定时乘数\" class=\"headerlink\" title=\"3.1 定义全局定时乘数\"></a>3.1 定义全局定时乘数</h4><p>在每个动画调用中，将这个乘数与duration和delay选项值相乘</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var M = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$element1.animate(&#123; opacity: <span class=\"number\">1</span> &#125;, &#123; duration: <span class=\"number\">1000</span> * M &#125;); $element2.velocity(&#123; opacity: <span class=\"number\">1</span> &#125;, &#123; delay: <span class=\"number\">250</span> * M &#125;);</span><br></pre></td></tr></table></figure>\n<p>好处：</p>\n<ul>\n<li>慢速可以更容易分析单个元素如何跟其他元素互动</li>\n<li>执行重复性UI测试，方便加快动画播放速度</li>\n</ul>\n<p>Tips:<br>Velocity中的方法能实现类似的功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">.Velocity.mock = 5;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-VMD-动效设计器\"><a href=\"#3-2-VMD-动效设计器\" class=\"headerlink\" title=\"3.2 VMD 动效设计器\"></a>3.2 VMD 动效设计器</h4><p><a href=\"http://julian.com/research/velocity/#vmd\" target=\"_blank\" rel=\"noopener\">VMD</a></p>\n<h2 id=\"三、文本动画\"><a href=\"#三、文本动画\" class=\"headerlink\" title=\"三、文本动画\"></a>三、文本动画</h2><p>字符串切割的js插件：<a href=\"Julian.com/research/blast\">blast</a><br>以sentence、word、character切割文本，添加blast或者自定义classname</p>\n<ul>\n<li>用blast切割文本</li>\n<li>把文本元素隐藏</li>\n<li>逐个元素动画相继延迟出现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 选择之前已拆分的文本 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div .blast\"</span>).velocity(</span><br><span class=\"line\">    <span class=\"comment\">// 使用适当的UI pack效果让现有文本以动画方式离开视图     \"transition.fadeOut\",</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 像错开进入动画一样错开离开动画</span></span><br><span class=\"line\">        stagger: <span class=\"number\">50</span>,</span><br><span class=\"line\">        backwards: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 当文本离开视图的动画完成以后,开始文本进入视图的动画 </span></span><br><span class=\"line\">        complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 继续进行文本进入视图的动画 </span></span><br><span class=\"line\">            $(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">                .html(message)</span><br><span class=\"line\">                .blast(&#123; <span class=\"attr\">delimiter</span>: <span class=\"string\">\"word\"</span>&#125;)</span><br><span class=\"line\">                .css(<span class=\"string\">\"opacity\"</span>: <span class=\"number\">0</span>)</span><br><span class=\"line\">                .velocity(&#123;<span class=\"attr\">opacity</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">stagger</span>: <span class=\"number\">50</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、最佳实践\"><a href=\"#四、最佳实践\" class=\"headerlink\" title=\"四、最佳实践\"></a>四、最佳实践</h2><ul>\n<li>减少dom元素重复查询，尽量复用变量</li>\n<li>监听scroll或者resize时，对事件句柄进行反跳（<a href=\"davidwalsh.name/javascript-debounce-function\">debounce</a>）</li>\n<li>当检测到用户使用性能较弱的浏览器，使所有动画立即完成</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">.Velocity.mock = <span class=\"literal\">true</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://webflow.com/\" target=\"_blank\" rel=\"noopener\">webflow</a></li>\n<li><a href=\"https://github.com/jonitrythall/svgpocketguide\" target=\"_blank\" rel=\"noopener\">SVG口袋指南</a></li>\n</ul>"},{"title":"MacTalk跨越边界：谈谈老程序员和技术leader","id":"288","date":"2016-03-21T09:08:19.000Z","_content":"\n第一句送给最有文采的程序员 —— 池建强老师  \n推荐程序员们看看哈，里面有很多编程路上的烦恼，[豆瓣传送门](https://book.douban.com/subject/26663519/) biu biu biu~  \n以下挑2个我觉得特别有意思的摘录 :)\n\n<!--more-->\n\n## 老程序员的价值\n在度厂差不多3年时间，我也是从一个刚毕业的学生，到经历过带我的老大和我带的小朋友的离别。现实真是这样，刚毕业的大学生如果足够勤奋、学习能力稍微可以的话，半年左右可以通过不断的学习和实践，达到独立完成项目的水平。有时候也会想，老程序员的价值到底在哪？\n\n文中这段摘录刚好回答了我的疑惑。除了编程技巧和程序设计能力，解决问题的能力需要经过时间、经验和无数惨痛教训历练出来的~没办法速成。  \n> 除了编程技巧和程序设计能力，解决问题的稳准狠是衡量一个程序员是否优秀的重要因素之一，也是资深技术人员真正的价值所在。\n>   \n> 一位刚毕业的大学生如果足够勤奋，他可以在两三个月之内掌握一门编程语言并编写出像模像样的软件，他们的学习速度甚至超过了我们这些老程序员，但是解决问题的能力是无法速成的，只能依赖时间、经验和惨痛的教训历练而成。有时候还需要灵感和运气。 \n>    \n> 在这个唯快不破的年代，我们没有那么多的时间，所以要通过逆向思维、经验教训、辗转腾挪、借力打力等方式以最小的代价快速解决问题。这才是老程序员的价值。\n\n## 关于技术领导\n\n在至今不太长的工作经历中，  \n首先站在前线小士兵来说，我认为一个靠谱的技术leader非常重要，在我刚步入职场时，很幸运遇到一群很棒的同事和神一样的技术leader，直接影响到后续我对这个领域的认识、工作方式、技术成长等等。在工作项目，遇到不懂的业务问题或者技术问题，老大就像神一样的存在，几乎无所不知，有问有答，就算遇到大家都不晓得的问题，老大也有会准确的思路判断，最后把问题解决~  \n然后在这几个月当了团队FE的小组长来说，体会到小伙伴需要更多的时间、空间自由发展，我不能期望TA一到岗马上能熟练完美的完成各种项目，需要给予他们充分的个人发展空间，不干涉太多，只在设计方案、代码评审上给建议，或者有解决不了的问题时当仁不让扛下，我也在努力地当一个靠谱的小组长 ：）  \n> 对于技术领导，我一直有个信条就是，上马提刀可砍人，下马执笔可治国！下属解决不了的问题，最终就是你的问题，所以，当没人能解决的时候，你就得站出来搞定它。并且告诉小伙伴解决问题的思路和方法，长此以往，小伙伴的猴子慢慢就都还回去了，人毕竟是要成长的。  \n>    \n> 当然，如果遇到不成长的小伙伴，你也别太为难自己，换个小伙伴就是了。  \n>   \n> 如果你是一位创业公司的领军人物，要常常反思的不是“我是不是做得太少了”，而是“我是不是管得太多了”。\n","source":"_posts/mactalk.md","raw":"---\ntitle: MacTalk跨越边界：谈谈老程序员和技术leader\ntags:\n  - coder\n  - mactalk\n  - reading\nid: 288\ncategories:\n  - 未分类\ndate: 2016-03-21 17:08:19\n---\n\n第一句送给最有文采的程序员 —— 池建强老师  \n推荐程序员们看看哈，里面有很多编程路上的烦恼，[豆瓣传送门](https://book.douban.com/subject/26663519/) biu biu biu~  \n以下挑2个我觉得特别有意思的摘录 :)\n\n<!--more-->\n\n## 老程序员的价值\n在度厂差不多3年时间，我也是从一个刚毕业的学生，到经历过带我的老大和我带的小朋友的离别。现实真是这样，刚毕业的大学生如果足够勤奋、学习能力稍微可以的话，半年左右可以通过不断的学习和实践，达到独立完成项目的水平。有时候也会想，老程序员的价值到底在哪？\n\n文中这段摘录刚好回答了我的疑惑。除了编程技巧和程序设计能力，解决问题的能力需要经过时间、经验和无数惨痛教训历练出来的~没办法速成。  \n> 除了编程技巧和程序设计能力，解决问题的稳准狠是衡量一个程序员是否优秀的重要因素之一，也是资深技术人员真正的价值所在。\n>   \n> 一位刚毕业的大学生如果足够勤奋，他可以在两三个月之内掌握一门编程语言并编写出像模像样的软件，他们的学习速度甚至超过了我们这些老程序员，但是解决问题的能力是无法速成的，只能依赖时间、经验和惨痛的教训历练而成。有时候还需要灵感和运气。 \n>    \n> 在这个唯快不破的年代，我们没有那么多的时间，所以要通过逆向思维、经验教训、辗转腾挪、借力打力等方式以最小的代价快速解决问题。这才是老程序员的价值。\n\n## 关于技术领导\n\n在至今不太长的工作经历中，  \n首先站在前线小士兵来说，我认为一个靠谱的技术leader非常重要，在我刚步入职场时，很幸运遇到一群很棒的同事和神一样的技术leader，直接影响到后续我对这个领域的认识、工作方式、技术成长等等。在工作项目，遇到不懂的业务问题或者技术问题，老大就像神一样的存在，几乎无所不知，有问有答，就算遇到大家都不晓得的问题，老大也有会准确的思路判断，最后把问题解决~  \n然后在这几个月当了团队FE的小组长来说，体会到小伙伴需要更多的时间、空间自由发展，我不能期望TA一到岗马上能熟练完美的完成各种项目，需要给予他们充分的个人发展空间，不干涉太多，只在设计方案、代码评审上给建议，或者有解决不了的问题时当仁不让扛下，我也在努力地当一个靠谱的小组长 ：）  \n> 对于技术领导，我一直有个信条就是，上马提刀可砍人，下马执笔可治国！下属解决不了的问题，最终就是你的问题，所以，当没人能解决的时候，你就得站出来搞定它。并且告诉小伙伴解决问题的思路和方法，长此以往，小伙伴的猴子慢慢就都还回去了，人毕竟是要成长的。  \n>    \n> 当然，如果遇到不成长的小伙伴，你也别太为难自己，换个小伙伴就是了。  \n>   \n> 如果你是一位创业公司的领军人物，要常常反思的不是“我是不是做得太少了”，而是“我是不是管得太多了”。\n","slug":"mactalk","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9b002pzvr3pd797rzy","content":"<p>第一句送给最有文采的程序员 —— 池建强老师<br>推荐程序员们看看哈，里面有很多编程路上的烦恼，<a href=\"https://book.douban.com/subject/26663519/\" target=\"_blank\" rel=\"noopener\">豆瓣传送门</a> biu biu biu~<br>以下挑2个我觉得特别有意思的摘录 :)</p>\n<a id=\"more\"></a>\n<h2 id=\"老程序员的价值\"><a href=\"#老程序员的价值\" class=\"headerlink\" title=\"老程序员的价值\"></a>老程序员的价值</h2><p>在度厂差不多3年时间，我也是从一个刚毕业的学生，到经历过带我的老大和我带的小朋友的离别。现实真是这样，刚毕业的大学生如果足够勤奋、学习能力稍微可以的话，半年左右可以通过不断的学习和实践，达到独立完成项目的水平。有时候也会想，老程序员的价值到底在哪？</p>\n<p>文中这段摘录刚好回答了我的疑惑。除了编程技巧和程序设计能力，解决问题的能力需要经过时间、经验和无数惨痛教训历练出来的~没办法速成。  </p>\n<blockquote>\n<p>除了编程技巧和程序设计能力，解决问题的稳准狠是衡量一个程序员是否优秀的重要因素之一，也是资深技术人员真正的价值所在。</p>\n<p>一位刚毕业的大学生如果足够勤奋，他可以在两三个月之内掌握一门编程语言并编写出像模像样的软件，他们的学习速度甚至超过了我们这些老程序员，但是解决问题的能力是无法速成的，只能依赖时间、经验和惨痛的教训历练而成。有时候还需要灵感和运气。 </p>\n<p>在这个唯快不破的年代，我们没有那么多的时间，所以要通过逆向思维、经验教训、辗转腾挪、借力打力等方式以最小的代价快速解决问题。这才是老程序员的价值。</p>\n</blockquote>\n<h2 id=\"关于技术领导\"><a href=\"#关于技术领导\" class=\"headerlink\" title=\"关于技术领导\"></a>关于技术领导</h2><p>在至今不太长的工作经历中，<br>首先站在前线小士兵来说，我认为一个靠谱的技术leader非常重要，在我刚步入职场时，很幸运遇到一群很棒的同事和神一样的技术leader，直接影响到后续我对这个领域的认识、工作方式、技术成长等等。在工作项目，遇到不懂的业务问题或者技术问题，老大就像神一样的存在，几乎无所不知，有问有答，就算遇到大家都不晓得的问题，老大也有会准确的思路判断，最后把问题解决~<br>然后在这几个月当了团队FE的小组长来说，体会到小伙伴需要更多的时间、空间自由发展，我不能期望TA一到岗马上能熟练完美的完成各种项目，需要给予他们充分的个人发展空间，不干涉太多，只在设计方案、代码评审上给建议，或者有解决不了的问题时当仁不让扛下，我也在努力地当一个靠谱的小组长 ：）  </p>\n<blockquote>\n<p>对于技术领导，我一直有个信条就是，上马提刀可砍人，下马执笔可治国！下属解决不了的问题，最终就是你的问题，所以，当没人能解决的时候，你就得站出来搞定它。并且告诉小伙伴解决问题的思路和方法，长此以往，小伙伴的猴子慢慢就都还回去了，人毕竟是要成长的。  </p>\n<p>当然，如果遇到不成长的小伙伴，你也别太为难自己，换个小伙伴就是了。  </p>\n<p>如果你是一位创业公司的领军人物，要常常反思的不是“我是不是做得太少了”，而是“我是不是管得太多了”。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>第一句送给最有文采的程序员 —— 池建强老师<br>推荐程序员们看看哈，里面有很多编程路上的烦恼，<a href=\"https://book.douban.com/subject/26663519/\" target=\"_blank\" rel=\"noopener\">豆瓣传送门</a> biu biu biu~<br>以下挑2个我觉得特别有意思的摘录 :)</p>","more":"<h2 id=\"老程序员的价值\"><a href=\"#老程序员的价值\" class=\"headerlink\" title=\"老程序员的价值\"></a>老程序员的价值</h2><p>在度厂差不多3年时间，我也是从一个刚毕业的学生，到经历过带我的老大和我带的小朋友的离别。现实真是这样，刚毕业的大学生如果足够勤奋、学习能力稍微可以的话，半年左右可以通过不断的学习和实践，达到独立完成项目的水平。有时候也会想，老程序员的价值到底在哪？</p>\n<p>文中这段摘录刚好回答了我的疑惑。除了编程技巧和程序设计能力，解决问题的能力需要经过时间、经验和无数惨痛教训历练出来的~没办法速成。  </p>\n<blockquote>\n<p>除了编程技巧和程序设计能力，解决问题的稳准狠是衡量一个程序员是否优秀的重要因素之一，也是资深技术人员真正的价值所在。</p>\n<p>一位刚毕业的大学生如果足够勤奋，他可以在两三个月之内掌握一门编程语言并编写出像模像样的软件，他们的学习速度甚至超过了我们这些老程序员，但是解决问题的能力是无法速成的，只能依赖时间、经验和惨痛的教训历练而成。有时候还需要灵感和运气。 </p>\n<p>在这个唯快不破的年代，我们没有那么多的时间，所以要通过逆向思维、经验教训、辗转腾挪、借力打力等方式以最小的代价快速解决问题。这才是老程序员的价值。</p>\n</blockquote>\n<h2 id=\"关于技术领导\"><a href=\"#关于技术领导\" class=\"headerlink\" title=\"关于技术领导\"></a>关于技术领导</h2><p>在至今不太长的工作经历中，<br>首先站在前线小士兵来说，我认为一个靠谱的技术leader非常重要，在我刚步入职场时，很幸运遇到一群很棒的同事和神一样的技术leader，直接影响到后续我对这个领域的认识、工作方式、技术成长等等。在工作项目，遇到不懂的业务问题或者技术问题，老大就像神一样的存在，几乎无所不知，有问有答，就算遇到大家都不晓得的问题，老大也有会准确的思路判断，最后把问题解决~<br>然后在这几个月当了团队FE的小组长来说，体会到小伙伴需要更多的时间、空间自由发展，我不能期望TA一到岗马上能熟练完美的完成各种项目，需要给予他们充分的个人发展空间，不干涉太多，只在设计方案、代码评审上给建议，或者有解决不了的问题时当仁不让扛下，我也在努力地当一个靠谱的小组长 ：）  </p>\n<blockquote>\n<p>对于技术领导，我一直有个信条就是，上马提刀可砍人，下马执笔可治国！下属解决不了的问题，最终就是你的问题，所以，当没人能解决的时候，你就得站出来搞定它。并且告诉小伙伴解决问题的思路和方法，长此以往，小伙伴的猴子慢慢就都还回去了，人毕竟是要成长的。  </p>\n<p>当然，如果遇到不成长的小伙伴，你也别太为难自己，换个小伙伴就是了。  </p>\n<p>如果你是一位创业公司的领军人物，要常常反思的不是“我是不是做得太少了”，而是“我是不是管得太多了”。</p>\n</blockquote>"},{"title":"markdown学习笔记","id":"105","date":"2014-10-20T10:32:27.000Z","_content":"\n# 1. 标题\n\n在开头加上**#**，有1-6个等级，N级标题就在开头加N个**#**\n\n    # 我就是1级标题\n\n# 2. block\n在开头加上\n \n    >\n\n> aaa\n> \n>  bbb\n\n<!--more-->\n\n# 3. 斜体 &amp;&amp; 粗体\n**粗体**，目标文字两端使用两个\n\n    **_**\n\n或者\n\n    *****\n\n夹着\n\n# 4. 换行\n在句末加两个**空格**换行\n\n# 5. 无序列表\n\n    * 列表1 \n    * 列表2\n    * 列表3\n\n在文字开头添加(*****, **+**, and **-**)实现无序列表，在符号和文字之间需要添加空格（建议：一个文档中用一种无序列表的表示方式）\n\n# 6. 有序列表\n\n    1.  ol-1\n    2.  ol-2\n    3.  ol-3 数字.空格，后面跟内容\n\n# 7. 链接\n\n    This is an [example link](http://example.com/).\n    [example link](http://example.com/)\n\n# 8. 图片\n\n    ![img](http://exp.bdstatic.com/static/common/widget/top-search-box/logo_1e63520.png \"jingyan\")\n\n# 9. code\n内容前放4个**空格**或者用tab即可\n\n# 10. 下划线\n在空白行下方使用 3个 ****\n\n    ***\n\n# 11. 表格\n\n| 状态码        | 类别           | 原因短语  |\n| ------------- |:-------------:| -----:|\n| 1XX      | information（信息性状态码） | 接收的请求正在处理 |\n| 2XX      | success（成功状态码）      |   请求正常处理完毕 |\n| 3XX | redirection（重定向状态码）      |    需要进行附加操作以完成请求 |\n| 4XX      | client error（客户端错误状态码）      |   服务器无法处理请求 |\n| 5XX | server error（服务器错误状态码）      |    服务器处理请求出错 |\n\n* * *\n\n详细教程请参考: [markdown语法中文教程](http://wowubuntu.com/markdown/#list)\n\n* * *\n","source":"_posts/markdown.md","raw":"---\ntitle: markdown学习笔记\ntags:\n  - study\nid: 105\ncategories:\n  - study\ndate: 2014-10-20 18:32:27\n---\n\n# 1. 标题\n\n在开头加上**#**，有1-6个等级，N级标题就在开头加N个**#**\n\n    # 我就是1级标题\n\n# 2. block\n在开头加上\n \n    >\n\n> aaa\n> \n>  bbb\n\n<!--more-->\n\n# 3. 斜体 &amp;&amp; 粗体\n**粗体**，目标文字两端使用两个\n\n    **_**\n\n或者\n\n    *****\n\n夹着\n\n# 4. 换行\n在句末加两个**空格**换行\n\n# 5. 无序列表\n\n    * 列表1 \n    * 列表2\n    * 列表3\n\n在文字开头添加(*****, **+**, and **-**)实现无序列表，在符号和文字之间需要添加空格（建议：一个文档中用一种无序列表的表示方式）\n\n# 6. 有序列表\n\n    1.  ol-1\n    2.  ol-2\n    3.  ol-3 数字.空格，后面跟内容\n\n# 7. 链接\n\n    This is an [example link](http://example.com/).\n    [example link](http://example.com/)\n\n# 8. 图片\n\n    ![img](http://exp.bdstatic.com/static/common/widget/top-search-box/logo_1e63520.png \"jingyan\")\n\n# 9. code\n内容前放4个**空格**或者用tab即可\n\n# 10. 下划线\n在空白行下方使用 3个 ****\n\n    ***\n\n# 11. 表格\n\n| 状态码        | 类别           | 原因短语  |\n| ------------- |:-------------:| -----:|\n| 1XX      | information（信息性状态码） | 接收的请求正在处理 |\n| 2XX      | success（成功状态码）      |   请求正常处理完毕 |\n| 3XX | redirection（重定向状态码）      |    需要进行附加操作以完成请求 |\n| 4XX      | client error（客户端错误状态码）      |   服务器无法处理请求 |\n| 5XX | server error（服务器错误状态码）      |    服务器处理请求出错 |\n\n* * *\n\n详细教程请参考: [markdown语法中文教程](http://wowubuntu.com/markdown/#list)\n\n* * *\n","slug":"markdown","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9d002rzvr3b176q25b","content":"<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h1><p>在开头加上<strong>#</strong>，有1-6个等级，N级标题就在开头加N个<strong>#</strong></p>\n<pre><code># 我就是1级标题\n</code></pre><h1 id=\"2-block\"><a href=\"#2-block\" class=\"headerlink\" title=\"2. block\"></a>2. block</h1><p>在开头加上</p>\n<pre><code>&gt;\n</code></pre><blockquote>\n<p>aaa</p>\n<p> bbb</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"3-斜体-amp-amp-粗体\"><a href=\"#3-斜体-amp-amp-粗体\" class=\"headerlink\" title=\"3. 斜体 &amp;&amp; 粗体\"></a>3. 斜体 &amp;&amp; 粗体</h1><p><strong>粗体</strong>，目标文字两端使用两个</p>\n<pre><code>**_**\n</code></pre><p>或者</p>\n<pre><code>*****\n</code></pre><p>夹着</p>\n<h1 id=\"4-换行\"><a href=\"#4-换行\" class=\"headerlink\" title=\"4. 换行\"></a>4. 换行</h1><p>在句末加两个<strong>空格</strong>换行</p>\n<h1 id=\"5-无序列表\"><a href=\"#5-无序列表\" class=\"headerlink\" title=\"5. 无序列表\"></a>5. 无序列表</h1><pre><code>* 列表1 \n* 列表2\n* 列表3\n</code></pre><p>在文字开头添加(<strong>*</strong>, <strong>+</strong>, and <strong>-</strong>)实现无序列表，在符号和文字之间需要添加空格（建议：一个文档中用一种无序列表的表示方式）</p>\n<h1 id=\"6-有序列表\"><a href=\"#6-有序列表\" class=\"headerlink\" title=\"6. 有序列表\"></a>6. 有序列表</h1><pre><code>1.  ol-1\n2.  ol-2\n3.  ol-3 数字.空格，后面跟内容\n</code></pre><h1 id=\"7-链接\"><a href=\"#7-链接\" class=\"headerlink\" title=\"7. 链接\"></a>7. 链接</h1><pre><code>This is an [example link](http://example.com/).\n[example link](http://example.com/)\n</code></pre><h1 id=\"8-图片\"><a href=\"#8-图片\" class=\"headerlink\" title=\"8. 图片\"></a>8. 图片</h1><pre><code>![img](http://exp.bdstatic.com/static/common/widget/top-search-box/logo_1e63520.png &quot;jingyan&quot;)\n</code></pre><h1 id=\"9-code\"><a href=\"#9-code\" class=\"headerlink\" title=\"9. code\"></a>9. code</h1><p>内容前放4个<strong>空格</strong>或者用tab即可</p>\n<h1 id=\"10-下划线\"><a href=\"#10-下划线\" class=\"headerlink\" title=\"10. 下划线\"></a>10. 下划线</h1><p>在空白行下方使用 3个 <em>**</em></p>\n<pre><code>***\n</code></pre><h1 id=\"11-表格\"><a href=\"#11-表格\" class=\"headerlink\" title=\"11. 表格\"></a>11. 表格</h1><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:right\">原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td style=\"text-align:center\">information（信息性状态码）</td>\n<td style=\"text-align:right\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td style=\"text-align:center\">success（成功状态码）</td>\n<td style=\"text-align:right\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td style=\"text-align:center\">redirection（重定向状态码）</td>\n<td style=\"text-align:right\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td style=\"text-align:center\">client error（客户端错误状态码）</td>\n<td style=\"text-align:right\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td style=\"text-align:center\">server error（服务器错误状态码）</td>\n<td style=\"text-align:right\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>详细教程请参考: <a href=\"http://wowubuntu.com/markdown/#list\" target=\"_blank\" rel=\"noopener\">markdown语法中文教程</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h1><p>在开头加上<strong>#</strong>，有1-6个等级，N级标题就在开头加N个<strong>#</strong></p>\n<pre><code># 我就是1级标题\n</code></pre><h1 id=\"2-block\"><a href=\"#2-block\" class=\"headerlink\" title=\"2. block\"></a>2. block</h1><p>在开头加上</p>\n<pre><code>&gt;\n</code></pre><blockquote>\n<p>aaa</p>\n<p> bbb</p>\n</blockquote>","more":"<h1 id=\"3-斜体-amp-amp-粗体\"><a href=\"#3-斜体-amp-amp-粗体\" class=\"headerlink\" title=\"3. 斜体 &amp;&amp; 粗体\"></a>3. 斜体 &amp;&amp; 粗体</h1><p><strong>粗体</strong>，目标文字两端使用两个</p>\n<pre><code>**_**\n</code></pre><p>或者</p>\n<pre><code>*****\n</code></pre><p>夹着</p>\n<h1 id=\"4-换行\"><a href=\"#4-换行\" class=\"headerlink\" title=\"4. 换行\"></a>4. 换行</h1><p>在句末加两个<strong>空格</strong>换行</p>\n<h1 id=\"5-无序列表\"><a href=\"#5-无序列表\" class=\"headerlink\" title=\"5. 无序列表\"></a>5. 无序列表</h1><pre><code>* 列表1 \n* 列表2\n* 列表3\n</code></pre><p>在文字开头添加(<strong>*</strong>, <strong>+</strong>, and <strong>-</strong>)实现无序列表，在符号和文字之间需要添加空格（建议：一个文档中用一种无序列表的表示方式）</p>\n<h1 id=\"6-有序列表\"><a href=\"#6-有序列表\" class=\"headerlink\" title=\"6. 有序列表\"></a>6. 有序列表</h1><pre><code>1.  ol-1\n2.  ol-2\n3.  ol-3 数字.空格，后面跟内容\n</code></pre><h1 id=\"7-链接\"><a href=\"#7-链接\" class=\"headerlink\" title=\"7. 链接\"></a>7. 链接</h1><pre><code>This is an [example link](http://example.com/).\n[example link](http://example.com/)\n</code></pre><h1 id=\"8-图片\"><a href=\"#8-图片\" class=\"headerlink\" title=\"8. 图片\"></a>8. 图片</h1><pre><code>![img](http://exp.bdstatic.com/static/common/widget/top-search-box/logo_1e63520.png &quot;jingyan&quot;)\n</code></pre><h1 id=\"9-code\"><a href=\"#9-code\" class=\"headerlink\" title=\"9. code\"></a>9. code</h1><p>内容前放4个<strong>空格</strong>或者用tab即可</p>\n<h1 id=\"10-下划线\"><a href=\"#10-下划线\" class=\"headerlink\" title=\"10. 下划线\"></a>10. 下划线</h1><p>在空白行下方使用 3个 <em>**</em></p>\n<pre><code>***\n</code></pre><h1 id=\"11-表格\"><a href=\"#11-表格\" class=\"headerlink\" title=\"11. 表格\"></a>11. 表格</h1><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:right\">原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td style=\"text-align:center\">information（信息性状态码）</td>\n<td style=\"text-align:right\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td style=\"text-align:center\">success（成功状态码）</td>\n<td style=\"text-align:right\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td style=\"text-align:center\">redirection（重定向状态码）</td>\n<td style=\"text-align:right\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td style=\"text-align:center\">client error（客户端错误状态码）</td>\n<td style=\"text-align:right\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td style=\"text-align:center\">server error（服务器错误状态码）</td>\n<td style=\"text-align:right\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>详细教程请参考: <a href=\"http://wowubuntu.com/markdown/#list\" target=\"_blank\" rel=\"noopener\">markdown语法中文教程</a></p>\n<hr>"},{"title":"老麦咖啡馆","id":"76","date":"2015-02-15T12:12:20.000Z","_content":"\n作为一枚90后，多少会有一种咖啡馆情怀，想着什么时候能开一间属于自己的咖啡馆：\n根据喜好来设计布局和装修，有个书架放满喜欢的书，放着喜欢的音乐，有心情的时候搭讪下客人，分享不同的人背后的故事……这就是我想象中的dream cafe。\n读完这本[《老麦咖啡馆》](http://book.douban.com/subject/20366374/)，对它产生了浓厚的兴趣，哪天到上海玩，一定要见识一下！\n<!--more-->\n\n* * *\n\n### 书摘：\n\n一、如何开间有腔调的小众咖啡馆\n\n1.  选址\n\n    *   首先，我觉得独立咖啡馆可以开在大学附近；\n    *   其次，也可以开在国外人士比较集中的街区；\n    *   再次，咖啡馆也可以选在步行街等商业繁华之地的僻静处；\n    *   最后，咖啡馆不宜开在非常热闹嘈杂的地段。\n\n2.  特色和腔调\n\n    *   独立咖啡馆的表现其实是咖啡馆主人整体素养的综合体现；\n    *   有什么样的咖啡馆主人，就会呈现出什么样的特色。\n\n3.  灵魂咖啡\n\n    *   最大区别，在于独立咖啡馆是有“灵魂”的，而连锁咖啡馆则没有。\n\n4.  菜单和物料供应\n\n    *   由于独立咖啡馆面积普遍不大，切忌在物料和菜单方面求大求全，甚至花样百出。一方面是因为品种太多会需要大量的备货或储藏空间，占用资金，容易损耗，另一方面也是因为小咖啡馆贵在少而精，大而全的品种并不是小咖啡馆的强项，也没有必要。\n\n5.  咖啡的知识和技巧\n\n    *   即使你过去没有多少与咖啡有关的知识和技巧，也有必要去专门地虚心学习。\n\n6.  营销\n二、生活着而不是活着\n\n1.  幸福是什么？林语堂说过，一是睡在自家的床上；二是吃父母做的饭菜；三是爱人给你说情话；四是跟孩子做游戏。老麦再加上几条：幸福是早上醒来喝一杯恰到好处的香浓咖啡；幸福是读到一本好书；幸福是淘到你梦寐以求的老货；幸福是陪着情人走在旅行的路上；幸福是拍摄到一张自己都爱不释手的照片！\n2.  我想，我想要的幸福生活，那就是我追求的下一个梦想。 我要每天清晨喝一杯上好的咖啡；我要在床头边放着永远也读不完的好书；我要到全世界跳蚤市场去淘老货，然后堆在一个巨大的仓库里和大家分享；我要陪着情人走遍千山万水，给她一世的温暖；我要拍摄直指人心的影像，然后出一本摄影集，留下感动自己的每一个瞬间！用这样的方式留住时光！ 这就是我，老麦咖啡馆的老麦，还有如咖啡一样的我的人生。","source":"_posts/mike-cafe.md","raw":"---\ntitle: 老麦咖啡馆\ntags:\n  - reading\nid: 76\ncategories:\n  - reading\ndate: 2015-02-15 20:12:20\n---\n\n作为一枚90后，多少会有一种咖啡馆情怀，想着什么时候能开一间属于自己的咖啡馆：\n根据喜好来设计布局和装修，有个书架放满喜欢的书，放着喜欢的音乐，有心情的时候搭讪下客人，分享不同的人背后的故事……这就是我想象中的dream cafe。\n读完这本[《老麦咖啡馆》](http://book.douban.com/subject/20366374/)，对它产生了浓厚的兴趣，哪天到上海玩，一定要见识一下！\n<!--more-->\n\n* * *\n\n### 书摘：\n\n一、如何开间有腔调的小众咖啡馆\n\n1.  选址\n\n    *   首先，我觉得独立咖啡馆可以开在大学附近；\n    *   其次，也可以开在国外人士比较集中的街区；\n    *   再次，咖啡馆也可以选在步行街等商业繁华之地的僻静处；\n    *   最后，咖啡馆不宜开在非常热闹嘈杂的地段。\n\n2.  特色和腔调\n\n    *   独立咖啡馆的表现其实是咖啡馆主人整体素养的综合体现；\n    *   有什么样的咖啡馆主人，就会呈现出什么样的特色。\n\n3.  灵魂咖啡\n\n    *   最大区别，在于独立咖啡馆是有“灵魂”的，而连锁咖啡馆则没有。\n\n4.  菜单和物料供应\n\n    *   由于独立咖啡馆面积普遍不大，切忌在物料和菜单方面求大求全，甚至花样百出。一方面是因为品种太多会需要大量的备货或储藏空间，占用资金，容易损耗，另一方面也是因为小咖啡馆贵在少而精，大而全的品种并不是小咖啡馆的强项，也没有必要。\n\n5.  咖啡的知识和技巧\n\n    *   即使你过去没有多少与咖啡有关的知识和技巧，也有必要去专门地虚心学习。\n\n6.  营销\n二、生活着而不是活着\n\n1.  幸福是什么？林语堂说过，一是睡在自家的床上；二是吃父母做的饭菜；三是爱人给你说情话；四是跟孩子做游戏。老麦再加上几条：幸福是早上醒来喝一杯恰到好处的香浓咖啡；幸福是读到一本好书；幸福是淘到你梦寐以求的老货；幸福是陪着情人走在旅行的路上；幸福是拍摄到一张自己都爱不释手的照片！\n2.  我想，我想要的幸福生活，那就是我追求的下一个梦想。 我要每天清晨喝一杯上好的咖啡；我要在床头边放着永远也读不完的好书；我要到全世界跳蚤市场去淘老货，然后堆在一个巨大的仓库里和大家分享；我要陪着情人走遍千山万水，给她一世的温暖；我要拍摄直指人心的影像，然后出一本摄影集，留下感动自己的每一个瞬间！用这样的方式留住时光！ 这就是我，老麦咖啡馆的老麦，还有如咖啡一样的我的人生。","slug":"mike-cafe","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9g002vzvr3h3to90b9","content":"<p>作为一枚90后，多少会有一种咖啡馆情怀，想着什么时候能开一间属于自己的咖啡馆：<br>根据喜好来设计布局和装修，有个书架放满喜欢的书，放着喜欢的音乐，有心情的时候搭讪下客人，分享不同的人背后的故事……这就是我想象中的dream cafe。<br>读完这本<a href=\"http://book.douban.com/subject/20366374/\" target=\"_blank\" rel=\"noopener\">《老麦咖啡馆》</a>，对它产生了浓厚的兴趣，哪天到上海玩，一定要见识一下！<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"书摘：\"><a href=\"#书摘：\" class=\"headerlink\" title=\"书摘：\"></a>书摘：</h3><p>一、如何开间有腔调的小众咖啡馆</p>\n<ol>\n<li><p>选址</p>\n<ul>\n<li>首先，我觉得独立咖啡馆可以开在大学附近；</li>\n<li>其次，也可以开在国外人士比较集中的街区；</li>\n<li>再次，咖啡馆也可以选在步行街等商业繁华之地的僻静处；</li>\n<li>最后，咖啡馆不宜开在非常热闹嘈杂的地段。</li>\n</ul>\n</li>\n<li><p>特色和腔调</p>\n<ul>\n<li>独立咖啡馆的表现其实是咖啡馆主人整体素养的综合体现；</li>\n<li>有什么样的咖啡馆主人，就会呈现出什么样的特色。</li>\n</ul>\n</li>\n<li><p>灵魂咖啡</p>\n<ul>\n<li>最大区别，在于独立咖啡馆是有“灵魂”的，而连锁咖啡馆则没有。</li>\n</ul>\n</li>\n<li><p>菜单和物料供应</p>\n<ul>\n<li>由于独立咖啡馆面积普遍不大，切忌在物料和菜单方面求大求全，甚至花样百出。一方面是因为品种太多会需要大量的备货或储藏空间，占用资金，容易损耗，另一方面也是因为小咖啡馆贵在少而精，大而全的品种并不是小咖啡馆的强项，也没有必要。</li>\n</ul>\n</li>\n<li><p>咖啡的知识和技巧</p>\n<ul>\n<li>即使你过去没有多少与咖啡有关的知识和技巧，也有必要去专门地虚心学习。</li>\n</ul>\n</li>\n<li><p>营销<br>二、生活着而不是活着</p>\n</li>\n<li><p>幸福是什么？林语堂说过，一是睡在自家的床上；二是吃父母做的饭菜；三是爱人给你说情话；四是跟孩子做游戏。老麦再加上几条：幸福是早上醒来喝一杯恰到好处的香浓咖啡；幸福是读到一本好书；幸福是淘到你梦寐以求的老货；幸福是陪着情人走在旅行的路上；幸福是拍摄到一张自己都爱不释手的照片！</p>\n</li>\n<li>我想，我想要的幸福生活，那就是我追求的下一个梦想。 我要每天清晨喝一杯上好的咖啡；我要在床头边放着永远也读不完的好书；我要到全世界跳蚤市场去淘老货，然后堆在一个巨大的仓库里和大家分享；我要陪着情人走遍千山万水，给她一世的温暖；我要拍摄直指人心的影像，然后出一本摄影集，留下感动自己的每一个瞬间！用这样的方式留住时光！ 这就是我，老麦咖啡馆的老麦，还有如咖啡一样的我的人生。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>作为一枚90后，多少会有一种咖啡馆情怀，想着什么时候能开一间属于自己的咖啡馆：<br>根据喜好来设计布局和装修，有个书架放满喜欢的书，放着喜欢的音乐，有心情的时候搭讪下客人，分享不同的人背后的故事……这就是我想象中的dream cafe。<br>读完这本<a href=\"http://book.douban.com/subject/20366374/\" target=\"_blank\" rel=\"noopener\">《老麦咖啡馆》</a>，对它产生了浓厚的兴趣，哪天到上海玩，一定要见识一下！<br>","more":"</p>\n<hr>\n<h3 id=\"书摘：\"><a href=\"#书摘：\" class=\"headerlink\" title=\"书摘：\"></a>书摘：</h3><p>一、如何开间有腔调的小众咖啡馆</p>\n<ol>\n<li><p>选址</p>\n<ul>\n<li>首先，我觉得独立咖啡馆可以开在大学附近；</li>\n<li>其次，也可以开在国外人士比较集中的街区；</li>\n<li>再次，咖啡馆也可以选在步行街等商业繁华之地的僻静处；</li>\n<li>最后，咖啡馆不宜开在非常热闹嘈杂的地段。</li>\n</ul>\n</li>\n<li><p>特色和腔调</p>\n<ul>\n<li>独立咖啡馆的表现其实是咖啡馆主人整体素养的综合体现；</li>\n<li>有什么样的咖啡馆主人，就会呈现出什么样的特色。</li>\n</ul>\n</li>\n<li><p>灵魂咖啡</p>\n<ul>\n<li>最大区别，在于独立咖啡馆是有“灵魂”的，而连锁咖啡馆则没有。</li>\n</ul>\n</li>\n<li><p>菜单和物料供应</p>\n<ul>\n<li>由于独立咖啡馆面积普遍不大，切忌在物料和菜单方面求大求全，甚至花样百出。一方面是因为品种太多会需要大量的备货或储藏空间，占用资金，容易损耗，另一方面也是因为小咖啡馆贵在少而精，大而全的品种并不是小咖啡馆的强项，也没有必要。</li>\n</ul>\n</li>\n<li><p>咖啡的知识和技巧</p>\n<ul>\n<li>即使你过去没有多少与咖啡有关的知识和技巧，也有必要去专门地虚心学习。</li>\n</ul>\n</li>\n<li><p>营销<br>二、生活着而不是活着</p>\n</li>\n<li><p>幸福是什么？林语堂说过，一是睡在自家的床上；二是吃父母做的饭菜；三是爱人给你说情话；四是跟孩子做游戏。老麦再加上几条：幸福是早上醒来喝一杯恰到好处的香浓咖啡；幸福是读到一本好书；幸福是淘到你梦寐以求的老货；幸福是陪着情人走在旅行的路上；幸福是拍摄到一张自己都爱不释手的照片！</p>\n</li>\n<li>我想，我想要的幸福生活，那就是我追求的下一个梦想。 我要每天清晨喝一杯上好的咖啡；我要在床头边放着永远也读不完的好书；我要到全世界跳蚤市场去淘老货，然后堆在一个巨大的仓库里和大家分享；我要陪着情人走遍千山万水，给她一世的温暖；我要拍摄直指人心的影像，然后出一本摄影集，留下感动自己的每一个瞬间！用这样的方式留住时光！ 这就是我，老麦咖啡馆的老麦，还有如咖啡一样的我的人生。</li>\n</ol>"},{"title":"悄悄发布一个hexo的npm模块","date":"2017-04-03T03:52:02.000Z","_content":"\n**hexo-generator-index-plus**，这是什么东东？其实就是hexo博客生成器的一个文章排序插件，基于默认插件fork的，添加按文章**置顶**和**二次编辑的更新时间**排序的功能。\n\n沙发留给github和npmjs~\n\nGithub: [YuyingWu/hexo-generator-index-plus](https://github.com/YuyingWu/hexo-generator-index-plus)\nnpm: [hexo-generator-index-plus](https://www.npmjs.com/package/hexo-generator-index-plus)\n\n最简单粗暴的Installation：\n```\n$ npm install hexo-generator-index-plus --save\n```\n\n<!-- more -->\n\n当然要完全替换掉默认的index生成器还不止这一步啦，还要干掉默认的npm模块和更新hexo-cli里面assets的引用~具体还是看看[readMe](https://www.npmjs.com/package/hexo-generator-index-plus#installation)啰。\n\n## 怎么实现？\n\n基于默认的hexo-generator-index的fork~所以大致跟原生的一致，config不一样，内部实现不一样。\n\n实现代码还是不聊了，原理是利用数组处理的sort函数来做升降序排列而已啦，献丑献丑。\n\n而关键字的优先级是这么排的，让文章按照`top`（置顶） -> `updateDate`（二次更新时间） -> `date`的降序排列~ 为什么我们需要`top`或者`updateDate`呢？\n\n```\ntitle: Blog Log\ndate: 2015-04-23 00:35:45\nupdateDate: 2017-04-02 15:13:00\ntop: 1\n```\n\n### top【No.1 Priority】\n\n所谓的“置顶”，越大的数值排得越前，写了一篇棒棒的文章当然想让它永远在前排 ^0^\n\n### updateDate【No.2 Priority】\n\n默认按创建时间`date`排序，但达不到针对偶尔编辑的某篇文章，希望把它顶上来的需求（但不是置顶，还是按修改时间排序就好了）。\n\n所以我添加了针对**二次编辑更新时间**的排序，添加了一个`updateDate`，跟原生的`updated`区分开。我看默认有个`updated`属性，但是貌似是系统记录文章编辑保存的时间，人肉编辑也没有效，所以还是自己加一个吧。\n\n### date【Default】\n\n原生generator支持的创建日期排序。\n\n### more to do\n\n* 目前只按照各个关键属性的默认降序，后续会加一个order_by支持自定义升降序的配置。\n* 完成代码测试\n\n## 发布npm模块\n\n好惭愧，第一次在社区发布module，把这些步骤记录下来，方便以后给自己备忘，嘻嘻。\n\n### 事前准备\n\n1. 去[npm社区](https://www.npmjs.com)注册一个账号\n2. github创建repository\n3. 初始化模块，执行`npm init`，系统会有很多提示的，不想输入一直按回车就可以，初始化成功后，会生成`package.json`\n\n### 发布\n\ni. 设置npm用户\n\n这个账号会被添加到npm本地的配置中，用来发布module用，成功后用户信息会被存到`~/.npmrc`。\n\n```\n$ npm adduser\n\nUsername: your name\nPassword: your password\nEmail: your email address\n\n// 执行下面命令可以查看当前用户\n$ npm whoami\n```\n\nii. 设定版本号\n\n`package.json`里有个字段`version`，设定模块版本号\n\n```\n$ npm publish\n```\n\n那么版本号规则一般是怎样的呢？npm社区有语义化版本的规则的~\n\n版本格式：**主版号.次版号.修订号**，递增规则如下：\n\n> 主版号：当你做了不相容的 API 修改，\n> 次版号：当你做了向下相容的功能性新增，\n> 修订号：当你做了向下相容的问题修正。\n\n由于时间关系，在`npm publish`后，我们的模块就发布成功了，快到没朋友，到[npm社区](https://www.npmjs.com)自己的主页上就能看到啦~ \n\n还蛮好玩的有木有，大家积极分享自己的模块吧 ：）\n","source":"_posts/npm-publish.md","raw":"---\ntitle: 悄悄发布一个hexo的npm模块\ndate: 2017-04-03 11:52:02\ntags:\n  - blog\n  - hexo-generator-index-plus\n  - hexo-plugin\n  - npm\n---\n\n**hexo-generator-index-plus**，这是什么东东？其实就是hexo博客生成器的一个文章排序插件，基于默认插件fork的，添加按文章**置顶**和**二次编辑的更新时间**排序的功能。\n\n沙发留给github和npmjs~\n\nGithub: [YuyingWu/hexo-generator-index-plus](https://github.com/YuyingWu/hexo-generator-index-plus)\nnpm: [hexo-generator-index-plus](https://www.npmjs.com/package/hexo-generator-index-plus)\n\n最简单粗暴的Installation：\n```\n$ npm install hexo-generator-index-plus --save\n```\n\n<!-- more -->\n\n当然要完全替换掉默认的index生成器还不止这一步啦，还要干掉默认的npm模块和更新hexo-cli里面assets的引用~具体还是看看[readMe](https://www.npmjs.com/package/hexo-generator-index-plus#installation)啰。\n\n## 怎么实现？\n\n基于默认的hexo-generator-index的fork~所以大致跟原生的一致，config不一样，内部实现不一样。\n\n实现代码还是不聊了，原理是利用数组处理的sort函数来做升降序排列而已啦，献丑献丑。\n\n而关键字的优先级是这么排的，让文章按照`top`（置顶） -> `updateDate`（二次更新时间） -> `date`的降序排列~ 为什么我们需要`top`或者`updateDate`呢？\n\n```\ntitle: Blog Log\ndate: 2015-04-23 00:35:45\nupdateDate: 2017-04-02 15:13:00\ntop: 1\n```\n\n### top【No.1 Priority】\n\n所谓的“置顶”，越大的数值排得越前，写了一篇棒棒的文章当然想让它永远在前排 ^0^\n\n### updateDate【No.2 Priority】\n\n默认按创建时间`date`排序，但达不到针对偶尔编辑的某篇文章，希望把它顶上来的需求（但不是置顶，还是按修改时间排序就好了）。\n\n所以我添加了针对**二次编辑更新时间**的排序，添加了一个`updateDate`，跟原生的`updated`区分开。我看默认有个`updated`属性，但是貌似是系统记录文章编辑保存的时间，人肉编辑也没有效，所以还是自己加一个吧。\n\n### date【Default】\n\n原生generator支持的创建日期排序。\n\n### more to do\n\n* 目前只按照各个关键属性的默认降序，后续会加一个order_by支持自定义升降序的配置。\n* 完成代码测试\n\n## 发布npm模块\n\n好惭愧，第一次在社区发布module，把这些步骤记录下来，方便以后给自己备忘，嘻嘻。\n\n### 事前准备\n\n1. 去[npm社区](https://www.npmjs.com)注册一个账号\n2. github创建repository\n3. 初始化模块，执行`npm init`，系统会有很多提示的，不想输入一直按回车就可以，初始化成功后，会生成`package.json`\n\n### 发布\n\ni. 设置npm用户\n\n这个账号会被添加到npm本地的配置中，用来发布module用，成功后用户信息会被存到`~/.npmrc`。\n\n```\n$ npm adduser\n\nUsername: your name\nPassword: your password\nEmail: your email address\n\n// 执行下面命令可以查看当前用户\n$ npm whoami\n```\n\nii. 设定版本号\n\n`package.json`里有个字段`version`，设定模块版本号\n\n```\n$ npm publish\n```\n\n那么版本号规则一般是怎样的呢？npm社区有语义化版本的规则的~\n\n版本格式：**主版号.次版号.修订号**，递增规则如下：\n\n> 主版号：当你做了不相容的 API 修改，\n> 次版号：当你做了向下相容的功能性新增，\n> 修订号：当你做了向下相容的问题修正。\n\n由于时间关系，在`npm publish`后，我们的模块就发布成功了，快到没朋友，到[npm社区](https://www.npmjs.com)自己的主页上就能看到啦~ \n\n还蛮好玩的有木有，大家积极分享自己的模块吧 ：）\n","slug":"npm-publish","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9i002zzvr3tzx8ni8y","content":"<p><strong>hexo-generator-index-plus</strong>，这是什么东东？其实就是hexo博客生成器的一个文章排序插件，基于默认插件fork的，添加按文章<strong>置顶</strong>和<strong>二次编辑的更新时间</strong>排序的功能。</p>\n<p>沙发留给github和npmjs~</p>\n<p>Github: <a href=\"https://github.com/YuyingWu/hexo-generator-index-plus\" target=\"_blank\" rel=\"noopener\">YuyingWu/hexo-generator-index-plus</a><br>npm: <a href=\"https://www.npmjs.com/package/hexo-generator-index-plus\" target=\"_blank\" rel=\"noopener\">hexo-generator-index-plus</a></p>\n<p>最简单粗暴的Installation：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">index</span>-plus <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>当然要完全替换掉默认的index生成器还不止这一步啦，还要干掉默认的npm模块和更新hexo-cli里面assets的引用~具体还是看看<a href=\"https://www.npmjs.com/package/hexo-generator-index-plus#installation\" target=\"_blank\" rel=\"noopener\">readMe</a>啰。</p>\n<h2 id=\"怎么实现？\"><a href=\"#怎么实现？\" class=\"headerlink\" title=\"怎么实现？\"></a>怎么实现？</h2><p>基于默认的hexo-generator-index的fork~所以大致跟原生的一致，config不一样，内部实现不一样。</p>\n<p>实现代码还是不聊了，原理是利用数组处理的sort函数来做升降序排列而已啦，献丑献丑。</p>\n<p>而关键字的优先级是这么排的，让文章按照<code>top</code>（置顶） -&gt; <code>updateDate</code>（二次更新时间） -&gt; <code>date</code>的降序排列~ 为什么我们需要<code>top</code>或者<code>updateDate</code>呢？</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">title:</span> Blog Log</span><br><span class=\"line\"><span class=\"symbol\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-04</span><span class=\"number\">-23</span> <span class=\"number\">00</span>:<span class=\"number\">35</span>:<span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"symbol\">updateDate:</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-02</span> <span class=\"number\">15</span>:<span class=\"number\">13</span>:<span class=\"number\">00</span></span><br><span class=\"line\"><span class=\"symbol\">top:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"top【No-1-Priority】\"><a href=\"#top【No-1-Priority】\" class=\"headerlink\" title=\"top【No.1 Priority】\"></a>top【No.1 Priority】</h3><p>所谓的“置顶”，越大的数值排得越前，写了一篇棒棒的文章当然想让它永远在前排 ^0^</p>\n<h3 id=\"updateDate【No-2-Priority】\"><a href=\"#updateDate【No-2-Priority】\" class=\"headerlink\" title=\"updateDate【No.2 Priority】\"></a>updateDate【No.2 Priority】</h3><p>默认按创建时间<code>date</code>排序，但达不到针对偶尔编辑的某篇文章，希望把它顶上来的需求（但不是置顶，还是按修改时间排序就好了）。</p>\n<p>所以我添加了针对<strong>二次编辑更新时间</strong>的排序，添加了一个<code>updateDate</code>，跟原生的<code>updated</code>区分开。我看默认有个<code>updated</code>属性，但是貌似是系统记录文章编辑保存的时间，人肉编辑也没有效，所以还是自己加一个吧。</p>\n<h3 id=\"date【Default】\"><a href=\"#date【Default】\" class=\"headerlink\" title=\"date【Default】\"></a>date【Default】</h3><p>原生generator支持的创建日期排序。</p>\n<h3 id=\"more-to-do\"><a href=\"#more-to-do\" class=\"headerlink\" title=\"more to do\"></a>more to do</h3><ul>\n<li>目前只按照各个关键属性的默认降序，后续会加一个order_by支持自定义升降序的配置。</li>\n<li>完成代码测试</li>\n</ul>\n<h2 id=\"发布npm模块\"><a href=\"#发布npm模块\" class=\"headerlink\" title=\"发布npm模块\"></a>发布npm模块</h2><p>好惭愧，第一次在社区发布module，把这些步骤记录下来，方便以后给自己备忘，嘻嘻。</p>\n<h3 id=\"事前准备\"><a href=\"#事前准备\" class=\"headerlink\" title=\"事前准备\"></a>事前准备</h3><ol>\n<li>去<a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">npm社区</a>注册一个账号</li>\n<li>github创建repository</li>\n<li>初始化模块，执行<code>npm init</code>，系统会有很多提示的，不想输入一直按回车就可以，初始化成功后，会生成<code>package.json</code></li>\n</ol>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>i. 设置npm用户</p>\n<p>这个账号会被添加到npm本地的配置中，用来发布module用，成功后用户信息会被存到<code>~/.npmrc</code>。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm adduser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Username:</span> your name</span><br><span class=\"line\"><span class=\"symbol\">Password:</span> your password</span><br><span class=\"line\"><span class=\"symbol\">Email:</span> your email address</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行下面命令可以查看当前用户</span></span><br><span class=\"line\">$ npm whoami</span><br></pre></td></tr></table></figure>\n<p>ii. 设定版本号</p>\n<p><code>package.json</code>里有个字段<code>version</code>，设定模块版本号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm publish</span></span><br></pre></td></tr></table></figure>\n<p>那么版本号规则一般是怎样的呢？npm社区有语义化版本的规则的~</p>\n<p>版本格式：<strong>主版号.次版号.修订号</strong>，递增规则如下：</p>\n<blockquote>\n<p>主版号：当你做了不相容的 API 修改，<br>次版号：当你做了向下相容的功能性新增，<br>修订号：当你做了向下相容的问题修正。</p>\n</blockquote>\n<p>由于时间关系，在<code>npm publish</code>后，我们的模块就发布成功了，快到没朋友，到<a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">npm社区</a>自己的主页上就能看到啦~ </p>\n<p>还蛮好玩的有木有，大家积极分享自己的模块吧 ：）</p>\n","site":{"data":{}},"excerpt":"<p><strong>hexo-generator-index-plus</strong>，这是什么东东？其实就是hexo博客生成器的一个文章排序插件，基于默认插件fork的，添加按文章<strong>置顶</strong>和<strong>二次编辑的更新时间</strong>排序的功能。</p>\n<p>沙发留给github和npmjs~</p>\n<p>Github: <a href=\"https://github.com/YuyingWu/hexo-generator-index-plus\" target=\"_blank\" rel=\"noopener\">YuyingWu/hexo-generator-index-plus</a><br>npm: <a href=\"https://www.npmjs.com/package/hexo-generator-index-plus\" target=\"_blank\" rel=\"noopener\">hexo-generator-index-plus</a></p>\n<p>最简单粗暴的Installation：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">index</span>-plus <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure></p>","more":"<p>当然要完全替换掉默认的index生成器还不止这一步啦，还要干掉默认的npm模块和更新hexo-cli里面assets的引用~具体还是看看<a href=\"https://www.npmjs.com/package/hexo-generator-index-plus#installation\" target=\"_blank\" rel=\"noopener\">readMe</a>啰。</p>\n<h2 id=\"怎么实现？\"><a href=\"#怎么实现？\" class=\"headerlink\" title=\"怎么实现？\"></a>怎么实现？</h2><p>基于默认的hexo-generator-index的fork~所以大致跟原生的一致，config不一样，内部实现不一样。</p>\n<p>实现代码还是不聊了，原理是利用数组处理的sort函数来做升降序排列而已啦，献丑献丑。</p>\n<p>而关键字的优先级是这么排的，让文章按照<code>top</code>（置顶） -&gt; <code>updateDate</code>（二次更新时间） -&gt; <code>date</code>的降序排列~ 为什么我们需要<code>top</code>或者<code>updateDate</code>呢？</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">title:</span> Blog Log</span><br><span class=\"line\"><span class=\"symbol\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-04</span><span class=\"number\">-23</span> <span class=\"number\">00</span>:<span class=\"number\">35</span>:<span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"symbol\">updateDate:</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-02</span> <span class=\"number\">15</span>:<span class=\"number\">13</span>:<span class=\"number\">00</span></span><br><span class=\"line\"><span class=\"symbol\">top:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"top【No-1-Priority】\"><a href=\"#top【No-1-Priority】\" class=\"headerlink\" title=\"top【No.1 Priority】\"></a>top【No.1 Priority】</h3><p>所谓的“置顶”，越大的数值排得越前，写了一篇棒棒的文章当然想让它永远在前排 ^0^</p>\n<h3 id=\"updateDate【No-2-Priority】\"><a href=\"#updateDate【No-2-Priority】\" class=\"headerlink\" title=\"updateDate【No.2 Priority】\"></a>updateDate【No.2 Priority】</h3><p>默认按创建时间<code>date</code>排序，但达不到针对偶尔编辑的某篇文章，希望把它顶上来的需求（但不是置顶，还是按修改时间排序就好了）。</p>\n<p>所以我添加了针对<strong>二次编辑更新时间</strong>的排序，添加了一个<code>updateDate</code>，跟原生的<code>updated</code>区分开。我看默认有个<code>updated</code>属性，但是貌似是系统记录文章编辑保存的时间，人肉编辑也没有效，所以还是自己加一个吧。</p>\n<h3 id=\"date【Default】\"><a href=\"#date【Default】\" class=\"headerlink\" title=\"date【Default】\"></a>date【Default】</h3><p>原生generator支持的创建日期排序。</p>\n<h3 id=\"more-to-do\"><a href=\"#more-to-do\" class=\"headerlink\" title=\"more to do\"></a>more to do</h3><ul>\n<li>目前只按照各个关键属性的默认降序，后续会加一个order_by支持自定义升降序的配置。</li>\n<li>完成代码测试</li>\n</ul>\n<h2 id=\"发布npm模块\"><a href=\"#发布npm模块\" class=\"headerlink\" title=\"发布npm模块\"></a>发布npm模块</h2><p>好惭愧，第一次在社区发布module，把这些步骤记录下来，方便以后给自己备忘，嘻嘻。</p>\n<h3 id=\"事前准备\"><a href=\"#事前准备\" class=\"headerlink\" title=\"事前准备\"></a>事前准备</h3><ol>\n<li>去<a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">npm社区</a>注册一个账号</li>\n<li>github创建repository</li>\n<li>初始化模块，执行<code>npm init</code>，系统会有很多提示的，不想输入一直按回车就可以，初始化成功后，会生成<code>package.json</code></li>\n</ol>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>i. 设置npm用户</p>\n<p>这个账号会被添加到npm本地的配置中，用来发布module用，成功后用户信息会被存到<code>~/.npmrc</code>。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm adduser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Username:</span> your name</span><br><span class=\"line\"><span class=\"symbol\">Password:</span> your password</span><br><span class=\"line\"><span class=\"symbol\">Email:</span> your email address</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行下面命令可以查看当前用户</span></span><br><span class=\"line\">$ npm whoami</span><br></pre></td></tr></table></figure>\n<p>ii. 设定版本号</p>\n<p><code>package.json</code>里有个字段<code>version</code>，设定模块版本号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm publish</span></span><br></pre></td></tr></table></figure>\n<p>那么版本号规则一般是怎样的呢？npm社区有语义化版本的规则的~</p>\n<p>版本格式：<strong>主版号.次版号.修订号</strong>，递增规则如下：</p>\n<blockquote>\n<p>主版号：当你做了不相容的 API 修改，<br>次版号：当你做了向下相容的功能性新增，<br>修订号：当你做了向下相容的问题修正。</p>\n</blockquote>\n<p>由于时间关系，在<code>npm publish</code>后，我们的模块就发布成功了，快到没朋友，到<a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">npm社区</a>自己的主页上就能看到啦~ </p>\n<p>还蛮好玩的有木有，大家积极分享自己的模块吧 ：）</p>"},{"title":"幸福的方法 —— 泰勒•本•沙哈尔","id":"61","date":"2014-11-10T15:31:28.000Z","_content":"\n看完泰勒的《幸福的方法》，获益匪浅，幸福感持续上升，想跟大家分享一下；\n\n<!--more-->\n\n### 表达感恩：每天记下5件值得感恩的事\n\n每日把那些值得感恩的事情记录下来的人（每天写下最少5件值得感恩的事），确实在身体上更健康、内心更幸福。\n\n如果每天都做的话，你可能会重复地列出一些事情，这很好；重点是，在重复之余，为了让你的情感体验保持新鲜，请在每一次把它们写下来的同时，去想象当时的体验和感受。当感恩成为一种习惯，我们会更珍惜生活中的美好时刻，而不会把它们当成是理所当然。\n\n### 从幸福到更幸福\n\n“我是否幸福”这个问题本身就暗示着对幸福的两极看法：要么幸福，要么不幸福。在这种理解中，幸福成为一个终点，一旦达到，我们对幸福的追求就结束了。实际上这个终点并不存在，对这一误解的执着只能导致不满和挫败感。\n\n我们永远都可以更幸福。没有人能够在所有时间都非常满足而无欲无求。与其问自己是否幸福，不如去探求一个更有助益的问题：“怎样才能更幸福？”这个问题不但契合幸福的实质，还表明了幸福是一个需要长期追求、永不间断的过程，而不是一个可以终结的句点。\n\n### 一种关于“改变”的方法\n\n与其强化自律性，不如养成固定的习惯。\n\n养成习惯要求确定行动的细节，并规定在特定的具体时间内完成，这需要感受到深刻价值作为行事动机。\n\n什么样的习惯能让你更幸福呢？你希望生活发生怎样的改变？比如，每周运动3次，每天早上冥想15分钟，每个月看两场电影，与伴侣每个星期二出去约会，隔天阅读一些有趣的读物，等等。\n\n### 四种汉堡模型，四种人生模式\n\n*   享乐主义型\n\n    *   第一种汉堡是我最先拿起来的汉堡，它虽然口味诱人，却是标准的垃圾食品。\n    *   “享乐主义型”的格言就是“及时行乐，逃避痛苦”，他们注重的是眼前的快乐，却忽视了自己的行为可能带来的任何负面后果。\n\n*   忙碌奔波型\n\n    *   第二种汉堡虽然口味很差，可里面全是蔬菜和有机食物，食用这类汉堡可以确保日后的健康，但却让食用者吃得很痛苦。\n    *   “忙碌奔波型”，这种人认为此刻的一切努力都是为了实现未来的目标，痛苦的过程是获得未来幸福的必由之路。\n\n*   虚无主义型\n\n    *   第三种汉堡最糟糕，既不好吃也不健康，如果吃了它，不但现在无法享受美味，日后还会影响健康。\n    *   “虚无主义型”，有一种人对生命已经丧失了希望和欲望，他们既不享受眼前的所有，对未来也没有任何期望。\n\n*   感悟幸福型\n\n    *   会不会还有一种汉堡，与第一种一样好吃，并且与第二种一样健康呢？会不会有一种能平衡当下及未来益处的汉堡呢？\n    *   生活幸福的人，不但能够享受当下所做的事情，而且通过目前的行为，他们也可以拥有更加满意的未来。\n\n为何有这么多“忙碌奔波型”的人呢？最主要的原因是我们的文化造就了这种信念：如果成绩全优，家长就会给我们奖励；如果工作表现好，就会得到奖金。我们习惯了去关注更远大的目标，却不在意当下的感受，最后导致终生的盲目追求。我们从不会因为享受过程而得到奖励，我们认为能否达到目标才是衡量一切的标准。社会只褒奖成功的人，而不是正在努力的人——只看结果，而无视过程。\n\n一旦达到目标之后，我们经常会把放松的心情解释成幸福，好像工作越艰难，成功后幸福感就越强。因此，当我们拥有这种错觉时，就不由自主地对这种生活方式屈服了。不可否认，这种解脱让我们感到真实的快乐，但是它绝不等同于幸福。\n\n这种幸福可被称为“幸福的假象”，它们来自于压力和焦虑的消除，无法长久维持，因为它本身就是与负面情绪共生的。这就好比一个人头痛好了之后，他会为头不痛了而高兴。然而，由于这种喜悦来自于痛苦的前因，当痛楚消散，我们很快就会把健康当成一种理所当然的事，病愈的喜悦早已消失得无影无踪。“忙碌奔波型”的人错误地认为成功即是幸福，坚信目标实现后的放松和解脱即是幸福，因此他们不停地从一个目标奔向另一个目标。\n\n“忙碌奔波型”的错误观念在于，只有成功本身可以为他们带来快乐，他们感觉不到过程的重要性。“享乐主义型”则错误地认为，只有过程是重要的。“虚无主义型”同时放弃了过程和结果，他们对生活已经麻木无感了。“忙碌奔波型”是未来的奴隶，“享乐主义型”是现在的奴隶，而“虚无主义型”则是过去的奴隶。\n\n真正能够持续的幸福感，需要我们为了一个有意义的目标快乐地努力与奋斗。幸福不是拼命爬到山顶，也不是在山下漫无目的地游逛，幸福是向山顶努力攀登过程中的种种经历和感受。\n\n### 练习\n\n#### 敞开心扉，把正面和负面的经历都写下来\n\n连续4天，每天用15分钟的时间，写下你在四个象限里的经历。\n\n无论你写什么，都是写给自己看的。如果写完后你愿意和他人分享当然也可以，但在写的时候请不要抑制任何的念头和想法，越是勇敢地表达自己，你就越能从中受益。\n\n在“虚无主义型”和“感悟幸福型”两个象限内，至少再多做两次练习。重复该练习时，你可以写同样或不同的内容。然后定期地回顾自己所写的内容，可以是三个月、一年，甚至是两年。\n\n*   忙碌奔波型：\n\n    *   写下你人生中忙碌奔波的经历。\n    *   为什么曾经是那样？\n    *   你是否从中受益？\n    *   你付出的代价又是什么？\n\n*   享乐主义型：\n\n    *   解释一下你只顾享乐的时刻或经历。\n    *   你是否从中得到了很多？\n    *   你损失的又是什么？\n\n*   虚无主义型：\n\n    *   写下那个特别令你痛苦的时刻，或者那个令你感到绝望、无助的时刻，并描述你当时以及现在对它最深刻的感受和想法。\n\n*   感悟幸福型：\n\n    *   描述一下你人生中某个特别幸福的时期或者经历。\n    *   发挥你的想象力，让自己再次回到那个时候，重温一下当时的感受，并写下来。\n","source":"_posts/method-of-happiness.md","raw":"---\ntitle: 幸福的方法 —— 泰勒•本•沙哈尔\ntags:\n  - happiness\n  - reading\nid: 61\ncategories:\n  - reading\ndate: 2014-11-10 23:31:28\n---\n\n看完泰勒的《幸福的方法》，获益匪浅，幸福感持续上升，想跟大家分享一下；\n\n<!--more-->\n\n### 表达感恩：每天记下5件值得感恩的事\n\n每日把那些值得感恩的事情记录下来的人（每天写下最少5件值得感恩的事），确实在身体上更健康、内心更幸福。\n\n如果每天都做的话，你可能会重复地列出一些事情，这很好；重点是，在重复之余，为了让你的情感体验保持新鲜，请在每一次把它们写下来的同时，去想象当时的体验和感受。当感恩成为一种习惯，我们会更珍惜生活中的美好时刻，而不会把它们当成是理所当然。\n\n### 从幸福到更幸福\n\n“我是否幸福”这个问题本身就暗示着对幸福的两极看法：要么幸福，要么不幸福。在这种理解中，幸福成为一个终点，一旦达到，我们对幸福的追求就结束了。实际上这个终点并不存在，对这一误解的执着只能导致不满和挫败感。\n\n我们永远都可以更幸福。没有人能够在所有时间都非常满足而无欲无求。与其问自己是否幸福，不如去探求一个更有助益的问题：“怎样才能更幸福？”这个问题不但契合幸福的实质，还表明了幸福是一个需要长期追求、永不间断的过程，而不是一个可以终结的句点。\n\n### 一种关于“改变”的方法\n\n与其强化自律性，不如养成固定的习惯。\n\n养成习惯要求确定行动的细节，并规定在特定的具体时间内完成，这需要感受到深刻价值作为行事动机。\n\n什么样的习惯能让你更幸福呢？你希望生活发生怎样的改变？比如，每周运动3次，每天早上冥想15分钟，每个月看两场电影，与伴侣每个星期二出去约会，隔天阅读一些有趣的读物，等等。\n\n### 四种汉堡模型，四种人生模式\n\n*   享乐主义型\n\n    *   第一种汉堡是我最先拿起来的汉堡，它虽然口味诱人，却是标准的垃圾食品。\n    *   “享乐主义型”的格言就是“及时行乐，逃避痛苦”，他们注重的是眼前的快乐，却忽视了自己的行为可能带来的任何负面后果。\n\n*   忙碌奔波型\n\n    *   第二种汉堡虽然口味很差，可里面全是蔬菜和有机食物，食用这类汉堡可以确保日后的健康，但却让食用者吃得很痛苦。\n    *   “忙碌奔波型”，这种人认为此刻的一切努力都是为了实现未来的目标，痛苦的过程是获得未来幸福的必由之路。\n\n*   虚无主义型\n\n    *   第三种汉堡最糟糕，既不好吃也不健康，如果吃了它，不但现在无法享受美味，日后还会影响健康。\n    *   “虚无主义型”，有一种人对生命已经丧失了希望和欲望，他们既不享受眼前的所有，对未来也没有任何期望。\n\n*   感悟幸福型\n\n    *   会不会还有一种汉堡，与第一种一样好吃，并且与第二种一样健康呢？会不会有一种能平衡当下及未来益处的汉堡呢？\n    *   生活幸福的人，不但能够享受当下所做的事情，而且通过目前的行为，他们也可以拥有更加满意的未来。\n\n为何有这么多“忙碌奔波型”的人呢？最主要的原因是我们的文化造就了这种信念：如果成绩全优，家长就会给我们奖励；如果工作表现好，就会得到奖金。我们习惯了去关注更远大的目标，却不在意当下的感受，最后导致终生的盲目追求。我们从不会因为享受过程而得到奖励，我们认为能否达到目标才是衡量一切的标准。社会只褒奖成功的人，而不是正在努力的人——只看结果，而无视过程。\n\n一旦达到目标之后，我们经常会把放松的心情解释成幸福，好像工作越艰难，成功后幸福感就越强。因此，当我们拥有这种错觉时，就不由自主地对这种生活方式屈服了。不可否认，这种解脱让我们感到真实的快乐，但是它绝不等同于幸福。\n\n这种幸福可被称为“幸福的假象”，它们来自于压力和焦虑的消除，无法长久维持，因为它本身就是与负面情绪共生的。这就好比一个人头痛好了之后，他会为头不痛了而高兴。然而，由于这种喜悦来自于痛苦的前因，当痛楚消散，我们很快就会把健康当成一种理所当然的事，病愈的喜悦早已消失得无影无踪。“忙碌奔波型”的人错误地认为成功即是幸福，坚信目标实现后的放松和解脱即是幸福，因此他们不停地从一个目标奔向另一个目标。\n\n“忙碌奔波型”的错误观念在于，只有成功本身可以为他们带来快乐，他们感觉不到过程的重要性。“享乐主义型”则错误地认为，只有过程是重要的。“虚无主义型”同时放弃了过程和结果，他们对生活已经麻木无感了。“忙碌奔波型”是未来的奴隶，“享乐主义型”是现在的奴隶，而“虚无主义型”则是过去的奴隶。\n\n真正能够持续的幸福感，需要我们为了一个有意义的目标快乐地努力与奋斗。幸福不是拼命爬到山顶，也不是在山下漫无目的地游逛，幸福是向山顶努力攀登过程中的种种经历和感受。\n\n### 练习\n\n#### 敞开心扉，把正面和负面的经历都写下来\n\n连续4天，每天用15分钟的时间，写下你在四个象限里的经历。\n\n无论你写什么，都是写给自己看的。如果写完后你愿意和他人分享当然也可以，但在写的时候请不要抑制任何的念头和想法，越是勇敢地表达自己，你就越能从中受益。\n\n在“虚无主义型”和“感悟幸福型”两个象限内，至少再多做两次练习。重复该练习时，你可以写同样或不同的内容。然后定期地回顾自己所写的内容，可以是三个月、一年，甚至是两年。\n\n*   忙碌奔波型：\n\n    *   写下你人生中忙碌奔波的经历。\n    *   为什么曾经是那样？\n    *   你是否从中受益？\n    *   你付出的代价又是什么？\n\n*   享乐主义型：\n\n    *   解释一下你只顾享乐的时刻或经历。\n    *   你是否从中得到了很多？\n    *   你损失的又是什么？\n\n*   虚无主义型：\n\n    *   写下那个特别令你痛苦的时刻，或者那个令你感到绝望、无助的时刻，并描述你当时以及现在对它最深刻的感受和想法。\n\n*   感悟幸福型：\n\n    *   描述一下你人生中某个特别幸福的时期或者经历。\n    *   发挥你的想象力，让自己再次回到那个时候，重温一下当时的感受，并写下来。\n","slug":"method-of-happiness","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9j0032zvr3gdvodq46","content":"<p>看完泰勒的《幸福的方法》，获益匪浅，幸福感持续上升，想跟大家分享一下；</p>\n<a id=\"more\"></a>\n<h3 id=\"表达感恩：每天记下5件值得感恩的事\"><a href=\"#表达感恩：每天记下5件值得感恩的事\" class=\"headerlink\" title=\"表达感恩：每天记下5件值得感恩的事\"></a>表达感恩：每天记下5件值得感恩的事</h3><p>每日把那些值得感恩的事情记录下来的人（每天写下最少5件值得感恩的事），确实在身体上更健康、内心更幸福。</p>\n<p>如果每天都做的话，你可能会重复地列出一些事情，这很好；重点是，在重复之余，为了让你的情感体验保持新鲜，请在每一次把它们写下来的同时，去想象当时的体验和感受。当感恩成为一种习惯，我们会更珍惜生活中的美好时刻，而不会把它们当成是理所当然。</p>\n<h3 id=\"从幸福到更幸福\"><a href=\"#从幸福到更幸福\" class=\"headerlink\" title=\"从幸福到更幸福\"></a>从幸福到更幸福</h3><p>“我是否幸福”这个问题本身就暗示着对幸福的两极看法：要么幸福，要么不幸福。在这种理解中，幸福成为一个终点，一旦达到，我们对幸福的追求就结束了。实际上这个终点并不存在，对这一误解的执着只能导致不满和挫败感。</p>\n<p>我们永远都可以更幸福。没有人能够在所有时间都非常满足而无欲无求。与其问自己是否幸福，不如去探求一个更有助益的问题：“怎样才能更幸福？”这个问题不但契合幸福的实质，还表明了幸福是一个需要长期追求、永不间断的过程，而不是一个可以终结的句点。</p>\n<h3 id=\"一种关于“改变”的方法\"><a href=\"#一种关于“改变”的方法\" class=\"headerlink\" title=\"一种关于“改变”的方法\"></a>一种关于“改变”的方法</h3><p>与其强化自律性，不如养成固定的习惯。</p>\n<p>养成习惯要求确定行动的细节，并规定在特定的具体时间内完成，这需要感受到深刻价值作为行事动机。</p>\n<p>什么样的习惯能让你更幸福呢？你希望生活发生怎样的改变？比如，每周运动3次，每天早上冥想15分钟，每个月看两场电影，与伴侣每个星期二出去约会，隔天阅读一些有趣的读物，等等。</p>\n<h3 id=\"四种汉堡模型，四种人生模式\"><a href=\"#四种汉堡模型，四种人生模式\" class=\"headerlink\" title=\"四种汉堡模型，四种人生模式\"></a>四种汉堡模型，四种人生模式</h3><ul>\n<li><p>享乐主义型</p>\n<ul>\n<li>第一种汉堡是我最先拿起来的汉堡，它虽然口味诱人，却是标准的垃圾食品。</li>\n<li>“享乐主义型”的格言就是“及时行乐，逃避痛苦”，他们注重的是眼前的快乐，却忽视了自己的行为可能带来的任何负面后果。</li>\n</ul>\n</li>\n<li><p>忙碌奔波型</p>\n<ul>\n<li>第二种汉堡虽然口味很差，可里面全是蔬菜和有机食物，食用这类汉堡可以确保日后的健康，但却让食用者吃得很痛苦。</li>\n<li>“忙碌奔波型”，这种人认为此刻的一切努力都是为了实现未来的目标，痛苦的过程是获得未来幸福的必由之路。</li>\n</ul>\n</li>\n<li><p>虚无主义型</p>\n<ul>\n<li>第三种汉堡最糟糕，既不好吃也不健康，如果吃了它，不但现在无法享受美味，日后还会影响健康。</li>\n<li>“虚无主义型”，有一种人对生命已经丧失了希望和欲望，他们既不享受眼前的所有，对未来也没有任何期望。</li>\n</ul>\n</li>\n<li><p>感悟幸福型</p>\n<ul>\n<li>会不会还有一种汉堡，与第一种一样好吃，并且与第二种一样健康呢？会不会有一种能平衡当下及未来益处的汉堡呢？</li>\n<li>生活幸福的人，不但能够享受当下所做的事情，而且通过目前的行为，他们也可以拥有更加满意的未来。</li>\n</ul>\n</li>\n</ul>\n<p>为何有这么多“忙碌奔波型”的人呢？最主要的原因是我们的文化造就了这种信念：如果成绩全优，家长就会给我们奖励；如果工作表现好，就会得到奖金。我们习惯了去关注更远大的目标，却不在意当下的感受，最后导致终生的盲目追求。我们从不会因为享受过程而得到奖励，我们认为能否达到目标才是衡量一切的标准。社会只褒奖成功的人，而不是正在努力的人——只看结果，而无视过程。</p>\n<p>一旦达到目标之后，我们经常会把放松的心情解释成幸福，好像工作越艰难，成功后幸福感就越强。因此，当我们拥有这种错觉时，就不由自主地对这种生活方式屈服了。不可否认，这种解脱让我们感到真实的快乐，但是它绝不等同于幸福。</p>\n<p>这种幸福可被称为“幸福的假象”，它们来自于压力和焦虑的消除，无法长久维持，因为它本身就是与负面情绪共生的。这就好比一个人头痛好了之后，他会为头不痛了而高兴。然而，由于这种喜悦来自于痛苦的前因，当痛楚消散，我们很快就会把健康当成一种理所当然的事，病愈的喜悦早已消失得无影无踪。“忙碌奔波型”的人错误地认为成功即是幸福，坚信目标实现后的放松和解脱即是幸福，因此他们不停地从一个目标奔向另一个目标。</p>\n<p>“忙碌奔波型”的错误观念在于，只有成功本身可以为他们带来快乐，他们感觉不到过程的重要性。“享乐主义型”则错误地认为，只有过程是重要的。“虚无主义型”同时放弃了过程和结果，他们对生活已经麻木无感了。“忙碌奔波型”是未来的奴隶，“享乐主义型”是现在的奴隶，而“虚无主义型”则是过去的奴隶。</p>\n<p>真正能够持续的幸福感，需要我们为了一个有意义的目标快乐地努力与奋斗。幸福不是拼命爬到山顶，也不是在山下漫无目的地游逛，幸福是向山顶努力攀登过程中的种种经历和感受。</p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"敞开心扉，把正面和负面的经历都写下来\"><a href=\"#敞开心扉，把正面和负面的经历都写下来\" class=\"headerlink\" title=\"敞开心扉，把正面和负面的经历都写下来\"></a>敞开心扉，把正面和负面的经历都写下来</h4><p>连续4天，每天用15分钟的时间，写下你在四个象限里的经历。</p>\n<p>无论你写什么，都是写给自己看的。如果写完后你愿意和他人分享当然也可以，但在写的时候请不要抑制任何的念头和想法，越是勇敢地表达自己，你就越能从中受益。</p>\n<p>在“虚无主义型”和“感悟幸福型”两个象限内，至少再多做两次练习。重复该练习时，你可以写同样或不同的内容。然后定期地回顾自己所写的内容，可以是三个月、一年，甚至是两年。</p>\n<ul>\n<li><p>忙碌奔波型：</p>\n<ul>\n<li>写下你人生中忙碌奔波的经历。</li>\n<li>为什么曾经是那样？</li>\n<li>你是否从中受益？</li>\n<li>你付出的代价又是什么？</li>\n</ul>\n</li>\n<li><p>享乐主义型：</p>\n<ul>\n<li>解释一下你只顾享乐的时刻或经历。</li>\n<li>你是否从中得到了很多？</li>\n<li>你损失的又是什么？</li>\n</ul>\n</li>\n<li><p>虚无主义型：</p>\n<ul>\n<li>写下那个特别令你痛苦的时刻，或者那个令你感到绝望、无助的时刻，并描述你当时以及现在对它最深刻的感受和想法。</li>\n</ul>\n</li>\n<li><p>感悟幸福型：</p>\n<ul>\n<li>描述一下你人生中某个特别幸福的时期或者经历。</li>\n<li>发挥你的想象力，让自己再次回到那个时候，重温一下当时的感受，并写下来。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>看完泰勒的《幸福的方法》，获益匪浅，幸福感持续上升，想跟大家分享一下；</p>","more":"<h3 id=\"表达感恩：每天记下5件值得感恩的事\"><a href=\"#表达感恩：每天记下5件值得感恩的事\" class=\"headerlink\" title=\"表达感恩：每天记下5件值得感恩的事\"></a>表达感恩：每天记下5件值得感恩的事</h3><p>每日把那些值得感恩的事情记录下来的人（每天写下最少5件值得感恩的事），确实在身体上更健康、内心更幸福。</p>\n<p>如果每天都做的话，你可能会重复地列出一些事情，这很好；重点是，在重复之余，为了让你的情感体验保持新鲜，请在每一次把它们写下来的同时，去想象当时的体验和感受。当感恩成为一种习惯，我们会更珍惜生活中的美好时刻，而不会把它们当成是理所当然。</p>\n<h3 id=\"从幸福到更幸福\"><a href=\"#从幸福到更幸福\" class=\"headerlink\" title=\"从幸福到更幸福\"></a>从幸福到更幸福</h3><p>“我是否幸福”这个问题本身就暗示着对幸福的两极看法：要么幸福，要么不幸福。在这种理解中，幸福成为一个终点，一旦达到，我们对幸福的追求就结束了。实际上这个终点并不存在，对这一误解的执着只能导致不满和挫败感。</p>\n<p>我们永远都可以更幸福。没有人能够在所有时间都非常满足而无欲无求。与其问自己是否幸福，不如去探求一个更有助益的问题：“怎样才能更幸福？”这个问题不但契合幸福的实质，还表明了幸福是一个需要长期追求、永不间断的过程，而不是一个可以终结的句点。</p>\n<h3 id=\"一种关于“改变”的方法\"><a href=\"#一种关于“改变”的方法\" class=\"headerlink\" title=\"一种关于“改变”的方法\"></a>一种关于“改变”的方法</h3><p>与其强化自律性，不如养成固定的习惯。</p>\n<p>养成习惯要求确定行动的细节，并规定在特定的具体时间内完成，这需要感受到深刻价值作为行事动机。</p>\n<p>什么样的习惯能让你更幸福呢？你希望生活发生怎样的改变？比如，每周运动3次，每天早上冥想15分钟，每个月看两场电影，与伴侣每个星期二出去约会，隔天阅读一些有趣的读物，等等。</p>\n<h3 id=\"四种汉堡模型，四种人生模式\"><a href=\"#四种汉堡模型，四种人生模式\" class=\"headerlink\" title=\"四种汉堡模型，四种人生模式\"></a>四种汉堡模型，四种人生模式</h3><ul>\n<li><p>享乐主义型</p>\n<ul>\n<li>第一种汉堡是我最先拿起来的汉堡，它虽然口味诱人，却是标准的垃圾食品。</li>\n<li>“享乐主义型”的格言就是“及时行乐，逃避痛苦”，他们注重的是眼前的快乐，却忽视了自己的行为可能带来的任何负面后果。</li>\n</ul>\n</li>\n<li><p>忙碌奔波型</p>\n<ul>\n<li>第二种汉堡虽然口味很差，可里面全是蔬菜和有机食物，食用这类汉堡可以确保日后的健康，但却让食用者吃得很痛苦。</li>\n<li>“忙碌奔波型”，这种人认为此刻的一切努力都是为了实现未来的目标，痛苦的过程是获得未来幸福的必由之路。</li>\n</ul>\n</li>\n<li><p>虚无主义型</p>\n<ul>\n<li>第三种汉堡最糟糕，既不好吃也不健康，如果吃了它，不但现在无法享受美味，日后还会影响健康。</li>\n<li>“虚无主义型”，有一种人对生命已经丧失了希望和欲望，他们既不享受眼前的所有，对未来也没有任何期望。</li>\n</ul>\n</li>\n<li><p>感悟幸福型</p>\n<ul>\n<li>会不会还有一种汉堡，与第一种一样好吃，并且与第二种一样健康呢？会不会有一种能平衡当下及未来益处的汉堡呢？</li>\n<li>生活幸福的人，不但能够享受当下所做的事情，而且通过目前的行为，他们也可以拥有更加满意的未来。</li>\n</ul>\n</li>\n</ul>\n<p>为何有这么多“忙碌奔波型”的人呢？最主要的原因是我们的文化造就了这种信念：如果成绩全优，家长就会给我们奖励；如果工作表现好，就会得到奖金。我们习惯了去关注更远大的目标，却不在意当下的感受，最后导致终生的盲目追求。我们从不会因为享受过程而得到奖励，我们认为能否达到目标才是衡量一切的标准。社会只褒奖成功的人，而不是正在努力的人——只看结果，而无视过程。</p>\n<p>一旦达到目标之后，我们经常会把放松的心情解释成幸福，好像工作越艰难，成功后幸福感就越强。因此，当我们拥有这种错觉时，就不由自主地对这种生活方式屈服了。不可否认，这种解脱让我们感到真实的快乐，但是它绝不等同于幸福。</p>\n<p>这种幸福可被称为“幸福的假象”，它们来自于压力和焦虑的消除，无法长久维持，因为它本身就是与负面情绪共生的。这就好比一个人头痛好了之后，他会为头不痛了而高兴。然而，由于这种喜悦来自于痛苦的前因，当痛楚消散，我们很快就会把健康当成一种理所当然的事，病愈的喜悦早已消失得无影无踪。“忙碌奔波型”的人错误地认为成功即是幸福，坚信目标实现后的放松和解脱即是幸福，因此他们不停地从一个目标奔向另一个目标。</p>\n<p>“忙碌奔波型”的错误观念在于，只有成功本身可以为他们带来快乐，他们感觉不到过程的重要性。“享乐主义型”则错误地认为，只有过程是重要的。“虚无主义型”同时放弃了过程和结果，他们对生活已经麻木无感了。“忙碌奔波型”是未来的奴隶，“享乐主义型”是现在的奴隶，而“虚无主义型”则是过去的奴隶。</p>\n<p>真正能够持续的幸福感，需要我们为了一个有意义的目标快乐地努力与奋斗。幸福不是拼命爬到山顶，也不是在山下漫无目的地游逛，幸福是向山顶努力攀登过程中的种种经历和感受。</p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"敞开心扉，把正面和负面的经历都写下来\"><a href=\"#敞开心扉，把正面和负面的经历都写下来\" class=\"headerlink\" title=\"敞开心扉，把正面和负面的经历都写下来\"></a>敞开心扉，把正面和负面的经历都写下来</h4><p>连续4天，每天用15分钟的时间，写下你在四个象限里的经历。</p>\n<p>无论你写什么，都是写给自己看的。如果写完后你愿意和他人分享当然也可以，但在写的时候请不要抑制任何的念头和想法，越是勇敢地表达自己，你就越能从中受益。</p>\n<p>在“虚无主义型”和“感悟幸福型”两个象限内，至少再多做两次练习。重复该练习时，你可以写同样或不同的内容。然后定期地回顾自己所写的内容，可以是三个月、一年，甚至是两年。</p>\n<ul>\n<li><p>忙碌奔波型：</p>\n<ul>\n<li>写下你人生中忙碌奔波的经历。</li>\n<li>为什么曾经是那样？</li>\n<li>你是否从中受益？</li>\n<li>你付出的代价又是什么？</li>\n</ul>\n</li>\n<li><p>享乐主义型：</p>\n<ul>\n<li>解释一下你只顾享乐的时刻或经历。</li>\n<li>你是否从中得到了很多？</li>\n<li>你损失的又是什么？</li>\n</ul>\n</li>\n<li><p>虚无主义型：</p>\n<ul>\n<li>写下那个特别令你痛苦的时刻，或者那个令你感到绝望、无助的时刻，并描述你当时以及现在对它最深刻的感受和想法。</li>\n</ul>\n</li>\n<li><p>感悟幸福型：</p>\n<ul>\n<li>描述一下你人生中某个特别幸福的时期或者经历。</li>\n<li>发挥你的想象力，让自己再次回到那个时候，重温一下当时的感受，并写下来。</li>\n</ul>\n</li>\n</ul>"},{"title":"摄影笔记：初识摄影","id":"143","date":"2015-07-26T14:01:51.000Z","_content":"\n不知道抽什么风，最近才想起我有一台数码单反（Nikon D3100），13年买的，闲置了很久（平时一般用胶卷机 Olympus OM-10），但没有用过几次，甚至上面的按钮都不大了解，一直都用自（sha）动（gua）模式在咔擦咔擦，感觉白买了有木有？\n\n之前刚步入职场的我，对于怎么用印象笔记都看过书哈（[Evernote超效率数字笔记术](http://book.douban.com/subject/24524405/)），然而为什么一直标榜自己很热爱摄影，却从来不会正儿八经的去了解她呢？今时今日，摄影已经变成了生存技能，不能让自己变成不会拍照的猪一样的队友，努力变成居家旅行必备的拍照小能手。（笑）\n\nTalk is cheap，不要想太多，just do it！于是我拿起了书架上那本[《风光摄影圣经》](http://book.douban.com/subject/11525485/)，了解一下风光摄影（光影、构图），上面也介绍了一些术语（快门、光圈、感光度、白平衡等），开始简单了解手上这台机器的使用方法。\n<!--more-->\n\n经过research，觉得应该从定焦头的光圈优先模式开始训练，养成一双独特的摄影眼，哈哈，于是买了一个35mm 1.8G的定焦镜头（据闻50mm定焦头专注于人像，而35mm兼顾人像和记录景物，就乱入了）和看了[《理解光圈》](http://book.douban.com/subject/7067572/)。目前只看过这本专门介绍光圈优先（Av）的书哈，不过觉得这本书还蛮实用，介绍也非常详细，几乎覆盖到日常拍照的各个场景。\n\n废话不多说，其实这篇日志主要是用来记录一下D3100的基本用法以及我学到的那些术语的理解，简单的来说，打打卡。\n\n# 一、为什么从“光圈优先”开始学？\n\n其实最终目标肯定是可以在手动模式（M, manual）下能hold住一切，但并不能一步登天，需要时间和练习把基础的体系搭起来。而在Av模式下，相机利用测光来获取快门值，而光圈、感光度、白平衡、曝光补偿都可以手动支配，针对日常的拍摄对象（风光、人像、静物等），Av可能是较合适入门的半自动模式，组合上述各个参数加上好的构图，大概就是一张很棒的照片吧。\n\n# 二、机器和拍摄模式\n\n机身：Nikon D3100\n镜头：Nikkor 35mm 1.8G\n模式：A/Av（光圈优先）\n对焦模式：自动对焦（A）\n\n![Nikon D3100 正面](http://cdn.sinacloud.net/woodysblog/photography-note/1.jpg)\n\n![Nikon D3100 侧面](http://cdn.sinacloud.net/woodysblog/photography-note/2.jpg)\n\n# 三、参数用途\n\nI. 曝光三角\n\n*   光圈(A/Av, Aperture value)\n\n    *   控制景深：应用在需要优先考虑景深的拍摄场合；\n    *   大光圈：F值越小，光圈越大。大光圈有突出主题、虚化背景的作用，比较适合人像特写等；\n    *   小光圈：F值越大，光圈越小。小光圈可以使远处和近处的景物都清晰，比较适合风景、建筑等；\n\n*   快门(S/Tv, Shutter/Time value)\n\n    *   控制进光量，快门越快，进光量越少，照片会偏暗；\n    *   控制曝光时间，快快门可以定格高速移动目标的瞬间，更有动感；而慢快门可以记录快速移动目标的移动轨迹，如瀑布或者夜间车流；\n\n*   感光度（ISO）\n\n    *   决定相机对进入光线的敏感度；\n    *   一般来说，ISO越低越好，因为ISO越高照片的杂点/噪点越多，影响照片质量；\n    *   什么时候用？在调整光圈/快门后，进入的光线还是不够多，如黑夜或昏暗的场景，提高一点感光度；\n（以上应该有配图，哈哈，以后拍了对比照再补吧~）\n\nII. 其他\n\n*   白平衡（WB, White Balance）\n\n    *   自动白平衡（默认）：数码相机自动调节，一般的准确率很高，但光线下或多云天气下的效果较差；\n    *   白炽光/室内光白平衡：不用闪光灯的室内拍摄用；\n    *   荧光白平衡（冷色）：适合在荧光灯下作白平衡调节，但很难确定，试拍；\n    *   阴天白平衡：适合把昏暗处的光线调置原色状态；\n    *   自定义；\n\n*   曝光补偿\n\n    *   有意识地变更相机自动演算出的“合适”曝光参数，让照片更明亮或者更昏暗的拍摄手法；\n    *   拍摄主体的原色，白加黑减（拍雪+EV，拍炭-EV），而逆光/昏暗/夜间拍摄+EV；\n    *   注意：相机的测光往往偏重于中心主体，白色的主体会让相机误以为环境很明亮，因而造成曝光不足；\nIII. 其他问题：\n\n*   为什么会有曝光补偿？\n  \n曝光补偿，是通过调节相机上的那个自由项来实现的。比如A档，机器自己决定快门，加补偿，快门时间延长，减补偿，快门时间缩短。S档，就是通过调整光圈来实现补偿。M档时，你自己控制了所有参数，相机不会做出任何补偿调整。\n  \n未完待续，以上参数在相机上怎么操作和值的大小有什么影响，后续配图再说吧~\n","source":"_posts/photography-note.md","raw":"---\ntitle: 摄影笔记：初识摄影\ntags:\n  - photography\nid: 143\ncategories:\n  - photography\ndate: 2015-07-26 22:01:51\n---\n\n不知道抽什么风，最近才想起我有一台数码单反（Nikon D3100），13年买的，闲置了很久（平时一般用胶卷机 Olympus OM-10），但没有用过几次，甚至上面的按钮都不大了解，一直都用自（sha）动（gua）模式在咔擦咔擦，感觉白买了有木有？\n\n之前刚步入职场的我，对于怎么用印象笔记都看过书哈（[Evernote超效率数字笔记术](http://book.douban.com/subject/24524405/)），然而为什么一直标榜自己很热爱摄影，却从来不会正儿八经的去了解她呢？今时今日，摄影已经变成了生存技能，不能让自己变成不会拍照的猪一样的队友，努力变成居家旅行必备的拍照小能手。（笑）\n\nTalk is cheap，不要想太多，just do it！于是我拿起了书架上那本[《风光摄影圣经》](http://book.douban.com/subject/11525485/)，了解一下风光摄影（光影、构图），上面也介绍了一些术语（快门、光圈、感光度、白平衡等），开始简单了解手上这台机器的使用方法。\n<!--more-->\n\n经过research，觉得应该从定焦头的光圈优先模式开始训练，养成一双独特的摄影眼，哈哈，于是买了一个35mm 1.8G的定焦镜头（据闻50mm定焦头专注于人像，而35mm兼顾人像和记录景物，就乱入了）和看了[《理解光圈》](http://book.douban.com/subject/7067572/)。目前只看过这本专门介绍光圈优先（Av）的书哈，不过觉得这本书还蛮实用，介绍也非常详细，几乎覆盖到日常拍照的各个场景。\n\n废话不多说，其实这篇日志主要是用来记录一下D3100的基本用法以及我学到的那些术语的理解，简单的来说，打打卡。\n\n# 一、为什么从“光圈优先”开始学？\n\n其实最终目标肯定是可以在手动模式（M, manual）下能hold住一切，但并不能一步登天，需要时间和练习把基础的体系搭起来。而在Av模式下，相机利用测光来获取快门值，而光圈、感光度、白平衡、曝光补偿都可以手动支配，针对日常的拍摄对象（风光、人像、静物等），Av可能是较合适入门的半自动模式，组合上述各个参数加上好的构图，大概就是一张很棒的照片吧。\n\n# 二、机器和拍摄模式\n\n机身：Nikon D3100\n镜头：Nikkor 35mm 1.8G\n模式：A/Av（光圈优先）\n对焦模式：自动对焦（A）\n\n![Nikon D3100 正面](http://cdn.sinacloud.net/woodysblog/photography-note/1.jpg)\n\n![Nikon D3100 侧面](http://cdn.sinacloud.net/woodysblog/photography-note/2.jpg)\n\n# 三、参数用途\n\nI. 曝光三角\n\n*   光圈(A/Av, Aperture value)\n\n    *   控制景深：应用在需要优先考虑景深的拍摄场合；\n    *   大光圈：F值越小，光圈越大。大光圈有突出主题、虚化背景的作用，比较适合人像特写等；\n    *   小光圈：F值越大，光圈越小。小光圈可以使远处和近处的景物都清晰，比较适合风景、建筑等；\n\n*   快门(S/Tv, Shutter/Time value)\n\n    *   控制进光量，快门越快，进光量越少，照片会偏暗；\n    *   控制曝光时间，快快门可以定格高速移动目标的瞬间，更有动感；而慢快门可以记录快速移动目标的移动轨迹，如瀑布或者夜间车流；\n\n*   感光度（ISO）\n\n    *   决定相机对进入光线的敏感度；\n    *   一般来说，ISO越低越好，因为ISO越高照片的杂点/噪点越多，影响照片质量；\n    *   什么时候用？在调整光圈/快门后，进入的光线还是不够多，如黑夜或昏暗的场景，提高一点感光度；\n（以上应该有配图，哈哈，以后拍了对比照再补吧~）\n\nII. 其他\n\n*   白平衡（WB, White Balance）\n\n    *   自动白平衡（默认）：数码相机自动调节，一般的准确率很高，但光线下或多云天气下的效果较差；\n    *   白炽光/室内光白平衡：不用闪光灯的室内拍摄用；\n    *   荧光白平衡（冷色）：适合在荧光灯下作白平衡调节，但很难确定，试拍；\n    *   阴天白平衡：适合把昏暗处的光线调置原色状态；\n    *   自定义；\n\n*   曝光补偿\n\n    *   有意识地变更相机自动演算出的“合适”曝光参数，让照片更明亮或者更昏暗的拍摄手法；\n    *   拍摄主体的原色，白加黑减（拍雪+EV，拍炭-EV），而逆光/昏暗/夜间拍摄+EV；\n    *   注意：相机的测光往往偏重于中心主体，白色的主体会让相机误以为环境很明亮，因而造成曝光不足；\nIII. 其他问题：\n\n*   为什么会有曝光补偿？\n  \n曝光补偿，是通过调节相机上的那个自由项来实现的。比如A档，机器自己决定快门，加补偿，快门时间延长，减补偿，快门时间缩短。S档，就是通过调整光圈来实现补偿。M档时，你自己控制了所有参数，相机不会做出任何补偿调整。\n  \n未完待续，以上参数在相机上怎么操作和值的大小有什么影响，后续配图再说吧~\n","slug":"photography-note","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9k0035zvr3oo8cioa7","content":"<p>不知道抽什么风，最近才想起我有一台数码单反（Nikon D3100），13年买的，闲置了很久（平时一般用胶卷机 Olympus OM-10），但没有用过几次，甚至上面的按钮都不大了解，一直都用自（sha）动（gua）模式在咔擦咔擦，感觉白买了有木有？</p>\n<p>之前刚步入职场的我，对于怎么用印象笔记都看过书哈（<a href=\"http://book.douban.com/subject/24524405/\" target=\"_blank\" rel=\"noopener\">Evernote超效率数字笔记术</a>），然而为什么一直标榜自己很热爱摄影，却从来不会正儿八经的去了解她呢？今时今日，摄影已经变成了生存技能，不能让自己变成不会拍照的猪一样的队友，努力变成居家旅行必备的拍照小能手。（笑）</p>\n<p>Talk is cheap，不要想太多，just do it！于是我拿起了书架上那本<a href=\"http://book.douban.com/subject/11525485/\" target=\"_blank\" rel=\"noopener\">《风光摄影圣经》</a>，了解一下风光摄影（光影、构图），上面也介绍了一些术语（快门、光圈、感光度、白平衡等），开始简单了解手上这台机器的使用方法。<br><a id=\"more\"></a></p>\n<p>经过research，觉得应该从定焦头的光圈优先模式开始训练，养成一双独特的摄影眼，哈哈，于是买了一个35mm 1.8G的定焦镜头（据闻50mm定焦头专注于人像，而35mm兼顾人像和记录景物，就乱入了）和看了<a href=\"http://book.douban.com/subject/7067572/\" target=\"_blank\" rel=\"noopener\">《理解光圈》</a>。目前只看过这本专门介绍光圈优先（Av）的书哈，不过觉得这本书还蛮实用，介绍也非常详细，几乎覆盖到日常拍照的各个场景。</p>\n<p>废话不多说，其实这篇日志主要是用来记录一下D3100的基本用法以及我学到的那些术语的理解，简单的来说，打打卡。</p>\n<h1 id=\"一、为什么从“光圈优先”开始学？\"><a href=\"#一、为什么从“光圈优先”开始学？\" class=\"headerlink\" title=\"一、为什么从“光圈优先”开始学？\"></a>一、为什么从“光圈优先”开始学？</h1><p>其实最终目标肯定是可以在手动模式（M, manual）下能hold住一切，但并不能一步登天，需要时间和练习把基础的体系搭起来。而在Av模式下，相机利用测光来获取快门值，而光圈、感光度、白平衡、曝光补偿都可以手动支配，针对日常的拍摄对象（风光、人像、静物等），Av可能是较合适入门的半自动模式，组合上述各个参数加上好的构图，大概就是一张很棒的照片吧。</p>\n<h1 id=\"二、机器和拍摄模式\"><a href=\"#二、机器和拍摄模式\" class=\"headerlink\" title=\"二、机器和拍摄模式\"></a>二、机器和拍摄模式</h1><p>机身：Nikon D3100<br>镜头：Nikkor 35mm 1.8G<br>模式：A/Av（光圈优先）<br>对焦模式：自动对焦（A）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/photography-note/1.jpg\" alt=\"Nikon D3100 正面\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/photography-note/2.jpg\" alt=\"Nikon D3100 侧面\"></p>\n<h1 id=\"三、参数用途\"><a href=\"#三、参数用途\" class=\"headerlink\" title=\"三、参数用途\"></a>三、参数用途</h1><p>I. 曝光三角</p>\n<ul>\n<li><p>光圈(A/Av, Aperture value)</p>\n<ul>\n<li>控制景深：应用在需要优先考虑景深的拍摄场合；</li>\n<li>大光圈：F值越小，光圈越大。大光圈有突出主题、虚化背景的作用，比较适合人像特写等；</li>\n<li>小光圈：F值越大，光圈越小。小光圈可以使远处和近处的景物都清晰，比较适合风景、建筑等；</li>\n</ul>\n</li>\n<li><p>快门(S/Tv, Shutter/Time value)</p>\n<ul>\n<li>控制进光量，快门越快，进光量越少，照片会偏暗；</li>\n<li>控制曝光时间，快快门可以定格高速移动目标的瞬间，更有动感；而慢快门可以记录快速移动目标的移动轨迹，如瀑布或者夜间车流；</li>\n</ul>\n</li>\n<li><p>感光度（ISO）</p>\n<ul>\n<li>决定相机对进入光线的敏感度；</li>\n<li>一般来说，ISO越低越好，因为ISO越高照片的杂点/噪点越多，影响照片质量；</li>\n<li>什么时候用？在调整光圈/快门后，进入的光线还是不够多，如黑夜或昏暗的场景，提高一点感光度；<br>（以上应该有配图，哈哈，以后拍了对比照再补吧~）</li>\n</ul>\n</li>\n</ul>\n<p>II. 其他</p>\n<ul>\n<li><p>白平衡（WB, White Balance）</p>\n<ul>\n<li>自动白平衡（默认）：数码相机自动调节，一般的准确率很高，但光线下或多云天气下的效果较差；</li>\n<li>白炽光/室内光白平衡：不用闪光灯的室内拍摄用；</li>\n<li>荧光白平衡（冷色）：适合在荧光灯下作白平衡调节，但很难确定，试拍；</li>\n<li>阴天白平衡：适合把昏暗处的光线调置原色状态；</li>\n<li>自定义；</li>\n</ul>\n</li>\n<li><p>曝光补偿</p>\n<ul>\n<li>有意识地变更相机自动演算出的“合适”曝光参数，让照片更明亮或者更昏暗的拍摄手法；</li>\n<li>拍摄主体的原色，白加黑减（拍雪+EV，拍炭-EV），而逆光/昏暗/夜间拍摄+EV；</li>\n<li>注意：相机的测光往往偏重于中心主体，白色的主体会让相机误以为环境很明亮，因而造成曝光不足；<br>III. 其他问题：</li>\n</ul>\n</li>\n<li><p>为什么会有曝光补偿？</p>\n</li>\n</ul>\n<p>曝光补偿，是通过调节相机上的那个自由项来实现的。比如A档，机器自己决定快门，加补偿，快门时间延长，减补偿，快门时间缩短。S档，就是通过调整光圈来实现补偿。M档时，你自己控制了所有参数，相机不会做出任何补偿调整。</p>\n<p>未完待续，以上参数在相机上怎么操作和值的大小有什么影响，后续配图再说吧~</p>\n","site":{"data":{}},"excerpt":"<p>不知道抽什么风，最近才想起我有一台数码单反（Nikon D3100），13年买的，闲置了很久（平时一般用胶卷机 Olympus OM-10），但没有用过几次，甚至上面的按钮都不大了解，一直都用自（sha）动（gua）模式在咔擦咔擦，感觉白买了有木有？</p>\n<p>之前刚步入职场的我，对于怎么用印象笔记都看过书哈（<a href=\"http://book.douban.com/subject/24524405/\" target=\"_blank\" rel=\"noopener\">Evernote超效率数字笔记术</a>），然而为什么一直标榜自己很热爱摄影，却从来不会正儿八经的去了解她呢？今时今日，摄影已经变成了生存技能，不能让自己变成不会拍照的猪一样的队友，努力变成居家旅行必备的拍照小能手。（笑）</p>\n<p>Talk is cheap，不要想太多，just do it！于是我拿起了书架上那本<a href=\"http://book.douban.com/subject/11525485/\" target=\"_blank\" rel=\"noopener\">《风光摄影圣经》</a>，了解一下风光摄影（光影、构图），上面也介绍了一些术语（快门、光圈、感光度、白平衡等），开始简单了解手上这台机器的使用方法。<br>","more":"</p>\n<p>经过research，觉得应该从定焦头的光圈优先模式开始训练，养成一双独特的摄影眼，哈哈，于是买了一个35mm 1.8G的定焦镜头（据闻50mm定焦头专注于人像，而35mm兼顾人像和记录景物，就乱入了）和看了<a href=\"http://book.douban.com/subject/7067572/\" target=\"_blank\" rel=\"noopener\">《理解光圈》</a>。目前只看过这本专门介绍光圈优先（Av）的书哈，不过觉得这本书还蛮实用，介绍也非常详细，几乎覆盖到日常拍照的各个场景。</p>\n<p>废话不多说，其实这篇日志主要是用来记录一下D3100的基本用法以及我学到的那些术语的理解，简单的来说，打打卡。</p>\n<h1 id=\"一、为什么从“光圈优先”开始学？\"><a href=\"#一、为什么从“光圈优先”开始学？\" class=\"headerlink\" title=\"一、为什么从“光圈优先”开始学？\"></a>一、为什么从“光圈优先”开始学？</h1><p>其实最终目标肯定是可以在手动模式（M, manual）下能hold住一切，但并不能一步登天，需要时间和练习把基础的体系搭起来。而在Av模式下，相机利用测光来获取快门值，而光圈、感光度、白平衡、曝光补偿都可以手动支配，针对日常的拍摄对象（风光、人像、静物等），Av可能是较合适入门的半自动模式，组合上述各个参数加上好的构图，大概就是一张很棒的照片吧。</p>\n<h1 id=\"二、机器和拍摄模式\"><a href=\"#二、机器和拍摄模式\" class=\"headerlink\" title=\"二、机器和拍摄模式\"></a>二、机器和拍摄模式</h1><p>机身：Nikon D3100<br>镜头：Nikkor 35mm 1.8G<br>模式：A/Av（光圈优先）<br>对焦模式：自动对焦（A）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/photography-note/1.jpg\" alt=\"Nikon D3100 正面\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/photography-note/2.jpg\" alt=\"Nikon D3100 侧面\"></p>\n<h1 id=\"三、参数用途\"><a href=\"#三、参数用途\" class=\"headerlink\" title=\"三、参数用途\"></a>三、参数用途</h1><p>I. 曝光三角</p>\n<ul>\n<li><p>光圈(A/Av, Aperture value)</p>\n<ul>\n<li>控制景深：应用在需要优先考虑景深的拍摄场合；</li>\n<li>大光圈：F值越小，光圈越大。大光圈有突出主题、虚化背景的作用，比较适合人像特写等；</li>\n<li>小光圈：F值越大，光圈越小。小光圈可以使远处和近处的景物都清晰，比较适合风景、建筑等；</li>\n</ul>\n</li>\n<li><p>快门(S/Tv, Shutter/Time value)</p>\n<ul>\n<li>控制进光量，快门越快，进光量越少，照片会偏暗；</li>\n<li>控制曝光时间，快快门可以定格高速移动目标的瞬间，更有动感；而慢快门可以记录快速移动目标的移动轨迹，如瀑布或者夜间车流；</li>\n</ul>\n</li>\n<li><p>感光度（ISO）</p>\n<ul>\n<li>决定相机对进入光线的敏感度；</li>\n<li>一般来说，ISO越低越好，因为ISO越高照片的杂点/噪点越多，影响照片质量；</li>\n<li>什么时候用？在调整光圈/快门后，进入的光线还是不够多，如黑夜或昏暗的场景，提高一点感光度；<br>（以上应该有配图，哈哈，以后拍了对比照再补吧~）</li>\n</ul>\n</li>\n</ul>\n<p>II. 其他</p>\n<ul>\n<li><p>白平衡（WB, White Balance）</p>\n<ul>\n<li>自动白平衡（默认）：数码相机自动调节，一般的准确率很高，但光线下或多云天气下的效果较差；</li>\n<li>白炽光/室内光白平衡：不用闪光灯的室内拍摄用；</li>\n<li>荧光白平衡（冷色）：适合在荧光灯下作白平衡调节，但很难确定，试拍；</li>\n<li>阴天白平衡：适合把昏暗处的光线调置原色状态；</li>\n<li>自定义；</li>\n</ul>\n</li>\n<li><p>曝光补偿</p>\n<ul>\n<li>有意识地变更相机自动演算出的“合适”曝光参数，让照片更明亮或者更昏暗的拍摄手法；</li>\n<li>拍摄主体的原色，白加黑减（拍雪+EV，拍炭-EV），而逆光/昏暗/夜间拍摄+EV；</li>\n<li>注意：相机的测光往往偏重于中心主体，白色的主体会让相机误以为环境很明亮，因而造成曝光不足；<br>III. 其他问题：</li>\n</ul>\n</li>\n<li><p>为什么会有曝光补偿？</p>\n</li>\n</ul>\n<p>曝光补偿，是通过调节相机上的那个自由项来实现的。比如A档，机器自己决定快门，加补偿，快门时间延长，减补偿，快门时间缩短。S档，就是通过调整光圈来实现补偿。M档时，你自己控制了所有参数，相机不会做出任何补偿调整。</p>\n<p>未完待续，以上参数在相机上怎么操作和值的大小有什么影响，后续配图再说吧~</p>"},{"title":"离职这件小事","date":"2016-06-06T08:06:18.000Z","_content":"今天是我从度厂离职后的第10天，一直很想提笔记录一下我的北漂生活，但由于这次离职还涉及北漂生活的结束，在北京生活了3年，除了工作上学习了很多，认识一些好友，还积累了收拾不完的行李。于是在离职后的一周内，我都在收拾打包。在杭州生活的第一天，终于可以好好收拾心情，开始记录啦。\n\n> 这十年来做过的事，能令你无悔骄傲吗？ —— [《给十年后的我》](http://music.163.com/#/song?id=94530)\n\n今年年初，听到这首歌时，差点泪崩，感觉这首歌歌词，就是在说从实习生到工作3年的我。\n\n在职的这段时间，我真敢不要脸地说“**无悔骄傲**”。\n\n3年前，当我还在实习时，我跟自己有一个约定：\n<!-- more -->\n* 不再拖后腿，不麻烦老大和小伙伴们帮我擦屁股\n* 跟我请教过的小伙伴们一样，专业、hold得住\n* 向导师们学习，独立、鸡血、认真、负责\n\n**想不到3年后真做到了**，也许是目标定得具体而可实现，而且碰到一个很好的fe团队，导师和小伙伴们都很愿意指点我，虽然我还是没有桂子酱那么能hold得住、没有国良、宇霆大神那么牛，至少我觉得是完成当年和自己的约定。  \n\n意外的是，我还有幸当了经验FE团队1年多的负责人，开始带新同学和安排项目，正如当年带我的导师一样用心地去传承自己所知的，这段经历也非常宝贵，不知道我做好了没有，但至少努力过，也尽力了。    \n\n> 你忘掉理想只能忙于生活吗？ —— 《给十年后的我》\n\n但是如果继续目前的状态，我不确定下一个3年，甚至再下一个3年，自己是否还敢说“无悔骄傲”。  \n \n今年年初我拿着一份自我感觉良好的“成绩单”递上去，尤其值得一提的是一个库改造项目（嘿嘿，不能说detail），看上去简单、没啥工作量，实际上重新设计、重构整个前端系统，前期我利用大量个人时间做的，我认为是一个非常具有现在时和将来时实用价值的技术项目。不知道是不是大部分项目都是偏“提高研发效率”，最后我没升T成功。不太明白，大部分甚至没有前端技术背景的评委们，是根据什么规则在10分钟的presentation，判断我过去一年多的工作成果是否有价值。  \n\n到了年初个人KPI设定的时候，我也很迷茫。小伙伴们建议我多做点有“闪光点”的项目，命中评委喜欢的点，做好看的PPT，对下次升T有好处。我了解当前系统的历史问题，知道应该怎么优化才利于日常开发和后续维护、扩展，想担当一枚“清道夫”，构建一个更棒的系统，难道不也很好吗？喜欢看创新、showcase的，有多少项目在职称评定后烂尾？\n\n说了那么多，我还是个年轻浮躁的俗人，其实只要不care这些浮云，看开点，也就没事了，偏偏那么俗，哈哈。\n\n不过这不是我离职的原因，这些小插曲我吃顿好的睡个觉就过去了。相信大家都知道，gap year不能因为学习、生活或者工作不顺，就轻易选择放弃，去追求所谓的新的生活，因为你连现在都没有处理好，新的生活只是现在生活的复刻版，结果还是一样的。\n\n早在一年半前，我就开始有组织有预谋地准备了，只是连我自己都没发现。  \n**[Working holiday in NZ.](https://www.douban.com/group/WHV/)**  \n(安利一下我当时从NZ移民局扒下的[申请表demo](http://www.wuyuying.com/whv/#/personal-details?fr=resign-from-baidu))\n\n小伙伴：“我们去新西兰working holiday吧！”  \n我：“别闹了！我现在生活滋润得很，有一群爱我的和我爱的同事们，有我热爱和鸡血的工作，为什么要放弃现在所有跑那么远去接受未知恐惧的洗礼呢？”  \n\n所以一开始我是拒绝的，再到后来各种学英文考雅思、利用技术手段冲击NZ移民局抢到每年开放1000份的WHV申请表、考驾照&练车……签证有效期到今年6月底，不出发视为自动放弃，每个国家的WHV一个人一生只会下签一次（30岁前申请），我都准备那么多那么久了，裤子都脱了，现在才说不走！？No way!!!\n\n其实还有一个很重要的原因，也就是我对这次旅途唯一的企图，希望自己变得勇敢一点。很多朋友说我怂怂的，哈哈，那就缺什么补点什么吧。如果连根本没拥有什么的我，现在连放弃的勇气都没有，以后也不会再有了，出发本身就是旅行的意义。\n\n最后，  \n**感谢我在北京遇到的所有人**，当我说“在北京我只有你们了”是认真的，我真的是一个人都不认识的时候自己拖着行李箱就来北京了，你们都是我北漂生活的一部分，有你们才有现在的我；  \n**感谢朋友们**，你们天天看我zuo，咱们友情小船还不翻，真的不容易；  \n**感谢爸妈**，很高兴我要来北京和去新西兰，你们的回复都一样，“不反对不支持”，感谢你们尊重我的选择，但私下会各种联系新西兰的朋友，你们是中国好父母。\n\n2016.06.06  \n写于杭州西湖湖畔\n","source":"_posts/resign-from-baidu.md","raw":"---\ntitle: 离职这件小事\ntags:\n  - job\n  - baidu\n  - life\n  - whv\ndate: 2016-06-06 16:06:18\n---\n今天是我从度厂离职后的第10天，一直很想提笔记录一下我的北漂生活，但由于这次离职还涉及北漂生活的结束，在北京生活了3年，除了工作上学习了很多，认识一些好友，还积累了收拾不完的行李。于是在离职后的一周内，我都在收拾打包。在杭州生活的第一天，终于可以好好收拾心情，开始记录啦。\n\n> 这十年来做过的事，能令你无悔骄傲吗？ —— [《给十年后的我》](http://music.163.com/#/song?id=94530)\n\n今年年初，听到这首歌时，差点泪崩，感觉这首歌歌词，就是在说从实习生到工作3年的我。\n\n在职的这段时间，我真敢不要脸地说“**无悔骄傲**”。\n\n3年前，当我还在实习时，我跟自己有一个约定：\n<!-- more -->\n* 不再拖后腿，不麻烦老大和小伙伴们帮我擦屁股\n* 跟我请教过的小伙伴们一样，专业、hold得住\n* 向导师们学习，独立、鸡血、认真、负责\n\n**想不到3年后真做到了**，也许是目标定得具体而可实现，而且碰到一个很好的fe团队，导师和小伙伴们都很愿意指点我，虽然我还是没有桂子酱那么能hold得住、没有国良、宇霆大神那么牛，至少我觉得是完成当年和自己的约定。  \n\n意外的是，我还有幸当了经验FE团队1年多的负责人，开始带新同学和安排项目，正如当年带我的导师一样用心地去传承自己所知的，这段经历也非常宝贵，不知道我做好了没有，但至少努力过，也尽力了。    \n\n> 你忘掉理想只能忙于生活吗？ —— 《给十年后的我》\n\n但是如果继续目前的状态，我不确定下一个3年，甚至再下一个3年，自己是否还敢说“无悔骄傲”。  \n \n今年年初我拿着一份自我感觉良好的“成绩单”递上去，尤其值得一提的是一个库改造项目（嘿嘿，不能说detail），看上去简单、没啥工作量，实际上重新设计、重构整个前端系统，前期我利用大量个人时间做的，我认为是一个非常具有现在时和将来时实用价值的技术项目。不知道是不是大部分项目都是偏“提高研发效率”，最后我没升T成功。不太明白，大部分甚至没有前端技术背景的评委们，是根据什么规则在10分钟的presentation，判断我过去一年多的工作成果是否有价值。  \n\n到了年初个人KPI设定的时候，我也很迷茫。小伙伴们建议我多做点有“闪光点”的项目，命中评委喜欢的点，做好看的PPT，对下次升T有好处。我了解当前系统的历史问题，知道应该怎么优化才利于日常开发和后续维护、扩展，想担当一枚“清道夫”，构建一个更棒的系统，难道不也很好吗？喜欢看创新、showcase的，有多少项目在职称评定后烂尾？\n\n说了那么多，我还是个年轻浮躁的俗人，其实只要不care这些浮云，看开点，也就没事了，偏偏那么俗，哈哈。\n\n不过这不是我离职的原因，这些小插曲我吃顿好的睡个觉就过去了。相信大家都知道，gap year不能因为学习、生活或者工作不顺，就轻易选择放弃，去追求所谓的新的生活，因为你连现在都没有处理好，新的生活只是现在生活的复刻版，结果还是一样的。\n\n早在一年半前，我就开始有组织有预谋地准备了，只是连我自己都没发现。  \n**[Working holiday in NZ.](https://www.douban.com/group/WHV/)**  \n(安利一下我当时从NZ移民局扒下的[申请表demo](http://www.wuyuying.com/whv/#/personal-details?fr=resign-from-baidu))\n\n小伙伴：“我们去新西兰working holiday吧！”  \n我：“别闹了！我现在生活滋润得很，有一群爱我的和我爱的同事们，有我热爱和鸡血的工作，为什么要放弃现在所有跑那么远去接受未知恐惧的洗礼呢？”  \n\n所以一开始我是拒绝的，再到后来各种学英文考雅思、利用技术手段冲击NZ移民局抢到每年开放1000份的WHV申请表、考驾照&练车……签证有效期到今年6月底，不出发视为自动放弃，每个国家的WHV一个人一生只会下签一次（30岁前申请），我都准备那么多那么久了，裤子都脱了，现在才说不走！？No way!!!\n\n其实还有一个很重要的原因，也就是我对这次旅途唯一的企图，希望自己变得勇敢一点。很多朋友说我怂怂的，哈哈，那就缺什么补点什么吧。如果连根本没拥有什么的我，现在连放弃的勇气都没有，以后也不会再有了，出发本身就是旅行的意义。\n\n最后，  \n**感谢我在北京遇到的所有人**，当我说“在北京我只有你们了”是认真的，我真的是一个人都不认识的时候自己拖着行李箱就来北京了，你们都是我北漂生活的一部分，有你们才有现在的我；  \n**感谢朋友们**，你们天天看我zuo，咱们友情小船还不翻，真的不容易；  \n**感谢爸妈**，很高兴我要来北京和去新西兰，你们的回复都一样，“不反对不支持”，感谢你们尊重我的选择，但私下会各种联系新西兰的朋友，你们是中国好父母。\n\n2016.06.06  \n写于杭州西湖湖畔\n","slug":"resign-from-baidu","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9m0038zvr3zrtfxglp","content":"<p>今天是我从度厂离职后的第10天，一直很想提笔记录一下我的北漂生活，但由于这次离职还涉及北漂生活的结束，在北京生活了3年，除了工作上学习了很多，认识一些好友，还积累了收拾不完的行李。于是在离职后的一周内，我都在收拾打包。在杭州生活的第一天，终于可以好好收拾心情，开始记录啦。</p>\n<blockquote>\n<p>这十年来做过的事，能令你无悔骄傲吗？ —— <a href=\"http://music.163.com/#/song?id=94530\" target=\"_blank\" rel=\"noopener\">《给十年后的我》</a></p>\n</blockquote>\n<p>今年年初，听到这首歌时，差点泪崩，感觉这首歌歌词，就是在说从实习生到工作3年的我。</p>\n<p>在职的这段时间，我真敢不要脸地说“<strong>无悔骄傲</strong>”。</p>\n<p>3年前，当我还在实习时，我跟自己有一个约定：<br><a id=\"more\"></a></p>\n<ul>\n<li>不再拖后腿，不麻烦老大和小伙伴们帮我擦屁股</li>\n<li>跟我请教过的小伙伴们一样，专业、hold得住</li>\n<li>向导师们学习，独立、鸡血、认真、负责</li>\n</ul>\n<p><strong>想不到3年后真做到了</strong>，也许是目标定得具体而可实现，而且碰到一个很好的fe团队，导师和小伙伴们都很愿意指点我，虽然我还是没有桂子酱那么能hold得住、没有国良、宇霆大神那么牛，至少我觉得是完成当年和自己的约定。  </p>\n<p>意外的是，我还有幸当了经验FE团队1年多的负责人，开始带新同学和安排项目，正如当年带我的导师一样用心地去传承自己所知的，这段经历也非常宝贵，不知道我做好了没有，但至少努力过，也尽力了。    </p>\n<blockquote>\n<p>你忘掉理想只能忙于生活吗？ —— 《给十年后的我》</p>\n</blockquote>\n<p>但是如果继续目前的状态，我不确定下一个3年，甚至再下一个3年，自己是否还敢说“无悔骄傲”。  </p>\n<p>今年年初我拿着一份自我感觉良好的“成绩单”递上去，尤其值得一提的是一个库改造项目（嘿嘿，不能说detail），看上去简单、没啥工作量，实际上重新设计、重构整个前端系统，前期我利用大量个人时间做的，我认为是一个非常具有现在时和将来时实用价值的技术项目。不知道是不是大部分项目都是偏“提高研发效率”，最后我没升T成功。不太明白，大部分甚至没有前端技术背景的评委们，是根据什么规则在10分钟的presentation，判断我过去一年多的工作成果是否有价值。  </p>\n<p>到了年初个人KPI设定的时候，我也很迷茫。小伙伴们建议我多做点有“闪光点”的项目，命中评委喜欢的点，做好看的PPT，对下次升T有好处。我了解当前系统的历史问题，知道应该怎么优化才利于日常开发和后续维护、扩展，想担当一枚“清道夫”，构建一个更棒的系统，难道不也很好吗？喜欢看创新、showcase的，有多少项目在职称评定后烂尾？</p>\n<p>说了那么多，我还是个年轻浮躁的俗人，其实只要不care这些浮云，看开点，也就没事了，偏偏那么俗，哈哈。</p>\n<p>不过这不是我离职的原因，这些小插曲我吃顿好的睡个觉就过去了。相信大家都知道，gap year不能因为学习、生活或者工作不顺，就轻易选择放弃，去追求所谓的新的生活，因为你连现在都没有处理好，新的生活只是现在生活的复刻版，结果还是一样的。</p>\n<p>早在一年半前，我就开始有组织有预谋地准备了，只是连我自己都没发现。<br><strong><a href=\"https://www.douban.com/group/WHV/\" target=\"_blank\" rel=\"noopener\">Working holiday in NZ.</a></strong><br>(安利一下我当时从NZ移民局扒下的<a href=\"http://www.wuyuying.com/whv/#/personal-details?fr=resign-from-baidu\" target=\"_blank\" rel=\"noopener\">申请表demo</a>)</p>\n<p>小伙伴：“我们去新西兰working holiday吧！”<br>我：“别闹了！我现在生活滋润得很，有一群爱我的和我爱的同事们，有我热爱和鸡血的工作，为什么要放弃现在所有跑那么远去接受未知恐惧的洗礼呢？”  </p>\n<p>所以一开始我是拒绝的，再到后来各种学英文考雅思、利用技术手段冲击NZ移民局抢到每年开放1000份的WHV申请表、考驾照&amp;练车……签证有效期到今年6月底，不出发视为自动放弃，每个国家的WHV一个人一生只会下签一次（30岁前申请），我都准备那么多那么久了，裤子都脱了，现在才说不走！？No way!!!</p>\n<p>其实还有一个很重要的原因，也就是我对这次旅途唯一的企图，希望自己变得勇敢一点。很多朋友说我怂怂的，哈哈，那就缺什么补点什么吧。如果连根本没拥有什么的我，现在连放弃的勇气都没有，以后也不会再有了，出发本身就是旅行的意义。</p>\n<p>最后，<br><strong>感谢我在北京遇到的所有人</strong>，当我说“在北京我只有你们了”是认真的，我真的是一个人都不认识的时候自己拖着行李箱就来北京了，你们都是我北漂生活的一部分，有你们才有现在的我；<br><strong>感谢朋友们</strong>，你们天天看我zuo，咱们友情小船还不翻，真的不容易；<br><strong>感谢爸妈</strong>，很高兴我要来北京和去新西兰，你们的回复都一样，“不反对不支持”，感谢你们尊重我的选择，但私下会各种联系新西兰的朋友，你们是中国好父母。</p>\n<p>2016.06.06<br>写于杭州西湖湖畔</p>\n","site":{"data":{}},"excerpt":"<p>今天是我从度厂离职后的第10天，一直很想提笔记录一下我的北漂生活，但由于这次离职还涉及北漂生活的结束，在北京生活了3年，除了工作上学习了很多，认识一些好友，还积累了收拾不完的行李。于是在离职后的一周内，我都在收拾打包。在杭州生活的第一天，终于可以好好收拾心情，开始记录啦。</p>\n<blockquote>\n<p>这十年来做过的事，能令你无悔骄傲吗？ —— <a href=\"http://music.163.com/#/song?id=94530\" target=\"_blank\" rel=\"noopener\">《给十年后的我》</a></p>\n</blockquote>\n<p>今年年初，听到这首歌时，差点泪崩，感觉这首歌歌词，就是在说从实习生到工作3年的我。</p>\n<p>在职的这段时间，我真敢不要脸地说“<strong>无悔骄傲</strong>”。</p>\n<p>3年前，当我还在实习时，我跟自己有一个约定：<br>","more":"</p>\n<ul>\n<li>不再拖后腿，不麻烦老大和小伙伴们帮我擦屁股</li>\n<li>跟我请教过的小伙伴们一样，专业、hold得住</li>\n<li>向导师们学习，独立、鸡血、认真、负责</li>\n</ul>\n<p><strong>想不到3年后真做到了</strong>，也许是目标定得具体而可实现，而且碰到一个很好的fe团队，导师和小伙伴们都很愿意指点我，虽然我还是没有桂子酱那么能hold得住、没有国良、宇霆大神那么牛，至少我觉得是完成当年和自己的约定。  </p>\n<p>意外的是，我还有幸当了经验FE团队1年多的负责人，开始带新同学和安排项目，正如当年带我的导师一样用心地去传承自己所知的，这段经历也非常宝贵，不知道我做好了没有，但至少努力过，也尽力了。    </p>\n<blockquote>\n<p>你忘掉理想只能忙于生活吗？ —— 《给十年后的我》</p>\n</blockquote>\n<p>但是如果继续目前的状态，我不确定下一个3年，甚至再下一个3年，自己是否还敢说“无悔骄傲”。  </p>\n<p>今年年初我拿着一份自我感觉良好的“成绩单”递上去，尤其值得一提的是一个库改造项目（嘿嘿，不能说detail），看上去简单、没啥工作量，实际上重新设计、重构整个前端系统，前期我利用大量个人时间做的，我认为是一个非常具有现在时和将来时实用价值的技术项目。不知道是不是大部分项目都是偏“提高研发效率”，最后我没升T成功。不太明白，大部分甚至没有前端技术背景的评委们，是根据什么规则在10分钟的presentation，判断我过去一年多的工作成果是否有价值。  </p>\n<p>到了年初个人KPI设定的时候，我也很迷茫。小伙伴们建议我多做点有“闪光点”的项目，命中评委喜欢的点，做好看的PPT，对下次升T有好处。我了解当前系统的历史问题，知道应该怎么优化才利于日常开发和后续维护、扩展，想担当一枚“清道夫”，构建一个更棒的系统，难道不也很好吗？喜欢看创新、showcase的，有多少项目在职称评定后烂尾？</p>\n<p>说了那么多，我还是个年轻浮躁的俗人，其实只要不care这些浮云，看开点，也就没事了，偏偏那么俗，哈哈。</p>\n<p>不过这不是我离职的原因，这些小插曲我吃顿好的睡个觉就过去了。相信大家都知道，gap year不能因为学习、生活或者工作不顺，就轻易选择放弃，去追求所谓的新的生活，因为你连现在都没有处理好，新的生活只是现在生活的复刻版，结果还是一样的。</p>\n<p>早在一年半前，我就开始有组织有预谋地准备了，只是连我自己都没发现。<br><strong><a href=\"https://www.douban.com/group/WHV/\" target=\"_blank\" rel=\"noopener\">Working holiday in NZ.</a></strong><br>(安利一下我当时从NZ移民局扒下的<a href=\"http://www.wuyuying.com/whv/#/personal-details?fr=resign-from-baidu\" target=\"_blank\" rel=\"noopener\">申请表demo</a>)</p>\n<p>小伙伴：“我们去新西兰working holiday吧！”<br>我：“别闹了！我现在生活滋润得很，有一群爱我的和我爱的同事们，有我热爱和鸡血的工作，为什么要放弃现在所有跑那么远去接受未知恐惧的洗礼呢？”  </p>\n<p>所以一开始我是拒绝的，再到后来各种学英文考雅思、利用技术手段冲击NZ移民局抢到每年开放1000份的WHV申请表、考驾照&amp;练车……签证有效期到今年6月底，不出发视为自动放弃，每个国家的WHV一个人一生只会下签一次（30岁前申请），我都准备那么多那么久了，裤子都脱了，现在才说不走！？No way!!!</p>\n<p>其实还有一个很重要的原因，也就是我对这次旅途唯一的企图，希望自己变得勇敢一点。很多朋友说我怂怂的，哈哈，那就缺什么补点什么吧。如果连根本没拥有什么的我，现在连放弃的勇气都没有，以后也不会再有了，出发本身就是旅行的意义。</p>\n<p>最后，<br><strong>感谢我在北京遇到的所有人</strong>，当我说“在北京我只有你们了”是认真的，我真的是一个人都不认识的时候自己拖着行李箱就来北京了，你们都是我北漂生活的一部分，有你们才有现在的我；<br><strong>感谢朋友们</strong>，你们天天看我zuo，咱们友情小船还不翻，真的不容易；<br><strong>感谢爸妈</strong>，很高兴我要来北京和去新西兰，你们的回复都一样，“不反对不支持”，感谢你们尊重我的选择，但私下会各种联系新西兰的朋友，你们是中国好父母。</p>\n<p>2016.06.06<br>写于杭州西湖湖畔</p>"},{"title":"woody's qrcode","id":"41","date":"2015-04-25T08:46:03.000Z","_content":"\n<span style=\"color: #ff0000;\">**demo传送门：<span style=\"color: #ff0000;\">[http://www.wuyuying.com/demo#/qrcode](http://www.wuyuying.com/demo#/qrcode)</span>**</span>\n\n**version 2.0**\n\n<!--more-->\n\n下午@猩爷看到我页面给了很多优化建议，看不惯我的页面那么简陋，花了半小时帮我设计了UI，oh my god，有设计感的小伙伴就是不一样，bigger瞬间就上来了好吗！！！于是下午就来了个迭代二~ 更新点：\n\n*   更新UI\n*   提示用户可输入URL或文字\n*   鼠标焦点在输入框时自动清空内容\n*   添加了版权信息和特别鸣谢 @猩爷\n![](http://cdn.sinacloud.net/woodysblog/qrcode/qrcode.jpg \"二维码页面 - 全新UI\")\n\n**version 1.0**\n\n故事背景：\n\n工作或者生活中，经常需要用**url生成二维码**，方便手机设备的访问。\n\n而我很长一段时间，都在这么弄（超low有没有）：**baidu - 搜“二维码” - 用阿拉丁或者[草料](http://cli.im/ \"草料二维码\")生成二维码**\n\n最近做项目时用到了[jquery.qrcode.js](http://larsjung.de/jquery-qrcode/ \"jquery-qrcode\")，咦，还不错~ 于是写了个基于[fis-pure](http://fis.baidu.com/docs/beginning/getting-started.html \"fis文档\")和angularJS的二维码demo，挺好玩，主要是实用，后续的UI或者优化自己用着用着就知道怎么做了，就先这么着。\n\n**代码就不多说了，链去[github项目](https://github.com/wuzhangji/pure-ng-qrcode \"pure-ng-qrcode\")吧~**\n","source":"_posts/qrcode.md","raw":"---\ntitle: \"woody's qrcode\"\ntags:\n  - blog\n  - tech\nid: 41\ncategories:\n  - tech\ndate: 2015-04-25 16:46:03\n---\n\n<span style=\"color: #ff0000;\">**demo传送门：<span style=\"color: #ff0000;\">[http://www.wuyuying.com/demo#/qrcode](http://www.wuyuying.com/demo#/qrcode)</span>**</span>\n\n**version 2.0**\n\n<!--more-->\n\n下午@猩爷看到我页面给了很多优化建议，看不惯我的页面那么简陋，花了半小时帮我设计了UI，oh my god，有设计感的小伙伴就是不一样，bigger瞬间就上来了好吗！！！于是下午就来了个迭代二~ 更新点：\n\n*   更新UI\n*   提示用户可输入URL或文字\n*   鼠标焦点在输入框时自动清空内容\n*   添加了版权信息和特别鸣谢 @猩爷\n![](http://cdn.sinacloud.net/woodysblog/qrcode/qrcode.jpg \"二维码页面 - 全新UI\")\n\n**version 1.0**\n\n故事背景：\n\n工作或者生活中，经常需要用**url生成二维码**，方便手机设备的访问。\n\n而我很长一段时间，都在这么弄（超low有没有）：**baidu - 搜“二维码” - 用阿拉丁或者[草料](http://cli.im/ \"草料二维码\")生成二维码**\n\n最近做项目时用到了[jquery.qrcode.js](http://larsjung.de/jquery-qrcode/ \"jquery-qrcode\")，咦，还不错~ 于是写了个基于[fis-pure](http://fis.baidu.com/docs/beginning/getting-started.html \"fis文档\")和angularJS的二维码demo，挺好玩，主要是实用，后续的UI或者优化自己用着用着就知道怎么做了，就先这么着。\n\n**代码就不多说了，链去[github项目](https://github.com/wuzhangji/pure-ng-qrcode \"pure-ng-qrcode\")吧~**\n","slug":"qrcode","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9o003dzvr35ohvtsno","content":"<p><span style=\"color: #ff0000;\"><strong>demo传送门：<span style=\"color: #ff0000;\"><a href=\"http://www.wuyuying.com/demo#/qrcode\" target=\"_blank\" rel=\"noopener\">http://www.wuyuying.com/demo#/qrcode</a></span></strong></span></p>\n<p><strong>version 2.0</strong></p>\n<a id=\"more\"></a>\n<p>下午@猩爷看到我页面给了很多优化建议，看不惯我的页面那么简陋，花了半小时帮我设计了UI，oh my god，有设计感的小伙伴就是不一样，bigger瞬间就上来了好吗！！！于是下午就来了个迭代二~ 更新点：</p>\n<ul>\n<li>更新UI</li>\n<li>提示用户可输入URL或文字</li>\n<li>鼠标焦点在输入框时自动清空内容</li>\n<li>添加了版权信息和特别鸣谢 @猩爷<br><img src=\"http://cdn.sinacloud.net/woodysblog/qrcode/qrcode.jpg\" alt=\"\" title=\"二维码页面 - 全新UI\"></li>\n</ul>\n<p><strong>version 1.0</strong></p>\n<p>故事背景：</p>\n<p>工作或者生活中，经常需要用<strong>url生成二维码</strong>，方便手机设备的访问。</p>\n<p>而我很长一段时间，都在这么弄（超low有没有）：<strong>baidu - 搜“二维码” - 用阿拉丁或者<a href=\"http://cli.im/\" title=\"草料二维码\" target=\"_blank\" rel=\"noopener\">草料</a>生成二维码</strong></p>\n<p>最近做项目时用到了<a href=\"http://larsjung.de/jquery-qrcode/\" title=\"jquery-qrcode\" target=\"_blank\" rel=\"noopener\">jquery.qrcode.js</a>，咦，还不错~ 于是写了个基于<a href=\"http://fis.baidu.com/docs/beginning/getting-started.html\" title=\"fis文档\" target=\"_blank\" rel=\"noopener\">fis-pure</a>和angularJS的二维码demo，挺好玩，主要是实用，后续的UI或者优化自己用着用着就知道怎么做了，就先这么着。</p>\n<p><strong>代码就不多说了，链去<a href=\"https://github.com/wuzhangji/pure-ng-qrcode\" title=\"pure-ng-qrcode\" target=\"_blank\" rel=\"noopener\">github项目</a>吧~</strong></p>\n","site":{"data":{}},"excerpt":"<p><span style=\"color: #ff0000;\"><strong>demo传送门：<span style=\"color: #ff0000;\"><a href=\"http://www.wuyuying.com/demo#/qrcode\" target=\"_blank\" rel=\"noopener\">http://www.wuyuying.com/demo#/qrcode</a></span></strong></span></p>\n<p><strong>version 2.0</strong></p>","more":"<p>下午@猩爷看到我页面给了很多优化建议，看不惯我的页面那么简陋，花了半小时帮我设计了UI，oh my god，有设计感的小伙伴就是不一样，bigger瞬间就上来了好吗！！！于是下午就来了个迭代二~ 更新点：</p>\n<ul>\n<li>更新UI</li>\n<li>提示用户可输入URL或文字</li>\n<li>鼠标焦点在输入框时自动清空内容</li>\n<li>添加了版权信息和特别鸣谢 @猩爷<br><img src=\"http://cdn.sinacloud.net/woodysblog/qrcode/qrcode.jpg\" alt=\"\" title=\"二维码页面 - 全新UI\"></li>\n</ul>\n<p><strong>version 1.0</strong></p>\n<p>故事背景：</p>\n<p>工作或者生活中，经常需要用<strong>url生成二维码</strong>，方便手机设备的访问。</p>\n<p>而我很长一段时间，都在这么弄（超low有没有）：<strong>baidu - 搜“二维码” - 用阿拉丁或者<a href=\"http://cli.im/\" title=\"草料二维码\" target=\"_blank\" rel=\"noopener\">草料</a>生成二维码</strong></p>\n<p>最近做项目时用到了<a href=\"http://larsjung.de/jquery-qrcode/\" title=\"jquery-qrcode\" target=\"_blank\" rel=\"noopener\">jquery.qrcode.js</a>，咦，还不错~ 于是写了个基于<a href=\"http://fis.baidu.com/docs/beginning/getting-started.html\" title=\"fis文档\" target=\"_blank\" rel=\"noopener\">fis-pure</a>和angularJS的二维码demo，挺好玩，主要是实用，后续的UI或者优化自己用着用着就知道怎么做了，就先这么着。</p>\n<p><strong>代码就不多说了，链去<a href=\"https://github.com/wuzhangji/pure-ng-qrcode\" title=\"pure-ng-qrcode\" target=\"_blank\" rel=\"noopener\">github项目</a>吧~</strong></p>"},{"title":"[译] React性能优化-虚拟Dom原理浅析","date":"2018-05-13T11:15:19.000Z","type":"photo","cover":"http://sinacloud.net/woodysblog/img/bkg.jpg","_content":"\n本文译自[《Optimizing React: Virtual DOM explained》](https://evilmartians.com/chronicles/optimizing-react-virtual-dom-explained)，作者是[Alexey Ivanov](https://github.com/iAdramelk)和[Andy Barnov](https://github.com/progapandist)，来自[Evil Martians’ team](https://evilmartians.com/chronicles)团队。\n\n译者说：通过一些实际场景和demo，给大家描述React的Virtual Dom Diff一些核心的原理和规则，以及基于这些我们可以做些什么提高应用的性能，很棒的文章。\n\n***\n\n**通过学习React的Virtual DOM的知识，去加速你们的应用吧。对框架内部实现的介绍，比较全面且适合初学者，我们会让JSX更加简单易懂，给你展示React是如何判断要不要重新render，解释如何找到应用的性能瓶颈，以及给大家一些小贴士，如何避免常见错误。**\n\nReact在前端圈内保持领先的原因之一，因为它的学习曲线非常平易近人：把你的模板包在`JSX`，了解一下`props`和`state`的概念之后，你就可以轻松写出React代码了。\n\n如果你已经熟悉React的工作方式，可以直接跳至“优化我的代码”篇。\n\n但要真正掌握React，你需要像React一样思考（think in React）。本文也会试图在这个方面帮助你。\n\n下面看看我们其中一个项目中的React table：\n\n![\"eBay上的一个巨大的React表格  用于业务。\"](http://sinacloud.net/woodysblog/img/ebay_table.png)\n\n这个表里有数百个动态（表格内容变化）和可过滤的选项，理解这个框架更精细的点，对于保证顺畅的用户体验至关重要。\n\n***\n\n**当事情出错时，你一定能感觉到。输入字段变得迟缓，复选框需要检查一秒钟，弹窗一个世纪后才出现，等等。**\n\n***\n\n为了能够解决这些问题，我们需要完成一个React组件的整个生命旅程，从一开始的声明定义到在页面上渲染（再然后可能会更新）。系好安全带，我们要发车了！\n\n## JSX的背后\n\n这个过程一般在前端会称为“转译”，但其实“汇编”将是一个更精确的术语。\n\nReact开发人员敦促你在编写组件时使用一种称为JSX的语法，混合了HTML和JavaScript。但浏览器对JSX及其语法毫无头绪，浏览器只能理解纯碎的JavaScript，所以JSX必须转换成JavaScript。这里是一个div的JSX代码，它有一个class name和一些内容：\n\n\n```jsx\n<div className='cn'>\n  Content!\n</div>\n```\n\n以上的代码，被转换成“正经”的JavaScript代码，其实是一个带有一些参数的函数调用：\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  'Content!'\n);\n```\n\n让我们仔细看看这些参数。\n\n* 第一个是元素的`type`。对于HTML标签，它将是一个带有`标签名称`的字符串。\n* 第二个参数是一个包含所有元素属性（`attributes`）的对象。如果没有，它也可以是空的对象。\n* 剩下的参数都可以认为是元素的子元素（`children`）。元素中的文本也算作一个child，是个字符串'Content！' 作为函数调用的第三个参数放置。\n\n你应该可以想象，当我们有更多的children时会发生什么：\n\n```jsx\n<div className='cn'>\n  Content 1!\n  <br />\n  Content 2!\n</div>\n```\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  'Content 1!',              // 1st child\n  React.createElement('br'), // 2nd child\n  'Content 2!'               // 3rd child\n)\n```\n\n我们的函数现在有五个参数：\n\n* 一个元素的类型\n* 一个属性对象\n* 三个子元素。\n\n因为其中一个child是一个React已知的HTML标签（`<br/>`），所以它也会被描述为一个函数调用（`React.createElement('br')`）。\n\n到目前为止，我们已经涵盖了两种类型的children：\n\n* 简单的`String`\n* 另一种会调用`React.createElement`。\n\n然而，还有其他值可以作为参数：\n\n* 基本类型 `false, null, undefined, true`\n* 数组\n* React Components\n\n可以使用数组是因为可以将children分组并作为一个参数传递：\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  ['Content 1!', React.createElement('br'), 'Content 2!']\n)\n```\n\n当然了，React的厉害之处，不仅仅因为我们可以把HTML标签直接放在JSX中使用，而是我们可以自定义自己的组件，例如：\n\n```javascript\nfunction Table({ rows }) {\n  return (\n    <table>\n      {rows.map(row => (\n        <tr key={row.id}>\n          <td>{row.title}</td>\n        </tr>\n      ))}\n    </table>\n  );\n}\n```\n\n组件可以让我们把模板分解为多个可重用的块。在上面的“函数式”（functional）组件的例子里，我们接收一个包含表格行数据的对象数组，最后返回一个调用`React.createElement`方法的`<table>`元素，`rows`则作为children传进table。\n\n无论什么时候，我们这样去声明一个组件时：\n\n```jsx\n<Table rows={rows} />\n```\n\n从浏览器的角度来看，我们是这么写的：\n\n```javascript\nReact.createElement(Table, { rows: rows });\n```\n\n注意，这次我们的第一个参数不是`String`描述的`HTML标签`，而是一个引用，指向我们编写组件时编写的函数。组件的`attributes`现在是接收的`props`参数了。\n\n## 把组件（components）组合成页面（a page）\n\n所以，我们已经将所有JSX组件转换为纯JavaScript，现在我们有一大堆函数调用，它的参数会被其他函数调用的，或者还有更多的其他函数调用这些参数......这些带参数的函数调用，是怎么转化成组成这个页面的实体DOM的呢？\n\n为此，我们有一个`ReactDOM`库及其它的`render`方法：\n\n```javascript\nfunction Table({ rows }) { /* ... */ } // defining a component\n\n// rendering a component\nReactDOM.render(\n  React.createElement(Table, { rows: rows }), // \"creating\" a component\n  document.getElementById('#root') // inserting it on a page\n);\n```\n\n当`ReactDOM.render`被调用时，`React.createElement`最终也会被调用，返回以下对象：\n\n```javascript\n// There are more fields, but these are most important to us\n{\n  type: Table,\n  props: {\n    rows: rows\n  },\n  // ...\n}\n```\n\n***\n\n**这些对象，在React的角度上，构成了虚拟DOM。**\n\n***\n\n他们将在所有进一步的渲染中相互比较，并最终转化为  真正的`DOM`（virtual VS real, 虚拟DOM VS 真实DOM）。\n\n下面是另一个例子：这次div有一个class属性和几个children：\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  'Content 1!',\n  'Content 2!',\n);\n```\n\n变成：\n\n```javascript\n{\n  type: 'div',\n  props: {\n    className: 'cn',\n    children: [\n      'Content 1!',\n      'Content 2!'\n    ]\n  }\n}\n```\n\n需要注意的是，那些除了`type`和`attribute`以外的属性，原本是单独传进来的，转换之后，会作为在`props.children`以一个数组的形式打包存在。也就是说，无论children是作为数组还是参数列表传递都没关系 —— 在生成的虚拟DOM对象的时候，它们最后都会被打包在一起的。\n\n进一步说，我们可以直接在组件中把children作为一项属性传进去，结果还是一样的：\n\n```jsx\n<div className='cn' children={['Content 1!', 'Content 2!']} />\n```\n\n在构建虚拟DOM对象完成之后，`ReactDOM.render`将会按下面的原则，尝试将其转换为浏览器可以识别和展示的DOM节点：\n\n* 如果`type`包含一个带有`String`类型的标签名称（`tag name`）—— 创建一个标签，附带上`props`下所有`attributes`。\n\n* 如果`type`是一个函数（`function`）或者类（`class`），调用它，并对结果递归地重复这个过程。\n\n* 如果`props`下有`children`属性 —— 在父节点下，针对每个child重复以上过程。\n\n最后，得到以下HTML（对于我们的表格示例）：\n\n```html\n<table>\n  <tr>\n    <td>Title</td>\n  </tr>\n  ...\n</table>\n```\n\n## 重新构建DOM（Rebuilding the DOM）\n\n在实际应用场景，`render`通常在根节点调用一次，后续的更新会有`state`来控制和触发调用。\n\n请注意，标题中的“重新”！当我们想更新一个页面而不是全部替换时，React中的魔法就开始了。我们有一些实现它的方式。我们先从最简单的开始 —— 在同一个node节点再次执行`ReactDOM.render`。\n\n```javascript\n// Second call\nReactDOM.render(\n  React.createElement(Table, { rows: rows }),\n  document.getElementById('#root')\n);\n```\n\n这一次，上面的代码的表现，跟我们已经看到的有所不同。React将启动其`diff`算法，而不是从头开始创建所有DOM节点并将其放在页面上，来确定节点树的哪些部分必须更新，哪些可以保持不变。\n\n那么，它是怎样工作的呢？其实只有少数几个简单的场景，理解它们将对我们的优化帮助很大。请记住，现在我们在看的，是在`React Virtual DOM`里面用来代表节点的`对象`。\n\n### 场景1：`type`是一个字符串，`type`在通话中保持不变，`props`也没有改变。\n\n```javascript\n// before update\n{ type: 'div', props: { className: 'cn' } }\n\n// after update\n{ type: 'div', props: { className: 'cn' } }\n```\n\n这是最简单的情况：DOM保持不变。\n\n### 场景2：`type`仍然是相同的字符串，`props`是不同的。\n\n```javascript\n// before update:\n{ type: 'div', props: { className: 'cn' } }\n\n// after update:\n{ type: 'div', props: { className: 'cnn' } }\n```\n\n`type`仍然代表HTML元素，React知道如何通过标准DOM API调用来更改元素的属性，而无需从DOM树中删除一个节点。\n\n### 场景3：`type`已更改为不同的`String`或从`String`组件。\n\n```javascript\n// before update:\n{ type: 'div', props: { className: 'cn' } }\n\n// after update:\n{ type: 'span', props: { className: 'cn' } }\n```\n\nReact看到的`type`是不同的，它甚至不会尝试更新我们的节点：old元素将和它的所有子节点一起被删除（unmounted卸载）。因此，将元素替换为完全不同于DOM树的东西代价会非常昂贵。幸运的是，这在现实世界中很少发生。\n\n划重点，记住React使用`===`（triple equals）来比较`type`的值，所以这两个值需要是相同类或相同函数的相同实例。\n\n下一个场景更加有趣，通常我们会这么使用React。\n\n### 场景4：`type`是一个`component`。\n\n```\n// before update:\n{ type: Table, props: { rows: rows } }\n\n// after update:\n{ type: Table, props: { rows: rows } }\n```\n\n***\n\n**你可能会说，“咦，但没有任何变化啊！”，但是你错了。**\n\n***\n\n如果`type`是对函数或类的引用（即常规的React组件），并且我们启动了tree diff的过程，则React每次都会去检查组件的内部逻辑，以确保`render`返回的值不会改变（类似对副作用的预防措施）。对树中的每个组件进行遍历和扫描 —— 是的，在复杂的渲染场景下，成本可能会非常昂贵！\n\n值得注意的是，一个`component`的`render`（只有类组件在声明时有这个函数）跟`ReactDom.render`不是同一个函数。\n\n## 关注子组件（children）的情况\n\n除了上述四种常见场景之外，当一个元素有多个子元素时，我们还需要考虑React的行为。现在假设我们有这么一个元素：\n\n```javascript\n// ...\nprops: {\n  children: [\n      { type: 'div' },\n      { type: 'span' },\n      { type: 'br' }\n  ]\n},\n// ...\n```\n\n我们想要交换一下这些children的顺序：\n\n```javascript\n// ...\nprops: {\n  children: [\n    { type: 'span' },\n    { type: 'div' },\n    { type: 'br' }\n  ]\n},\n// ...\n```\n\n之后会发生什么呢？\n\n当`diffing`的时候，如果React在检查`props.children`下的数组时，按顺序去对比数组内元素的话：index 0将与index 0进行比较，index 1和index 1，等等。对于每一次对比，React会使用之前提过的diff规则。在我们的例子里，它认为`div`成为一个`span`，那么就会运用到情景3。这样不是很有效率的：想象一下，我们已经从1000行中删除了第一行。React将不得不“更新”剩余的999个子项，因为按index去对比的话，内容从第一条开始就不相同了。\n\n幸运的是，React有一个`内置的方法（built-in）`来解决这个问题。如果一个元素有一个`key`属性，那么元素将按`key`而不是`index`来比较。只要`key`是唯一的，React就会移动元素，而不是将它们从DOM树中移除然后再将它们放回（这个过程在React里叫mounting和unmounting）。\n\n```javascript\n// ...\nprops: {\n  children: [ // Now React will look on key, not index\n    { type: 'div', key: 'div' },\n    { type: 'span', key: 'span' },\n    { type: 'br', key: 'bt' }\n  ]\n},\n// ...\n```\n\n## 当state发生了改变\n\n到目前为止，我们只聊了下React哲学里面的`props`部分，却忽视了另外很重要的一部分`state`。下面是一个简单的`stateful`组件：\n\n```javascript\nclass App extends Component {\n  state = { counter: 0 }\n\n  increment = () => this.setState({\n    counter: this.state.counter + 1,\n  })\n\n  render = () => (<button onClick={this.increment}>\n    {'Counter: ' + this.state.counter}\n  </button>)\n}\n```\n\n在`state`对象里，我们有一个key`counter`。点击按钮时，这个值会增加，然后按钮的文本也会发生相应的改变。但是，当我们这样做时，DOM中发生了什么？哪部分将被重新计算和更新？\n\n调用`this.setState`会导致`re-render`（重新渲染），但不会影响到整个页面，而只会影响组件本身及其children组件。父母和兄弟姐妹都不会受到影响。当我们有一个层级很深的组件链时，这会让状态更新变得非常方便，因为我们只需要重绘(`redraw`)它的一部分。\n\n## 把问题说清楚\n\n我们准备了一个[小demo](https://iadramelk.github.io/optimizing-react-demo/dist/before.html)，以便你可以在看到在“野蛮生长”的React编码方式下最常见的问题，后续我也告诉大家怎么去解决这些问题。你可以在[这里看看它的源代码](https://github.com/iAdramelk/optimizing-react-demo)。你还需要[React Developer Tools](https://github.com/facebook/react-devtools)，请确保浏览器安装了它们。\n\n我们首先要看看的是，哪些元素以及什么时候导致Virtual DOM的更新。在浏览器的开发工具中，打开React面板并选择“Highlight Updates”复选框：\n\n![\"在Chrome中使用“突出显示更新”复选框选中DevTools\"](http://sinacloud.net/woodysblog/img/react_dev_tools.png)\n\n现在尝试在表格中添加一行。如你所见，页面上的每个元素周围都会显示一个边框。这意味着每次添加一行时，React都在计算和比较整个虚拟DOM树。现在尝试点击一行内的counter按钮。你将看到`state`更新后虚拟DOM如何更新 —— 只有引用了`state key`的元素及其children受到影响。\n\nReact DevTools会提示问题出在哪里，但不会告诉我们有关细节的信息：特别是所涉及的更新，是由`diffing`元素引起的？还是被挂载（`mounting`）或者被卸载（`unmounting`）了？要了解更多信息，我们需要使用React的内置[分析器](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)（注意它不适用于生产模式）。\n\n添加`?react_perf`到应用的URL，然后转到Chrome DevTools中的“Performance”标签。点击“录制”（Record）并在表格上点击。添加一些row，更改一下counter，然后点击“停止”（Stop）。\n\n![\"React DevTools的“Performance”选项卡\"](http://sinacloud.net/woodysblog/img/react_perf_tools.png)\n\n在输出的结果中，我们关注“User timing”这项指标。放大时间轴直到看到“React Tree Reconciliation”这个组及其子项。这些就是我们组件的名称，它们旁边都写着[update]或[mount]。\n\n***\n\n**我们的大部分性能问题都属于这两类问题之一。**\n\n***\n\n无论是组件（还是从它分支的其他组件）出于某种原因都会在每次更新时re-mounted（慢），又或者我们在大型应用上执行对每个分支做diff，尽管这些组件并没有发生改变，我们不希望这些情况的发生。\n\n## 优化我们的代码：Mounting / Unmounting\n\n现在，我们已经了解到当需要update Virtual Dom时，React是依据哪些规则去判断要不要更新，以及也知道了我们可以通过什么方式去追踪这些diff场景的背后发生了什么，我们终于准备好优化我们的代码了！首先，我们来看看mounts/unmounts。\n\n如果你能够注意到当一个元素包含的多个children，他们是由array组成的话，你可以实现十分显著的速度优化。\n\n我们来看看这个case：\n\n```jsx\n<div>\n  <Message />\n  <Table />\n  <Footer />\n</div>\n```\n\n在我们的Virtual DOM里这么表示：\n\n```javascript\n// ...\nprops: {\n  children: [\n    { type: Message },\n    { type: Table },\n    { type: Footer }\n  ]\n}\n// ...\n```\n\n这里有一个简单的`Message`例子，就是一个`div`写着一些简单的文本，和以及一个巨大的`Table`，比方说，超过1000行。它们（`Message`和`Table`）都是顶级`div`的子组件，所以它们被放置在父节点的`props.children`下，并且它们`key`都不会有。React甚至不会通过控制台警告我们要给每个`child`分配`key`，因为children正在`React.createElement`作为参数列表传递给父元素，而不是直接遍历一个数组。\n\n现在我们的用户已读了一个通知，`Message`（譬如新通知按钮）从DOM上移除。`Table`和`Footer`是剩下的全部。\n\n```javascript\n// ...\nprops: {\n  children: [\n    { type: Table },\n    { type: Footer }\n  ]\n}\n// ...\n```\n\nReact会怎么处理呢？它会看作是一个array类型的children，现在少了第一项，从前第一项是`Message`现在是`Table`了，也没有`key`作为索引，比较`type`的时候又发现它们俩不是同一个function或者class的同一个实例，于是会把整个`Table`unmount，然后在mount回去，渲染它的1000+行子数据。\n\n因此，你可以给每个component添加唯一的`key`（但在目特殊的case下，使用key并不是最佳选择），或者采用更聪明的小技巧：使用[短路求值](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators)（又名“最小化求值”），这是JavaScript和许多其他现代语言的特性。看：\n\n```jsx\n// Using a boolean trick\n<div>\n  {isShown && <Message />}\n  <Table />\n  <Footer />\n</div>\n```\n\n虽然`Message`会离开屏幕，父元素`div`的`props.children`仍然会拥有三个元素，`children[0]`具有一个值`false`（一个布尔值）。请记住`true, false, null, undefined`是虚拟DOM对象`type`属性的允许值，我们最终得到了类似的结果：\n\n```javascript\n// ...\nprops: {\n  children: [\n    false, //  isShown && <Message /> evaluates to false\n    { type: Table },\n    { type: Footer }\n  ]\n}\n// ...\n```\n\n因此，有没有`Message`组件，我们的索引值都不会改变，`Table`当然仍然会跟`Table`比较（当`type`是一个函数或类的引用时，diff比较的成本还是会有的），但仅仅比较虚拟DOM的成本，通常比“删除DOM节点”并“从0开始创建”它们要来得快。\n\n现在我们来看看更多的东西。大家都挺喜欢用HOC的，高阶组件是一个将组件作为参数，执行某些操作，最后返回另外一个不同功能的组件：\n\n```javascript\nfunction withName(SomeComponent) {\n  // Computing name, possibly expensive...\n  return function(props) {\n    return <SomeComponent {...props} name={name} />;\n  }\n}\n```\n\n这是一种常见的模式，但你需要小心。如果我们这么写：\n\n```javascript\nclass App extends React.Component() {\n  render() {\n    // Creates a new instance on each render\n    const ComponentWithName = withName(SomeComponent);\n    return <SomeComponentWithName />;\n  }\n}\n```\n\n我们在父节点的`render`方法内部创建一个HOC。当我们重新渲染（`re-render`）树时，虚拟DOM是这样子的：\n\n```javascript\n// On first render:\n{\n  type: ComponentWithName,\n  props: {},\n}\n\n// On second render:\n{\n  type: ComponentWithName, // Same name, but different instance\n  props: {},\n}\n```\n\n现在，React会对`ComponentWithName`这个实例做diff，但由于此时同名引用了不同的实例，因此全等比较（triple equal）失败，一个完整的re-mount会发生（整个节点换掉），而不是调整属性值或顺序。注意它也会导致状态丢失，[如此处所述](https://github.com/facebook/react/blob/044015760883d03f060301a15beef17909abbf71/docs/docs/higher-order-components.md#dont-use-hocs-inside-the-render-method)。幸运的是，这很容易解决，你需要始终在`render`外面创建一个HOC：\n\n```javascript\n// Creates a new instance just once\nconst ComponentWithName = withName(Component);\n\nclass App extends React.Component() {\n  render() {\n    return <ComponentWithName />;\n  }\n}\n```\n\n## 优化我的代码：Updating\n\n现在我们可以确保在非必要的时候，不做re-mount的事情了。然而，对位于DOM树根部附近（层级越上面的元素）的组件所做的任何更改都会导致其所有children的diffing和调整（`reconciliation`）。在层级很多、结构复杂的应用里，这些成本很昂贵，但经常是可以避免的。\n\n***\n\n**如果有一种方法可以告诉React你不用来检查这个分支了，因为我们可以肯定那个分支不会有更新，那就太棒了！**\n\n***\n\n这种方式是真的有的哈，它涉及一个built-in方法叫`shouldComponentUpdate`，它也是[组件生命周期](https://reactjs.org/docs/react-component.html#the-component-lifecycle)的一部分。这个方法的调用时机：组件的`render`和组件接收到state或props的值的更新时。然后我们可以自由地将它们与我们当前的值进行比较，并决定是否更新我们的组件（返回`true`或`false`）。如果我们返回`false`，React将不会重新渲染组件，也不会检查它的所有子组件。\n\n通常来说，比较两个集合（set）`props`和`state`一个简单的浅层比较（shallow comparison）就足够了：如果顶层的值不同，我们不必接着比较了。浅比较不是JavaScript的一个特性，但有很多[小而美的库](https://github.com/dashed/shallowequal)（`utilities`）可以让我们用上那么棒的功能。\n\n现在可以像这样编写我们的代码：\n\n```javascript\nclass TableRow extends React.Component {\n\n  // will return true if new props/state are different from old ones\n  shouldComponentUpdate(nextProps, nextState) {\n    const { props, state } = this;\n    return !shallowequal(props, nextProps)\n           && !shallowequal(state, nextState);\n  }\n\n  render() { /* ... */ }\n}\n```\n\n但是你甚至都不需要自己写代码，因为React把这个特性内置在一个类`React.PureComponent`里面。它类似于  `React.Component`，只是`shouldComponentUpdate`已经为你实施了一个浅的`props`/`state`比较。\n\n这听起来很“不动脑”，在声明class继承（`extends`）的时候，把`Component`换成`PureComponent`就可以享受高效率。事实上，并不是这么“傻瓜”，看看这些例子：\n\n```jsx\n<Table\n    // map returns a new instance of array so shallow comparison will fail\n    rows={rows.map(/* ... */)}\n    // object literal is always \"different\" from predecessor\n    style={ { color: 'red' } }\n    // arrow function is a new unnamed thing in the scope, so there will always be a full diffing\n    onUpdate={() => { /* ... */ }}\n/>\n```\n\n上面的代码片段演示了三种最常见的反模式。尽量避免它们！\n\n***\n\n**如果你能注意点，在render定义之外创建所有对象、数组和函数，并确保它们在各种调用间，不发生更改 —— 你是安全的。**\n\n***\n\n你在[updated demo](https://iadramelk.github.io/optimizing-react-demo/dist/after.html)，所有table的rows都被“净化”（`purified`）过，你可以看到`PureComponent`的表现了。如果你在React DevTools中打开“Highlight Updates”，你会注意到只有表格本身和新行在插入时会触发`render`，其他的行保持不变。\n\n[译者说：为了便于大家理解`purified`，译者在下面插入了原文demo的一段代码]\n\n```javascript\nclass TableRow extends React.PureComponent {\n  render() {\n    return React.createElement('tr', { className: 'row' },\n      React.createElement('td', { className: 'cell' }, this.props.title),\n      React.createElement('td', { className: 'cell' }, React.createElement(Button)),\n    );\n  }\n};\n```\n\n不过，如果你迫不及待地all in PureComponent，在应用里到处都用的话 —— 控制住你自己！\n\nshallow比较两组`props`和`state`不是免费的，对于大多数基本组件来说，甚至都不值得：`shallowCompare`比`diffing`算法需要耗费更多的时间。\n\n使用这个经验法则：pure component适用于复杂的表单和表格，但它们通常会减慢简单元素（按钮、图标）的效率。\n\n***\n\n感谢你的阅读！现在你已准备好将这些见解应用到你的应用程序中。可以使用我们的小demo（[用了](https://iadramelk.github.io/optimizing-react-demo/dist/after.html)或[没有用](https://iadramelk.github.io/optimizing-react-demo/dist/before.html)PureComponent）的[仓库](https://github.com/iAdramelk/optimizing-react-demo)作为你的实验的起点。此外，请继续关注本系列的下一部分，我们计划涵盖Redux并优化你的数据，目标是提高整个应用的总体性能。\n\n## 译者说\n\n正如原文末所说，Alex和Andy后续会继续写一个关于整体性能的系列，包括核心React和Redux等，我也会继续跟踪这个系列的文章，到时po到我的[个人博客](http://wuyuying.com/blog/)和知乎专栏[《集异璧》](https://zhuanlan.zhihu.com/front-end-thinking)，感兴趣的同学们可以关注一下哈 ：）\n\n欢迎对本文的翻译质量、内容的各种讨论。若有表述不当，欢迎斧正。\n\n2018.05.13，晴，杭州滨江\nYuying Wu","source":"_posts/optimizing-react-virtual-dom-explained.md","raw":"---\ntitle: \"[译] React性能优化-虚拟Dom原理浅析\"\ndate: 2018-05-13 19:15:19\ntags:\n  - front-end\n  - performance\n  - reactjs\n  - translation\ntype: photo\ncover: http://sinacloud.net/woodysblog/img/bkg.jpg\n---\n\n本文译自[《Optimizing React: Virtual DOM explained》](https://evilmartians.com/chronicles/optimizing-react-virtual-dom-explained)，作者是[Alexey Ivanov](https://github.com/iAdramelk)和[Andy Barnov](https://github.com/progapandist)，来自[Evil Martians’ team](https://evilmartians.com/chronicles)团队。\n\n译者说：通过一些实际场景和demo，给大家描述React的Virtual Dom Diff一些核心的原理和规则，以及基于这些我们可以做些什么提高应用的性能，很棒的文章。\n\n***\n\n**通过学习React的Virtual DOM的知识，去加速你们的应用吧。对框架内部实现的介绍，比较全面且适合初学者，我们会让JSX更加简单易懂，给你展示React是如何判断要不要重新render，解释如何找到应用的性能瓶颈，以及给大家一些小贴士，如何避免常见错误。**\n\nReact在前端圈内保持领先的原因之一，因为它的学习曲线非常平易近人：把你的模板包在`JSX`，了解一下`props`和`state`的概念之后，你就可以轻松写出React代码了。\n\n如果你已经熟悉React的工作方式，可以直接跳至“优化我的代码”篇。\n\n但要真正掌握React，你需要像React一样思考（think in React）。本文也会试图在这个方面帮助你。\n\n下面看看我们其中一个项目中的React table：\n\n![\"eBay上的一个巨大的React表格  用于业务。\"](http://sinacloud.net/woodysblog/img/ebay_table.png)\n\n这个表里有数百个动态（表格内容变化）和可过滤的选项，理解这个框架更精细的点，对于保证顺畅的用户体验至关重要。\n\n***\n\n**当事情出错时，你一定能感觉到。输入字段变得迟缓，复选框需要检查一秒钟，弹窗一个世纪后才出现，等等。**\n\n***\n\n为了能够解决这些问题，我们需要完成一个React组件的整个生命旅程，从一开始的声明定义到在页面上渲染（再然后可能会更新）。系好安全带，我们要发车了！\n\n## JSX的背后\n\n这个过程一般在前端会称为“转译”，但其实“汇编”将是一个更精确的术语。\n\nReact开发人员敦促你在编写组件时使用一种称为JSX的语法，混合了HTML和JavaScript。但浏览器对JSX及其语法毫无头绪，浏览器只能理解纯碎的JavaScript，所以JSX必须转换成JavaScript。这里是一个div的JSX代码，它有一个class name和一些内容：\n\n\n```jsx\n<div className='cn'>\n  Content!\n</div>\n```\n\n以上的代码，被转换成“正经”的JavaScript代码，其实是一个带有一些参数的函数调用：\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  'Content!'\n);\n```\n\n让我们仔细看看这些参数。\n\n* 第一个是元素的`type`。对于HTML标签，它将是一个带有`标签名称`的字符串。\n* 第二个参数是一个包含所有元素属性（`attributes`）的对象。如果没有，它也可以是空的对象。\n* 剩下的参数都可以认为是元素的子元素（`children`）。元素中的文本也算作一个child，是个字符串'Content！' 作为函数调用的第三个参数放置。\n\n你应该可以想象，当我们有更多的children时会发生什么：\n\n```jsx\n<div className='cn'>\n  Content 1!\n  <br />\n  Content 2!\n</div>\n```\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  'Content 1!',              // 1st child\n  React.createElement('br'), // 2nd child\n  'Content 2!'               // 3rd child\n)\n```\n\n我们的函数现在有五个参数：\n\n* 一个元素的类型\n* 一个属性对象\n* 三个子元素。\n\n因为其中一个child是一个React已知的HTML标签（`<br/>`），所以它也会被描述为一个函数调用（`React.createElement('br')`）。\n\n到目前为止，我们已经涵盖了两种类型的children：\n\n* 简单的`String`\n* 另一种会调用`React.createElement`。\n\n然而，还有其他值可以作为参数：\n\n* 基本类型 `false, null, undefined, true`\n* 数组\n* React Components\n\n可以使用数组是因为可以将children分组并作为一个参数传递：\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  ['Content 1!', React.createElement('br'), 'Content 2!']\n)\n```\n\n当然了，React的厉害之处，不仅仅因为我们可以把HTML标签直接放在JSX中使用，而是我们可以自定义自己的组件，例如：\n\n```javascript\nfunction Table({ rows }) {\n  return (\n    <table>\n      {rows.map(row => (\n        <tr key={row.id}>\n          <td>{row.title}</td>\n        </tr>\n      ))}\n    </table>\n  );\n}\n```\n\n组件可以让我们把模板分解为多个可重用的块。在上面的“函数式”（functional）组件的例子里，我们接收一个包含表格行数据的对象数组，最后返回一个调用`React.createElement`方法的`<table>`元素，`rows`则作为children传进table。\n\n无论什么时候，我们这样去声明一个组件时：\n\n```jsx\n<Table rows={rows} />\n```\n\n从浏览器的角度来看，我们是这么写的：\n\n```javascript\nReact.createElement(Table, { rows: rows });\n```\n\n注意，这次我们的第一个参数不是`String`描述的`HTML标签`，而是一个引用，指向我们编写组件时编写的函数。组件的`attributes`现在是接收的`props`参数了。\n\n## 把组件（components）组合成页面（a page）\n\n所以，我们已经将所有JSX组件转换为纯JavaScript，现在我们有一大堆函数调用，它的参数会被其他函数调用的，或者还有更多的其他函数调用这些参数......这些带参数的函数调用，是怎么转化成组成这个页面的实体DOM的呢？\n\n为此，我们有一个`ReactDOM`库及其它的`render`方法：\n\n```javascript\nfunction Table({ rows }) { /* ... */ } // defining a component\n\n// rendering a component\nReactDOM.render(\n  React.createElement(Table, { rows: rows }), // \"creating\" a component\n  document.getElementById('#root') // inserting it on a page\n);\n```\n\n当`ReactDOM.render`被调用时，`React.createElement`最终也会被调用，返回以下对象：\n\n```javascript\n// There are more fields, but these are most important to us\n{\n  type: Table,\n  props: {\n    rows: rows\n  },\n  // ...\n}\n```\n\n***\n\n**这些对象，在React的角度上，构成了虚拟DOM。**\n\n***\n\n他们将在所有进一步的渲染中相互比较，并最终转化为  真正的`DOM`（virtual VS real, 虚拟DOM VS 真实DOM）。\n\n下面是另一个例子：这次div有一个class属性和几个children：\n\n```javascript\nReact.createElement(\n  'div',\n  { className: 'cn' },\n  'Content 1!',\n  'Content 2!',\n);\n```\n\n变成：\n\n```javascript\n{\n  type: 'div',\n  props: {\n    className: 'cn',\n    children: [\n      'Content 1!',\n      'Content 2!'\n    ]\n  }\n}\n```\n\n需要注意的是，那些除了`type`和`attribute`以外的属性，原本是单独传进来的，转换之后，会作为在`props.children`以一个数组的形式打包存在。也就是说，无论children是作为数组还是参数列表传递都没关系 —— 在生成的虚拟DOM对象的时候，它们最后都会被打包在一起的。\n\n进一步说，我们可以直接在组件中把children作为一项属性传进去，结果还是一样的：\n\n```jsx\n<div className='cn' children={['Content 1!', 'Content 2!']} />\n```\n\n在构建虚拟DOM对象完成之后，`ReactDOM.render`将会按下面的原则，尝试将其转换为浏览器可以识别和展示的DOM节点：\n\n* 如果`type`包含一个带有`String`类型的标签名称（`tag name`）—— 创建一个标签，附带上`props`下所有`attributes`。\n\n* 如果`type`是一个函数（`function`）或者类（`class`），调用它，并对结果递归地重复这个过程。\n\n* 如果`props`下有`children`属性 —— 在父节点下，针对每个child重复以上过程。\n\n最后，得到以下HTML（对于我们的表格示例）：\n\n```html\n<table>\n  <tr>\n    <td>Title</td>\n  </tr>\n  ...\n</table>\n```\n\n## 重新构建DOM（Rebuilding the DOM）\n\n在实际应用场景，`render`通常在根节点调用一次，后续的更新会有`state`来控制和触发调用。\n\n请注意，标题中的“重新”！当我们想更新一个页面而不是全部替换时，React中的魔法就开始了。我们有一些实现它的方式。我们先从最简单的开始 —— 在同一个node节点再次执行`ReactDOM.render`。\n\n```javascript\n// Second call\nReactDOM.render(\n  React.createElement(Table, { rows: rows }),\n  document.getElementById('#root')\n);\n```\n\n这一次，上面的代码的表现，跟我们已经看到的有所不同。React将启动其`diff`算法，而不是从头开始创建所有DOM节点并将其放在页面上，来确定节点树的哪些部分必须更新，哪些可以保持不变。\n\n那么，它是怎样工作的呢？其实只有少数几个简单的场景，理解它们将对我们的优化帮助很大。请记住，现在我们在看的，是在`React Virtual DOM`里面用来代表节点的`对象`。\n\n### 场景1：`type`是一个字符串，`type`在通话中保持不变，`props`也没有改变。\n\n```javascript\n// before update\n{ type: 'div', props: { className: 'cn' } }\n\n// after update\n{ type: 'div', props: { className: 'cn' } }\n```\n\n这是最简单的情况：DOM保持不变。\n\n### 场景2：`type`仍然是相同的字符串，`props`是不同的。\n\n```javascript\n// before update:\n{ type: 'div', props: { className: 'cn' } }\n\n// after update:\n{ type: 'div', props: { className: 'cnn' } }\n```\n\n`type`仍然代表HTML元素，React知道如何通过标准DOM API调用来更改元素的属性，而无需从DOM树中删除一个节点。\n\n### 场景3：`type`已更改为不同的`String`或从`String`组件。\n\n```javascript\n// before update:\n{ type: 'div', props: { className: 'cn' } }\n\n// after update:\n{ type: 'span', props: { className: 'cn' } }\n```\n\nReact看到的`type`是不同的，它甚至不会尝试更新我们的节点：old元素将和它的所有子节点一起被删除（unmounted卸载）。因此，将元素替换为完全不同于DOM树的东西代价会非常昂贵。幸运的是，这在现实世界中很少发生。\n\n划重点，记住React使用`===`（triple equals）来比较`type`的值，所以这两个值需要是相同类或相同函数的相同实例。\n\n下一个场景更加有趣，通常我们会这么使用React。\n\n### 场景4：`type`是一个`component`。\n\n```\n// before update:\n{ type: Table, props: { rows: rows } }\n\n// after update:\n{ type: Table, props: { rows: rows } }\n```\n\n***\n\n**你可能会说，“咦，但没有任何变化啊！”，但是你错了。**\n\n***\n\n如果`type`是对函数或类的引用（即常规的React组件），并且我们启动了tree diff的过程，则React每次都会去检查组件的内部逻辑，以确保`render`返回的值不会改变（类似对副作用的预防措施）。对树中的每个组件进行遍历和扫描 —— 是的，在复杂的渲染场景下，成本可能会非常昂贵！\n\n值得注意的是，一个`component`的`render`（只有类组件在声明时有这个函数）跟`ReactDom.render`不是同一个函数。\n\n## 关注子组件（children）的情况\n\n除了上述四种常见场景之外，当一个元素有多个子元素时，我们还需要考虑React的行为。现在假设我们有这么一个元素：\n\n```javascript\n// ...\nprops: {\n  children: [\n      { type: 'div' },\n      { type: 'span' },\n      { type: 'br' }\n  ]\n},\n// ...\n```\n\n我们想要交换一下这些children的顺序：\n\n```javascript\n// ...\nprops: {\n  children: [\n    { type: 'span' },\n    { type: 'div' },\n    { type: 'br' }\n  ]\n},\n// ...\n```\n\n之后会发生什么呢？\n\n当`diffing`的时候，如果React在检查`props.children`下的数组时，按顺序去对比数组内元素的话：index 0将与index 0进行比较，index 1和index 1，等等。对于每一次对比，React会使用之前提过的diff规则。在我们的例子里，它认为`div`成为一个`span`，那么就会运用到情景3。这样不是很有效率的：想象一下，我们已经从1000行中删除了第一行。React将不得不“更新”剩余的999个子项，因为按index去对比的话，内容从第一条开始就不相同了。\n\n幸运的是，React有一个`内置的方法（built-in）`来解决这个问题。如果一个元素有一个`key`属性，那么元素将按`key`而不是`index`来比较。只要`key`是唯一的，React就会移动元素，而不是将它们从DOM树中移除然后再将它们放回（这个过程在React里叫mounting和unmounting）。\n\n```javascript\n// ...\nprops: {\n  children: [ // Now React will look on key, not index\n    { type: 'div', key: 'div' },\n    { type: 'span', key: 'span' },\n    { type: 'br', key: 'bt' }\n  ]\n},\n// ...\n```\n\n## 当state发生了改变\n\n到目前为止，我们只聊了下React哲学里面的`props`部分，却忽视了另外很重要的一部分`state`。下面是一个简单的`stateful`组件：\n\n```javascript\nclass App extends Component {\n  state = { counter: 0 }\n\n  increment = () => this.setState({\n    counter: this.state.counter + 1,\n  })\n\n  render = () => (<button onClick={this.increment}>\n    {'Counter: ' + this.state.counter}\n  </button>)\n}\n```\n\n在`state`对象里，我们有一个key`counter`。点击按钮时，这个值会增加，然后按钮的文本也会发生相应的改变。但是，当我们这样做时，DOM中发生了什么？哪部分将被重新计算和更新？\n\n调用`this.setState`会导致`re-render`（重新渲染），但不会影响到整个页面，而只会影响组件本身及其children组件。父母和兄弟姐妹都不会受到影响。当我们有一个层级很深的组件链时，这会让状态更新变得非常方便，因为我们只需要重绘(`redraw`)它的一部分。\n\n## 把问题说清楚\n\n我们准备了一个[小demo](https://iadramelk.github.io/optimizing-react-demo/dist/before.html)，以便你可以在看到在“野蛮生长”的React编码方式下最常见的问题，后续我也告诉大家怎么去解决这些问题。你可以在[这里看看它的源代码](https://github.com/iAdramelk/optimizing-react-demo)。你还需要[React Developer Tools](https://github.com/facebook/react-devtools)，请确保浏览器安装了它们。\n\n我们首先要看看的是，哪些元素以及什么时候导致Virtual DOM的更新。在浏览器的开发工具中，打开React面板并选择“Highlight Updates”复选框：\n\n![\"在Chrome中使用“突出显示更新”复选框选中DevTools\"](http://sinacloud.net/woodysblog/img/react_dev_tools.png)\n\n现在尝试在表格中添加一行。如你所见，页面上的每个元素周围都会显示一个边框。这意味着每次添加一行时，React都在计算和比较整个虚拟DOM树。现在尝试点击一行内的counter按钮。你将看到`state`更新后虚拟DOM如何更新 —— 只有引用了`state key`的元素及其children受到影响。\n\nReact DevTools会提示问题出在哪里，但不会告诉我们有关细节的信息：特别是所涉及的更新，是由`diffing`元素引起的？还是被挂载（`mounting`）或者被卸载（`unmounting`）了？要了解更多信息，我们需要使用React的内置[分析器](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)（注意它不适用于生产模式）。\n\n添加`?react_perf`到应用的URL，然后转到Chrome DevTools中的“Performance”标签。点击“录制”（Record）并在表格上点击。添加一些row，更改一下counter，然后点击“停止”（Stop）。\n\n![\"React DevTools的“Performance”选项卡\"](http://sinacloud.net/woodysblog/img/react_perf_tools.png)\n\n在输出的结果中，我们关注“User timing”这项指标。放大时间轴直到看到“React Tree Reconciliation”这个组及其子项。这些就是我们组件的名称，它们旁边都写着[update]或[mount]。\n\n***\n\n**我们的大部分性能问题都属于这两类问题之一。**\n\n***\n\n无论是组件（还是从它分支的其他组件）出于某种原因都会在每次更新时re-mounted（慢），又或者我们在大型应用上执行对每个分支做diff，尽管这些组件并没有发生改变，我们不希望这些情况的发生。\n\n## 优化我们的代码：Mounting / Unmounting\n\n现在，我们已经了解到当需要update Virtual Dom时，React是依据哪些规则去判断要不要更新，以及也知道了我们可以通过什么方式去追踪这些diff场景的背后发生了什么，我们终于准备好优化我们的代码了！首先，我们来看看mounts/unmounts。\n\n如果你能够注意到当一个元素包含的多个children，他们是由array组成的话，你可以实现十分显著的速度优化。\n\n我们来看看这个case：\n\n```jsx\n<div>\n  <Message />\n  <Table />\n  <Footer />\n</div>\n```\n\n在我们的Virtual DOM里这么表示：\n\n```javascript\n// ...\nprops: {\n  children: [\n    { type: Message },\n    { type: Table },\n    { type: Footer }\n  ]\n}\n// ...\n```\n\n这里有一个简单的`Message`例子，就是一个`div`写着一些简单的文本，和以及一个巨大的`Table`，比方说，超过1000行。它们（`Message`和`Table`）都是顶级`div`的子组件，所以它们被放置在父节点的`props.children`下，并且它们`key`都不会有。React甚至不会通过控制台警告我们要给每个`child`分配`key`，因为children正在`React.createElement`作为参数列表传递给父元素，而不是直接遍历一个数组。\n\n现在我们的用户已读了一个通知，`Message`（譬如新通知按钮）从DOM上移除。`Table`和`Footer`是剩下的全部。\n\n```javascript\n// ...\nprops: {\n  children: [\n    { type: Table },\n    { type: Footer }\n  ]\n}\n// ...\n```\n\nReact会怎么处理呢？它会看作是一个array类型的children，现在少了第一项，从前第一项是`Message`现在是`Table`了，也没有`key`作为索引，比较`type`的时候又发现它们俩不是同一个function或者class的同一个实例，于是会把整个`Table`unmount，然后在mount回去，渲染它的1000+行子数据。\n\n因此，你可以给每个component添加唯一的`key`（但在目特殊的case下，使用key并不是最佳选择），或者采用更聪明的小技巧：使用[短路求值](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators)（又名“最小化求值”），这是JavaScript和许多其他现代语言的特性。看：\n\n```jsx\n// Using a boolean trick\n<div>\n  {isShown && <Message />}\n  <Table />\n  <Footer />\n</div>\n```\n\n虽然`Message`会离开屏幕，父元素`div`的`props.children`仍然会拥有三个元素，`children[0]`具有一个值`false`（一个布尔值）。请记住`true, false, null, undefined`是虚拟DOM对象`type`属性的允许值，我们最终得到了类似的结果：\n\n```javascript\n// ...\nprops: {\n  children: [\n    false, //  isShown && <Message /> evaluates to false\n    { type: Table },\n    { type: Footer }\n  ]\n}\n// ...\n```\n\n因此，有没有`Message`组件，我们的索引值都不会改变，`Table`当然仍然会跟`Table`比较（当`type`是一个函数或类的引用时，diff比较的成本还是会有的），但仅仅比较虚拟DOM的成本，通常比“删除DOM节点”并“从0开始创建”它们要来得快。\n\n现在我们来看看更多的东西。大家都挺喜欢用HOC的，高阶组件是一个将组件作为参数，执行某些操作，最后返回另外一个不同功能的组件：\n\n```javascript\nfunction withName(SomeComponent) {\n  // Computing name, possibly expensive...\n  return function(props) {\n    return <SomeComponent {...props} name={name} />;\n  }\n}\n```\n\n这是一种常见的模式，但你需要小心。如果我们这么写：\n\n```javascript\nclass App extends React.Component() {\n  render() {\n    // Creates a new instance on each render\n    const ComponentWithName = withName(SomeComponent);\n    return <SomeComponentWithName />;\n  }\n}\n```\n\n我们在父节点的`render`方法内部创建一个HOC。当我们重新渲染（`re-render`）树时，虚拟DOM是这样子的：\n\n```javascript\n// On first render:\n{\n  type: ComponentWithName,\n  props: {},\n}\n\n// On second render:\n{\n  type: ComponentWithName, // Same name, but different instance\n  props: {},\n}\n```\n\n现在，React会对`ComponentWithName`这个实例做diff，但由于此时同名引用了不同的实例，因此全等比较（triple equal）失败，一个完整的re-mount会发生（整个节点换掉），而不是调整属性值或顺序。注意它也会导致状态丢失，[如此处所述](https://github.com/facebook/react/blob/044015760883d03f060301a15beef17909abbf71/docs/docs/higher-order-components.md#dont-use-hocs-inside-the-render-method)。幸运的是，这很容易解决，你需要始终在`render`外面创建一个HOC：\n\n```javascript\n// Creates a new instance just once\nconst ComponentWithName = withName(Component);\n\nclass App extends React.Component() {\n  render() {\n    return <ComponentWithName />;\n  }\n}\n```\n\n## 优化我的代码：Updating\n\n现在我们可以确保在非必要的时候，不做re-mount的事情了。然而，对位于DOM树根部附近（层级越上面的元素）的组件所做的任何更改都会导致其所有children的diffing和调整（`reconciliation`）。在层级很多、结构复杂的应用里，这些成本很昂贵，但经常是可以避免的。\n\n***\n\n**如果有一种方法可以告诉React你不用来检查这个分支了，因为我们可以肯定那个分支不会有更新，那就太棒了！**\n\n***\n\n这种方式是真的有的哈，它涉及一个built-in方法叫`shouldComponentUpdate`，它也是[组件生命周期](https://reactjs.org/docs/react-component.html#the-component-lifecycle)的一部分。这个方法的调用时机：组件的`render`和组件接收到state或props的值的更新时。然后我们可以自由地将它们与我们当前的值进行比较，并决定是否更新我们的组件（返回`true`或`false`）。如果我们返回`false`，React将不会重新渲染组件，也不会检查它的所有子组件。\n\n通常来说，比较两个集合（set）`props`和`state`一个简单的浅层比较（shallow comparison）就足够了：如果顶层的值不同，我们不必接着比较了。浅比较不是JavaScript的一个特性，但有很多[小而美的库](https://github.com/dashed/shallowequal)（`utilities`）可以让我们用上那么棒的功能。\n\n现在可以像这样编写我们的代码：\n\n```javascript\nclass TableRow extends React.Component {\n\n  // will return true if new props/state are different from old ones\n  shouldComponentUpdate(nextProps, nextState) {\n    const { props, state } = this;\n    return !shallowequal(props, nextProps)\n           && !shallowequal(state, nextState);\n  }\n\n  render() { /* ... */ }\n}\n```\n\n但是你甚至都不需要自己写代码，因为React把这个特性内置在一个类`React.PureComponent`里面。它类似于  `React.Component`，只是`shouldComponentUpdate`已经为你实施了一个浅的`props`/`state`比较。\n\n这听起来很“不动脑”，在声明class继承（`extends`）的时候，把`Component`换成`PureComponent`就可以享受高效率。事实上，并不是这么“傻瓜”，看看这些例子：\n\n```jsx\n<Table\n    // map returns a new instance of array so shallow comparison will fail\n    rows={rows.map(/* ... */)}\n    // object literal is always \"different\" from predecessor\n    style={ { color: 'red' } }\n    // arrow function is a new unnamed thing in the scope, so there will always be a full diffing\n    onUpdate={() => { /* ... */ }}\n/>\n```\n\n上面的代码片段演示了三种最常见的反模式。尽量避免它们！\n\n***\n\n**如果你能注意点，在render定义之外创建所有对象、数组和函数，并确保它们在各种调用间，不发生更改 —— 你是安全的。**\n\n***\n\n你在[updated demo](https://iadramelk.github.io/optimizing-react-demo/dist/after.html)，所有table的rows都被“净化”（`purified`）过，你可以看到`PureComponent`的表现了。如果你在React DevTools中打开“Highlight Updates”，你会注意到只有表格本身和新行在插入时会触发`render`，其他的行保持不变。\n\n[译者说：为了便于大家理解`purified`，译者在下面插入了原文demo的一段代码]\n\n```javascript\nclass TableRow extends React.PureComponent {\n  render() {\n    return React.createElement('tr', { className: 'row' },\n      React.createElement('td', { className: 'cell' }, this.props.title),\n      React.createElement('td', { className: 'cell' }, React.createElement(Button)),\n    );\n  }\n};\n```\n\n不过，如果你迫不及待地all in PureComponent，在应用里到处都用的话 —— 控制住你自己！\n\nshallow比较两组`props`和`state`不是免费的，对于大多数基本组件来说，甚至都不值得：`shallowCompare`比`diffing`算法需要耗费更多的时间。\n\n使用这个经验法则：pure component适用于复杂的表单和表格，但它们通常会减慢简单元素（按钮、图标）的效率。\n\n***\n\n感谢你的阅读！现在你已准备好将这些见解应用到你的应用程序中。可以使用我们的小demo（[用了](https://iadramelk.github.io/optimizing-react-demo/dist/after.html)或[没有用](https://iadramelk.github.io/optimizing-react-demo/dist/before.html)PureComponent）的[仓库](https://github.com/iAdramelk/optimizing-react-demo)作为你的实验的起点。此外，请继续关注本系列的下一部分，我们计划涵盖Redux并优化你的数据，目标是提高整个应用的总体性能。\n\n## 译者说\n\n正如原文末所说，Alex和Andy后续会继续写一个关于整体性能的系列，包括核心React和Redux等，我也会继续跟踪这个系列的文章，到时po到我的[个人博客](http://wuyuying.com/blog/)和知乎专栏[《集异璧》](https://zhuanlan.zhihu.com/front-end-thinking)，感兴趣的同学们可以关注一下哈 ：）\n\n欢迎对本文的翻译质量、内容的各种讨论。若有表述不当，欢迎斧正。\n\n2018.05.13，晴，杭州滨江\nYuying Wu","slug":"optimizing-react-virtual-dom-explained","published":1,"updated":"2018-07-08T04:31:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9p003fzvr3uxqt2mxl","content":"<p>本文译自<a href=\"https://evilmartians.com/chronicles/optimizing-react-virtual-dom-explained\" target=\"_blank\" rel=\"noopener\">《Optimizing React: Virtual DOM explained》</a>，作者是<a href=\"https://github.com/iAdramelk\" target=\"_blank\" rel=\"noopener\">Alexey Ivanov</a>和<a href=\"https://github.com/progapandist\" target=\"_blank\" rel=\"noopener\">Andy Barnov</a>，来自<a href=\"https://evilmartians.com/chronicles\" target=\"_blank\" rel=\"noopener\">Evil Martians’ team</a>团队。</p>\n<p>译者说：通过一些实际场景和demo，给大家描述React的Virtual Dom Diff一些核心的原理和规则，以及基于这些我们可以做些什么提高应用的性能，很棒的文章。</p>\n<hr>\n<p><strong>通过学习React的Virtual DOM的知识，去加速你们的应用吧。对框架内部实现的介绍，比较全面且适合初学者，我们会让JSX更加简单易懂，给你展示React是如何判断要不要重新render，解释如何找到应用的性能瓶颈，以及给大家一些小贴士，如何避免常见错误。</strong></p>\n<p>React在前端圈内保持领先的原因之一，因为它的学习曲线非常平易近人：把你的模板包在<code>JSX</code>，了解一下<code>props</code>和<code>state</code>的概念之后，你就可以轻松写出React代码了。</p>\n<p>如果你已经熟悉React的工作方式，可以直接跳至“优化我的代码”篇。</p>\n<p>但要真正掌握React，你需要像React一样思考（think in React）。本文也会试图在这个方面帮助你。</p>\n<p>下面看看我们其中一个项目中的React table：</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/ebay_table.png\" alt=\"&quot;eBay上的一个巨大的React表格  用于业务。&quot;\"></p>\n<p>这个表里有数百个动态（表格内容变化）和可过滤的选项，理解这个框架更精细的点，对于保证顺畅的用户体验至关重要。</p>\n<hr>\n<p><strong>当事情出错时，你一定能感觉到。输入字段变得迟缓，复选框需要检查一秒钟，弹窗一个世纪后才出现，等等。</strong></p>\n<hr>\n<p>为了能够解决这些问题，我们需要完成一个React组件的整个生命旅程，从一开始的声明定义到在页面上渲染（再然后可能会更新）。系好安全带，我们要发车了！</p>\n<h2 id=\"JSX的背后\"><a href=\"#JSX的背后\" class=\"headerlink\" title=\"JSX的背后\"></a>JSX的背后</h2><p>这个过程一般在前端会称为“转译”，但其实“汇编”将是一个更精确的术语。</p>\n<p>React开发人员敦促你在编写组件时使用一种称为JSX的语法，混合了HTML和JavaScript。但浏览器对JSX及其语法毫无头绪，浏览器只能理解纯碎的JavaScript，所以JSX必须转换成JavaScript。这里是一个div的JSX代码，它有一个class name和一些内容：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">'cn'</span>&gt;</span><br><span class=\"line\">  Content!</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上的代码，被转换成“正经”的JavaScript代码，其实是一个带有一些参数的函数调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'Content!'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>让我们仔细看看这些参数。</p>\n<ul>\n<li>第一个是元素的<code>type</code>。对于HTML标签，它将是一个带有<code>标签名称</code>的字符串。</li>\n<li>第二个参数是一个包含所有元素属性（<code>attributes</code>）的对象。如果没有，它也可以是空的对象。</li>\n<li>剩下的参数都可以认为是元素的子元素（<code>children</code>）。元素中的文本也算作一个child，是个字符串’Content！’ 作为函数调用的第三个参数放置。</li>\n</ul>\n<p>你应该可以想象，当我们有更多的children时会发生什么：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">'cn'</span>&gt;</span><br><span class=\"line\">  Content <span class=\"number\">1</span>!</span><br><span class=\"line\">  &lt;br /&gt;</span><br><span class=\"line\">  Content <span class=\"number\">2</span>!</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'Content 1!'</span>,              <span class=\"comment\">// 1st child</span></span><br><span class=\"line\">  React.createElement(<span class=\"string\">'br'</span>), <span class=\"comment\">// 2nd child</span></span><br><span class=\"line\">  <span class=\"string\">'Content 2!'</span>               <span class=\"comment\">// 3rd child</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>我们的函数现在有五个参数：</p>\n<ul>\n<li>一个元素的类型</li>\n<li>一个属性对象</li>\n<li>三个子元素。</li>\n</ul>\n<p>因为其中一个child是一个React已知的HTML标签（<code>&lt;br/&gt;</code>），所以它也会被描述为一个函数调用（<code>React.createElement(&#39;br&#39;)</code>）。</p>\n<p>到目前为止，我们已经涵盖了两种类型的children：</p>\n<ul>\n<li>简单的<code>String</code></li>\n<li>另一种会调用<code>React.createElement</code>。</li>\n</ul>\n<p>然而，还有其他值可以作为参数：</p>\n<ul>\n<li>基本类型 <code>false, null, undefined, true</code></li>\n<li>数组</li>\n<li>React Components</li>\n</ul>\n<p>可以使用数组是因为可以将children分组并作为一个参数传递：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  [<span class=\"string\">'Content 1!'</span>, React.createElement(<span class=\"string\">'br'</span>), <span class=\"string\">'Content 2!'</span>]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>当然了，React的厉害之处，不仅仅因为我们可以把HTML标签直接放在JSX中使用，而是我们可以自定义自己的组件，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Table</span>(<span class=\"params\">&#123; rows &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;table&gt;</span><br><span class=\"line\">      &#123;rows.map(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> (</span><br><span class=\"line\">        &lt;tr key=&#123;row.id&#125;&gt;</span><br><span class=\"line\">          &lt;td&gt;&#123;row.title&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>tr&gt;</span><br><span class=\"line\">      ))&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/table&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>组件可以让我们把模板分解为多个可重用的块。在上面的“函数式”（functional）组件的例子里，我们接收一个包含表格行数据的对象数组，最后返回一个调用<code>React.createElement</code>方法的<code>&lt;table&gt;</code>元素，<code>rows</code>则作为children传进table。</p>\n<p>无论什么时候，我们这样去声明一个组件时：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Table rows=&#123;rows&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>从浏览器的角度来看，我们是这么写的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(Table, &#123; <span class=\"attr\">rows</span>: rows &#125;);</span><br></pre></td></tr></table></figure>\n<p>注意，这次我们的第一个参数不是<code>String</code>描述的<code>HTML标签</code>，而是一个引用，指向我们编写组件时编写的函数。组件的<code>attributes</code>现在是接收的<code>props</code>参数了。</p>\n<h2 id=\"把组件（components）组合成页面（a-page）\"><a href=\"#把组件（components）组合成页面（a-page）\" class=\"headerlink\" title=\"把组件（components）组合成页面（a page）\"></a>把组件（components）组合成页面（a page）</h2><p>所以，我们已经将所有JSX组件转换为纯JavaScript，现在我们有一大堆函数调用，它的参数会被其他函数调用的，或者还有更多的其他函数调用这些参数……这些带参数的函数调用，是怎么转化成组成这个页面的实体DOM的呢？</p>\n<p>为此，我们有一个<code>ReactDOM</code>库及其它的<code>render</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Table</span>(<span class=\"params\">&#123; rows &#125;</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125; <span class=\"comment\">// defining a component</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rendering a component</span></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  React.createElement(Table, &#123; <span class=\"attr\">rows</span>: rows &#125;), <span class=\"comment\">// \"creating\" a component</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'#root'</span>) <span class=\"comment\">// inserting it on a page</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当<code>ReactDOM.render</code>被调用时，<code>React.createElement</code>最终也会被调用，返回以下对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// There are more fields, but these are most important to us</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type: Table,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    rows: rows</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>这些对象，在React的角度上，构成了虚拟DOM。</strong></p>\n<hr>\n<p>他们将在所有进一步的渲染中相互比较，并最终转化为  真正的<code>DOM</code>（virtual VS real, 虚拟DOM VS 真实DOM）。</p>\n<p>下面是另一个例子：这次div有一个class属性和几个children：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'Content 1!'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Content 2!'</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>变成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    className: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      <span class=\"string\">'Content 1!'</span>,</span><br><span class=\"line\">      <span class=\"string\">'Content 2!'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，那些除了<code>type</code>和<code>attribute</code>以外的属性，原本是单独传进来的，转换之后，会作为在<code>props.children</code>以一个数组的形式打包存在。也就是说，无论children是作为数组还是参数列表传递都没关系 —— 在生成的虚拟DOM对象的时候，它们最后都会被打包在一起的。</p>\n<p>进一步说，我们可以直接在组件中把children作为一项属性传进去，结果还是一样的：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">'cn'</span> children=&#123;[<span class=\"string\">'Content 1!'</span>, <span class=\"string\">'Content 2!'</span>]&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>在构建虚拟DOM对象完成之后，<code>ReactDOM.render</code>将会按下面的原则，尝试将其转换为浏览器可以识别和展示的DOM节点：</p>\n<ul>\n<li><p>如果<code>type</code>包含一个带有<code>String</code>类型的标签名称（<code>tag name</code>）—— 创建一个标签，附带上<code>props</code>下所有<code>attributes</code>。</p>\n</li>\n<li><p>如果<code>type</code>是一个函数（<code>function</code>）或者类（<code>class</code>），调用它，并对结果递归地重复这个过程。</p>\n</li>\n<li><p>如果<code>props</code>下有<code>children</code>属性 —— 在父节点下，针对每个child重复以上过程。</p>\n</li>\n</ul>\n<p>最后，得到以下HTML（对于我们的表格示例）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重新构建DOM（Rebuilding-the-DOM）\"><a href=\"#重新构建DOM（Rebuilding-the-DOM）\" class=\"headerlink\" title=\"重新构建DOM（Rebuilding the DOM）\"></a>重新构建DOM（Rebuilding the DOM）</h2><p>在实际应用场景，<code>render</code>通常在根节点调用一次，后续的更新会有<code>state</code>来控制和触发调用。</p>\n<p>请注意，标题中的“重新”！当我们想更新一个页面而不是全部替换时，React中的魔法就开始了。我们有一些实现它的方式。我们先从最简单的开始 —— 在同一个node节点再次执行<code>ReactDOM.render</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Second call</span></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  React.createElement(Table, &#123; <span class=\"attr\">rows</span>: rows &#125;),</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'#root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这一次，上面的代码的表现，跟我们已经看到的有所不同。React将启动其<code>diff</code>算法，而不是从头开始创建所有DOM节点并将其放在页面上，来确定节点树的哪些部分必须更新，哪些可以保持不变。</p>\n<p>那么，它是怎样工作的呢？其实只有少数几个简单的场景，理解它们将对我们的优化帮助很大。请记住，现在我们在看的，是在<code>React Virtual DOM</code>里面用来代表节点的<code>对象</code>。</p>\n<h3 id=\"场景1：type是一个字符串，type在通话中保持不变，props也没有改变。\"><a href=\"#场景1：type是一个字符串，type在通话中保持不变，props也没有改变。\" class=\"headerlink\" title=\"场景1：type是一个字符串，type在通话中保持不变，props也没有改变。\"></a>场景1：<code>type</code>是一个字符串，<code>type</code>在通话中保持不变，<code>props</code>也没有改变。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before update</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after update</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>这是最简单的情况：DOM保持不变。</p>\n<h3 id=\"场景2：type仍然是相同的字符串，props是不同的。\"><a href=\"#场景2：type仍然是相同的字符串，props是不同的。\" class=\"headerlink\" title=\"场景2：type仍然是相同的字符串，props是不同的。\"></a>场景2：<code>type</code>仍然是相同的字符串，<code>props</code>是不同的。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cnn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p><code>type</code>仍然代表HTML元素，React知道如何通过标准DOM API调用来更改元素的属性，而无需从DOM树中删除一个节点。</p>\n<h3 id=\"场景3：type已更改为不同的String或从String组件。\"><a href=\"#场景3：type已更改为不同的String或从String组件。\" class=\"headerlink\" title=\"场景3：type已更改为不同的String或从String组件。\"></a>场景3：<code>type</code>已更改为不同的<code>String</code>或从<code>String</code>组件。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>React看到的<code>type</code>是不同的，它甚至不会尝试更新我们的节点：old元素将和它的所有子节点一起被删除（unmounted卸载）。因此，将元素替换为完全不同于DOM树的东西代价会非常昂贵。幸运的是，这在现实世界中很少发生。</p>\n<p>划重点，记住React使用<code>===</code>（triple equals）来比较<code>type</code>的值，所以这两个值需要是相同类或相同函数的相同实例。</p>\n<p>下一个场景更加有趣，通常我们会这么使用React。</p>\n<h3 id=\"场景4：type是一个component。\"><a href=\"#场景4：type是一个component。\" class=\"headerlink\" title=\"场景4：type是一个component。\"></a>场景4：<code>type</code>是一个<code>component</code>。</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// before <span class=\"keyword\">update</span>:</span><br><span class=\"line\">&#123; <span class=\"keyword\">type</span>: <span class=\"keyword\">Table</span>, props: &#123; <span class=\"keyword\">rows</span>: <span class=\"keyword\">rows</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"keyword\">after</span> <span class=\"keyword\">update</span>:</span><br><span class=\"line\">&#123; <span class=\"keyword\">type</span>: <span class=\"keyword\">Table</span>, props: &#123; <span class=\"keyword\">rows</span>: <span class=\"keyword\">rows</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>你可能会说，“咦，但没有任何变化啊！”，但是你错了。</strong></p>\n<hr>\n<p>如果<code>type</code>是对函数或类的引用（即常规的React组件），并且我们启动了tree diff的过程，则React每次都会去检查组件的内部逻辑，以确保<code>render</code>返回的值不会改变（类似对副作用的预防措施）。对树中的每个组件进行遍历和扫描 —— 是的，在复杂的渲染场景下，成本可能会非常昂贵！</p>\n<p>值得注意的是，一个<code>component</code>的<code>render</code>（只有类组件在声明时有这个函数）跟<code>ReactDom.render</code>不是同一个函数。</p>\n<h2 id=\"关注子组件（children）的情况\"><a href=\"#关注子组件（children）的情况\" class=\"headerlink\" title=\"关注子组件（children）的情况\"></a>关注子组件（children）的情况</h2><p>除了上述四种常见场景之外，当一个元素有多个子元素时，我们还需要考虑React的行为。现在假设我们有这么一个元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'br'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们想要交换一下这些children的顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'br'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>之后会发生什么呢？</p>\n<p>当<code>diffing</code>的时候，如果React在检查<code>props.children</code>下的数组时，按顺序去对比数组内元素的话：index 0将与index 0进行比较，index 1和index 1，等等。对于每一次对比，React会使用之前提过的diff规则。在我们的例子里，它认为<code>div</code>成为一个<code>span</code>，那么就会运用到情景3。这样不是很有效率的：想象一下，我们已经从1000行中删除了第一行。React将不得不“更新”剩余的999个子项，因为按index去对比的话，内容从第一条开始就不相同了。</p>\n<p>幸运的是，React有一个<code>内置的方法（built-in）</code>来解决这个问题。如果一个元素有一个<code>key</code>属性，那么元素将按<code>key</code>而不是<code>index</code>来比较。只要<code>key</code>是唯一的，React就会移动元素，而不是将它们从DOM树中移除然后再将它们放回（这个过程在React里叫mounting和unmounting）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [ <span class=\"comment\">// Now React will look on key, not index</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">key</span>: <span class=\"string\">'div'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span>, <span class=\"attr\">key</span>: <span class=\"string\">'span'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'br'</span>, <span class=\"attr\">key</span>: <span class=\"string\">'bt'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"当state发生了改变\"><a href=\"#当state发生了改变\" class=\"headerlink\" title=\"当state发生了改变\"></a>当state发生了改变</h2><p>到目前为止，我们只聊了下React哲学里面的<code>props</code>部分，却忽视了另外很重要的一部分<code>state</code>。下面是一个简单的<code>stateful</code>组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    counter: <span class=\"keyword\">this</span>.state.counter + <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.increment&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &#123;'Counter: ' + this.state.counter&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>state</code>对象里，我们有一个key<code>counter</code>。点击按钮时，这个值会增加，然后按钮的文本也会发生相应的改变。但是，当我们这样做时，DOM中发生了什么？哪部分将被重新计算和更新？</p>\n<p>调用<code>this.setState</code>会导致<code>re-render</code>（重新渲染），但不会影响到整个页面，而只会影响组件本身及其children组件。父母和兄弟姐妹都不会受到影响。当我们有一个层级很深的组件链时，这会让状态更新变得非常方便，因为我们只需要重绘(<code>redraw</code>)它的一部分。</p>\n<h2 id=\"把问题说清楚\"><a href=\"#把问题说清楚\" class=\"headerlink\" title=\"把问题说清楚\"></a>把问题说清楚</h2><p>我们准备了一个<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/before.html\" target=\"_blank\" rel=\"noopener\">小demo</a>，以便你可以在看到在“野蛮生长”的React编码方式下最常见的问题，后续我也告诉大家怎么去解决这些问题。你可以在<a href=\"https://github.com/iAdramelk/optimizing-react-demo\" target=\"_blank\" rel=\"noopener\">这里看看它的源代码</a>。你还需要<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">React Developer Tools</a>，请确保浏览器安装了它们。</p>\n<p>我们首先要看看的是，哪些元素以及什么时候导致Virtual DOM的更新。在浏览器的开发工具中，打开React面板并选择“Highlight Updates”复选框：</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/react_dev_tools.png\" alt=\"&quot;在Chrome中使用“突出显示更新”复选框选中DevTools&quot;\"></p>\n<p>现在尝试在表格中添加一行。如你所见，页面上的每个元素周围都会显示一个边框。这意味着每次添加一行时，React都在计算和比较整个虚拟DOM树。现在尝试点击一行内的counter按钮。你将看到<code>state</code>更新后虚拟DOM如何更新 —— 只有引用了<code>state key</code>的元素及其children受到影响。</p>\n<p>React DevTools会提示问题出在哪里，但不会告诉我们有关细节的信息：特别是所涉及的更新，是由<code>diffing</code>元素引起的？还是被挂载（<code>mounting</code>）或者被卸载（<code>unmounting</code>）了？要了解更多信息，我们需要使用React的内置<a href=\"https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab\" target=\"_blank\" rel=\"noopener\">分析器</a>（注意它不适用于生产模式）。</p>\n<p>添加<code>?react_perf</code>到应用的URL，然后转到Chrome DevTools中的“Performance”标签。点击“录制”（Record）并在表格上点击。添加一些row，更改一下counter，然后点击“停止”（Stop）。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/react_perf_tools.png\" alt=\"&quot;React DevTools的“Performance”选项卡&quot;\"></p>\n<p>在输出的结果中，我们关注“User timing”这项指标。放大时间轴直到看到“React Tree Reconciliation”这个组及其子项。这些就是我们组件的名称，它们旁边都写着[update]或[mount]。</p>\n<hr>\n<p><strong>我们的大部分性能问题都属于这两类问题之一。</strong></p>\n<hr>\n<p>无论是组件（还是从它分支的其他组件）出于某种原因都会在每次更新时re-mounted（慢），又或者我们在大型应用上执行对每个分支做diff，尽管这些组件并没有发生改变，我们不希望这些情况的发生。</p>\n<h2 id=\"优化我们的代码：Mounting-Unmounting\"><a href=\"#优化我们的代码：Mounting-Unmounting\" class=\"headerlink\" title=\"优化我们的代码：Mounting / Unmounting\"></a>优化我们的代码：Mounting / Unmounting</h2><p>现在，我们已经了解到当需要update Virtual Dom时，React是依据哪些规则去判断要不要更新，以及也知道了我们可以通过什么方式去追踪这些diff场景的背后发生了什么，我们终于准备好优化我们的代码了！首先，我们来看看mounts/unmounts。</p>\n<p>如果你能够注意到当一个元素包含的多个children，他们是由array组成的话，你可以实现十分显著的速度优化。</p>\n<p>我们来看看这个case：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;Message /&gt;</span><br><span class=\"line\">  &lt;Table /&gt;</span><br><span class=\"line\">  &lt;Footer /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在我们的Virtual DOM里这么表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Message &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Table &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Footer &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>这里有一个简单的<code>Message</code>例子，就是一个<code>div</code>写着一些简单的文本，和以及一个巨大的<code>Table</code>，比方说，超过1000行。它们（<code>Message</code>和<code>Table</code>）都是顶级<code>div</code>的子组件，所以它们被放置在父节点的<code>props.children</code>下，并且它们<code>key</code>都不会有。React甚至不会通过控制台警告我们要给每个<code>child</code>分配<code>key</code>，因为children正在<code>React.createElement</code>作为参数列表传递给父元素，而不是直接遍历一个数组。</p>\n<p>现在我们的用户已读了一个通知，<code>Message</code>（譬如新通知按钮）从DOM上移除。<code>Table</code>和<code>Footer</code>是剩下的全部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Table &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Footer &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>React会怎么处理呢？它会看作是一个array类型的children，现在少了第一项，从前第一项是<code>Message</code>现在是<code>Table</code>了，也没有<code>key</code>作为索引，比较<code>type</code>的时候又发现它们俩不是同一个function或者class的同一个实例，于是会把整个<code>Table</code>unmount，然后在mount回去，渲染它的1000+行子数据。</p>\n<p>因此，你可以给每个component添加唯一的<code>key</code>（但在目特殊的case下，使用key并不是最佳选择），或者采用更聪明的小技巧：使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\" target=\"_blank\" rel=\"noopener\">短路求值</a>（又名“最小化求值”），这是JavaScript和许多其他现代语言的特性。看：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using a boolean trick</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;isShown &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Message</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Table</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Footer</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>虽然<code>Message</code>会离开屏幕，父元素<code>div</code>的<code>props.children</code>仍然会拥有三个元素，<code>children[0]</code>具有一个值<code>false</code>（一个布尔值）。请记住<code>true, false, null, undefined</code>是虚拟DOM对象<code>type</code>属性的允许值，我们最终得到了类似的结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    <span class=\"literal\">false</span>, <span class=\"comment\">//  isShown &amp;&amp; &lt;Message /&gt; evaluates to false</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Table &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Footer &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>因此，有没有<code>Message</code>组件，我们的索引值都不会改变，<code>Table</code>当然仍然会跟<code>Table</code>比较（当<code>type</code>是一个函数或类的引用时，diff比较的成本还是会有的），但仅仅比较虚拟DOM的成本，通常比“删除DOM节点”并“从0开始创建”它们要来得快。</p>\n<p>现在我们来看看更多的东西。大家都挺喜欢用HOC的，高阶组件是一个将组件作为参数，执行某些操作，最后返回另外一个不同功能的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withName</span>(<span class=\"params\">SomeComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Computing name, possibly expensive...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SomeComponent</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">name</span>=<span class=\"string\">&#123;name&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这是一种常见的模式，但你需要小心。如果我们这么写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>() </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Creates a new instance on each render</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ComponentWithName = withName(SomeComponent);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SomeComponentWithName</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们在父节点的<code>render</code>方法内部创建一个HOC。当我们重新渲染（<code>re-render</code>）树时，虚拟DOM是这样子的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// On first render:</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type: ComponentWithName,</span><br><span class=\"line\">  props: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// On second render:</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type: ComponentWithName, <span class=\"comment\">// Same name, but different instance</span></span><br><span class=\"line\">  props: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，React会对<code>ComponentWithName</code>这个实例做diff，但由于此时同名引用了不同的实例，因此全等比较（triple equal）失败，一个完整的re-mount会发生（整个节点换掉），而不是调整属性值或顺序。注意它也会导致状态丢失，<a href=\"https://github.com/facebook/react/blob/044015760883d03f060301a15beef17909abbf71/docs/docs/higher-order-components.md#dont-use-hocs-inside-the-render-method\" target=\"_blank\" rel=\"noopener\">如此处所述</a>。幸运的是，这很容易解决，你需要始终在<code>render</code>外面创建一个HOC：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Creates a new instance just once</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ComponentWithName = withName(Component);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>() </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentWithName</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"优化我的代码：Updating\"><a href=\"#优化我的代码：Updating\" class=\"headerlink\" title=\"优化我的代码：Updating\"></a>优化我的代码：Updating</h2><p>现在我们可以确保在非必要的时候，不做re-mount的事情了。然而，对位于DOM树根部附近（层级越上面的元素）的组件所做的任何更改都会导致其所有children的diffing和调整（<code>reconciliation</code>）。在层级很多、结构复杂的应用里，这些成本很昂贵，但经常是可以避免的。</p>\n<hr>\n<p><strong>如果有一种方法可以告诉React你不用来检查这个分支了，因为我们可以肯定那个分支不会有更新，那就太棒了！</strong></p>\n<hr>\n<p>这种方式是真的有的哈，它涉及一个built-in方法叫<code>shouldComponentUpdate</code>，它也是<a href=\"https://reactjs.org/docs/react-component.html#the-component-lifecycle\" target=\"_blank\" rel=\"noopener\">组件生命周期</a>的一部分。这个方法的调用时机：组件的<code>render</code>和组件接收到state或props的值的更新时。然后我们可以自由地将它们与我们当前的值进行比较，并决定是否更新我们的组件（返回<code>true</code>或<code>false</code>）。如果我们返回<code>false</code>，React将不会重新渲染组件，也不会检查它的所有子组件。</p>\n<p>通常来说，比较两个集合（set）<code>props</code>和<code>state</code>一个简单的浅层比较（shallow comparison）就足够了：如果顶层的值不同，我们不必接着比较了。浅比较不是JavaScript的一个特性，但有很多<a href=\"https://github.com/dashed/shallowequal\" target=\"_blank\" rel=\"noopener\">小而美的库</a>（<code>utilities</code>）可以让我们用上那么棒的功能。</p>\n<p>现在可以像这样编写我们的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableRow</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// will return true if new props/state are different from old ones</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; props, state &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !shallowequal(props, nextProps)</span><br><span class=\"line\">           &amp;&amp; !shallowequal(state, nextState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是你甚至都不需要自己写代码，因为React把这个特性内置在一个类<code>React.PureComponent</code>里面。它类似于  <code>React.Component</code>，只是<code>shouldComponentUpdate</code>已经为你实施了一个浅的<code>props</code>/<code>state</code>比较。</p>\n<p>这听起来很“不动脑”，在声明class继承（<code>extends</code>）的时候，把<code>Component</code>换成<code>PureComponent</code>就可以享受高效率。事实上，并不是这么“傻瓜”，看看这些例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Table</span><br><span class=\"line\">    <span class=\"comment\">// map returns a new instance of array so shallow comparison will fail</span></span><br><span class=\"line\">    rows=&#123;rows.map(<span class=\"comment\">/* ... */</span>)&#125;</span><br><span class=\"line\">    <span class=\"comment\">// object literal is always \"different\" from predecessor</span></span><br><span class=\"line\">    style=&#123; &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// arrow function is a new unnamed thing in the scope, so there will always be a full diffing</span></span><br><span class=\"line\">    onUpdate=&#123;() =&gt; &#123; <span class=\"comment\">/* ... */</span> &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的代码片段演示了三种最常见的反模式。尽量避免它们！</p>\n<hr>\n<p><strong>如果你能注意点，在render定义之外创建所有对象、数组和函数，并确保它们在各种调用间，不发生更改 —— 你是安全的。</strong></p>\n<hr>\n<p>你在<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/after.html\" target=\"_blank\" rel=\"noopener\">updated demo</a>，所有table的rows都被“净化”（<code>purified</code>）过，你可以看到<code>PureComponent</code>的表现了。如果你在React DevTools中打开“Highlight Updates”，你会注意到只有表格本身和新行在插入时会触发<code>render</code>，其他的行保持不变。</p>\n<p>[译者说：为了便于大家理解<code>purified</code>，译者在下面插入了原文demo的一段代码]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableRow</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> React.createElement(<span class=\"string\">'tr'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'row'</span> &#125;,</span><br><span class=\"line\">      React.createElement(<span class=\"string\">'td'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cell'</span> &#125;, <span class=\"keyword\">this</span>.props.title),</span><br><span class=\"line\">      React.createElement(<span class=\"string\">'td'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cell'</span> &#125;, React.createElement(Button)),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>不过，如果你迫不及待地all in PureComponent，在应用里到处都用的话 —— 控制住你自己！</p>\n<p>shallow比较两组<code>props</code>和<code>state</code>不是免费的，对于大多数基本组件来说，甚至都不值得：<code>shallowCompare</code>比<code>diffing</code>算法需要耗费更多的时间。</p>\n<p>使用这个经验法则：pure component适用于复杂的表单和表格，但它们通常会减慢简单元素（按钮、图标）的效率。</p>\n<hr>\n<p>感谢你的阅读！现在你已准备好将这些见解应用到你的应用程序中。可以使用我们的小demo（<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/after.html\" target=\"_blank\" rel=\"noopener\">用了</a>或<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/before.html\" target=\"_blank\" rel=\"noopener\">没有用</a>PureComponent）的<a href=\"https://github.com/iAdramelk/optimizing-react-demo\" target=\"_blank\" rel=\"noopener\">仓库</a>作为你的实验的起点。此外，请继续关注本系列的下一部分，我们计划涵盖Redux并优化你的数据，目标是提高整个应用的总体性能。</p>\n<h2 id=\"译者说\"><a href=\"#译者说\" class=\"headerlink\" title=\"译者说\"></a>译者说</h2><p>正如原文末所说，Alex和Andy后续会继续写一个关于整体性能的系列，包括核心React和Redux等，我也会继续跟踪这个系列的文章，到时po到我的<a href=\"http://wuyuying.com/blog/\">个人博客</a>和知乎专栏<a href=\"https://zhuanlan.zhihu.com/front-end-thinking\" target=\"_blank\" rel=\"noopener\">《集异璧》</a>，感兴趣的同学们可以关注一下哈 ：）</p>\n<p>欢迎对本文的翻译质量、内容的各种讨论。若有表述不当，欢迎斧正。</p>\n<p>2018.05.13，晴，杭州滨江<br>Yuying Wu</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文译自<a href=\"https://evilmartians.com/chronicles/optimizing-react-virtual-dom-explained\" target=\"_blank\" rel=\"noopener\">《Optimizing React: Virtual DOM explained》</a>，作者是<a href=\"https://github.com/iAdramelk\" target=\"_blank\" rel=\"noopener\">Alexey Ivanov</a>和<a href=\"https://github.com/progapandist\" target=\"_blank\" rel=\"noopener\">Andy Barnov</a>，来自<a href=\"https://evilmartians.com/chronicles\" target=\"_blank\" rel=\"noopener\">Evil Martians’ team</a>团队。</p>\n<p>译者说：通过一些实际场景和demo，给大家描述React的Virtual Dom Diff一些核心的原理和规则，以及基于这些我们可以做些什么提高应用的性能，很棒的文章。</p>\n<hr>\n<p><strong>通过学习React的Virtual DOM的知识，去加速你们的应用吧。对框架内部实现的介绍，比较全面且适合初学者，我们会让JSX更加简单易懂，给你展示React是如何判断要不要重新render，解释如何找到应用的性能瓶颈，以及给大家一些小贴士，如何避免常见错误。</strong></p>\n<p>React在前端圈内保持领先的原因之一，因为它的学习曲线非常平易近人：把你的模板包在<code>JSX</code>，了解一下<code>props</code>和<code>state</code>的概念之后，你就可以轻松写出React代码了。</p>\n<p>如果你已经熟悉React的工作方式，可以直接跳至“优化我的代码”篇。</p>\n<p>但要真正掌握React，你需要像React一样思考（think in React）。本文也会试图在这个方面帮助你。</p>\n<p>下面看看我们其中一个项目中的React table：</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/ebay_table.png\" alt=\"&quot;eBay上的一个巨大的React表格  用于业务。&quot;\"></p>\n<p>这个表里有数百个动态（表格内容变化）和可过滤的选项，理解这个框架更精细的点，对于保证顺畅的用户体验至关重要。</p>\n<hr>\n<p><strong>当事情出错时，你一定能感觉到。输入字段变得迟缓，复选框需要检查一秒钟，弹窗一个世纪后才出现，等等。</strong></p>\n<hr>\n<p>为了能够解决这些问题，我们需要完成一个React组件的整个生命旅程，从一开始的声明定义到在页面上渲染（再然后可能会更新）。系好安全带，我们要发车了！</p>\n<h2 id=\"JSX的背后\"><a href=\"#JSX的背后\" class=\"headerlink\" title=\"JSX的背后\"></a>JSX的背后</h2><p>这个过程一般在前端会称为“转译”，但其实“汇编”将是一个更精确的术语。</p>\n<p>React开发人员敦促你在编写组件时使用一种称为JSX的语法，混合了HTML和JavaScript。但浏览器对JSX及其语法毫无头绪，浏览器只能理解纯碎的JavaScript，所以JSX必须转换成JavaScript。这里是一个div的JSX代码，它有一个class name和一些内容：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">'cn'</span>&gt;</span><br><span class=\"line\">  Content!</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上的代码，被转换成“正经”的JavaScript代码，其实是一个带有一些参数的函数调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'Content!'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>让我们仔细看看这些参数。</p>\n<ul>\n<li>第一个是元素的<code>type</code>。对于HTML标签，它将是一个带有<code>标签名称</code>的字符串。</li>\n<li>第二个参数是一个包含所有元素属性（<code>attributes</code>）的对象。如果没有，它也可以是空的对象。</li>\n<li>剩下的参数都可以认为是元素的子元素（<code>children</code>）。元素中的文本也算作一个child，是个字符串’Content！’ 作为函数调用的第三个参数放置。</li>\n</ul>\n<p>你应该可以想象，当我们有更多的children时会发生什么：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">'cn'</span>&gt;</span><br><span class=\"line\">  Content <span class=\"number\">1</span>!</span><br><span class=\"line\">  &lt;br /&gt;</span><br><span class=\"line\">  Content <span class=\"number\">2</span>!</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'Content 1!'</span>,              <span class=\"comment\">// 1st child</span></span><br><span class=\"line\">  React.createElement(<span class=\"string\">'br'</span>), <span class=\"comment\">// 2nd child</span></span><br><span class=\"line\">  <span class=\"string\">'Content 2!'</span>               <span class=\"comment\">// 3rd child</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>我们的函数现在有五个参数：</p>\n<ul>\n<li>一个元素的类型</li>\n<li>一个属性对象</li>\n<li>三个子元素。</li>\n</ul>\n<p>因为其中一个child是一个React已知的HTML标签（<code>&lt;br/&gt;</code>），所以它也会被描述为一个函数调用（<code>React.createElement(&#39;br&#39;)</code>）。</p>\n<p>到目前为止，我们已经涵盖了两种类型的children：</p>\n<ul>\n<li>简单的<code>String</code></li>\n<li>另一种会调用<code>React.createElement</code>。</li>\n</ul>\n<p>然而，还有其他值可以作为参数：</p>\n<ul>\n<li>基本类型 <code>false, null, undefined, true</code></li>\n<li>数组</li>\n<li>React Components</li>\n</ul>\n<p>可以使用数组是因为可以将children分组并作为一个参数传递：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  [<span class=\"string\">'Content 1!'</span>, React.createElement(<span class=\"string\">'br'</span>), <span class=\"string\">'Content 2!'</span>]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>当然了，React的厉害之处，不仅仅因为我们可以把HTML标签直接放在JSX中使用，而是我们可以自定义自己的组件，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Table</span>(<span class=\"params\">&#123; rows &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;table&gt;</span><br><span class=\"line\">      &#123;rows.map(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> (</span><br><span class=\"line\">        &lt;tr key=&#123;row.id&#125;&gt;</span><br><span class=\"line\">          &lt;td&gt;&#123;row.title&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>tr&gt;</span><br><span class=\"line\">      ))&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/table&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>组件可以让我们把模板分解为多个可重用的块。在上面的“函数式”（functional）组件的例子里，我们接收一个包含表格行数据的对象数组，最后返回一个调用<code>React.createElement</code>方法的<code>&lt;table&gt;</code>元素，<code>rows</code>则作为children传进table。</p>\n<p>无论什么时候，我们这样去声明一个组件时：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Table rows=&#123;rows&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>从浏览器的角度来看，我们是这么写的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(Table, &#123; <span class=\"attr\">rows</span>: rows &#125;);</span><br></pre></td></tr></table></figure>\n<p>注意，这次我们的第一个参数不是<code>String</code>描述的<code>HTML标签</code>，而是一个引用，指向我们编写组件时编写的函数。组件的<code>attributes</code>现在是接收的<code>props</code>参数了。</p>\n<h2 id=\"把组件（components）组合成页面（a-page）\"><a href=\"#把组件（components）组合成页面（a-page）\" class=\"headerlink\" title=\"把组件（components）组合成页面（a page）\"></a>把组件（components）组合成页面（a page）</h2><p>所以，我们已经将所有JSX组件转换为纯JavaScript，现在我们有一大堆函数调用，它的参数会被其他函数调用的，或者还有更多的其他函数调用这些参数……这些带参数的函数调用，是怎么转化成组成这个页面的实体DOM的呢？</p>\n<p>为此，我们有一个<code>ReactDOM</code>库及其它的<code>render</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Table</span>(<span class=\"params\">&#123; rows &#125;</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125; <span class=\"comment\">// defining a component</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rendering a component</span></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  React.createElement(Table, &#123; <span class=\"attr\">rows</span>: rows &#125;), <span class=\"comment\">// \"creating\" a component</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'#root'</span>) <span class=\"comment\">// inserting it on a page</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当<code>ReactDOM.render</code>被调用时，<code>React.createElement</code>最终也会被调用，返回以下对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// There are more fields, but these are most important to us</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type: Table,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    rows: rows</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>这些对象，在React的角度上，构成了虚拟DOM。</strong></p>\n<hr>\n<p>他们将在所有进一步的渲染中相互比较，并最终转化为  真正的<code>DOM</code>（virtual VS real, 虚拟DOM VS 真实DOM）。</p>\n<p>下面是另一个例子：这次div有一个class属性和几个children：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createElement(</span><br><span class=\"line\">  <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'Content 1!'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Content 2!'</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>变成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    className: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      <span class=\"string\">'Content 1!'</span>,</span><br><span class=\"line\">      <span class=\"string\">'Content 2!'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，那些除了<code>type</code>和<code>attribute</code>以外的属性，原本是单独传进来的，转换之后，会作为在<code>props.children</code>以一个数组的形式打包存在。也就是说，无论children是作为数组还是参数列表传递都没关系 —— 在生成的虚拟DOM对象的时候，它们最后都会被打包在一起的。</p>\n<p>进一步说，我们可以直接在组件中把children作为一项属性传进去，结果还是一样的：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">'cn'</span> children=&#123;[<span class=\"string\">'Content 1!'</span>, <span class=\"string\">'Content 2!'</span>]&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>在构建虚拟DOM对象完成之后，<code>ReactDOM.render</code>将会按下面的原则，尝试将其转换为浏览器可以识别和展示的DOM节点：</p>\n<ul>\n<li><p>如果<code>type</code>包含一个带有<code>String</code>类型的标签名称（<code>tag name</code>）—— 创建一个标签，附带上<code>props</code>下所有<code>attributes</code>。</p>\n</li>\n<li><p>如果<code>type</code>是一个函数（<code>function</code>）或者类（<code>class</code>），调用它，并对结果递归地重复这个过程。</p>\n</li>\n<li><p>如果<code>props</code>下有<code>children</code>属性 —— 在父节点下，针对每个child重复以上过程。</p>\n</li>\n</ul>\n<p>最后，得到以下HTML（对于我们的表格示例）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重新构建DOM（Rebuilding-the-DOM）\"><a href=\"#重新构建DOM（Rebuilding-the-DOM）\" class=\"headerlink\" title=\"重新构建DOM（Rebuilding the DOM）\"></a>重新构建DOM（Rebuilding the DOM）</h2><p>在实际应用场景，<code>render</code>通常在根节点调用一次，后续的更新会有<code>state</code>来控制和触发调用。</p>\n<p>请注意，标题中的“重新”！当我们想更新一个页面而不是全部替换时，React中的魔法就开始了。我们有一些实现它的方式。我们先从最简单的开始 —— 在同一个node节点再次执行<code>ReactDOM.render</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Second call</span></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  React.createElement(Table, &#123; <span class=\"attr\">rows</span>: rows &#125;),</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'#root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这一次，上面的代码的表现，跟我们已经看到的有所不同。React将启动其<code>diff</code>算法，而不是从头开始创建所有DOM节点并将其放在页面上，来确定节点树的哪些部分必须更新，哪些可以保持不变。</p>\n<p>那么，它是怎样工作的呢？其实只有少数几个简单的场景，理解它们将对我们的优化帮助很大。请记住，现在我们在看的，是在<code>React Virtual DOM</code>里面用来代表节点的<code>对象</code>。</p>\n<h3 id=\"场景1：type是一个字符串，type在通话中保持不变，props也没有改变。\"><a href=\"#场景1：type是一个字符串，type在通话中保持不变，props也没有改变。\" class=\"headerlink\" title=\"场景1：type是一个字符串，type在通话中保持不变，props也没有改变。\"></a>场景1：<code>type</code>是一个字符串，<code>type</code>在通话中保持不变，<code>props</code>也没有改变。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before update</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after update</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>这是最简单的情况：DOM保持不变。</p>\n<h3 id=\"场景2：type仍然是相同的字符串，props是不同的。\"><a href=\"#场景2：type仍然是相同的字符串，props是不同的。\" class=\"headerlink\" title=\"场景2：type仍然是相同的字符串，props是不同的。\"></a>场景2：<code>type</code>仍然是相同的字符串，<code>props</code>是不同的。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cnn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p><code>type</code>仍然代表HTML元素，React知道如何通过标准DOM API调用来更改元素的属性，而无需从DOM树中删除一个节点。</p>\n<h3 id=\"场景3：type已更改为不同的String或从String组件。\"><a href=\"#场景3：type已更改为不同的String或从String组件。\" class=\"headerlink\" title=\"场景3：type已更改为不同的String或从String组件。\"></a>场景3：<code>type</code>已更改为不同的<code>String</code>或从<code>String</code>组件。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after update:</span></span><br><span class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cn'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>React看到的<code>type</code>是不同的，它甚至不会尝试更新我们的节点：old元素将和它的所有子节点一起被删除（unmounted卸载）。因此，将元素替换为完全不同于DOM树的东西代价会非常昂贵。幸运的是，这在现实世界中很少发生。</p>\n<p>划重点，记住React使用<code>===</code>（triple equals）来比较<code>type</code>的值，所以这两个值需要是相同类或相同函数的相同实例。</p>\n<p>下一个场景更加有趣，通常我们会这么使用React。</p>\n<h3 id=\"场景4：type是一个component。\"><a href=\"#场景4：type是一个component。\" class=\"headerlink\" title=\"场景4：type是一个component。\"></a>场景4：<code>type</code>是一个<code>component</code>。</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// before <span class=\"keyword\">update</span>:</span><br><span class=\"line\">&#123; <span class=\"keyword\">type</span>: <span class=\"keyword\">Table</span>, props: &#123; <span class=\"keyword\">rows</span>: <span class=\"keyword\">rows</span> &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"keyword\">after</span> <span class=\"keyword\">update</span>:</span><br><span class=\"line\">&#123; <span class=\"keyword\">type</span>: <span class=\"keyword\">Table</span>, props: &#123; <span class=\"keyword\">rows</span>: <span class=\"keyword\">rows</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>你可能会说，“咦，但没有任何变化啊！”，但是你错了。</strong></p>\n<hr>\n<p>如果<code>type</code>是对函数或类的引用（即常规的React组件），并且我们启动了tree diff的过程，则React每次都会去检查组件的内部逻辑，以确保<code>render</code>返回的值不会改变（类似对副作用的预防措施）。对树中的每个组件进行遍历和扫描 —— 是的，在复杂的渲染场景下，成本可能会非常昂贵！</p>\n<p>值得注意的是，一个<code>component</code>的<code>render</code>（只有类组件在声明时有这个函数）跟<code>ReactDom.render</code>不是同一个函数。</p>\n<h2 id=\"关注子组件（children）的情况\"><a href=\"#关注子组件（children）的情况\" class=\"headerlink\" title=\"关注子组件（children）的情况\"></a>关注子组件（children）的情况</h2><p>除了上述四种常见场景之外，当一个元素有多个子元素时，我们还需要考虑React的行为。现在假设我们有这么一个元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'br'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们想要交换一下这些children的顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'br'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>之后会发生什么呢？</p>\n<p>当<code>diffing</code>的时候，如果React在检查<code>props.children</code>下的数组时，按顺序去对比数组内元素的话：index 0将与index 0进行比较，index 1和index 1，等等。对于每一次对比，React会使用之前提过的diff规则。在我们的例子里，它认为<code>div</code>成为一个<code>span</code>，那么就会运用到情景3。这样不是很有效率的：想象一下，我们已经从1000行中删除了第一行。React将不得不“更新”剩余的999个子项，因为按index去对比的话，内容从第一条开始就不相同了。</p>\n<p>幸运的是，React有一个<code>内置的方法（built-in）</code>来解决这个问题。如果一个元素有一个<code>key</code>属性，那么元素将按<code>key</code>而不是<code>index</code>来比较。只要<code>key</code>是唯一的，React就会移动元素，而不是将它们从DOM树中移除然后再将它们放回（这个过程在React里叫mounting和unmounting）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [ <span class=\"comment\">// Now React will look on key, not index</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'div'</span>, <span class=\"attr\">key</span>: <span class=\"string\">'div'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'span'</span>, <span class=\"attr\">key</span>: <span class=\"string\">'span'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'br'</span>, <span class=\"attr\">key</span>: <span class=\"string\">'bt'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"当state发生了改变\"><a href=\"#当state发生了改变\" class=\"headerlink\" title=\"当state发生了改变\"></a>当state发生了改变</h2><p>到目前为止，我们只聊了下React哲学里面的<code>props</code>部分，却忽视了另外很重要的一部分<code>state</code>。下面是一个简单的<code>stateful</code>组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">    counter: <span class=\"keyword\">this</span>.state.counter + <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.increment&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &#123;'Counter: ' + this.state.counter&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>state</code>对象里，我们有一个key<code>counter</code>。点击按钮时，这个值会增加，然后按钮的文本也会发生相应的改变。但是，当我们这样做时，DOM中发生了什么？哪部分将被重新计算和更新？</p>\n<p>调用<code>this.setState</code>会导致<code>re-render</code>（重新渲染），但不会影响到整个页面，而只会影响组件本身及其children组件。父母和兄弟姐妹都不会受到影响。当我们有一个层级很深的组件链时，这会让状态更新变得非常方便，因为我们只需要重绘(<code>redraw</code>)它的一部分。</p>\n<h2 id=\"把问题说清楚\"><a href=\"#把问题说清楚\" class=\"headerlink\" title=\"把问题说清楚\"></a>把问题说清楚</h2><p>我们准备了一个<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/before.html\" target=\"_blank\" rel=\"noopener\">小demo</a>，以便你可以在看到在“野蛮生长”的React编码方式下最常见的问题，后续我也告诉大家怎么去解决这些问题。你可以在<a href=\"https://github.com/iAdramelk/optimizing-react-demo\" target=\"_blank\" rel=\"noopener\">这里看看它的源代码</a>。你还需要<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">React Developer Tools</a>，请确保浏览器安装了它们。</p>\n<p>我们首先要看看的是，哪些元素以及什么时候导致Virtual DOM的更新。在浏览器的开发工具中，打开React面板并选择“Highlight Updates”复选框：</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/react_dev_tools.png\" alt=\"&quot;在Chrome中使用“突出显示更新”复选框选中DevTools&quot;\"></p>\n<p>现在尝试在表格中添加一行。如你所见，页面上的每个元素周围都会显示一个边框。这意味着每次添加一行时，React都在计算和比较整个虚拟DOM树。现在尝试点击一行内的counter按钮。你将看到<code>state</code>更新后虚拟DOM如何更新 —— 只有引用了<code>state key</code>的元素及其children受到影响。</p>\n<p>React DevTools会提示问题出在哪里，但不会告诉我们有关细节的信息：特别是所涉及的更新，是由<code>diffing</code>元素引起的？还是被挂载（<code>mounting</code>）或者被卸载（<code>unmounting</code>）了？要了解更多信息，我们需要使用React的内置<a href=\"https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab\" target=\"_blank\" rel=\"noopener\">分析器</a>（注意它不适用于生产模式）。</p>\n<p>添加<code>?react_perf</code>到应用的URL，然后转到Chrome DevTools中的“Performance”标签。点击“录制”（Record）并在表格上点击。添加一些row，更改一下counter，然后点击“停止”（Stop）。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/react_perf_tools.png\" alt=\"&quot;React DevTools的“Performance”选项卡&quot;\"></p>\n<p>在输出的结果中，我们关注“User timing”这项指标。放大时间轴直到看到“React Tree Reconciliation”这个组及其子项。这些就是我们组件的名称，它们旁边都写着[update]或[mount]。</p>\n<hr>\n<p><strong>我们的大部分性能问题都属于这两类问题之一。</strong></p>\n<hr>\n<p>无论是组件（还是从它分支的其他组件）出于某种原因都会在每次更新时re-mounted（慢），又或者我们在大型应用上执行对每个分支做diff，尽管这些组件并没有发生改变，我们不希望这些情况的发生。</p>\n<h2 id=\"优化我们的代码：Mounting-Unmounting\"><a href=\"#优化我们的代码：Mounting-Unmounting\" class=\"headerlink\" title=\"优化我们的代码：Mounting / Unmounting\"></a>优化我们的代码：Mounting / Unmounting</h2><p>现在，我们已经了解到当需要update Virtual Dom时，React是依据哪些规则去判断要不要更新，以及也知道了我们可以通过什么方式去追踪这些diff场景的背后发生了什么，我们终于准备好优化我们的代码了！首先，我们来看看mounts/unmounts。</p>\n<p>如果你能够注意到当一个元素包含的多个children，他们是由array组成的话，你可以实现十分显著的速度优化。</p>\n<p>我们来看看这个case：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;Message /&gt;</span><br><span class=\"line\">  &lt;Table /&gt;</span><br><span class=\"line\">  &lt;Footer /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在我们的Virtual DOM里这么表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Message &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Table &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Footer &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>这里有一个简单的<code>Message</code>例子，就是一个<code>div</code>写着一些简单的文本，和以及一个巨大的<code>Table</code>，比方说，超过1000行。它们（<code>Message</code>和<code>Table</code>）都是顶级<code>div</code>的子组件，所以它们被放置在父节点的<code>props.children</code>下，并且它们<code>key</code>都不会有。React甚至不会通过控制台警告我们要给每个<code>child</code>分配<code>key</code>，因为children正在<code>React.createElement</code>作为参数列表传递给父元素，而不是直接遍历一个数组。</p>\n<p>现在我们的用户已读了一个通知，<code>Message</code>（譬如新通知按钮）从DOM上移除。<code>Table</code>和<code>Footer</code>是剩下的全部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Table &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Footer &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>React会怎么处理呢？它会看作是一个array类型的children，现在少了第一项，从前第一项是<code>Message</code>现在是<code>Table</code>了，也没有<code>key</code>作为索引，比较<code>type</code>的时候又发现它们俩不是同一个function或者class的同一个实例，于是会把整个<code>Table</code>unmount，然后在mount回去，渲染它的1000+行子数据。</p>\n<p>因此，你可以给每个component添加唯一的<code>key</code>（但在目特殊的case下，使用key并不是最佳选择），或者采用更聪明的小技巧：使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\" target=\"_blank\" rel=\"noopener\">短路求值</a>（又名“最小化求值”），这是JavaScript和许多其他现代语言的特性。看：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using a boolean trick</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;isShown &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Message</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Table</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Footer</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>虽然<code>Message</code>会离开屏幕，父元素<code>div</code>的<code>props.children</code>仍然会拥有三个元素，<code>children[0]</code>具有一个值<code>false</code>（一个布尔值）。请记住<code>true, false, null, undefined</code>是虚拟DOM对象<code>type</code>属性的允许值，我们最终得到了类似的结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    <span class=\"literal\">false</span>, <span class=\"comment\">//  isShown &amp;&amp; &lt;Message /&gt; evaluates to false</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Table &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: Footer &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>因此，有没有<code>Message</code>组件，我们的索引值都不会改变，<code>Table</code>当然仍然会跟<code>Table</code>比较（当<code>type</code>是一个函数或类的引用时，diff比较的成本还是会有的），但仅仅比较虚拟DOM的成本，通常比“删除DOM节点”并“从0开始创建”它们要来得快。</p>\n<p>现在我们来看看更多的东西。大家都挺喜欢用HOC的，高阶组件是一个将组件作为参数，执行某些操作，最后返回另外一个不同功能的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withName</span>(<span class=\"params\">SomeComponent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Computing name, possibly expensive...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SomeComponent</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">name</span>=<span class=\"string\">&#123;name&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这是一种常见的模式，但你需要小心。如果我们这么写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>() </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Creates a new instance on each render</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ComponentWithName = withName(SomeComponent);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SomeComponentWithName</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们在父节点的<code>render</code>方法内部创建一个HOC。当我们重新渲染（<code>re-render</code>）树时，虚拟DOM是这样子的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// On first render:</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type: ComponentWithName,</span><br><span class=\"line\">  props: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// On second render:</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type: ComponentWithName, <span class=\"comment\">// Same name, but different instance</span></span><br><span class=\"line\">  props: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，React会对<code>ComponentWithName</code>这个实例做diff，但由于此时同名引用了不同的实例，因此全等比较（triple equal）失败，一个完整的re-mount会发生（整个节点换掉），而不是调整属性值或顺序。注意它也会导致状态丢失，<a href=\"https://github.com/facebook/react/blob/044015760883d03f060301a15beef17909abbf71/docs/docs/higher-order-components.md#dont-use-hocs-inside-the-render-method\" target=\"_blank\" rel=\"noopener\">如此处所述</a>。幸运的是，这很容易解决，你需要始终在<code>render</code>外面创建一个HOC：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Creates a new instance just once</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ComponentWithName = withName(Component);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>() </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentWithName</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"优化我的代码：Updating\"><a href=\"#优化我的代码：Updating\" class=\"headerlink\" title=\"优化我的代码：Updating\"></a>优化我的代码：Updating</h2><p>现在我们可以确保在非必要的时候，不做re-mount的事情了。然而，对位于DOM树根部附近（层级越上面的元素）的组件所做的任何更改都会导致其所有children的diffing和调整（<code>reconciliation</code>）。在层级很多、结构复杂的应用里，这些成本很昂贵，但经常是可以避免的。</p>\n<hr>\n<p><strong>如果有一种方法可以告诉React你不用来检查这个分支了，因为我们可以肯定那个分支不会有更新，那就太棒了！</strong></p>\n<hr>\n<p>这种方式是真的有的哈，它涉及一个built-in方法叫<code>shouldComponentUpdate</code>，它也是<a href=\"https://reactjs.org/docs/react-component.html#the-component-lifecycle\" target=\"_blank\" rel=\"noopener\">组件生命周期</a>的一部分。这个方法的调用时机：组件的<code>render</code>和组件接收到state或props的值的更新时。然后我们可以自由地将它们与我们当前的值进行比较，并决定是否更新我们的组件（返回<code>true</code>或<code>false</code>）。如果我们返回<code>false</code>，React将不会重新渲染组件，也不会检查它的所有子组件。</p>\n<p>通常来说，比较两个集合（set）<code>props</code>和<code>state</code>一个简单的浅层比较（shallow comparison）就足够了：如果顶层的值不同，我们不必接着比较了。浅比较不是JavaScript的一个特性，但有很多<a href=\"https://github.com/dashed/shallowequal\" target=\"_blank\" rel=\"noopener\">小而美的库</a>（<code>utilities</code>）可以让我们用上那么棒的功能。</p>\n<p>现在可以像这样编写我们的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableRow</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// will return true if new props/state are different from old ones</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; props, state &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !shallowequal(props, nextProps)</span><br><span class=\"line\">           &amp;&amp; !shallowequal(state, nextState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是你甚至都不需要自己写代码，因为React把这个特性内置在一个类<code>React.PureComponent</code>里面。它类似于  <code>React.Component</code>，只是<code>shouldComponentUpdate</code>已经为你实施了一个浅的<code>props</code>/<code>state</code>比较。</p>\n<p>这听起来很“不动脑”，在声明class继承（<code>extends</code>）的时候，把<code>Component</code>换成<code>PureComponent</code>就可以享受高效率。事实上，并不是这么“傻瓜”，看看这些例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Table</span><br><span class=\"line\">    <span class=\"comment\">// map returns a new instance of array so shallow comparison will fail</span></span><br><span class=\"line\">    rows=&#123;rows.map(<span class=\"comment\">/* ... */</span>)&#125;</span><br><span class=\"line\">    <span class=\"comment\">// object literal is always \"different\" from predecessor</span></span><br><span class=\"line\">    style=&#123; &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// arrow function is a new unnamed thing in the scope, so there will always be a full diffing</span></span><br><span class=\"line\">    onUpdate=&#123;() =&gt; &#123; <span class=\"comment\">/* ... */</span> &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的代码片段演示了三种最常见的反模式。尽量避免它们！</p>\n<hr>\n<p><strong>如果你能注意点，在render定义之外创建所有对象、数组和函数，并确保它们在各种调用间，不发生更改 —— 你是安全的。</strong></p>\n<hr>\n<p>你在<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/after.html\" target=\"_blank\" rel=\"noopener\">updated demo</a>，所有table的rows都被“净化”（<code>purified</code>）过，你可以看到<code>PureComponent</code>的表现了。如果你在React DevTools中打开“Highlight Updates”，你会注意到只有表格本身和新行在插入时会触发<code>render</code>，其他的行保持不变。</p>\n<p>[译者说：为了便于大家理解<code>purified</code>，译者在下面插入了原文demo的一段代码]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableRow</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> React.createElement(<span class=\"string\">'tr'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'row'</span> &#125;,</span><br><span class=\"line\">      React.createElement(<span class=\"string\">'td'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cell'</span> &#125;, <span class=\"keyword\">this</span>.props.title),</span><br><span class=\"line\">      React.createElement(<span class=\"string\">'td'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'cell'</span> &#125;, React.createElement(Button)),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>不过，如果你迫不及待地all in PureComponent，在应用里到处都用的话 —— 控制住你自己！</p>\n<p>shallow比较两组<code>props</code>和<code>state</code>不是免费的，对于大多数基本组件来说，甚至都不值得：<code>shallowCompare</code>比<code>diffing</code>算法需要耗费更多的时间。</p>\n<p>使用这个经验法则：pure component适用于复杂的表单和表格，但它们通常会减慢简单元素（按钮、图标）的效率。</p>\n<hr>\n<p>感谢你的阅读！现在你已准备好将这些见解应用到你的应用程序中。可以使用我们的小demo（<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/after.html\" target=\"_blank\" rel=\"noopener\">用了</a>或<a href=\"https://iadramelk.github.io/optimizing-react-demo/dist/before.html\" target=\"_blank\" rel=\"noopener\">没有用</a>PureComponent）的<a href=\"https://github.com/iAdramelk/optimizing-react-demo\" target=\"_blank\" rel=\"noopener\">仓库</a>作为你的实验的起点。此外，请继续关注本系列的下一部分，我们计划涵盖Redux并优化你的数据，目标是提高整个应用的总体性能。</p>\n<h2 id=\"译者说\"><a href=\"#译者说\" class=\"headerlink\" title=\"译者说\"></a>译者说</h2><p>正如原文末所说，Alex和Andy后续会继续写一个关于整体性能的系列，包括核心React和Redux等，我也会继续跟踪这个系列的文章，到时po到我的<a href=\"http://wuyuying.com/blog/\">个人博客</a>和知乎专栏<a href=\"https://zhuanlan.zhihu.com/front-end-thinking\" target=\"_blank\" rel=\"noopener\">《集异璧》</a>，感兴趣的同学们可以关注一下哈 ：）</p>\n<p>欢迎对本文的翻译质量、内容的各种讨论。若有表述不当，欢迎斧正。</p>\n<p>2018.05.13，晴，杭州滨江<br>Yuying Wu</p>\n"},{"title":"人人都有好工作 - 简历篇","id":"66","date":"2014-12-24T12:04:21.000Z","_content":"\n最近 @猩爷 在考虑换工作的事宜，我刚好看到这本《人人都有好工作》，里面有一章专门介绍哪些内容应该出现在简历中，而哪些不应该，摘录下来，共勉之；\n<!--more-->\n* * *\n\n一、你有必要准备三种不同格式的简历\n\n*   为多数应聘公司准备的word文档\n*   纯文本文件\n*   你的个人网页\n\n* * *\n\n二、准备多份简历\n\n*   不同的工作以及不同的公司都会对应聘者有着不同的要求。即便你在同一家公司同时申请的两个岗位都叫做“应用程序员”，这依然代表了两份不同的工作。\n*   简历必须是写给它的特定读者看的，它一定得是为你正在应聘的公司以及你所追求的工作量身定做的。\n*   应聘职位的具体说明也将直接影响你的简历内容。\n*   如果你现在还没有一份像样的简历，那就赶紧动手开始写吧，而且还要记得时不时地重新审视一遍你的作品。随时准备好更新资料丰富简历，也准备好删除那些和当前的情况不再相关的内容。要把简历当成是一个花园，栽种新鲜的植物，铲除那些枯萎的。\n\n* * *\n\n三、简历至少包括以下内容\n\n*   联系方式\n\n    *   不能把当前工作的电话写进联系电话栏\n    *   邮箱必须是个人邮箱地址\n\n*   职业自述\n\n    *   关于找工作（没有绝对标准的答案）\n    *   阅历小结【详见[这里](#exp)】\n    *   两三种专业技能【详见[这里](#pro)】\n    *   学历/证书（如果这些内容可以让你加分的话）【详见[这里](#edu)】\n\n*   工作经历【详见[这里](#work)】\n*   教育背景\n\n    *   教育背景部分的基本内容就是要将你所完成的高等教育机构名称，以及你所获得的学位分别列举出来。\n\n*   工作之外的其他相关成就（如果你觉得自己的工作经历还不够丰富）\n\n    *   请保证你所列出的奖项都是很特别且很有意义的。\n\n*   关键词及技能列表\n\n* * *\n\n四、不需要出现的内容\n\n*   照片\n*   职业目标，无意义\n\n    *   职业目标：赢取信息技术领域一份具有挑战性的工作，并能利用自己的才能为行业发展做出贡献。\n\n*   兴趣爱好\n*   “如要求可提供相关证明”\n<div id=\"exp\"></div>\n\n*   无关的工作经验\n\n    *   去麦当劳打工，并没有为日后成为一名程序员有什么贡献\n\n* * *\n\n五、阅历小结\n\n在工作经验的部分，你所要着重阐述的是自己在某个领域工作了多少年，这个领域最好能具体到什么行业的哪一种工作，举个例子：\n\n*   3年财富500强公司Solaris系统管理员经验\n*   7年C/C++语言数据库自动化软件开发经验\n*   5年用户界面设计经验\n这些语句中的重点可以根据你的求职目标进行修改。随着你应聘的工作的不同，需要在简历中强调的工作背景侧重点也将改变。\n<div id=\"pro\"></div>\n譬如你曾为nokia工作，而目前要应聘的是moto的手机业务部，那么就需要强调一下你在这个领域的经验技能：\n\n*   5年用户界面设计经验，其中4年设计手机用户界面\n\n* * *\n\n六、主要专业技能\n\n你需要在专业技能部分阐述自己的最高技能是什么，如果可能就加上量化的陈述。\n<div id=\"edu\"></div>\n\n*   大量的Ruby语言经验，两年Rails经验\n*   专业Solaris系统管理员，支持200多个工位\n*   3~8人的测试和开发团队的管理经验\n*   3年FrameMaker使用经验，手册长度在100至300页之间\n*   对上百名学员进行过10多门课程的培训\n\n* * *\n\n七、其他技能\n\n也许你还有一些别的技能可以写进简历，当然那只是针对某家具体的公司。\n<div id=\"work\"></div>\n\n*   可流利使用西班牙语，并能翻译程序错误信息\n*   活跃于开源软件开发项目，曾担任Perl 6项目经理\n\n* * *\n\n八、工作经历\n\n*   公司行\n\n    *   公司名称\n    *   公司简介（除非公司很出名，不然加一小段公司简介有助于面试官了解你的工作内容）\n    *   工作时间\n\n*   职位，以及任职期间取得的成就\n*   在说明中加上一些数字能起到锦上添花的作用。如果你能把创造的工作价值用数据量化，这也将给所出示的内容价值加分。即使这个项目并不是依靠你个人的力量完成，这依然体现了你自身参与的价值。（请确保你能在面试时将写在简历中的数据流畅的说出来，而不是支支吾吾）\n\n    *   在6个月之内使网站流量增加50%（同时列举你为此采取的行动）\n    *   带领4~6名程序员的团队\n    *   创建任务跟踪系统，减少了40%的进度拖延现象\n    *   新安装路由器提高流量达25%，为客服减少了20%关于网络响应问题的投诉\n    *   在三个月之内将“打开”状态的back log传票从500张减至20张\n\n* * *\n\n九、如果你是刚毕业、没有专业经验的新人怎么办？\n\n将你的学习经历以及平时的兴趣爱好写进职业描述部分，然后加上一点你期望的发展方向。\n\n*   刚毕业于XXX大学XXX专业，在校平均成绩3.43分\n*   2年开源项目工作经验，熟练使用Perl6、Ruby on Rails\n*   丰富的课程项目小组领导经验，带领2~6人学生团队\n*   期望加入小型创业公司或从事音乐或语音录制工作【表明发展意向很重要】\n\n* * *\n\n十、开源项目为职业生涯灌注力量\n\n开源软件不仅仅为互联网注入一股新鲜力量，它也可以成为职业生涯的爆发点，特别是对于一个职场新人来说。它能为刚开始找工作的你提供至关重要的工作经验以及工作样例。\n\n着手一个开源软件（OSS）项目，无论这个项目是你自主开发的还是原本已有的，对你来说都是一份实实在在的工作经验。这既能显示你有编写代码的能力，又表明你能很好地和团队合作、与他人相处。而且，这些工作经历是雇主可以找到和验证的。\n\n开源项目也让你能有真实技能范例可随时给别人展示。每次演讲会上，当我说到准备好一份相关工作成果去面试时，总能听到一些人的抱怨说：“我没法带工作样例去面试，因为那些代码都是归原公司所以没法随随便便示人。”这很糟糕，因为这样会让他们失去一些求职成功的机会。而开源软件项目就是很理想的解决办法，你可以随时把你的绝活展示给大家。\n\n你并不需要为开源软件做出特别突出的贡献，而且你能做的也不一定非得是写代码。你也可以贡献文档，为维基百科的某一个条目添加文章，或者仅仅在自己参与的邮件群组中回答他人提出的问题。关键只是你用一种可以证明自己的方式为一些实际编程项目贡献力量。","source":"_posts/resume-tips.md","raw":"---\ntitle: 人人都有好工作 - 简历篇\ntags:\n  - job\n  - reading\n  - resume\nid: 66\ncategories:\n  - reading\ndate: 2014-12-24 20:04:21\n---\n\n最近 @猩爷 在考虑换工作的事宜，我刚好看到这本《人人都有好工作》，里面有一章专门介绍哪些内容应该出现在简历中，而哪些不应该，摘录下来，共勉之；\n<!--more-->\n* * *\n\n一、你有必要准备三种不同格式的简历\n\n*   为多数应聘公司准备的word文档\n*   纯文本文件\n*   你的个人网页\n\n* * *\n\n二、准备多份简历\n\n*   不同的工作以及不同的公司都会对应聘者有着不同的要求。即便你在同一家公司同时申请的两个岗位都叫做“应用程序员”，这依然代表了两份不同的工作。\n*   简历必须是写给它的特定读者看的，它一定得是为你正在应聘的公司以及你所追求的工作量身定做的。\n*   应聘职位的具体说明也将直接影响你的简历内容。\n*   如果你现在还没有一份像样的简历，那就赶紧动手开始写吧，而且还要记得时不时地重新审视一遍你的作品。随时准备好更新资料丰富简历，也准备好删除那些和当前的情况不再相关的内容。要把简历当成是一个花园，栽种新鲜的植物，铲除那些枯萎的。\n\n* * *\n\n三、简历至少包括以下内容\n\n*   联系方式\n\n    *   不能把当前工作的电话写进联系电话栏\n    *   邮箱必须是个人邮箱地址\n\n*   职业自述\n\n    *   关于找工作（没有绝对标准的答案）\n    *   阅历小结【详见[这里](#exp)】\n    *   两三种专业技能【详见[这里](#pro)】\n    *   学历/证书（如果这些内容可以让你加分的话）【详见[这里](#edu)】\n\n*   工作经历【详见[这里](#work)】\n*   教育背景\n\n    *   教育背景部分的基本内容就是要将你所完成的高等教育机构名称，以及你所获得的学位分别列举出来。\n\n*   工作之外的其他相关成就（如果你觉得自己的工作经历还不够丰富）\n\n    *   请保证你所列出的奖项都是很特别且很有意义的。\n\n*   关键词及技能列表\n\n* * *\n\n四、不需要出现的内容\n\n*   照片\n*   职业目标，无意义\n\n    *   职业目标：赢取信息技术领域一份具有挑战性的工作，并能利用自己的才能为行业发展做出贡献。\n\n*   兴趣爱好\n*   “如要求可提供相关证明”\n<div id=\"exp\"></div>\n\n*   无关的工作经验\n\n    *   去麦当劳打工，并没有为日后成为一名程序员有什么贡献\n\n* * *\n\n五、阅历小结\n\n在工作经验的部分，你所要着重阐述的是自己在某个领域工作了多少年，这个领域最好能具体到什么行业的哪一种工作，举个例子：\n\n*   3年财富500强公司Solaris系统管理员经验\n*   7年C/C++语言数据库自动化软件开发经验\n*   5年用户界面设计经验\n这些语句中的重点可以根据你的求职目标进行修改。随着你应聘的工作的不同，需要在简历中强调的工作背景侧重点也将改变。\n<div id=\"pro\"></div>\n譬如你曾为nokia工作，而目前要应聘的是moto的手机业务部，那么就需要强调一下你在这个领域的经验技能：\n\n*   5年用户界面设计经验，其中4年设计手机用户界面\n\n* * *\n\n六、主要专业技能\n\n你需要在专业技能部分阐述自己的最高技能是什么，如果可能就加上量化的陈述。\n<div id=\"edu\"></div>\n\n*   大量的Ruby语言经验，两年Rails经验\n*   专业Solaris系统管理员，支持200多个工位\n*   3~8人的测试和开发团队的管理经验\n*   3年FrameMaker使用经验，手册长度在100至300页之间\n*   对上百名学员进行过10多门课程的培训\n\n* * *\n\n七、其他技能\n\n也许你还有一些别的技能可以写进简历，当然那只是针对某家具体的公司。\n<div id=\"work\"></div>\n\n*   可流利使用西班牙语，并能翻译程序错误信息\n*   活跃于开源软件开发项目，曾担任Perl 6项目经理\n\n* * *\n\n八、工作经历\n\n*   公司行\n\n    *   公司名称\n    *   公司简介（除非公司很出名，不然加一小段公司简介有助于面试官了解你的工作内容）\n    *   工作时间\n\n*   职位，以及任职期间取得的成就\n*   在说明中加上一些数字能起到锦上添花的作用。如果你能把创造的工作价值用数据量化，这也将给所出示的内容价值加分。即使这个项目并不是依靠你个人的力量完成，这依然体现了你自身参与的价值。（请确保你能在面试时将写在简历中的数据流畅的说出来，而不是支支吾吾）\n\n    *   在6个月之内使网站流量增加50%（同时列举你为此采取的行动）\n    *   带领4~6名程序员的团队\n    *   创建任务跟踪系统，减少了40%的进度拖延现象\n    *   新安装路由器提高流量达25%，为客服减少了20%关于网络响应问题的投诉\n    *   在三个月之内将“打开”状态的back log传票从500张减至20张\n\n* * *\n\n九、如果你是刚毕业、没有专业经验的新人怎么办？\n\n将你的学习经历以及平时的兴趣爱好写进职业描述部分，然后加上一点你期望的发展方向。\n\n*   刚毕业于XXX大学XXX专业，在校平均成绩3.43分\n*   2年开源项目工作经验，熟练使用Perl6、Ruby on Rails\n*   丰富的课程项目小组领导经验，带领2~6人学生团队\n*   期望加入小型创业公司或从事音乐或语音录制工作【表明发展意向很重要】\n\n* * *\n\n十、开源项目为职业生涯灌注力量\n\n开源软件不仅仅为互联网注入一股新鲜力量，它也可以成为职业生涯的爆发点，特别是对于一个职场新人来说。它能为刚开始找工作的你提供至关重要的工作经验以及工作样例。\n\n着手一个开源软件（OSS）项目，无论这个项目是你自主开发的还是原本已有的，对你来说都是一份实实在在的工作经验。这既能显示你有编写代码的能力，又表明你能很好地和团队合作、与他人相处。而且，这些工作经历是雇主可以找到和验证的。\n\n开源项目也让你能有真实技能范例可随时给别人展示。每次演讲会上，当我说到准备好一份相关工作成果去面试时，总能听到一些人的抱怨说：“我没法带工作样例去面试，因为那些代码都是归原公司所以没法随随便便示人。”这很糟糕，因为这样会让他们失去一些求职成功的机会。而开源软件项目就是很理想的解决办法，你可以随时把你的绝活展示给大家。\n\n你并不需要为开源软件做出特别突出的贡献，而且你能做的也不一定非得是写代码。你也可以贡献文档，为维基百科的某一个条目添加文章，或者仅仅在自己参与的邮件群组中回答他人提出的问题。关键只是你用一种可以证明自己的方式为一些实际编程项目贡献力量。","slug":"resume-tips","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9r003jzvr3zv6sd8xb","content":"<p>最近 @猩爷 在考虑换工作的事宜，我刚好看到这本《人人都有好工作》，里面有一章专门介绍哪些内容应该出现在简历中，而哪些不应该，摘录下来，共勉之；<br><a id=\"more\"></a></p>\n<hr>\n<p>一、你有必要准备三种不同格式的简历</p>\n<ul>\n<li>为多数应聘公司准备的word文档</li>\n<li>纯文本文件</li>\n<li>你的个人网页</li>\n</ul>\n<hr>\n<p>二、准备多份简历</p>\n<ul>\n<li>不同的工作以及不同的公司都会对应聘者有着不同的要求。即便你在同一家公司同时申请的两个岗位都叫做“应用程序员”，这依然代表了两份不同的工作。</li>\n<li>简历必须是写给它的特定读者看的，它一定得是为你正在应聘的公司以及你所追求的工作量身定做的。</li>\n<li>应聘职位的具体说明也将直接影响你的简历内容。</li>\n<li>如果你现在还没有一份像样的简历，那就赶紧动手开始写吧，而且还要记得时不时地重新审视一遍你的作品。随时准备好更新资料丰富简历，也准备好删除那些和当前的情况不再相关的内容。要把简历当成是一个花园，栽种新鲜的植物，铲除那些枯萎的。</li>\n</ul>\n<hr>\n<p>三、简历至少包括以下内容</p>\n<ul>\n<li><p>联系方式</p>\n<ul>\n<li>不能把当前工作的电话写进联系电话栏</li>\n<li>邮箱必须是个人邮箱地址</li>\n</ul>\n</li>\n<li><p>职业自述</p>\n<ul>\n<li>关于找工作（没有绝对标准的答案）</li>\n<li>阅历小结【详见<a href=\"#exp\">这里</a>】</li>\n<li>两三种专业技能【详见<a href=\"#pro\">这里</a>】</li>\n<li>学历/证书（如果这些内容可以让你加分的话）【详见<a href=\"#edu\">这里</a>】</li>\n</ul>\n</li>\n<li><p>工作经历【详见<a href=\"#work\">这里</a>】</p>\n</li>\n<li><p>教育背景</p>\n<ul>\n<li>教育背景部分的基本内容就是要将你所完成的高等教育机构名称，以及你所获得的学位分别列举出来。</li>\n</ul>\n</li>\n<li><p>工作之外的其他相关成就（如果你觉得自己的工作经历还不够丰富）</p>\n<ul>\n<li>请保证你所列出的奖项都是很特别且很有意义的。</li>\n</ul>\n</li>\n<li><p>关键词及技能列表</p>\n</li>\n</ul>\n<hr>\n<p>四、不需要出现的内容</p>\n<ul>\n<li>照片</li>\n<li><p>职业目标，无意义</p>\n<ul>\n<li>职业目标：赢取信息技术领域一份具有挑战性的工作，并能利用自己的才能为行业发展做出贡献。</li>\n</ul>\n</li>\n<li><p>兴趣爱好</p>\n</li>\n<li><p>“如要求可提供相关证明”</p>\n<div id=\"exp\"></div>\n</li>\n<li><p>无关的工作经验</p>\n<ul>\n<li>去麦当劳打工，并没有为日后成为一名程序员有什么贡献</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>五、阅历小结</p>\n<p>在工作经验的部分，你所要着重阐述的是自己在某个领域工作了多少年，这个领域最好能具体到什么行业的哪一种工作，举个例子：</p>\n<ul>\n<li>3年财富500强公司Solaris系统管理员经验</li>\n<li>7年C/C++语言数据库自动化软件开发经验</li>\n<li><p>5年用户界面设计经验<br>这些语句中的重点可以根据你的求职目标进行修改。随着你应聘的工作的不同，需要在简历中强调的工作背景侧重点也将改变。<br><div id=\"pro\"></div><br>譬如你曾为nokia工作，而目前要应聘的是moto的手机业务部，那么就需要强调一下你在这个领域的经验技能：</p>\n</li>\n<li><p>5年用户界面设计经验，其中4年设计手机用户界面</p>\n</li>\n</ul>\n<hr>\n<p>六、主要专业技能</p>\n<p>你需要在专业技能部分阐述自己的最高技能是什么，如果可能就加上量化的陈述。</p>\n<div id=\"edu\"></div>\n\n<ul>\n<li>大量的Ruby语言经验，两年Rails经验</li>\n<li>专业Solaris系统管理员，支持200多个工位</li>\n<li>3~8人的测试和开发团队的管理经验</li>\n<li>3年FrameMaker使用经验，手册长度在100至300页之间</li>\n<li>对上百名学员进行过10多门课程的培训</li>\n</ul>\n<hr>\n<p>七、其他技能</p>\n<p>也许你还有一些别的技能可以写进简历，当然那只是针对某家具体的公司。</p>\n<div id=\"work\"></div>\n\n<ul>\n<li>可流利使用西班牙语，并能翻译程序错误信息</li>\n<li>活跃于开源软件开发项目，曾担任Perl 6项目经理</li>\n</ul>\n<hr>\n<p>八、工作经历</p>\n<ul>\n<li><p>公司行</p>\n<ul>\n<li>公司名称</li>\n<li>公司简介（除非公司很出名，不然加一小段公司简介有助于面试官了解你的工作内容）</li>\n<li>工作时间</li>\n</ul>\n</li>\n<li><p>职位，以及任职期间取得的成就</p>\n</li>\n<li><p>在说明中加上一些数字能起到锦上添花的作用。如果你能把创造的工作价值用数据量化，这也将给所出示的内容价值加分。即使这个项目并不是依靠你个人的力量完成，这依然体现了你自身参与的价值。（请确保你能在面试时将写在简历中的数据流畅的说出来，而不是支支吾吾）</p>\n<ul>\n<li>在6个月之内使网站流量增加50%（同时列举你为此采取的行动）</li>\n<li>带领4~6名程序员的团队</li>\n<li>创建任务跟踪系统，减少了40%的进度拖延现象</li>\n<li>新安装路由器提高流量达25%，为客服减少了20%关于网络响应问题的投诉</li>\n<li>在三个月之内将“打开”状态的back log传票从500张减至20张</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>九、如果你是刚毕业、没有专业经验的新人怎么办？</p>\n<p>将你的学习经历以及平时的兴趣爱好写进职业描述部分，然后加上一点你期望的发展方向。</p>\n<ul>\n<li>刚毕业于XXX大学XXX专业，在校平均成绩3.43分</li>\n<li>2年开源项目工作经验，熟练使用Perl6、Ruby on Rails</li>\n<li>丰富的课程项目小组领导经验，带领2~6人学生团队</li>\n<li>期望加入小型创业公司或从事音乐或语音录制工作【表明发展意向很重要】</li>\n</ul>\n<hr>\n<p>十、开源项目为职业生涯灌注力量</p>\n<p>开源软件不仅仅为互联网注入一股新鲜力量，它也可以成为职业生涯的爆发点，特别是对于一个职场新人来说。它能为刚开始找工作的你提供至关重要的工作经验以及工作样例。</p>\n<p>着手一个开源软件（OSS）项目，无论这个项目是你自主开发的还是原本已有的，对你来说都是一份实实在在的工作经验。这既能显示你有编写代码的能力，又表明你能很好地和团队合作、与他人相处。而且，这些工作经历是雇主可以找到和验证的。</p>\n<p>开源项目也让你能有真实技能范例可随时给别人展示。每次演讲会上，当我说到准备好一份相关工作成果去面试时，总能听到一些人的抱怨说：“我没法带工作样例去面试，因为那些代码都是归原公司所以没法随随便便示人。”这很糟糕，因为这样会让他们失去一些求职成功的机会。而开源软件项目就是很理想的解决办法，你可以随时把你的绝活展示给大家。</p>\n<p>你并不需要为开源软件做出特别突出的贡献，而且你能做的也不一定非得是写代码。你也可以贡献文档，为维基百科的某一个条目添加文章，或者仅仅在自己参与的邮件群组中回答他人提出的问题。关键只是你用一种可以证明自己的方式为一些实际编程项目贡献力量。</p>\n","site":{"data":{}},"excerpt":"<p>最近 @猩爷 在考虑换工作的事宜，我刚好看到这本《人人都有好工作》，里面有一章专门介绍哪些内容应该出现在简历中，而哪些不应该，摘录下来，共勉之；<br>","more":"</p>\n<hr>\n<p>一、你有必要准备三种不同格式的简历</p>\n<ul>\n<li>为多数应聘公司准备的word文档</li>\n<li>纯文本文件</li>\n<li>你的个人网页</li>\n</ul>\n<hr>\n<p>二、准备多份简历</p>\n<ul>\n<li>不同的工作以及不同的公司都会对应聘者有着不同的要求。即便你在同一家公司同时申请的两个岗位都叫做“应用程序员”，这依然代表了两份不同的工作。</li>\n<li>简历必须是写给它的特定读者看的，它一定得是为你正在应聘的公司以及你所追求的工作量身定做的。</li>\n<li>应聘职位的具体说明也将直接影响你的简历内容。</li>\n<li>如果你现在还没有一份像样的简历，那就赶紧动手开始写吧，而且还要记得时不时地重新审视一遍你的作品。随时准备好更新资料丰富简历，也准备好删除那些和当前的情况不再相关的内容。要把简历当成是一个花园，栽种新鲜的植物，铲除那些枯萎的。</li>\n</ul>\n<hr>\n<p>三、简历至少包括以下内容</p>\n<ul>\n<li><p>联系方式</p>\n<ul>\n<li>不能把当前工作的电话写进联系电话栏</li>\n<li>邮箱必须是个人邮箱地址</li>\n</ul>\n</li>\n<li><p>职业自述</p>\n<ul>\n<li>关于找工作（没有绝对标准的答案）</li>\n<li>阅历小结【详见<a href=\"#exp\">这里</a>】</li>\n<li>两三种专业技能【详见<a href=\"#pro\">这里</a>】</li>\n<li>学历/证书（如果这些内容可以让你加分的话）【详见<a href=\"#edu\">这里</a>】</li>\n</ul>\n</li>\n<li><p>工作经历【详见<a href=\"#work\">这里</a>】</p>\n</li>\n<li><p>教育背景</p>\n<ul>\n<li>教育背景部分的基本内容就是要将你所完成的高等教育机构名称，以及你所获得的学位分别列举出来。</li>\n</ul>\n</li>\n<li><p>工作之外的其他相关成就（如果你觉得自己的工作经历还不够丰富）</p>\n<ul>\n<li>请保证你所列出的奖项都是很特别且很有意义的。</li>\n</ul>\n</li>\n<li><p>关键词及技能列表</p>\n</li>\n</ul>\n<hr>\n<p>四、不需要出现的内容</p>\n<ul>\n<li>照片</li>\n<li><p>职业目标，无意义</p>\n<ul>\n<li>职业目标：赢取信息技术领域一份具有挑战性的工作，并能利用自己的才能为行业发展做出贡献。</li>\n</ul>\n</li>\n<li><p>兴趣爱好</p>\n</li>\n<li><p>“如要求可提供相关证明”</p>\n<div id=\"exp\"></div>\n</li>\n<li><p>无关的工作经验</p>\n<ul>\n<li>去麦当劳打工，并没有为日后成为一名程序员有什么贡献</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>五、阅历小结</p>\n<p>在工作经验的部分，你所要着重阐述的是自己在某个领域工作了多少年，这个领域最好能具体到什么行业的哪一种工作，举个例子：</p>\n<ul>\n<li>3年财富500强公司Solaris系统管理员经验</li>\n<li>7年C/C++语言数据库自动化软件开发经验</li>\n<li><p>5年用户界面设计经验<br>这些语句中的重点可以根据你的求职目标进行修改。随着你应聘的工作的不同，需要在简历中强调的工作背景侧重点也将改变。<br><div id=\"pro\"></div><br>譬如你曾为nokia工作，而目前要应聘的是moto的手机业务部，那么就需要强调一下你在这个领域的经验技能：</p>\n</li>\n<li><p>5年用户界面设计经验，其中4年设计手机用户界面</p>\n</li>\n</ul>\n<hr>\n<p>六、主要专业技能</p>\n<p>你需要在专业技能部分阐述自己的最高技能是什么，如果可能就加上量化的陈述。</p>\n<div id=\"edu\"></div>\n\n<ul>\n<li>大量的Ruby语言经验，两年Rails经验</li>\n<li>专业Solaris系统管理员，支持200多个工位</li>\n<li>3~8人的测试和开发团队的管理经验</li>\n<li>3年FrameMaker使用经验，手册长度在100至300页之间</li>\n<li>对上百名学员进行过10多门课程的培训</li>\n</ul>\n<hr>\n<p>七、其他技能</p>\n<p>也许你还有一些别的技能可以写进简历，当然那只是针对某家具体的公司。</p>\n<div id=\"work\"></div>\n\n<ul>\n<li>可流利使用西班牙语，并能翻译程序错误信息</li>\n<li>活跃于开源软件开发项目，曾担任Perl 6项目经理</li>\n</ul>\n<hr>\n<p>八、工作经历</p>\n<ul>\n<li><p>公司行</p>\n<ul>\n<li>公司名称</li>\n<li>公司简介（除非公司很出名，不然加一小段公司简介有助于面试官了解你的工作内容）</li>\n<li>工作时间</li>\n</ul>\n</li>\n<li><p>职位，以及任职期间取得的成就</p>\n</li>\n<li><p>在说明中加上一些数字能起到锦上添花的作用。如果你能把创造的工作价值用数据量化，这也将给所出示的内容价值加分。即使这个项目并不是依靠你个人的力量完成，这依然体现了你自身参与的价值。（请确保你能在面试时将写在简历中的数据流畅的说出来，而不是支支吾吾）</p>\n<ul>\n<li>在6个月之内使网站流量增加50%（同时列举你为此采取的行动）</li>\n<li>带领4~6名程序员的团队</li>\n<li>创建任务跟踪系统，减少了40%的进度拖延现象</li>\n<li>新安装路由器提高流量达25%，为客服减少了20%关于网络响应问题的投诉</li>\n<li>在三个月之内将“打开”状态的back log传票从500张减至20张</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>九、如果你是刚毕业、没有专业经验的新人怎么办？</p>\n<p>将你的学习经历以及平时的兴趣爱好写进职业描述部分，然后加上一点你期望的发展方向。</p>\n<ul>\n<li>刚毕业于XXX大学XXX专业，在校平均成绩3.43分</li>\n<li>2年开源项目工作经验，熟练使用Perl6、Ruby on Rails</li>\n<li>丰富的课程项目小组领导经验，带领2~6人学生团队</li>\n<li>期望加入小型创业公司或从事音乐或语音录制工作【表明发展意向很重要】</li>\n</ul>\n<hr>\n<p>十、开源项目为职业生涯灌注力量</p>\n<p>开源软件不仅仅为互联网注入一股新鲜力量，它也可以成为职业生涯的爆发点，特别是对于一个职场新人来说。它能为刚开始找工作的你提供至关重要的工作经验以及工作样例。</p>\n<p>着手一个开源软件（OSS）项目，无论这个项目是你自主开发的还是原本已有的，对你来说都是一份实实在在的工作经验。这既能显示你有编写代码的能力，又表明你能很好地和团队合作、与他人相处。而且，这些工作经历是雇主可以找到和验证的。</p>\n<p>开源项目也让你能有真实技能范例可随时给别人展示。每次演讲会上，当我说到准备好一份相关工作成果去面试时，总能听到一些人的抱怨说：“我没法带工作样例去面试，因为那些代码都是归原公司所以没法随随便便示人。”这很糟糕，因为这样会让他们失去一些求职成功的机会。而开源软件项目就是很理想的解决办法，你可以随时把你的绝活展示给大家。</p>\n<p>你并不需要为开源软件做出特别突出的贡献，而且你能做的也不一定非得是写代码。你也可以贡献文档，为维基百科的某一个条目添加文章，或者仅仅在自己参与的邮件群组中回答他人提出的问题。关键只是你用一种可以证明自己的方式为一些实际编程项目贡献力量。</p>"},{"title":"初探响应式设计","id":"119","date":"2015-05-20T13:54:14.000Z","_content":"\n作为一枚FE，现在才看响应式设计！？说起来不能更不好意思，之前都是听说，可能是工作中比较少机会用到，也没多少动力去学习。\n\n之前写无线页面（H5），常常会碰到在不同设备中，展示有所区别的case，其实也没有注意到，咦，这跟响应式设计有关。\n\n直到最近，专题项目太频繁了，FE人力同时开发PC和WAP页面，少说也得一周，大家都希望在这方向想想办法，释放下人力，那个时候“响应式设计”这个概念在我脑海里面闪过，于是自己也开始去学习、看书，而本文正是看完了[《响应式Web设计》](http://book.douban.com/subject/20390374/)写的，算是留下一点点读书的痕迹吧。\n<!--more-->\n\n首先，什么是响应式设计（RWD, Responsive Web Design）\n> 这个术语由伊桑马克特（Ethan Marcotte）提出。他在A List Apart发表了一篇开创性的文章，将三种已有的开发技巧（弹性网格布局、弹性图片、媒体和媒体查询）整合起来，并命名为响应式网页设计。\n然后，RWD能做什么？\n>  \n> 它是针对任意设备对网页内容进行完美布局的一种显示机制。相反，如果需要根据不同设备提供特定的内容和功能，那就需要一个真正的“手机版”网站。这种情况下，手机版网站会提供与桌面版网站完全不同的用户体验。\nOK，其实就我个人而言，读完这本书的最大收获是了解到媒体查询和流式布局的一些技巧，直接就用在工作项目上。\n\n举个栗子：[百度经验520专题活动](http://jingyan.baidu.com/z/2015-520/index.html)（手机浏览好吗~）\n\n![百度经验 | 520专题](http://cdn.sinacloud.net/woodysblog/rwd/qrcode.png \"百度经验 | 520专题\")\n\n对于一个那么“丰满”的页面，页面的元素、内容特别多，怎么破？按照我以前的做法都是用px去定宽定高，只针对用户量最大的屏幕大小去做适配，其他太大或者太小的屏幕，就“顾不上”了~\n\n而这次开发就有点响应式设计的意思了，优化如下，感觉在大部分设备上，看着都蛮舒服的 :)\n\n*   不同屏幕的元素展现自适应\n\n    *   字体大小改用em 【 1em = 16px 】\n    *   元素改用百分比去写宽高【 百分比宽度 = 目标元素宽度 / 上下文元素宽度 】\n\n*   媒体查询（利用max-height，针对屏幕较矮的设备，尤其是iphone4以及打开微信浏览器的iphone 5c）\n\n    *   根据内容优先的原则，隐藏了一些不必要的元素\n    *   必要元素，还是挤爆了屏幕，则对图片或者间距进行收缩\n@media (max-height: 510px) { bala bala ... }\n构建网站时，是优雅降级还是渐进增强？\n\n优雅降级：\n> 优雅降级指的是为现代浏览器制作网站，然后保证为某些老版本浏览器提供基本可用的体验。新特性在老版本浏览器中会降级，且一般会有一个分界点，声明不支持那些老掉牙的浏览器。有些时候用户也仅会被警告他们所使用的浏览器有问题，建议其更换（如“您的浏览器老得让人笑话——建议下载最新版浏览器！”）  \n\n渐进增强：  \n> 渐进增强与优雅降级恰好相反。渐进增强以恪守web标准的标签为基础，意味着它在所有浏览器中均可用。然后通过CSS样式和必要的Javascript来为更先进的浏览器提供渐进方式的增强体验。  \n    \n我自己是比较偏向“优雅降级”的。因为我们必须承认，目前浏览器还是很不统一，尤其是还有internet explorer 6之流，虽然我们有很多hack的方法/工具，去让这些老的浏览器看起来更像现代浏览器，但是我觉得大多数情况下，其实只需要提供基本可用体验即可，一来是兼容的成本比较高，二来是还在用老掉牙的用户们可能对酷炫效果的需求不高，不然早就升级了，对吧？（笑）\n\n另外的一些收获就是，知道了很多前端构建工具或者资源站点：\n\n*   [Respond.js](https://github.com/scottjehl/Respond/): A fast &amp; lightweight polyfill for min/max-width CSS3 Media Queries (for IE 6-8, and more)\n*   [prefixfree.js](https://github.com/LeaVerou/prefixfree): CSS3无前缀脚本，在搜索这个项目时，也发现了它的兄弟项目[animatable](http://leaverou.github.io/animatable/)，很好玩，animatable依赖prefixfree.js将CSS中各个属性的动画效果都展示出来了；\n*   [Modernizr](https://github.com/Modernizr/Modernizr): 为HMLT5和CSS3而生，基于渐进增强理论来开发的。Modernizr会为所有它检测过的特性添加class类，如果浏览器不支持某个特性，它就为该特性对应的类名加上“no-”的前缀，这样可用检测是否支持新特性，否则降级处理。\n","source":"_posts/rwd-first.md","raw":"---\ntitle: 初探响应式设计\ntags:\n  - Responsive Web Design\n  - rwd\nid: 119\ncategories:\n  - reading\n  - tech\ndate: 2015-05-20 21:54:14\n---\n\n作为一枚FE，现在才看响应式设计！？说起来不能更不好意思，之前都是听说，可能是工作中比较少机会用到，也没多少动力去学习。\n\n之前写无线页面（H5），常常会碰到在不同设备中，展示有所区别的case，其实也没有注意到，咦，这跟响应式设计有关。\n\n直到最近，专题项目太频繁了，FE人力同时开发PC和WAP页面，少说也得一周，大家都希望在这方向想想办法，释放下人力，那个时候“响应式设计”这个概念在我脑海里面闪过，于是自己也开始去学习、看书，而本文正是看完了[《响应式Web设计》](http://book.douban.com/subject/20390374/)写的，算是留下一点点读书的痕迹吧。\n<!--more-->\n\n首先，什么是响应式设计（RWD, Responsive Web Design）\n> 这个术语由伊桑马克特（Ethan Marcotte）提出。他在A List Apart发表了一篇开创性的文章，将三种已有的开发技巧（弹性网格布局、弹性图片、媒体和媒体查询）整合起来，并命名为响应式网页设计。\n然后，RWD能做什么？\n>  \n> 它是针对任意设备对网页内容进行完美布局的一种显示机制。相反，如果需要根据不同设备提供特定的内容和功能，那就需要一个真正的“手机版”网站。这种情况下，手机版网站会提供与桌面版网站完全不同的用户体验。\nOK，其实就我个人而言，读完这本书的最大收获是了解到媒体查询和流式布局的一些技巧，直接就用在工作项目上。\n\n举个栗子：[百度经验520专题活动](http://jingyan.baidu.com/z/2015-520/index.html)（手机浏览好吗~）\n\n![百度经验 | 520专题](http://cdn.sinacloud.net/woodysblog/rwd/qrcode.png \"百度经验 | 520专题\")\n\n对于一个那么“丰满”的页面，页面的元素、内容特别多，怎么破？按照我以前的做法都是用px去定宽定高，只针对用户量最大的屏幕大小去做适配，其他太大或者太小的屏幕，就“顾不上”了~\n\n而这次开发就有点响应式设计的意思了，优化如下，感觉在大部分设备上，看着都蛮舒服的 :)\n\n*   不同屏幕的元素展现自适应\n\n    *   字体大小改用em 【 1em = 16px 】\n    *   元素改用百分比去写宽高【 百分比宽度 = 目标元素宽度 / 上下文元素宽度 】\n\n*   媒体查询（利用max-height，针对屏幕较矮的设备，尤其是iphone4以及打开微信浏览器的iphone 5c）\n\n    *   根据内容优先的原则，隐藏了一些不必要的元素\n    *   必要元素，还是挤爆了屏幕，则对图片或者间距进行收缩\n@media (max-height: 510px) { bala bala ... }\n构建网站时，是优雅降级还是渐进增强？\n\n优雅降级：\n> 优雅降级指的是为现代浏览器制作网站，然后保证为某些老版本浏览器提供基本可用的体验。新特性在老版本浏览器中会降级，且一般会有一个分界点，声明不支持那些老掉牙的浏览器。有些时候用户也仅会被警告他们所使用的浏览器有问题，建议其更换（如“您的浏览器老得让人笑话——建议下载最新版浏览器！”）  \n\n渐进增强：  \n> 渐进增强与优雅降级恰好相反。渐进增强以恪守web标准的标签为基础，意味着它在所有浏览器中均可用。然后通过CSS样式和必要的Javascript来为更先进的浏览器提供渐进方式的增强体验。  \n    \n我自己是比较偏向“优雅降级”的。因为我们必须承认，目前浏览器还是很不统一，尤其是还有internet explorer 6之流，虽然我们有很多hack的方法/工具，去让这些老的浏览器看起来更像现代浏览器，但是我觉得大多数情况下，其实只需要提供基本可用体验即可，一来是兼容的成本比较高，二来是还在用老掉牙的用户们可能对酷炫效果的需求不高，不然早就升级了，对吧？（笑）\n\n另外的一些收获就是，知道了很多前端构建工具或者资源站点：\n\n*   [Respond.js](https://github.com/scottjehl/Respond/): A fast &amp; lightweight polyfill for min/max-width CSS3 Media Queries (for IE 6-8, and more)\n*   [prefixfree.js](https://github.com/LeaVerou/prefixfree): CSS3无前缀脚本，在搜索这个项目时，也发现了它的兄弟项目[animatable](http://leaverou.github.io/animatable/)，很好玩，animatable依赖prefixfree.js将CSS中各个属性的动画效果都展示出来了；\n*   [Modernizr](https://github.com/Modernizr/Modernizr): 为HMLT5和CSS3而生，基于渐进增强理论来开发的。Modernizr会为所有它检测过的特性添加class类，如果浏览器不支持某个特性，它就为该特性对应的类名加上“no-”的前缀，这样可用检测是否支持新特性，否则降级处理。\n","slug":"rwd-first","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9t003mzvr3sx9hurrs","content":"<p>作为一枚FE，现在才看响应式设计！？说起来不能更不好意思，之前都是听说，可能是工作中比较少机会用到，也没多少动力去学习。</p>\n<p>之前写无线页面（H5），常常会碰到在不同设备中，展示有所区别的case，其实也没有注意到，咦，这跟响应式设计有关。</p>\n<p>直到最近，专题项目太频繁了，FE人力同时开发PC和WAP页面，少说也得一周，大家都希望在这方向想想办法，释放下人力，那个时候“响应式设计”这个概念在我脑海里面闪过，于是自己也开始去学习、看书，而本文正是看完了<a href=\"http://book.douban.com/subject/20390374/\" target=\"_blank\" rel=\"noopener\">《响应式Web设计》</a>写的，算是留下一点点读书的痕迹吧。<br><a id=\"more\"></a></p>\n<p>首先，什么是响应式设计（RWD, Responsive Web Design）</p>\n<blockquote>\n<p>这个术语由伊桑马克特（Ethan Marcotte）提出。他在A List Apart发表了一篇开创性的文章，将三种已有的开发技巧（弹性网格布局、弹性图片、媒体和媒体查询）整合起来，并命名为响应式网页设计。<br>然后，RWD能做什么？</p>\n<p>它是针对任意设备对网页内容进行完美布局的一种显示机制。相反，如果需要根据不同设备提供特定的内容和功能，那就需要一个真正的“手机版”网站。这种情况下，手机版网站会提供与桌面版网站完全不同的用户体验。<br>OK，其实就我个人而言，读完这本书的最大收获是了解到媒体查询和流式布局的一些技巧，直接就用在工作项目上。</p>\n</blockquote>\n<p>举个栗子：<a href=\"http://jingyan.baidu.com/z/2015-520/index.html\" target=\"_blank\" rel=\"noopener\">百度经验520专题活动</a>（手机浏览好吗~）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/rwd/qrcode.png\" alt=\"百度经验 | 520专题\" title=\"百度经验 | 520专题\"></p>\n<p>对于一个那么“丰满”的页面，页面的元素、内容特别多，怎么破？按照我以前的做法都是用px去定宽定高，只针对用户量最大的屏幕大小去做适配，其他太大或者太小的屏幕，就“顾不上”了~</p>\n<p>而这次开发就有点响应式设计的意思了，优化如下，感觉在大部分设备上，看着都蛮舒服的 :)</p>\n<ul>\n<li><p>不同屏幕的元素展现自适应</p>\n<ul>\n<li>字体大小改用em 【 1em = 16px 】</li>\n<li>元素改用百分比去写宽高【 百分比宽度 = 目标元素宽度 / 上下文元素宽度 】</li>\n</ul>\n</li>\n<li><p>媒体查询（利用max-height，针对屏幕较矮的设备，尤其是iphone4以及打开微信浏览器的iphone 5c）</p>\n<ul>\n<li>根据内容优先的原则，隐藏了一些不必要的元素</li>\n<li>必要元素，还是挤爆了屏幕，则对图片或者间距进行收缩<br>@media (max-height: 510px) { bala bala … }<br>构建网站时，是优雅降级还是渐进增强？</li>\n</ul>\n</li>\n</ul>\n<p>优雅降级：</p>\n<blockquote>\n<p>优雅降级指的是为现代浏览器制作网站，然后保证为某些老版本浏览器提供基本可用的体验。新特性在老版本浏览器中会降级，且一般会有一个分界点，声明不支持那些老掉牙的浏览器。有些时候用户也仅会被警告他们所使用的浏览器有问题，建议其更换（如“您的浏览器老得让人笑话——建议下载最新版浏览器！”）  </p>\n</blockquote>\n<p>渐进增强：  </p>\n<blockquote>\n<p>渐进增强与优雅降级恰好相反。渐进增强以恪守web标准的标签为基础，意味着它在所有浏览器中均可用。然后通过CSS样式和必要的Javascript来为更先进的浏览器提供渐进方式的增强体验。  </p>\n</blockquote>\n<p>我自己是比较偏向“优雅降级”的。因为我们必须承认，目前浏览器还是很不统一，尤其是还有internet explorer 6之流，虽然我们有很多hack的方法/工具，去让这些老的浏览器看起来更像现代浏览器，但是我觉得大多数情况下，其实只需要提供基本可用体验即可，一来是兼容的成本比较高，二来是还在用老掉牙的用户们可能对酷炫效果的需求不高，不然早就升级了，对吧？（笑）</p>\n<p>另外的一些收获就是，知道了很多前端构建工具或者资源站点：</p>\n<ul>\n<li><a href=\"https://github.com/scottjehl/Respond/\" target=\"_blank\" rel=\"noopener\">Respond.js</a>: A fast &amp; lightweight polyfill for min/max-width CSS3 Media Queries (for IE 6-8, and more)</li>\n<li><a href=\"https://github.com/LeaVerou/prefixfree\" target=\"_blank\" rel=\"noopener\">prefixfree.js</a>: CSS3无前缀脚本，在搜索这个项目时，也发现了它的兄弟项目<a href=\"http://leaverou.github.io/animatable/\" target=\"_blank\" rel=\"noopener\">animatable</a>，很好玩，animatable依赖prefixfree.js将CSS中各个属性的动画效果都展示出来了；</li>\n<li><a href=\"https://github.com/Modernizr/Modernizr\" target=\"_blank\" rel=\"noopener\">Modernizr</a>: 为HMLT5和CSS3而生，基于渐进增强理论来开发的。Modernizr会为所有它检测过的特性添加class类，如果浏览器不支持某个特性，它就为该特性对应的类名加上“no-”的前缀，这样可用检测是否支持新特性，否则降级处理。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>作为一枚FE，现在才看响应式设计！？说起来不能更不好意思，之前都是听说，可能是工作中比较少机会用到，也没多少动力去学习。</p>\n<p>之前写无线页面（H5），常常会碰到在不同设备中，展示有所区别的case，其实也没有注意到，咦，这跟响应式设计有关。</p>\n<p>直到最近，专题项目太频繁了，FE人力同时开发PC和WAP页面，少说也得一周，大家都希望在这方向想想办法，释放下人力，那个时候“响应式设计”这个概念在我脑海里面闪过，于是自己也开始去学习、看书，而本文正是看完了<a href=\"http://book.douban.com/subject/20390374/\" target=\"_blank\" rel=\"noopener\">《响应式Web设计》</a>写的，算是留下一点点读书的痕迹吧。<br>","more":"</p>\n<p>首先，什么是响应式设计（RWD, Responsive Web Design）</p>\n<blockquote>\n<p>这个术语由伊桑马克特（Ethan Marcotte）提出。他在A List Apart发表了一篇开创性的文章，将三种已有的开发技巧（弹性网格布局、弹性图片、媒体和媒体查询）整合起来，并命名为响应式网页设计。<br>然后，RWD能做什么？</p>\n<p>它是针对任意设备对网页内容进行完美布局的一种显示机制。相反，如果需要根据不同设备提供特定的内容和功能，那就需要一个真正的“手机版”网站。这种情况下，手机版网站会提供与桌面版网站完全不同的用户体验。<br>OK，其实就我个人而言，读完这本书的最大收获是了解到媒体查询和流式布局的一些技巧，直接就用在工作项目上。</p>\n</blockquote>\n<p>举个栗子：<a href=\"http://jingyan.baidu.com/z/2015-520/index.html\" target=\"_blank\" rel=\"noopener\">百度经验520专题活动</a>（手机浏览好吗~）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/rwd/qrcode.png\" alt=\"百度经验 | 520专题\" title=\"百度经验 | 520专题\"></p>\n<p>对于一个那么“丰满”的页面，页面的元素、内容特别多，怎么破？按照我以前的做法都是用px去定宽定高，只针对用户量最大的屏幕大小去做适配，其他太大或者太小的屏幕，就“顾不上”了~</p>\n<p>而这次开发就有点响应式设计的意思了，优化如下，感觉在大部分设备上，看着都蛮舒服的 :)</p>\n<ul>\n<li><p>不同屏幕的元素展现自适应</p>\n<ul>\n<li>字体大小改用em 【 1em = 16px 】</li>\n<li>元素改用百分比去写宽高【 百分比宽度 = 目标元素宽度 / 上下文元素宽度 】</li>\n</ul>\n</li>\n<li><p>媒体查询（利用max-height，针对屏幕较矮的设备，尤其是iphone4以及打开微信浏览器的iphone 5c）</p>\n<ul>\n<li>根据内容优先的原则，隐藏了一些不必要的元素</li>\n<li>必要元素，还是挤爆了屏幕，则对图片或者间距进行收缩<br>@media (max-height: 510px) { bala bala … }<br>构建网站时，是优雅降级还是渐进增强？</li>\n</ul>\n</li>\n</ul>\n<p>优雅降级：</p>\n<blockquote>\n<p>优雅降级指的是为现代浏览器制作网站，然后保证为某些老版本浏览器提供基本可用的体验。新特性在老版本浏览器中会降级，且一般会有一个分界点，声明不支持那些老掉牙的浏览器。有些时候用户也仅会被警告他们所使用的浏览器有问题，建议其更换（如“您的浏览器老得让人笑话——建议下载最新版浏览器！”）  </p>\n</blockquote>\n<p>渐进增强：  </p>\n<blockquote>\n<p>渐进增强与优雅降级恰好相反。渐进增强以恪守web标准的标签为基础，意味着它在所有浏览器中均可用。然后通过CSS样式和必要的Javascript来为更先进的浏览器提供渐进方式的增强体验。  </p>\n</blockquote>\n<p>我自己是比较偏向“优雅降级”的。因为我们必须承认，目前浏览器还是很不统一，尤其是还有internet explorer 6之流，虽然我们有很多hack的方法/工具，去让这些老的浏览器看起来更像现代浏览器，但是我觉得大多数情况下，其实只需要提供基本可用体验即可，一来是兼容的成本比较高，二来是还在用老掉牙的用户们可能对酷炫效果的需求不高，不然早就升级了，对吧？（笑）</p>\n<p>另外的一些收获就是，知道了很多前端构建工具或者资源站点：</p>\n<ul>\n<li><a href=\"https://github.com/scottjehl/Respond/\" target=\"_blank\" rel=\"noopener\">Respond.js</a>: A fast &amp; lightweight polyfill for min/max-width CSS3 Media Queries (for IE 6-8, and more)</li>\n<li><a href=\"https://github.com/LeaVerou/prefixfree\" target=\"_blank\" rel=\"noopener\">prefixfree.js</a>: CSS3无前缀脚本，在搜索这个项目时，也发现了它的兄弟项目<a href=\"http://leaverou.github.io/animatable/\" target=\"_blank\" rel=\"noopener\">animatable</a>，很好玩，animatable依赖prefixfree.js将CSS中各个属性的动画效果都展示出来了；</li>\n<li><a href=\"https://github.com/Modernizr/Modernizr\" target=\"_blank\" rel=\"noopener\">Modernizr</a>: 为HMLT5和CSS3而生，基于渐进增强理论来开发的。Modernizr会为所有它检测过的特性添加class类，如果浏览器不支持某个特性，它就为该特性对应的类名加上“no-”的前缀，这样可用检测是否支持新特性，否则降级处理。</li>\n</ul>"},{"title":"puppeteer调研","date":"2018-07-10T14:37:18.000Z","_content":"\n## Puppeteer Intro\n\nPuppeteer金字塔\n\n![\"Puppeteer Pyramid\"](http://sinacloud.net/woodysblog/img/puppeteer-pyramid.png)\n\n无需再通过Chrome的开发协议，写冗长复杂的代码，轻松调用Chrome API。\n\n![\"puppeteer-devtools-protocol\"](http://sinacloud.net/woodysblog/img/puppeteer-devtools-protocol.png)\n\nPuppeteer的使用场景。\n\n![\"Puppeteer use case\"](http://sinacloud.net/woodysblog/img/puppeteer-use-cases.png)\n\n## Demo - screenshot\n\n### setup\n\n```\nnpm i puppeteer --save\n```\n\n### demo\n\n打开`example.com`，截屏，生成文件`example.png`。\n\n```\n// screenshot.js\nconst puppeteer = require('puppeteer');\n\npuppeteer.launch({\n  headless: false\n}).then(async browser => {\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  await page.screenshot({path: 'example.png'});\n\n  await browser.close();\n});\n\n// run the demo\n// node screenshot.js\n```\n\n![\"screenshot-puppeteer\"](http://sinacloud.net/woodysblog/img/screenshot-puppeteer.gif)\n\n## Links\n\n* [Getting Started with Headless Chrome](https://developers.google.com/web/updates/2017/04/headless-chrome)\n* [Try Puppeteer](https://try-puppeteer.appspot.com/)\n* [Puppeteer as a service](https://pptraas.com/)\n* [puppeteer-examples](https://github.com/GoogleChromeLabs/puppeteer-examples)\n* [Puppeteer Docs](https://developers.google.com/web/tools/puppeteer/)\n\nYoutube Video:\n[\"Intro of Puppeteer - Chrome Dev Summit 2017\"](https://youtu.be/7-XnEMrQnn4?t=986)\n[\"The power of Headless Chrome and browser automation (Google I/O '18)\"](https://www.youtube.com/watch?v=lhZOFUY1weo)\n","source":"_posts/puppeteer.md","raw":"---\ntitle: puppeteer调研\ntags:\n  - front-end\n  - testing\ndate: 2018-07-10 22:37:18\n---\n\n## Puppeteer Intro\n\nPuppeteer金字塔\n\n![\"Puppeteer Pyramid\"](http://sinacloud.net/woodysblog/img/puppeteer-pyramid.png)\n\n无需再通过Chrome的开发协议，写冗长复杂的代码，轻松调用Chrome API。\n\n![\"puppeteer-devtools-protocol\"](http://sinacloud.net/woodysblog/img/puppeteer-devtools-protocol.png)\n\nPuppeteer的使用场景。\n\n![\"Puppeteer use case\"](http://sinacloud.net/woodysblog/img/puppeteer-use-cases.png)\n\n## Demo - screenshot\n\n### setup\n\n```\nnpm i puppeteer --save\n```\n\n### demo\n\n打开`example.com`，截屏，生成文件`example.png`。\n\n```\n// screenshot.js\nconst puppeteer = require('puppeteer');\n\npuppeteer.launch({\n  headless: false\n}).then(async browser => {\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  await page.screenshot({path: 'example.png'});\n\n  await browser.close();\n});\n\n// run the demo\n// node screenshot.js\n```\n\n![\"screenshot-puppeteer\"](http://sinacloud.net/woodysblog/img/screenshot-puppeteer.gif)\n\n## Links\n\n* [Getting Started with Headless Chrome](https://developers.google.com/web/updates/2017/04/headless-chrome)\n* [Try Puppeteer](https://try-puppeteer.appspot.com/)\n* [Puppeteer as a service](https://pptraas.com/)\n* [puppeteer-examples](https://github.com/GoogleChromeLabs/puppeteer-examples)\n* [Puppeteer Docs](https://developers.google.com/web/tools/puppeteer/)\n\nYoutube Video:\n[\"Intro of Puppeteer - Chrome Dev Summit 2017\"](https://youtu.be/7-XnEMrQnn4?t=986)\n[\"The power of Headless Chrome and browser automation (Google I/O '18)\"](https://www.youtube.com/watch?v=lhZOFUY1weo)\n","slug":"puppeteer","published":1,"updated":"2018-07-21T08:32:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9v003qzvr3hiltk7iz","content":"<h2 id=\"Puppeteer-Intro\"><a href=\"#Puppeteer-Intro\" class=\"headerlink\" title=\"Puppeteer Intro\"></a>Puppeteer Intro</h2><p>Puppeteer金字塔</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/puppeteer-pyramid.png\" alt=\"&quot;Puppeteer Pyramid&quot;\"></p>\n<p>无需再通过Chrome的开发协议，写冗长复杂的代码，轻松调用Chrome API。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/puppeteer-devtools-protocol.png\" alt=\"&quot;puppeteer-devtools-protocol&quot;\"></p>\n<p>Puppeteer的使用场景。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/puppeteer-use-cases.png\" alt=\"&quot;Puppeteer use case&quot;\"></p>\n<h2 id=\"Demo-screenshot\"><a href=\"#Demo-screenshot\" class=\"headerlink\" title=\"Demo - screenshot\"></a>Demo - screenshot</h2><h3 id=\"setup\"><a href=\"#setup\" class=\"headerlink\" title=\"setup\"></a>setup</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> puppeteer --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>打开<code>example.com</code>，截屏，生成文件<code>example.png</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// screenshot.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">puppeteer.launch(&#123;</span><br><span class=\"line\">  headless: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">async</span> browser =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page.goto(<span class=\"string\">'https://example.com'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page.screenshot(&#123;<span class=\"attr\">path</span>: <span class=\"string\">'example.png'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> browser.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run the demo</span></span><br><span class=\"line\"><span class=\"comment\">// node screenshot.js</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://sinacloud.net/woodysblog/img/screenshot-puppeteer.gif\" alt=\"&quot;screenshot-puppeteer&quot;\"></p>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\" target=\"_blank\" rel=\"noopener\">Getting Started with Headless Chrome</a></li>\n<li><a href=\"https://try-puppeteer.appspot.com/\" target=\"_blank\" rel=\"noopener\">Try Puppeteer</a></li>\n<li><a href=\"https://pptraas.com/\" target=\"_blank\" rel=\"noopener\">Puppeteer as a service</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/puppeteer-examples\" target=\"_blank\" rel=\"noopener\">puppeteer-examples</a></li>\n<li><a href=\"https://developers.google.com/web/tools/puppeteer/\" target=\"_blank\" rel=\"noopener\">Puppeteer Docs</a></li>\n</ul>\n<p>Youtube Video:<br><a href=\"https://youtu.be/7-XnEMrQnn4?t=986\" target=\"_blank\" rel=\"noopener\">“Intro of Puppeteer - Chrome Dev Summit 2017”</a><br><a href=\"https://www.youtube.com/watch?v=lhZOFUY1weo\" target=\"_blank\" rel=\"noopener\">“The power of Headless Chrome and browser automation (Google I/O ‘18)”</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Puppeteer-Intro\"><a href=\"#Puppeteer-Intro\" class=\"headerlink\" title=\"Puppeteer Intro\"></a>Puppeteer Intro</h2><p>Puppeteer金字塔</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/puppeteer-pyramid.png\" alt=\"&quot;Puppeteer Pyramid&quot;\"></p>\n<p>无需再通过Chrome的开发协议，写冗长复杂的代码，轻松调用Chrome API。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/puppeteer-devtools-protocol.png\" alt=\"&quot;puppeteer-devtools-protocol&quot;\"></p>\n<p>Puppeteer的使用场景。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/img/puppeteer-use-cases.png\" alt=\"&quot;Puppeteer use case&quot;\"></p>\n<h2 id=\"Demo-screenshot\"><a href=\"#Demo-screenshot\" class=\"headerlink\" title=\"Demo - screenshot\"></a>Demo - screenshot</h2><h3 id=\"setup\"><a href=\"#setup\" class=\"headerlink\" title=\"setup\"></a>setup</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> puppeteer --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>打开<code>example.com</code>，截屏，生成文件<code>example.png</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// screenshot.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">puppeteer.launch(&#123;</span><br><span class=\"line\">  headless: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">async</span> browser =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page.goto(<span class=\"string\">'https://example.com'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page.screenshot(&#123;<span class=\"attr\">path</span>: <span class=\"string\">'example.png'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> browser.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run the demo</span></span><br><span class=\"line\"><span class=\"comment\">// node screenshot.js</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://sinacloud.net/woodysblog/img/screenshot-puppeteer.gif\" alt=\"&quot;screenshot-puppeteer&quot;\"></p>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\" target=\"_blank\" rel=\"noopener\">Getting Started with Headless Chrome</a></li>\n<li><a href=\"https://try-puppeteer.appspot.com/\" target=\"_blank\" rel=\"noopener\">Try Puppeteer</a></li>\n<li><a href=\"https://pptraas.com/\" target=\"_blank\" rel=\"noopener\">Puppeteer as a service</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/puppeteer-examples\" target=\"_blank\" rel=\"noopener\">puppeteer-examples</a></li>\n<li><a href=\"https://developers.google.com/web/tools/puppeteer/\" target=\"_blank\" rel=\"noopener\">Puppeteer Docs</a></li>\n</ul>\n<p>Youtube Video:<br><a href=\"https://youtu.be/7-XnEMrQnn4?t=986\" target=\"_blank\" rel=\"noopener\">“Intro of Puppeteer - Chrome Dev Summit 2017”</a><br><a href=\"https://www.youtube.com/watch?v=lhZOFUY1weo\" target=\"_blank\" rel=\"noopener\">“The power of Headless Chrome and browser automation (Google I/O ‘18)”</a></p>\n"},{"title":"阮一峰博客文集","id":"70","date":"2015-01-16T12:07:47.000Z","_content":"\n知道 @[阮一峰](http://www.ruanyifeng.com/blog/) 这位大神，是因为偶尔看到他的一些技术文章，想不到他的博客文集并不是技术内容:\n\n*   [《阮一峰博客文集 1：如何变得有思想？》](http://www.duokan.com/book/48508)\n*   [《阮一峰博客文集 2：一个寻找作者的读者》](http://www.duokan.com/book/48501)\n\n我觉得《如何变得有思想》更加合我的口味多一点，《一个寻找作者的读者》的政治、历史、文学内容稍稍有点多了，让我有点hold不住，没文化真的没办法~\n\n<!--more-->\n\n在看《如何变得有思想》的时候，我意识到博客不一定都要写很深奥的东西（非完美不去做，没有想到有深度的文章不去写，其实这是一个误区，想到什么just do it），只要是自己有所得，想要和大家分享或者给自己做一个备忘的东西，都可以记录下来（可惜看《有思想》当时并没有做摘录，后面再补吧）\n\n下面是《一个寻找作者的读者》的摘录，基本是些我觉得很有思(kàn)想(bù)深(dà)度(dǒng)的东东，哈哈 ：）\n\n* * *\n\n一、《复仇者V》—— 关于思想的传播\n\n记住，重要的是思想，不是某个个人。人是会失败的，他会被抓、被杀、被忘记。但是，思想不会。你无法亲吻一种思想，无法触摸它、无法抓牢它。思想不会流血、不会感到痛苦，不会有爱憎。我亲眼目睹过思想的威力。我见过有人以思想的名义进行杀戮，有人为了捍卫思想而死。但是，400年后，思想依然能够改变世界。\n\nWe are told to remember the idea, not the man. Because mancan fail. He can be caught, he can be killed and forgotten. Butyou cannot kiss an idea. you cannot touch it, or hold it. Ideas donot bleed, they do not feel pain.They do not love. I've witnessedfirst hand the power of ideas. I've seen people kill in the nameof them. And die defending them.\n\n* * *\n\n二、一本书[《殡葬人手记》](http://book.douban.com/subject/1781525/)\n\n“自己的葬礼不需要自己操劳，那是你们的事。我死了，是你们所有的人面对死亡。所以，一个很好的忠告是：别太在意。另外一个赠言是：「一切安排，均合我意。」\n\n相信我，除了一句「互爱」，我说过的其他话你尽可忘掉。\n\n好好活着。”\n\n* * *\n\n三、做学问的八个境界\n\n*   第一层境界：形成主见\n\n    *   用心想一个问题，便会对这个问题有主见，形成自己的判断。\n\n*   第二层境界：发现不能解释的事情\n\n    *   有主见，才有你自己；有自己，才有旁人，才会发觉前后左右都是与我意见不同的人。\n    *   这时候，你感觉到种种冲突，种种矛盾，种种没有道理，又种种都是道理。于是就不得不第二步地用心思。\n    *   面对各种问题，你自己说不出道理，不甘心随便跟着人家说，也不敢轻易自信，这时你就走上求学问的正确道路了。\n\n*   第三层境界：融汇贯通\n\n    *   你看到与自己想法相同的，感到亲切；看到与自己想法不同的，感到隔膜。有不同，就非求解决不可；有隔膜，就非求了解不可。于是，古人今人所曾用过的心思，慢慢融汇到你自己。\n\n*   第四层境界：知不足\n\n    *   遇到不同的意见思想，我总疑心他比我高明，疑心他必有我所未及的见闻，不然，他何以不和我作同样判断呢？疑心他必有精思深悟过于我，不然，何以我所见如此而他所见如彼呢？\n\n*   第五层境界：以简御繁\n\n    *   你见到的意见越多，专研得愈深，这时候零碎的知识，片段的见解都没有了；心里全是一贯的系统，整个的组织。如此，就可以算成功了。到了这时候，才能以简御繁，才可以学问多而不觉得多。\n\n*   第六层境界：运用自如\n\n    *   真学问的人，学问可以完全归自己运用。假学问的人，学问在他的手里完全不会用。\n\n*   第七层境界：一览众山小\n\n    *   学问里面的甘苦都尝过了，再看旁人的见解主张，其中得失长短都能够看出来。\n\n*   第八层境界：通透\n\n    *   思精理熟之后，心里就没有一点不透的了。","source":"_posts/ryfeng-blog.md","raw":"---\ntitle: 阮一峰博客文集\ntags:\n  - reading\nid: 70\ncategories:\n  - reading\ndate: 2015-01-16 20:07:47\n---\n\n知道 @[阮一峰](http://www.ruanyifeng.com/blog/) 这位大神，是因为偶尔看到他的一些技术文章，想不到他的博客文集并不是技术内容:\n\n*   [《阮一峰博客文集 1：如何变得有思想？》](http://www.duokan.com/book/48508)\n*   [《阮一峰博客文集 2：一个寻找作者的读者》](http://www.duokan.com/book/48501)\n\n我觉得《如何变得有思想》更加合我的口味多一点，《一个寻找作者的读者》的政治、历史、文学内容稍稍有点多了，让我有点hold不住，没文化真的没办法~\n\n<!--more-->\n\n在看《如何变得有思想》的时候，我意识到博客不一定都要写很深奥的东西（非完美不去做，没有想到有深度的文章不去写，其实这是一个误区，想到什么just do it），只要是自己有所得，想要和大家分享或者给自己做一个备忘的东西，都可以记录下来（可惜看《有思想》当时并没有做摘录，后面再补吧）\n\n下面是《一个寻找作者的读者》的摘录，基本是些我觉得很有思(kàn)想(bù)深(dà)度(dǒng)的东东，哈哈 ：）\n\n* * *\n\n一、《复仇者V》—— 关于思想的传播\n\n记住，重要的是思想，不是某个个人。人是会失败的，他会被抓、被杀、被忘记。但是，思想不会。你无法亲吻一种思想，无法触摸它、无法抓牢它。思想不会流血、不会感到痛苦，不会有爱憎。我亲眼目睹过思想的威力。我见过有人以思想的名义进行杀戮，有人为了捍卫思想而死。但是，400年后，思想依然能够改变世界。\n\nWe are told to remember the idea, not the man. Because mancan fail. He can be caught, he can be killed and forgotten. Butyou cannot kiss an idea. you cannot touch it, or hold it. Ideas donot bleed, they do not feel pain.They do not love. I've witnessedfirst hand the power of ideas. I've seen people kill in the nameof them. And die defending them.\n\n* * *\n\n二、一本书[《殡葬人手记》](http://book.douban.com/subject/1781525/)\n\n“自己的葬礼不需要自己操劳，那是你们的事。我死了，是你们所有的人面对死亡。所以，一个很好的忠告是：别太在意。另外一个赠言是：「一切安排，均合我意。」\n\n相信我，除了一句「互爱」，我说过的其他话你尽可忘掉。\n\n好好活着。”\n\n* * *\n\n三、做学问的八个境界\n\n*   第一层境界：形成主见\n\n    *   用心想一个问题，便会对这个问题有主见，形成自己的判断。\n\n*   第二层境界：发现不能解释的事情\n\n    *   有主见，才有你自己；有自己，才有旁人，才会发觉前后左右都是与我意见不同的人。\n    *   这时候，你感觉到种种冲突，种种矛盾，种种没有道理，又种种都是道理。于是就不得不第二步地用心思。\n    *   面对各种问题，你自己说不出道理，不甘心随便跟着人家说，也不敢轻易自信，这时你就走上求学问的正确道路了。\n\n*   第三层境界：融汇贯通\n\n    *   你看到与自己想法相同的，感到亲切；看到与自己想法不同的，感到隔膜。有不同，就非求解决不可；有隔膜，就非求了解不可。于是，古人今人所曾用过的心思，慢慢融汇到你自己。\n\n*   第四层境界：知不足\n\n    *   遇到不同的意见思想，我总疑心他比我高明，疑心他必有我所未及的见闻，不然，他何以不和我作同样判断呢？疑心他必有精思深悟过于我，不然，何以我所见如此而他所见如彼呢？\n\n*   第五层境界：以简御繁\n\n    *   你见到的意见越多，专研得愈深，这时候零碎的知识，片段的见解都没有了；心里全是一贯的系统，整个的组织。如此，就可以算成功了。到了这时候，才能以简御繁，才可以学问多而不觉得多。\n\n*   第六层境界：运用自如\n\n    *   真学问的人，学问可以完全归自己运用。假学问的人，学问在他的手里完全不会用。\n\n*   第七层境界：一览众山小\n\n    *   学问里面的甘苦都尝过了，再看旁人的见解主张，其中得失长短都能够看出来。\n\n*   第八层境界：通透\n\n    *   思精理熟之后，心里就没有一点不透的了。","slug":"ryfeng-blog","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9w003tzvr3ntrf8678","content":"<p>知道 @<a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 这位大神，是因为偶尔看到他的一些技术文章，想不到他的博客文集并不是技术内容:</p>\n<ul>\n<li><a href=\"http://www.duokan.com/book/48508\" target=\"_blank\" rel=\"noopener\">《阮一峰博客文集 1：如何变得有思想？》</a></li>\n<li><a href=\"http://www.duokan.com/book/48501\" target=\"_blank\" rel=\"noopener\">《阮一峰博客文集 2：一个寻找作者的读者》</a></li>\n</ul>\n<p>我觉得《如何变得有思想》更加合我的口味多一点，《一个寻找作者的读者》的政治、历史、文学内容稍稍有点多了，让我有点hold不住，没文化真的没办法~</p>\n<a id=\"more\"></a>\n<p>在看《如何变得有思想》的时候，我意识到博客不一定都要写很深奥的东西（非完美不去做，没有想到有深度的文章不去写，其实这是一个误区，想到什么just do it），只要是自己有所得，想要和大家分享或者给自己做一个备忘的东西，都可以记录下来（可惜看《有思想》当时并没有做摘录，后面再补吧）</p>\n<p>下面是《一个寻找作者的读者》的摘录，基本是些我觉得很有思(kàn)想(bù)深(dà)度(dǒng)的东东，哈哈 ：）</p>\n<hr>\n<p>一、《复仇者V》—— 关于思想的传播</p>\n<p>记住，重要的是思想，不是某个个人。人是会失败的，他会被抓、被杀、被忘记。但是，思想不会。你无法亲吻一种思想，无法触摸它、无法抓牢它。思想不会流血、不会感到痛苦，不会有爱憎。我亲眼目睹过思想的威力。我见过有人以思想的名义进行杀戮，有人为了捍卫思想而死。但是，400年后，思想依然能够改变世界。</p>\n<p>We are told to remember the idea, not the man. Because mancan fail. He can be caught, he can be killed and forgotten. Butyou cannot kiss an idea. you cannot touch it, or hold it. Ideas donot bleed, they do not feel pain.They do not love. I’ve witnessedfirst hand the power of ideas. I’ve seen people kill in the nameof them. And die defending them.</p>\n<hr>\n<p>二、一本书<a href=\"http://book.douban.com/subject/1781525/\" target=\"_blank\" rel=\"noopener\">《殡葬人手记》</a></p>\n<p>“自己的葬礼不需要自己操劳，那是你们的事。我死了，是你们所有的人面对死亡。所以，一个很好的忠告是：别太在意。另外一个赠言是：「一切安排，均合我意。」</p>\n<p>相信我，除了一句「互爱」，我说过的其他话你尽可忘掉。</p>\n<p>好好活着。”</p>\n<hr>\n<p>三、做学问的八个境界</p>\n<ul>\n<li><p>第一层境界：形成主见</p>\n<ul>\n<li>用心想一个问题，便会对这个问题有主见，形成自己的判断。</li>\n</ul>\n</li>\n<li><p>第二层境界：发现不能解释的事情</p>\n<ul>\n<li>有主见，才有你自己；有自己，才有旁人，才会发觉前后左右都是与我意见不同的人。</li>\n<li>这时候，你感觉到种种冲突，种种矛盾，种种没有道理，又种种都是道理。于是就不得不第二步地用心思。</li>\n<li>面对各种问题，你自己说不出道理，不甘心随便跟着人家说，也不敢轻易自信，这时你就走上求学问的正确道路了。</li>\n</ul>\n</li>\n<li><p>第三层境界：融汇贯通</p>\n<ul>\n<li>你看到与自己想法相同的，感到亲切；看到与自己想法不同的，感到隔膜。有不同，就非求解决不可；有隔膜，就非求了解不可。于是，古人今人所曾用过的心思，慢慢融汇到你自己。</li>\n</ul>\n</li>\n<li><p>第四层境界：知不足</p>\n<ul>\n<li>遇到不同的意见思想，我总疑心他比我高明，疑心他必有我所未及的见闻，不然，他何以不和我作同样判断呢？疑心他必有精思深悟过于我，不然，何以我所见如此而他所见如彼呢？</li>\n</ul>\n</li>\n<li><p>第五层境界：以简御繁</p>\n<ul>\n<li>你见到的意见越多，专研得愈深，这时候零碎的知识，片段的见解都没有了；心里全是一贯的系统，整个的组织。如此，就可以算成功了。到了这时候，才能以简御繁，才可以学问多而不觉得多。</li>\n</ul>\n</li>\n<li><p>第六层境界：运用自如</p>\n<ul>\n<li>真学问的人，学问可以完全归自己运用。假学问的人，学问在他的手里完全不会用。</li>\n</ul>\n</li>\n<li><p>第七层境界：一览众山小</p>\n<ul>\n<li>学问里面的甘苦都尝过了，再看旁人的见解主张，其中得失长短都能够看出来。</li>\n</ul>\n</li>\n<li><p>第八层境界：通透</p>\n<ul>\n<li>思精理熟之后，心里就没有一点不透的了。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>知道 @<a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 这位大神，是因为偶尔看到他的一些技术文章，想不到他的博客文集并不是技术内容:</p>\n<ul>\n<li><a href=\"http://www.duokan.com/book/48508\" target=\"_blank\" rel=\"noopener\">《阮一峰博客文集 1：如何变得有思想？》</a></li>\n<li><a href=\"http://www.duokan.com/book/48501\" target=\"_blank\" rel=\"noopener\">《阮一峰博客文集 2：一个寻找作者的读者》</a></li>\n</ul>\n<p>我觉得《如何变得有思想》更加合我的口味多一点，《一个寻找作者的读者》的政治、历史、文学内容稍稍有点多了，让我有点hold不住，没文化真的没办法~</p>","more":"<p>在看《如何变得有思想》的时候，我意识到博客不一定都要写很深奥的东西（非完美不去做，没有想到有深度的文章不去写，其实这是一个误区，想到什么just do it），只要是自己有所得，想要和大家分享或者给自己做一个备忘的东西，都可以记录下来（可惜看《有思想》当时并没有做摘录，后面再补吧）</p>\n<p>下面是《一个寻找作者的读者》的摘录，基本是些我觉得很有思(kàn)想(bù)深(dà)度(dǒng)的东东，哈哈 ：）</p>\n<hr>\n<p>一、《复仇者V》—— 关于思想的传播</p>\n<p>记住，重要的是思想，不是某个个人。人是会失败的，他会被抓、被杀、被忘记。但是，思想不会。你无法亲吻一种思想，无法触摸它、无法抓牢它。思想不会流血、不会感到痛苦，不会有爱憎。我亲眼目睹过思想的威力。我见过有人以思想的名义进行杀戮，有人为了捍卫思想而死。但是，400年后，思想依然能够改变世界。</p>\n<p>We are told to remember the idea, not the man. Because mancan fail. He can be caught, he can be killed and forgotten. Butyou cannot kiss an idea. you cannot touch it, or hold it. Ideas donot bleed, they do not feel pain.They do not love. I’ve witnessedfirst hand the power of ideas. I’ve seen people kill in the nameof them. And die defending them.</p>\n<hr>\n<p>二、一本书<a href=\"http://book.douban.com/subject/1781525/\" target=\"_blank\" rel=\"noopener\">《殡葬人手记》</a></p>\n<p>“自己的葬礼不需要自己操劳，那是你们的事。我死了，是你们所有的人面对死亡。所以，一个很好的忠告是：别太在意。另外一个赠言是：「一切安排，均合我意。」</p>\n<p>相信我，除了一句「互爱」，我说过的其他话你尽可忘掉。</p>\n<p>好好活着。”</p>\n<hr>\n<p>三、做学问的八个境界</p>\n<ul>\n<li><p>第一层境界：形成主见</p>\n<ul>\n<li>用心想一个问题，便会对这个问题有主见，形成自己的判断。</li>\n</ul>\n</li>\n<li><p>第二层境界：发现不能解释的事情</p>\n<ul>\n<li>有主见，才有你自己；有自己，才有旁人，才会发觉前后左右都是与我意见不同的人。</li>\n<li>这时候，你感觉到种种冲突，种种矛盾，种种没有道理，又种种都是道理。于是就不得不第二步地用心思。</li>\n<li>面对各种问题，你自己说不出道理，不甘心随便跟着人家说，也不敢轻易自信，这时你就走上求学问的正确道路了。</li>\n</ul>\n</li>\n<li><p>第三层境界：融汇贯通</p>\n<ul>\n<li>你看到与自己想法相同的，感到亲切；看到与自己想法不同的，感到隔膜。有不同，就非求解决不可；有隔膜，就非求了解不可。于是，古人今人所曾用过的心思，慢慢融汇到你自己。</li>\n</ul>\n</li>\n<li><p>第四层境界：知不足</p>\n<ul>\n<li>遇到不同的意见思想，我总疑心他比我高明，疑心他必有我所未及的见闻，不然，他何以不和我作同样判断呢？疑心他必有精思深悟过于我，不然，何以我所见如此而他所见如彼呢？</li>\n</ul>\n</li>\n<li><p>第五层境界：以简御繁</p>\n<ul>\n<li>你见到的意见越多，专研得愈深，这时候零碎的知识，片段的见解都没有了；心里全是一贯的系统，整个的组织。如此，就可以算成功了。到了这时候，才能以简御繁，才可以学问多而不觉得多。</li>\n</ul>\n</li>\n<li><p>第六层境界：运用自如</p>\n<ul>\n<li>真学问的人，学问可以完全归自己运用。假学问的人，学问在他的手里完全不会用。</li>\n</ul>\n</li>\n<li><p>第七层境界：一览众山小</p>\n<ul>\n<li>学问里面的甘苦都尝过了，再看旁人的见解主张，其中得失长短都能够看出来。</li>\n</ul>\n</li>\n<li><p>第八层境界：通透</p>\n<ul>\n<li>思精理熟之后，心里就没有一点不透的了。</li>\n</ul>\n</li>\n</ul>"},{"title":"Safari调试无线页面","id":"200","date":"2016-02-25T05:36:54.000Z","_content":"\n进行无线开发时，很多时候会发现，有些bug是在电脑浏览器如chrome模拟时无法复现的，得在真机上调试。无奈手机浏览器没有PC的功能那么完善，不设断点很难调试，于是以前我会使用比较傻的方式是，用原生的alert输出我想得到的信息（人肉断点）。\n\n后来还是QA同学告诉我，可以用Safari连接mobile和PC，在PC Safari中打开调试界面，console设断点或者执行各种命令进行调试，在mobile Safari中浏览效果，非常方便，在这记录一下 :)\n\n<!--more-->\n\n准备：\n\n1. 一台Macbook\n2. 一台iPhone\n\n没有mac和iPhone怎么破？没事，看看姐妹篇[《UC浏览器调试无线页面》](/archives/uc-web-debug/)\n\n* * *\n\n## Mac OS Safari设置\n\nSafari - 偏好设置 - 高级 - 在菜单栏中显示“开发”菜单\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/1.png \"OS Safari 设置\")\n\n## iPhone iOS Safari 设置：\n\n设置 - Safari - 高级 - web检查器 - 打开\n\n[![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png \"iOS Safari 设置\")](http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png)\n\n* * *\n\nokay，所有设置都好啦，接下来可以开始调试啦~~~\n\n### Step 1:\n\n把手机连接到电脑上~\n\n### Step 2:\n\n打开 Mac Safari\n\n### Step 3:\n\nMac Safari - 菜单“开发” - xxx's iPhone （找到你连接的iPhone的名字） - 选择你要调试的页面\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/3.png \"safari 菜单选择iPhone\")\n  \n选中调试页面后，Safari会自动打开一个调试窗口，在里面就可以开始查看各种元素和断点的设置等等，跟PC调试页面一样啦，很方便~\n  \n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/4.png \"Safari web检查器\")\n  \n譬如在这，我在console命令行执行一个alert，手机屏幕上就会响应这个命令。\n  \n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/5.jpg \"mobile Safari alert\")\n","source":"_posts/safari-web-debug.md","raw":"---\ntitle: Safari调试无线页面\ntags:\n  - tech\n  - web\n  - mobile deug\nid: 200\ncategories:\n  - tech\ndate: 2016-02-25 13:36:54\n---\n\n进行无线开发时，很多时候会发现，有些bug是在电脑浏览器如chrome模拟时无法复现的，得在真机上调试。无奈手机浏览器没有PC的功能那么完善，不设断点很难调试，于是以前我会使用比较傻的方式是，用原生的alert输出我想得到的信息（人肉断点）。\n\n后来还是QA同学告诉我，可以用Safari连接mobile和PC，在PC Safari中打开调试界面，console设断点或者执行各种命令进行调试，在mobile Safari中浏览效果，非常方便，在这记录一下 :)\n\n<!--more-->\n\n准备：\n\n1. 一台Macbook\n2. 一台iPhone\n\n没有mac和iPhone怎么破？没事，看看姐妹篇[《UC浏览器调试无线页面》](/archives/uc-web-debug/)\n\n* * *\n\n## Mac OS Safari设置\n\nSafari - 偏好设置 - 高级 - 在菜单栏中显示“开发”菜单\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/1.png \"OS Safari 设置\")\n\n## iPhone iOS Safari 设置：\n\n设置 - Safari - 高级 - web检查器 - 打开\n\n[![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png \"iOS Safari 设置\")](http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png)\n\n* * *\n\nokay，所有设置都好啦，接下来可以开始调试啦~~~\n\n### Step 1:\n\n把手机连接到电脑上~\n\n### Step 2:\n\n打开 Mac Safari\n\n### Step 3:\n\nMac Safari - 菜单“开发” - xxx's iPhone （找到你连接的iPhone的名字） - 选择你要调试的页面\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/3.png \"safari 菜单选择iPhone\")\n  \n选中调试页面后，Safari会自动打开一个调试窗口，在里面就可以开始查看各种元素和断点的设置等等，跟PC调试页面一样啦，很方便~\n  \n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/4.png \"Safari web检查器\")\n  \n譬如在这，我在console命令行执行一个alert，手机屏幕上就会响应这个命令。\n  \n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/5.jpg \"mobile Safari alert\")\n","slug":"safari-web-debug","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9y003yzvr3d624bmeh","content":"<p>进行无线开发时，很多时候会发现，有些bug是在电脑浏览器如chrome模拟时无法复现的，得在真机上调试。无奈手机浏览器没有PC的功能那么完善，不设断点很难调试，于是以前我会使用比较傻的方式是，用原生的alert输出我想得到的信息（人肉断点）。</p>\n<p>后来还是QA同学告诉我，可以用Safari连接mobile和PC，在PC Safari中打开调试界面，console设断点或者执行各种命令进行调试，在mobile Safari中浏览效果，非常方便，在这记录一下 :)</p>\n<a id=\"more\"></a>\n<p>准备：</p>\n<ol>\n<li>一台Macbook</li>\n<li>一台iPhone</li>\n</ol>\n<p>没有mac和iPhone怎么破？没事，看看姐妹篇<a href=\"/archives/uc-web-debug/\">《UC浏览器调试无线页面》</a></p>\n<hr>\n<h2 id=\"Mac-OS-Safari设置\"><a href=\"#Mac-OS-Safari设置\" class=\"headerlink\" title=\"Mac OS Safari设置\"></a>Mac OS Safari设置</h2><p>Safari - 偏好设置 - 高级 - 在菜单栏中显示“开发”菜单</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/1.png\" alt=\"\" title=\"OS Safari 设置\"></p>\n<h2 id=\"iPhone-iOS-Safari-设置：\"><a href=\"#iPhone-iOS-Safari-设置：\" class=\"headerlink\" title=\"iPhone iOS Safari 设置：\"></a>iPhone iOS Safari 设置：</h2><p>设置 - Safari - 高级 - web检查器 - 打开</p>\n<p><a href=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png\" alt=\"\" title=\"iOS Safari 设置\"></a></p>\n<hr>\n<p>okay，所有设置都好啦，接下来可以开始调试啦~~~</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1:\"></a>Step 1:</h3><p>把手机连接到电脑上~</p>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2:\"></a>Step 2:</h3><p>打开 Mac Safari</p>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3:\"></a>Step 3:</h3><p>Mac Safari - 菜单“开发” - xxx’s iPhone （找到你连接的iPhone的名字） - 选择你要调试的页面</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/3.png\" alt=\"\" title=\"safari 菜单选择iPhone\"></p>\n<p>选中调试页面后，Safari会自动打开一个调试窗口，在里面就可以开始查看各种元素和断点的设置等等，跟PC调试页面一样啦，很方便~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/4.png\" alt=\"\" title=\"Safari web检查器\"></p>\n<p>譬如在这，我在console命令行执行一个alert，手机屏幕上就会响应这个命令。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/5.jpg\" alt=\"\" title=\"mobile Safari alert\"></p>\n","site":{"data":{}},"excerpt":"<p>进行无线开发时，很多时候会发现，有些bug是在电脑浏览器如chrome模拟时无法复现的，得在真机上调试。无奈手机浏览器没有PC的功能那么完善，不设断点很难调试，于是以前我会使用比较傻的方式是，用原生的alert输出我想得到的信息（人肉断点）。</p>\n<p>后来还是QA同学告诉我，可以用Safari连接mobile和PC，在PC Safari中打开调试界面，console设断点或者执行各种命令进行调试，在mobile Safari中浏览效果，非常方便，在这记录一下 :)</p>","more":"<p>准备：</p>\n<ol>\n<li>一台Macbook</li>\n<li>一台iPhone</li>\n</ol>\n<p>没有mac和iPhone怎么破？没事，看看姐妹篇<a href=\"/archives/uc-web-debug/\">《UC浏览器调试无线页面》</a></p>\n<hr>\n<h2 id=\"Mac-OS-Safari设置\"><a href=\"#Mac-OS-Safari设置\" class=\"headerlink\" title=\"Mac OS Safari设置\"></a>Mac OS Safari设置</h2><p>Safari - 偏好设置 - 高级 - 在菜单栏中显示“开发”菜单</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/1.png\" alt=\"\" title=\"OS Safari 设置\"></p>\n<h2 id=\"iPhone-iOS-Safari-设置：\"><a href=\"#iPhone-iOS-Safari-设置：\" class=\"headerlink\" title=\"iPhone iOS Safari 设置：\"></a>iPhone iOS Safari 设置：</h2><p>设置 - Safari - 高级 - web检查器 - 打开</p>\n<p><a href=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/2.png\" alt=\"\" title=\"iOS Safari 设置\"></a></p>\n<hr>\n<p>okay，所有设置都好啦，接下来可以开始调试啦~~~</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1:\"></a>Step 1:</h3><p>把手机连接到电脑上~</p>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2:\"></a>Step 2:</h3><p>打开 Mac Safari</p>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3:\"></a>Step 3:</h3><p>Mac Safari - 菜单“开发” - xxx’s iPhone （找到你连接的iPhone的名字） - 选择你要调试的页面</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/3.png\" alt=\"\" title=\"safari 菜单选择iPhone\"></p>\n<p>选中调试页面后，Safari会自动打开一个调试窗口，在里面就可以开始查看各种元素和断点的设置等等，跟PC调试页面一样啦，很方便~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/4.png\" alt=\"\" title=\"Safari web检查器\"></p>\n<p>譬如在这，我在console命令行执行一个alert，手机屏幕上就会响应这个命令。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/5.jpg\" alt=\"\" title=\"mobile Safari alert\"></p>"},{"title":"来谈谈最近上线的项目「百度师傅」","id":"162","date":"2015-08-09T11:15:19.000Z","type":"photo","cover":"http://cdn.sinacloud.net/woodysblog/shifu/shifu.png","_content":"\n<!--more-->\n\n昨天是8月8号，百度的周年庆典summer party，而在同一天[「百度师傅」](http://shifu.baidu.com)一期项目终于也推出去跟小伙伴们见面，这两天的订单量也破了新高，收到一条条用户下订单的短信，作为研发同学的我也表示非常的开心和激动，这两个月没白忙有木有！\n\n[![](http://cdn.sinacloud.net/woodysblog/shifu/shifu.png \"Baidu Shifu\")](http://shifu.baidu.com/)\n\n[「百度师傅」](http://shifu.baidu.com)是从百度知道衍生出来的新方向，一个从0到1的项目，目标是连接人与服务，哈哈，提供最优质专业的维修服务。 （目前仅限北京地区，有三个服务：[电脑清灰](http://shifu.baidu.com/service/DNQH)、[重装系统](http://shifu.baidu.com/service/CZXT)、[碎屏修理](http://shifu.baidu.com/service/SPXL)）\n\n不再打广告了，有需要的小伙伴点上面的链接下单吧 :)\n\n\n这是一个让我百感交集的项目，有这么几个时刻，我想记录一下：\n\n# 一、项目未启动前，对未知的彷徨和些许恐惧\n\n*   这是一次对O2O的探索，需要保密，做维修方向，详情不明；\n*   我被选中了，作为项目组唯一一个FE（前端开发），做pc、wap页面，可能还需要支持APP里的webview\n*   排期很紧，上线时间在一个月后（当时MRD还没确定）\n*   几乎每次跟老大聊这个项目，他都跟我说要做好加班的心理准备（貌似全世界都知道我没有加班的习惯，我后续再讨论下加班的问题）\n除了上面那些，我什么都不知道，前奏铺垫得太恐怖，不知道未来是什么在等我，有点不安和抗拒。以前都有导师或者FE同伴一起做项目，这次感觉好孤单责任好重，而且排期紧会对技术/业务能力有较高的要求，快速开发和迭代，我没有足够自信能hold住，但没有办法，只能深呼吸，催眠自己，打算尽自己最大能力硬扛过去。\n\n# 二、项目进行时，自由飞翔，打了鸡血一样\n\n项目终于启动了，经过MRD评审和拿到UE图，松了一口气，页面的布局和功能也就那样，跟日常项目类似吧，而这个项目对我的挑战，我认为更多的是来自对整体架构/模块的设计（怎么针对一个全新的产品线去设计和搭建前端框架），以及排期真的很紧，要跟时间赛跑，项目从6月1号启动，预期上线点是7月6号，也就是一个月的时间，但是研发介入开发/联调时间只有2周，基础框架/公用组件的搭建 + PC的5个业务页面 + WAP的6个业务页面，我知道不眠不休身体和脑子肯定扛不住，哪怕每天愿意干12个小时也搞不掂，必须特别注意时间管理和风险管理，严格控制好排期，有风险立马提出来。\n\n尽管条件比较恶劣哈，不过在调研、设计、开发这段时间，我还是非常享受的，因为终于可以把心静下来，好好想想、划划、敲敲。调研/设计阶段，去看文档看代码，把自以为最优的设计方案拿出来（有时不止一个）去找大神 @guizi @yuting 商量，他们总能给出更好更优雅的方案，甚至针对整个框架的设计给出很赞的意见，非常感谢；开发阶段，自己跑去楼下coffee shop，听着音乐，静静的敲代码，看着自己的设计慢慢变成真实的页面，也是一种很棒的享受。更棒的是，所有代码都是我写的，没有历史包袱，不用维护老得掉渣的代码，想怎么写怎么写，爽到没朋友，根本停不下来！（有时候我很庆幸，我是很喜欢自己的工作以及可以从中获取成就感的那一撮人之一）\n\n# 三、机器人也会麻木，脑子累得差点转不动\n\n但时间确实紧，为了平衡好关键的milestone，那段时间我们都是白天做开发，晚上约 @maxiao 联调，说好的决战到天亮。 （笑，其实没到天亮，一般到晚上10、11点，直接洗洗睡，接着第二天继续打鸡血）\n\n*   白天开发晚上联调，就这样先经历了第一周的前5天，感觉还可以，写得很嗨嘛。\n*   为了赶进度，PC关键功能进入提测阶段，我申请了周六的加班，修复QA报过来的bugs。\n*   考虑到wap的排期本来就有点紧，PC的进度延了一点，周日也去了公司提前启动的wap的开发，很鸡血的像机器人一样度过了非常充实的7天。\n*   到了第二周的周一，觉得有点累了，但是生活还是要继续~\n*   接下来的周二周三周四，简直像行尸走肉一样，感觉脑子有点转不过来了，还在坚持着，终于在周四把所有事情都搞完！\n*   周五就和 @沙滩小分队 去了@青岛，度过了一个轻松愉快的周末，满血复原回来。\n另外，特别需要感谢一个人，很傻很天真的实习小伙伴 @文琳 ，她陪我一起度过了项目收尾的阶段，那段时间我还在天天跟新需求搏斗，她帮我修各种小bug，很耐心的天天陪着UI一个像素一个像素的抠，也是崩溃得不行，哈哈，如果不是她的友情协助，估计我会直接暴走，真的非常感谢。\n\n当然还有在我背后默默支持我的那些女人和男人，精神上和物质上的鼓励也非常给力，支撑着我努力的完成，不一一点名不用生气哟，谢谢你们~\n\n我去，本来的项目总结更偏技术，结果在blog这边一写竟变成回忆录也是醉了。\n\n# 四、项目后的一些反省\n\n在evernote写的那版，详解了我在项目中遇到的技术问题，可以简单拿出来列出来：\n\n*   wap开发，响应式布局，全局用的像素单位em，没考虑图片合并问题，导致最后重新改写图片的引用。\n当时有疑惑过FIS能不能支持相对单位图片的合并，但抱着“到时再看”的想法，直接拖到wap快提测，最后才去问的FIS的同学，不支持 T_T 只能重改，所幸引用图片不多，花了小半天修改。但这个问题告诉我，以后做技术选型，必须先考虑所有可能遇上的问题，可以接受再采用，不然做完了才来想，这次修改成本不高，万一需要全部重写呢？代价太大。\n*   设计规范，启动开发时，没问UI要设计规范，导致目前css代码中有部分冗余、重复的代码。\n由于排期关系，UI没有一次性给完所有页面的图，都是按照出一个图开发一个页面的模式，最后才知道有“设计规范”这一说。其实在开发中，也发现有一些UI组件或者样式是可以复用，属于base类的样式，原本应该在项目启动开发时，先把base.css搭建起来，可惜最后才拿到，导致目前css代码中有部分冗余、重复的代码。\n*   关于功能组件化（解耦）\n大部分情况下，我都会按照规范，把每个独立功能的相关逻辑写成widget，但是也有由于时间紧，写出来的一坨长文件，写完了测完了上线，现在回头再看，想解耦，天哪，都是些什么鬼！虽然都是自己写的，但是改了会担心影响到线上功能，真是一步错步步错，磨刀不误砍柴工，必须花时间做好设计才能下手敲，不然剁手！\n*   打包/部署流程 这个topic不打算展开，主要是之前虽然用了FIS很久，但对它的打包或者上线，线上的文件引用原理没有很了解，上线后才踩的很多自己埋的坑。另外，上线前没有跟RD沟通打包的tar包有没有特殊要求，有次排查半天发现是tar包名字不对，妈蛋，坑死自己了！\n除了反省，其实自己做得不错的还是有那么一点，就是同步写PC和WAP页面时，因为交互不大一样有时候会很凌乱，但数据逻辑是类似的，有时候先写PC，后来写WAP时发现，哎哟，还有更好的实现方案，为了实现思路的统一，于是花时间重写PC的逻辑。应该算是一种自我要求吧，在二次思考时，没有直接copy上一次的思路，而是用一个新的角度去思考，说不定真有新发现，在时间那么紧迫的情况下，自己还愿意花时间去重写那些不够好但能run的逻辑，强迫症不够严重是做不到的，哈哈，看来药不能停 :)\n\n事实证明，师傅项目算是一次中期考验，而我从iknow和exp学到的东西，总算没白学，把能拿出来的货一次全拿出来，勉强hold住了，更多真的没有了，哈哈，真是论FE的自我修养呀，必须给自己点个赞！\n\n非常感谢这个项目，经历了这么一段时间，我得到了一定的技术/业务能力的成长，也给自己科普了很多以前并不care或者不理解的东西，更多的还有自信和成就感。也许在程序猿的成长的路上，需要经历这么一个“从无到有”的项目，才能加深对架构/模块设计/资源打包/代码部署这一系列动作的理解。\n\n继续加油吧，骚年！！！\n","source":"_posts/shifu.md","raw":"---\ntitle: 来谈谈最近上线的项目「百度师傅」\ntags:\n  - work\nid: 162\ncategories:\n  - work\ndate: 2015-08-09 19:15:19\ntype: photo\ncover: http://cdn.sinacloud.net/woodysblog/shifu/shifu.png\n---\n\n<!--more-->\n\n昨天是8月8号，百度的周年庆典summer party，而在同一天[「百度师傅」](http://shifu.baidu.com)一期项目终于也推出去跟小伙伴们见面，这两天的订单量也破了新高，收到一条条用户下订单的短信，作为研发同学的我也表示非常的开心和激动，这两个月没白忙有木有！\n\n[![](http://cdn.sinacloud.net/woodysblog/shifu/shifu.png \"Baidu Shifu\")](http://shifu.baidu.com/)\n\n[「百度师傅」](http://shifu.baidu.com)是从百度知道衍生出来的新方向，一个从0到1的项目，目标是连接人与服务，哈哈，提供最优质专业的维修服务。 （目前仅限北京地区，有三个服务：[电脑清灰](http://shifu.baidu.com/service/DNQH)、[重装系统](http://shifu.baidu.com/service/CZXT)、[碎屏修理](http://shifu.baidu.com/service/SPXL)）\n\n不再打广告了，有需要的小伙伴点上面的链接下单吧 :)\n\n\n这是一个让我百感交集的项目，有这么几个时刻，我想记录一下：\n\n# 一、项目未启动前，对未知的彷徨和些许恐惧\n\n*   这是一次对O2O的探索，需要保密，做维修方向，详情不明；\n*   我被选中了，作为项目组唯一一个FE（前端开发），做pc、wap页面，可能还需要支持APP里的webview\n*   排期很紧，上线时间在一个月后（当时MRD还没确定）\n*   几乎每次跟老大聊这个项目，他都跟我说要做好加班的心理准备（貌似全世界都知道我没有加班的习惯，我后续再讨论下加班的问题）\n除了上面那些，我什么都不知道，前奏铺垫得太恐怖，不知道未来是什么在等我，有点不安和抗拒。以前都有导师或者FE同伴一起做项目，这次感觉好孤单责任好重，而且排期紧会对技术/业务能力有较高的要求，快速开发和迭代，我没有足够自信能hold住，但没有办法，只能深呼吸，催眠自己，打算尽自己最大能力硬扛过去。\n\n# 二、项目进行时，自由飞翔，打了鸡血一样\n\n项目终于启动了，经过MRD评审和拿到UE图，松了一口气，页面的布局和功能也就那样，跟日常项目类似吧，而这个项目对我的挑战，我认为更多的是来自对整体架构/模块的设计（怎么针对一个全新的产品线去设计和搭建前端框架），以及排期真的很紧，要跟时间赛跑，项目从6月1号启动，预期上线点是7月6号，也就是一个月的时间，但是研发介入开发/联调时间只有2周，基础框架/公用组件的搭建 + PC的5个业务页面 + WAP的6个业务页面，我知道不眠不休身体和脑子肯定扛不住，哪怕每天愿意干12个小时也搞不掂，必须特别注意时间管理和风险管理，严格控制好排期，有风险立马提出来。\n\n尽管条件比较恶劣哈，不过在调研、设计、开发这段时间，我还是非常享受的，因为终于可以把心静下来，好好想想、划划、敲敲。调研/设计阶段，去看文档看代码，把自以为最优的设计方案拿出来（有时不止一个）去找大神 @guizi @yuting 商量，他们总能给出更好更优雅的方案，甚至针对整个框架的设计给出很赞的意见，非常感谢；开发阶段，自己跑去楼下coffee shop，听着音乐，静静的敲代码，看着自己的设计慢慢变成真实的页面，也是一种很棒的享受。更棒的是，所有代码都是我写的，没有历史包袱，不用维护老得掉渣的代码，想怎么写怎么写，爽到没朋友，根本停不下来！（有时候我很庆幸，我是很喜欢自己的工作以及可以从中获取成就感的那一撮人之一）\n\n# 三、机器人也会麻木，脑子累得差点转不动\n\n但时间确实紧，为了平衡好关键的milestone，那段时间我们都是白天做开发，晚上约 @maxiao 联调，说好的决战到天亮。 （笑，其实没到天亮，一般到晚上10、11点，直接洗洗睡，接着第二天继续打鸡血）\n\n*   白天开发晚上联调，就这样先经历了第一周的前5天，感觉还可以，写得很嗨嘛。\n*   为了赶进度，PC关键功能进入提测阶段，我申请了周六的加班，修复QA报过来的bugs。\n*   考虑到wap的排期本来就有点紧，PC的进度延了一点，周日也去了公司提前启动的wap的开发，很鸡血的像机器人一样度过了非常充实的7天。\n*   到了第二周的周一，觉得有点累了，但是生活还是要继续~\n*   接下来的周二周三周四，简直像行尸走肉一样，感觉脑子有点转不过来了，还在坚持着，终于在周四把所有事情都搞完！\n*   周五就和 @沙滩小分队 去了@青岛，度过了一个轻松愉快的周末，满血复原回来。\n另外，特别需要感谢一个人，很傻很天真的实习小伙伴 @文琳 ，她陪我一起度过了项目收尾的阶段，那段时间我还在天天跟新需求搏斗，她帮我修各种小bug，很耐心的天天陪着UI一个像素一个像素的抠，也是崩溃得不行，哈哈，如果不是她的友情协助，估计我会直接暴走，真的非常感谢。\n\n当然还有在我背后默默支持我的那些女人和男人，精神上和物质上的鼓励也非常给力，支撑着我努力的完成，不一一点名不用生气哟，谢谢你们~\n\n我去，本来的项目总结更偏技术，结果在blog这边一写竟变成回忆录也是醉了。\n\n# 四、项目后的一些反省\n\n在evernote写的那版，详解了我在项目中遇到的技术问题，可以简单拿出来列出来：\n\n*   wap开发，响应式布局，全局用的像素单位em，没考虑图片合并问题，导致最后重新改写图片的引用。\n当时有疑惑过FIS能不能支持相对单位图片的合并，但抱着“到时再看”的想法，直接拖到wap快提测，最后才去问的FIS的同学，不支持 T_T 只能重改，所幸引用图片不多，花了小半天修改。但这个问题告诉我，以后做技术选型，必须先考虑所有可能遇上的问题，可以接受再采用，不然做完了才来想，这次修改成本不高，万一需要全部重写呢？代价太大。\n*   设计规范，启动开发时，没问UI要设计规范，导致目前css代码中有部分冗余、重复的代码。\n由于排期关系，UI没有一次性给完所有页面的图，都是按照出一个图开发一个页面的模式，最后才知道有“设计规范”这一说。其实在开发中，也发现有一些UI组件或者样式是可以复用，属于base类的样式，原本应该在项目启动开发时，先把base.css搭建起来，可惜最后才拿到，导致目前css代码中有部分冗余、重复的代码。\n*   关于功能组件化（解耦）\n大部分情况下，我都会按照规范，把每个独立功能的相关逻辑写成widget，但是也有由于时间紧，写出来的一坨长文件，写完了测完了上线，现在回头再看，想解耦，天哪，都是些什么鬼！虽然都是自己写的，但是改了会担心影响到线上功能，真是一步错步步错，磨刀不误砍柴工，必须花时间做好设计才能下手敲，不然剁手！\n*   打包/部署流程 这个topic不打算展开，主要是之前虽然用了FIS很久，但对它的打包或者上线，线上的文件引用原理没有很了解，上线后才踩的很多自己埋的坑。另外，上线前没有跟RD沟通打包的tar包有没有特殊要求，有次排查半天发现是tar包名字不对，妈蛋，坑死自己了！\n除了反省，其实自己做得不错的还是有那么一点，就是同步写PC和WAP页面时，因为交互不大一样有时候会很凌乱，但数据逻辑是类似的，有时候先写PC，后来写WAP时发现，哎哟，还有更好的实现方案，为了实现思路的统一，于是花时间重写PC的逻辑。应该算是一种自我要求吧，在二次思考时，没有直接copy上一次的思路，而是用一个新的角度去思考，说不定真有新发现，在时间那么紧迫的情况下，自己还愿意花时间去重写那些不够好但能run的逻辑，强迫症不够严重是做不到的，哈哈，看来药不能停 :)\n\n事实证明，师傅项目算是一次中期考验，而我从iknow和exp学到的东西，总算没白学，把能拿出来的货一次全拿出来，勉强hold住了，更多真的没有了，哈哈，真是论FE的自我修养呀，必须给自己点个赞！\n\n非常感谢这个项目，经历了这么一段时间，我得到了一定的技术/业务能力的成长，也给自己科普了很多以前并不care或者不理解的东西，更多的还有自信和成就感。也许在程序猿的成长的路上，需要经历这么一个“从无到有”的项目，才能加深对架构/模块设计/资源打包/代码部署这一系列动作的理解。\n\n继续加油吧，骚年！！！\n","slug":"shifu","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1x9z0040zvr3qriyxjaz","content":"<a id=\"more\"></a>\n<p>昨天是8月8号，百度的周年庆典summer party，而在同一天<a href=\"http://shifu.baidu.com\" target=\"_blank\" rel=\"noopener\">「百度师傅」</a>一期项目终于也推出去跟小伙伴们见面，这两天的订单量也破了新高，收到一条条用户下订单的短信，作为研发同学的我也表示非常的开心和激动，这两个月没白忙有木有！</p>\n<p><a href=\"http://shifu.baidu.com/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.sinacloud.net/woodysblog/shifu/shifu.png\" alt=\"\" title=\"Baidu Shifu\"></a></p>\n<p><a href=\"http://shifu.baidu.com\" target=\"_blank\" rel=\"noopener\">「百度师傅」</a>是从百度知道衍生出来的新方向，一个从0到1的项目，目标是连接人与服务，哈哈，提供最优质专业的维修服务。 （目前仅限北京地区，有三个服务：<a href=\"http://shifu.baidu.com/service/DNQH\" target=\"_blank\" rel=\"noopener\">电脑清灰</a>、<a href=\"http://shifu.baidu.com/service/CZXT\" target=\"_blank\" rel=\"noopener\">重装系统</a>、<a href=\"http://shifu.baidu.com/service/SPXL\" target=\"_blank\" rel=\"noopener\">碎屏修理</a>）</p>\n<p>不再打广告了，有需要的小伙伴点上面的链接下单吧 :)</p>\n<p>这是一个让我百感交集的项目，有这么几个时刻，我想记录一下：</p>\n<h1 id=\"一、项目未启动前，对未知的彷徨和些许恐惧\"><a href=\"#一、项目未启动前，对未知的彷徨和些许恐惧\" class=\"headerlink\" title=\"一、项目未启动前，对未知的彷徨和些许恐惧\"></a>一、项目未启动前，对未知的彷徨和些许恐惧</h1><ul>\n<li>这是一次对O2O的探索，需要保密，做维修方向，详情不明；</li>\n<li>我被选中了，作为项目组唯一一个FE（前端开发），做pc、wap页面，可能还需要支持APP里的webview</li>\n<li>排期很紧，上线时间在一个月后（当时MRD还没确定）</li>\n<li>几乎每次跟老大聊这个项目，他都跟我说要做好加班的心理准备（貌似全世界都知道我没有加班的习惯，我后续再讨论下加班的问题）<br>除了上面那些，我什么都不知道，前奏铺垫得太恐怖，不知道未来是什么在等我，有点不安和抗拒。以前都有导师或者FE同伴一起做项目，这次感觉好孤单责任好重，而且排期紧会对技术/业务能力有较高的要求，快速开发和迭代，我没有足够自信能hold住，但没有办法，只能深呼吸，催眠自己，打算尽自己最大能力硬扛过去。</li>\n</ul>\n<h1 id=\"二、项目进行时，自由飞翔，打了鸡血一样\"><a href=\"#二、项目进行时，自由飞翔，打了鸡血一样\" class=\"headerlink\" title=\"二、项目进行时，自由飞翔，打了鸡血一样\"></a>二、项目进行时，自由飞翔，打了鸡血一样</h1><p>项目终于启动了，经过MRD评审和拿到UE图，松了一口气，页面的布局和功能也就那样，跟日常项目类似吧，而这个项目对我的挑战，我认为更多的是来自对整体架构/模块的设计（怎么针对一个全新的产品线去设计和搭建前端框架），以及排期真的很紧，要跟时间赛跑，项目从6月1号启动，预期上线点是7月6号，也就是一个月的时间，但是研发介入开发/联调时间只有2周，基础框架/公用组件的搭建 + PC的5个业务页面 + WAP的6个业务页面，我知道不眠不休身体和脑子肯定扛不住，哪怕每天愿意干12个小时也搞不掂，必须特别注意时间管理和风险管理，严格控制好排期，有风险立马提出来。</p>\n<p>尽管条件比较恶劣哈，不过在调研、设计、开发这段时间，我还是非常享受的，因为终于可以把心静下来，好好想想、划划、敲敲。调研/设计阶段，去看文档看代码，把自以为最优的设计方案拿出来（有时不止一个）去找大神 @guizi @yuting 商量，他们总能给出更好更优雅的方案，甚至针对整个框架的设计给出很赞的意见，非常感谢；开发阶段，自己跑去楼下coffee shop，听着音乐，静静的敲代码，看着自己的设计慢慢变成真实的页面，也是一种很棒的享受。更棒的是，所有代码都是我写的，没有历史包袱，不用维护老得掉渣的代码，想怎么写怎么写，爽到没朋友，根本停不下来！（有时候我很庆幸，我是很喜欢自己的工作以及可以从中获取成就感的那一撮人之一）</p>\n<h1 id=\"三、机器人也会麻木，脑子累得差点转不动\"><a href=\"#三、机器人也会麻木，脑子累得差点转不动\" class=\"headerlink\" title=\"三、机器人也会麻木，脑子累得差点转不动\"></a>三、机器人也会麻木，脑子累得差点转不动</h1><p>但时间确实紧，为了平衡好关键的milestone，那段时间我们都是白天做开发，晚上约 @maxiao 联调，说好的决战到天亮。 （笑，其实没到天亮，一般到晚上10、11点，直接洗洗睡，接着第二天继续打鸡血）</p>\n<ul>\n<li>白天开发晚上联调，就这样先经历了第一周的前5天，感觉还可以，写得很嗨嘛。</li>\n<li>为了赶进度，PC关键功能进入提测阶段，我申请了周六的加班，修复QA报过来的bugs。</li>\n<li>考虑到wap的排期本来就有点紧，PC的进度延了一点，周日也去了公司提前启动的wap的开发，很鸡血的像机器人一样度过了非常充实的7天。</li>\n<li>到了第二周的周一，觉得有点累了，但是生活还是要继续~</li>\n<li>接下来的周二周三周四，简直像行尸走肉一样，感觉脑子有点转不过来了，还在坚持着，终于在周四把所有事情都搞完！</li>\n<li>周五就和 @沙滩小分队 去了@青岛，度过了一个轻松愉快的周末，满血复原回来。<br>另外，特别需要感谢一个人，很傻很天真的实习小伙伴 @文琳 ，她陪我一起度过了项目收尾的阶段，那段时间我还在天天跟新需求搏斗，她帮我修各种小bug，很耐心的天天陪着UI一个像素一个像素的抠，也是崩溃得不行，哈哈，如果不是她的友情协助，估计我会直接暴走，真的非常感谢。</li>\n</ul>\n<p>当然还有在我背后默默支持我的那些女人和男人，精神上和物质上的鼓励也非常给力，支撑着我努力的完成，不一一点名不用生气哟，谢谢你们~</p>\n<p>我去，本来的项目总结更偏技术，结果在blog这边一写竟变成回忆录也是醉了。</p>\n<h1 id=\"四、项目后的一些反省\"><a href=\"#四、项目后的一些反省\" class=\"headerlink\" title=\"四、项目后的一些反省\"></a>四、项目后的一些反省</h1><p>在evernote写的那版，详解了我在项目中遇到的技术问题，可以简单拿出来列出来：</p>\n<ul>\n<li>wap开发，响应式布局，全局用的像素单位em，没考虑图片合并问题，导致最后重新改写图片的引用。<br>当时有疑惑过FIS能不能支持相对单位图片的合并，但抱着“到时再看”的想法，直接拖到wap快提测，最后才去问的FIS的同学，不支持 T_T 只能重改，所幸引用图片不多，花了小半天修改。但这个问题告诉我，以后做技术选型，必须先考虑所有可能遇上的问题，可以接受再采用，不然做完了才来想，这次修改成本不高，万一需要全部重写呢？代价太大。</li>\n<li>设计规范，启动开发时，没问UI要设计规范，导致目前css代码中有部分冗余、重复的代码。<br>由于排期关系，UI没有一次性给完所有页面的图，都是按照出一个图开发一个页面的模式，最后才知道有“设计规范”这一说。其实在开发中，也发现有一些UI组件或者样式是可以复用，属于base类的样式，原本应该在项目启动开发时，先把base.css搭建起来，可惜最后才拿到，导致目前css代码中有部分冗余、重复的代码。</li>\n<li>关于功能组件化（解耦）<br>大部分情况下，我都会按照规范，把每个独立功能的相关逻辑写成widget，但是也有由于时间紧，写出来的一坨长文件，写完了测完了上线，现在回头再看，想解耦，天哪，都是些什么鬼！虽然都是自己写的，但是改了会担心影响到线上功能，真是一步错步步错，磨刀不误砍柴工，必须花时间做好设计才能下手敲，不然剁手！</li>\n<li>打包/部署流程 这个topic不打算展开，主要是之前虽然用了FIS很久，但对它的打包或者上线，线上的文件引用原理没有很了解，上线后才踩的很多自己埋的坑。另外，上线前没有跟RD沟通打包的tar包有没有特殊要求，有次排查半天发现是tar包名字不对，妈蛋，坑死自己了！<br>除了反省，其实自己做得不错的还是有那么一点，就是同步写PC和WAP页面时，因为交互不大一样有时候会很凌乱，但数据逻辑是类似的，有时候先写PC，后来写WAP时发现，哎哟，还有更好的实现方案，为了实现思路的统一，于是花时间重写PC的逻辑。应该算是一种自我要求吧，在二次思考时，没有直接copy上一次的思路，而是用一个新的角度去思考，说不定真有新发现，在时间那么紧迫的情况下，自己还愿意花时间去重写那些不够好但能run的逻辑，强迫症不够严重是做不到的，哈哈，看来药不能停 :)</li>\n</ul>\n<p>事实证明，师傅项目算是一次中期考验，而我从iknow和exp学到的东西，总算没白学，把能拿出来的货一次全拿出来，勉强hold住了，更多真的没有了，哈哈，真是论FE的自我修养呀，必须给自己点个赞！</p>\n<p>非常感谢这个项目，经历了这么一段时间，我得到了一定的技术/业务能力的成长，也给自己科普了很多以前并不care或者不理解的东西，更多的还有自信和成就感。也许在程序猿的成长的路上，需要经历这么一个“从无到有”的项目，才能加深对架构/模块设计/资源打包/代码部署这一系列动作的理解。</p>\n<p>继续加油吧，骚年！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天是8月8号，百度的周年庆典summer party，而在同一天<a href=\"http://shifu.baidu.com\" target=\"_blank\" rel=\"noopener\">「百度师傅」</a>一期项目终于也推出去跟小伙伴们见面，这两天的订单量也破了新高，收到一条条用户下订单的短信，作为研发同学的我也表示非常的开心和激动，这两个月没白忙有木有！</p>\n<p><a href=\"http://shifu.baidu.com/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.sinacloud.net/woodysblog/shifu/shifu.png\" alt=\"\" title=\"Baidu Shifu\"></a></p>\n<p><a href=\"http://shifu.baidu.com\" target=\"_blank\" rel=\"noopener\">「百度师傅」</a>是从百度知道衍生出来的新方向，一个从0到1的项目，目标是连接人与服务，哈哈，提供最优质专业的维修服务。 （目前仅限北京地区，有三个服务：<a href=\"http://shifu.baidu.com/service/DNQH\" target=\"_blank\" rel=\"noopener\">电脑清灰</a>、<a href=\"http://shifu.baidu.com/service/CZXT\" target=\"_blank\" rel=\"noopener\">重装系统</a>、<a href=\"http://shifu.baidu.com/service/SPXL\" target=\"_blank\" rel=\"noopener\">碎屏修理</a>）</p>\n<p>不再打广告了，有需要的小伙伴点上面的链接下单吧 :)</p>\n<p>这是一个让我百感交集的项目，有这么几个时刻，我想记录一下：</p>\n<h1 id=\"一、项目未启动前，对未知的彷徨和些许恐惧\"><a href=\"#一、项目未启动前，对未知的彷徨和些许恐惧\" class=\"headerlink\" title=\"一、项目未启动前，对未知的彷徨和些许恐惧\"></a>一、项目未启动前，对未知的彷徨和些许恐惧</h1><ul>\n<li>这是一次对O2O的探索，需要保密，做维修方向，详情不明；</li>\n<li>我被选中了，作为项目组唯一一个FE（前端开发），做pc、wap页面，可能还需要支持APP里的webview</li>\n<li>排期很紧，上线时间在一个月后（当时MRD还没确定）</li>\n<li>几乎每次跟老大聊这个项目，他都跟我说要做好加班的心理准备（貌似全世界都知道我没有加班的习惯，我后续再讨论下加班的问题）<br>除了上面那些，我什么都不知道，前奏铺垫得太恐怖，不知道未来是什么在等我，有点不安和抗拒。以前都有导师或者FE同伴一起做项目，这次感觉好孤单责任好重，而且排期紧会对技术/业务能力有较高的要求，快速开发和迭代，我没有足够自信能hold住，但没有办法，只能深呼吸，催眠自己，打算尽自己最大能力硬扛过去。</li>\n</ul>\n<h1 id=\"二、项目进行时，自由飞翔，打了鸡血一样\"><a href=\"#二、项目进行时，自由飞翔，打了鸡血一样\" class=\"headerlink\" title=\"二、项目进行时，自由飞翔，打了鸡血一样\"></a>二、项目进行时，自由飞翔，打了鸡血一样</h1><p>项目终于启动了，经过MRD评审和拿到UE图，松了一口气，页面的布局和功能也就那样，跟日常项目类似吧，而这个项目对我的挑战，我认为更多的是来自对整体架构/模块的设计（怎么针对一个全新的产品线去设计和搭建前端框架），以及排期真的很紧，要跟时间赛跑，项目从6月1号启动，预期上线点是7月6号，也就是一个月的时间，但是研发介入开发/联调时间只有2周，基础框架/公用组件的搭建 + PC的5个业务页面 + WAP的6个业务页面，我知道不眠不休身体和脑子肯定扛不住，哪怕每天愿意干12个小时也搞不掂，必须特别注意时间管理和风险管理，严格控制好排期，有风险立马提出来。</p>\n<p>尽管条件比较恶劣哈，不过在调研、设计、开发这段时间，我还是非常享受的，因为终于可以把心静下来，好好想想、划划、敲敲。调研/设计阶段，去看文档看代码，把自以为最优的设计方案拿出来（有时不止一个）去找大神 @guizi @yuting 商量，他们总能给出更好更优雅的方案，甚至针对整个框架的设计给出很赞的意见，非常感谢；开发阶段，自己跑去楼下coffee shop，听着音乐，静静的敲代码，看着自己的设计慢慢变成真实的页面，也是一种很棒的享受。更棒的是，所有代码都是我写的，没有历史包袱，不用维护老得掉渣的代码，想怎么写怎么写，爽到没朋友，根本停不下来！（有时候我很庆幸，我是很喜欢自己的工作以及可以从中获取成就感的那一撮人之一）</p>\n<h1 id=\"三、机器人也会麻木，脑子累得差点转不动\"><a href=\"#三、机器人也会麻木，脑子累得差点转不动\" class=\"headerlink\" title=\"三、机器人也会麻木，脑子累得差点转不动\"></a>三、机器人也会麻木，脑子累得差点转不动</h1><p>但时间确实紧，为了平衡好关键的milestone，那段时间我们都是白天做开发，晚上约 @maxiao 联调，说好的决战到天亮。 （笑，其实没到天亮，一般到晚上10、11点，直接洗洗睡，接着第二天继续打鸡血）</p>\n<ul>\n<li>白天开发晚上联调，就这样先经历了第一周的前5天，感觉还可以，写得很嗨嘛。</li>\n<li>为了赶进度，PC关键功能进入提测阶段，我申请了周六的加班，修复QA报过来的bugs。</li>\n<li>考虑到wap的排期本来就有点紧，PC的进度延了一点，周日也去了公司提前启动的wap的开发，很鸡血的像机器人一样度过了非常充实的7天。</li>\n<li>到了第二周的周一，觉得有点累了，但是生活还是要继续~</li>\n<li>接下来的周二周三周四，简直像行尸走肉一样，感觉脑子有点转不过来了，还在坚持着，终于在周四把所有事情都搞完！</li>\n<li>周五就和 @沙滩小分队 去了@青岛，度过了一个轻松愉快的周末，满血复原回来。<br>另外，特别需要感谢一个人，很傻很天真的实习小伙伴 @文琳 ，她陪我一起度过了项目收尾的阶段，那段时间我还在天天跟新需求搏斗，她帮我修各种小bug，很耐心的天天陪着UI一个像素一个像素的抠，也是崩溃得不行，哈哈，如果不是她的友情协助，估计我会直接暴走，真的非常感谢。</li>\n</ul>\n<p>当然还有在我背后默默支持我的那些女人和男人，精神上和物质上的鼓励也非常给力，支撑着我努力的完成，不一一点名不用生气哟，谢谢你们~</p>\n<p>我去，本来的项目总结更偏技术，结果在blog这边一写竟变成回忆录也是醉了。</p>\n<h1 id=\"四、项目后的一些反省\"><a href=\"#四、项目后的一些反省\" class=\"headerlink\" title=\"四、项目后的一些反省\"></a>四、项目后的一些反省</h1><p>在evernote写的那版，详解了我在项目中遇到的技术问题，可以简单拿出来列出来：</p>\n<ul>\n<li>wap开发，响应式布局，全局用的像素单位em，没考虑图片合并问题，导致最后重新改写图片的引用。<br>当时有疑惑过FIS能不能支持相对单位图片的合并，但抱着“到时再看”的想法，直接拖到wap快提测，最后才去问的FIS的同学，不支持 T_T 只能重改，所幸引用图片不多，花了小半天修改。但这个问题告诉我，以后做技术选型，必须先考虑所有可能遇上的问题，可以接受再采用，不然做完了才来想，这次修改成本不高，万一需要全部重写呢？代价太大。</li>\n<li>设计规范，启动开发时，没问UI要设计规范，导致目前css代码中有部分冗余、重复的代码。<br>由于排期关系，UI没有一次性给完所有页面的图，都是按照出一个图开发一个页面的模式，最后才知道有“设计规范”这一说。其实在开发中，也发现有一些UI组件或者样式是可以复用，属于base类的样式，原本应该在项目启动开发时，先把base.css搭建起来，可惜最后才拿到，导致目前css代码中有部分冗余、重复的代码。</li>\n<li>关于功能组件化（解耦）<br>大部分情况下，我都会按照规范，把每个独立功能的相关逻辑写成widget，但是也有由于时间紧，写出来的一坨长文件，写完了测完了上线，现在回头再看，想解耦，天哪，都是些什么鬼！虽然都是自己写的，但是改了会担心影响到线上功能，真是一步错步步错，磨刀不误砍柴工，必须花时间做好设计才能下手敲，不然剁手！</li>\n<li>打包/部署流程 这个topic不打算展开，主要是之前虽然用了FIS很久，但对它的打包或者上线，线上的文件引用原理没有很了解，上线后才踩的很多自己埋的坑。另外，上线前没有跟RD沟通打包的tar包有没有特殊要求，有次排查半天发现是tar包名字不对，妈蛋，坑死自己了！<br>除了反省，其实自己做得不错的还是有那么一点，就是同步写PC和WAP页面时，因为交互不大一样有时候会很凌乱，但数据逻辑是类似的，有时候先写PC，后来写WAP时发现，哎哟，还有更好的实现方案，为了实现思路的统一，于是花时间重写PC的逻辑。应该算是一种自我要求吧，在二次思考时，没有直接copy上一次的思路，而是用一个新的角度去思考，说不定真有新发现，在时间那么紧迫的情况下，自己还愿意花时间去重写那些不够好但能run的逻辑，强迫症不够严重是做不到的，哈哈，看来药不能停 :)</li>\n</ul>\n<p>事实证明，师傅项目算是一次中期考验，而我从iknow和exp学到的东西，总算没白学，把能拿出来的货一次全拿出来，勉强hold住了，更多真的没有了，哈哈，真是论FE的自我修养呀，必须给自己点个赞！</p>\n<p>非常感谢这个项目，经历了这么一段时间，我得到了一定的技术/业务能力的成长，也给自己科普了很多以前并不care或者不理解的东西，更多的还有自信和成就感。也许在程序猿的成长的路上，需要经历这么一个“从无到有”的项目，才能加深对架构/模块设计/资源打包/代码部署这一系列动作的理解。</p>\n<p>继续加油吧，骚年！！！</p>"},{"title":"会简化工作的人升职更快","id":"64","date":"2014-12-21T15:32:16.000Z","_content":"\n再一次吐槽这个书名，翻译得实在太俗了~\n\n我觉得应该叫《提高工作效率大全》，哈哈，貌似也很俗；\n\n其实真是一本工具书，里面提到很多会影响我们工作效率的东西，怎么样把它们抛弃掉或者阻挡来自它们的影响，是一门艺术~\n\n<!--more-->\n\n下面是在阅读过程中，我觉得比较干货的一些摘录：\n\n* * *\n\n一、简单 —— 人生的真谛\n\n谨以爱因斯坦的一句名言作为本章的开篇：“一切都要尽可能地简单，但不要太简单。”这也是本书要向读者传达的人生真谛。\n\n* * *\n\n二、简单从丢掉9个包袱开始\n\n1.  完美主义\n\n    *   为了更充分地发挥潜力，就必须将完美主义和事必躬亲的包袱彻底扔掉！\n2.  老好人\n\n    *   老好人的共同特点是缺乏自信，当他们看到那些我行我素的人按照自己的方式工作时，总会发出羡慕的感慨。诚然，我们没有必要故意与他人为敌，但是如果一味迎合别人，反而容易迷失自己。\n3.  拖延症\n\n    *   临时抱佛脚，敷衍了事的“拖延症”患者绝不会收到满意的工作效果。\n4.  过度不安和担心\n\n    *   每个人都有不安或者担心的情绪，但是一旦过度就会成为人生的绊脚石。\n5.  糊涂账、无计划\n\n    *   在现实生活中，计划确实有时赶不上变化快，但是如果因此就放任不管，不做任何计划，则更容易导致“损失”、“错误”、“失败”和“浪费”。\n6.  过于努力\n\n    *   学会团队合作，不要执着于单靠一人之力。\n    *   过于努力的人就像是原地打转的陀螺，再怎么转也只是原地打转。\n7.  急性子\n\n    *   急性子的人总是没等到正确地了解状况就忙于下结论，他们还经常没等对方把话说完就中途打断，还自以为是地认为自己的结论是正确的。\n8.  没有用的物品\n\n    *   万事从清理、清扫开始。\n    *   首先，看一下你的桌面和抽屉，是不是已经充斥了杂乱无章的、没有用的物品？\n    *   其次，再看一下你的电脑桌面，是不是几个星期前下载的东西还没有删除？\n9.  曾经的自己\n\n    *   无论自己曾经多么辉煌，或多么失败，都没有必要与过去的经历纠缠。\n\n* * *\n\n三、工作需要张弛有度\n\n把工作分为重要和非重要两类，对于重要的工作，他们会集中所有的精力和能量重点处理，这样能够大幅度地提高工作效率，自然容易出业绩。\n\n1.  二八定律\n\n    *   努力分辨出占比两成的重要工作，然后把剩下的八成舍弃，这就是工作中的二八定律——把工作化繁为简，运用它一定能够收到绝好效果的工作方法\n2.  按重要程度把工作分成三类\n\n    *   必须亲自处理的工作\n\n        一般与自身利益密切相关，关乎工作成果或业绩。\n    *   让别人代为处理\n\n        作为一个步入社会的职场人，很多时候自己的力量是有限的，必须懂得借用他人的力量，通过分工合作达成一个共同的目标，也就是所谓的团队合作。\n\n        弄清楚谁擅长什么，谁不擅长什么，准确地把握每个人的特质才谈得上合理分工。\n    *   拒绝做的工作\n\n        把一些不重要的、可能会影响重要工作的事情先搁置一段时间。\n\n* * *\n\n四、时间管理术\n\n1.  不要轻易改变“工作计划”\n\n    *   提前安排，并且要按计划严格执行，绝对不能“轻易改变计划”\n2.  留下空闲时间很重要\n\n    *   懂得简单工作的人，都知道“空闲”的重要性，因为一旦出现了能够出成果的重要机会，有“空闲”就意味着能够马上行动，从而将机会牢牢地抓在手中。\n3.  如何对付无意义的“打岔”？\n\n    *   简单工作、高效工作就是要向周围宣告“我要忙了，不要打扰我”。\n\n* * *\n\n五、周一汇报工作的窍门\n\n1.  最先汇报“坏消息”。\n2.  尽量缩短汇报内容（以后会有详述的机会）。\n3.  只说结论，被问到时再回答。\n4.  不用邮件，口头汇报（这是当然的）。5.  汇报时间根据汇报内容的重要程度决定。6.  汇报重要信息时，要提前到达公司等候上司，争取第一时间汇报。7.  不重要的事情利用空闲时间汇报。\n\n* * *\n\n六、写书面报告的顺序：先结论后原因\n\n1.  标题鲜明。\n2.  先写结论。\n3.  再写原因，逐条阐述。\n4.  说明背景。\n5.  如果还有时间，可以附上数据、照片、报道等。\n\n* * *\n\n七、高效会议的几个共同点：\n\n1.  有决断权的人参加会议，而且当场决断。\n2.  即断即决是基础\n3.  不能决断时指示搜索相关信息\n4.  明确指示谁去做、做什么、什么时候提交等\n5.  明确截止日期\n6.  早晨开会\n7.  短时间、集中精神进行\n\n* * *\n\n八、擅长工作的人都是“思考者”加“行动派”\n\n计划指的是为在规定时间内完成工作而确定的工作方法和程序。\n\n工作必须设定完成期限，比如几小时内完成、几日内完成等。\n\n计划与完成期限有着密不可分的关系。\n\n1.  需要明确的问题\n\n    *   什么时候开始？\n    *   什么时候能结束？\n2.  接下来要抓住如下要点：\n\n    *   采用什么样的方法？\n    *   和谁一起做？\n\n* * *\n\n九、头脑风暴\n\n1.  头脑风暴的目的：\n\n    *   得到灵感。\n    *   获得意料之外的灵感。\n2.  头脑风暴的功效：\n\n    *   了解能激发创意的思维习惯。\n    *   了解大家的想法。\n3.  头脑风暴的方法：\n\n    *   事先只确定主题。\n    *   自由发表意见。\n    *   重视大家的想法。\n    *   不批评。头脑风暴的最大敌人是否定的意见。如果有一人提出否定意见，大家就会争论不休，以致最后无法达成统一意见。\n    *   鼓励跑题。\n\n* * *\n\n十、对任何问题都要有自己的想法\n\n   也许你的周围都是知识丰富、决断力强的人，这些人可以成为你的智囊团，但是你仍然要有自己的想法。而且最关键的是，你要决定是听自己的还是听别人的。\n","source":"_posts/simplify-work.md","raw":"---\ntitle: 会简化工作的人升职更快\ntags:\n  - efficiency\n  - reading\n  - time management\n  - work\nid: 64\ncategories:\n  - reading\ndate: 2014-12-21 23:32:16\n---\n\n再一次吐槽这个书名，翻译得实在太俗了~\n\n我觉得应该叫《提高工作效率大全》，哈哈，貌似也很俗；\n\n其实真是一本工具书，里面提到很多会影响我们工作效率的东西，怎么样把它们抛弃掉或者阻挡来自它们的影响，是一门艺术~\n\n<!--more-->\n\n下面是在阅读过程中，我觉得比较干货的一些摘录：\n\n* * *\n\n一、简单 —— 人生的真谛\n\n谨以爱因斯坦的一句名言作为本章的开篇：“一切都要尽可能地简单，但不要太简单。”这也是本书要向读者传达的人生真谛。\n\n* * *\n\n二、简单从丢掉9个包袱开始\n\n1.  完美主义\n\n    *   为了更充分地发挥潜力，就必须将完美主义和事必躬亲的包袱彻底扔掉！\n2.  老好人\n\n    *   老好人的共同特点是缺乏自信，当他们看到那些我行我素的人按照自己的方式工作时，总会发出羡慕的感慨。诚然，我们没有必要故意与他人为敌，但是如果一味迎合别人，反而容易迷失自己。\n3.  拖延症\n\n    *   临时抱佛脚，敷衍了事的“拖延症”患者绝不会收到满意的工作效果。\n4.  过度不安和担心\n\n    *   每个人都有不安或者担心的情绪，但是一旦过度就会成为人生的绊脚石。\n5.  糊涂账、无计划\n\n    *   在现实生活中，计划确实有时赶不上变化快，但是如果因此就放任不管，不做任何计划，则更容易导致“损失”、“错误”、“失败”和“浪费”。\n6.  过于努力\n\n    *   学会团队合作，不要执着于单靠一人之力。\n    *   过于努力的人就像是原地打转的陀螺，再怎么转也只是原地打转。\n7.  急性子\n\n    *   急性子的人总是没等到正确地了解状况就忙于下结论，他们还经常没等对方把话说完就中途打断，还自以为是地认为自己的结论是正确的。\n8.  没有用的物品\n\n    *   万事从清理、清扫开始。\n    *   首先，看一下你的桌面和抽屉，是不是已经充斥了杂乱无章的、没有用的物品？\n    *   其次，再看一下你的电脑桌面，是不是几个星期前下载的东西还没有删除？\n9.  曾经的自己\n\n    *   无论自己曾经多么辉煌，或多么失败，都没有必要与过去的经历纠缠。\n\n* * *\n\n三、工作需要张弛有度\n\n把工作分为重要和非重要两类，对于重要的工作，他们会集中所有的精力和能量重点处理，这样能够大幅度地提高工作效率，自然容易出业绩。\n\n1.  二八定律\n\n    *   努力分辨出占比两成的重要工作，然后把剩下的八成舍弃，这就是工作中的二八定律——把工作化繁为简，运用它一定能够收到绝好效果的工作方法\n2.  按重要程度把工作分成三类\n\n    *   必须亲自处理的工作\n\n        一般与自身利益密切相关，关乎工作成果或业绩。\n    *   让别人代为处理\n\n        作为一个步入社会的职场人，很多时候自己的力量是有限的，必须懂得借用他人的力量，通过分工合作达成一个共同的目标，也就是所谓的团队合作。\n\n        弄清楚谁擅长什么，谁不擅长什么，准确地把握每个人的特质才谈得上合理分工。\n    *   拒绝做的工作\n\n        把一些不重要的、可能会影响重要工作的事情先搁置一段时间。\n\n* * *\n\n四、时间管理术\n\n1.  不要轻易改变“工作计划”\n\n    *   提前安排，并且要按计划严格执行，绝对不能“轻易改变计划”\n2.  留下空闲时间很重要\n\n    *   懂得简单工作的人，都知道“空闲”的重要性，因为一旦出现了能够出成果的重要机会，有“空闲”就意味着能够马上行动，从而将机会牢牢地抓在手中。\n3.  如何对付无意义的“打岔”？\n\n    *   简单工作、高效工作就是要向周围宣告“我要忙了，不要打扰我”。\n\n* * *\n\n五、周一汇报工作的窍门\n\n1.  最先汇报“坏消息”。\n2.  尽量缩短汇报内容（以后会有详述的机会）。\n3.  只说结论，被问到时再回答。\n4.  不用邮件，口头汇报（这是当然的）。5.  汇报时间根据汇报内容的重要程度决定。6.  汇报重要信息时，要提前到达公司等候上司，争取第一时间汇报。7.  不重要的事情利用空闲时间汇报。\n\n* * *\n\n六、写书面报告的顺序：先结论后原因\n\n1.  标题鲜明。\n2.  先写结论。\n3.  再写原因，逐条阐述。\n4.  说明背景。\n5.  如果还有时间，可以附上数据、照片、报道等。\n\n* * *\n\n七、高效会议的几个共同点：\n\n1.  有决断权的人参加会议，而且当场决断。\n2.  即断即决是基础\n3.  不能决断时指示搜索相关信息\n4.  明确指示谁去做、做什么、什么时候提交等\n5.  明确截止日期\n6.  早晨开会\n7.  短时间、集中精神进行\n\n* * *\n\n八、擅长工作的人都是“思考者”加“行动派”\n\n计划指的是为在规定时间内完成工作而确定的工作方法和程序。\n\n工作必须设定完成期限，比如几小时内完成、几日内完成等。\n\n计划与完成期限有着密不可分的关系。\n\n1.  需要明确的问题\n\n    *   什么时候开始？\n    *   什么时候能结束？\n2.  接下来要抓住如下要点：\n\n    *   采用什么样的方法？\n    *   和谁一起做？\n\n* * *\n\n九、头脑风暴\n\n1.  头脑风暴的目的：\n\n    *   得到灵感。\n    *   获得意料之外的灵感。\n2.  头脑风暴的功效：\n\n    *   了解能激发创意的思维习惯。\n    *   了解大家的想法。\n3.  头脑风暴的方法：\n\n    *   事先只确定主题。\n    *   自由发表意见。\n    *   重视大家的想法。\n    *   不批评。头脑风暴的最大敌人是否定的意见。如果有一人提出否定意见，大家就会争论不休，以致最后无法达成统一意见。\n    *   鼓励跑题。\n\n* * *\n\n十、对任何问题都要有自己的想法\n\n   也许你的周围都是知识丰富、决断力强的人，这些人可以成为你的智囊团，但是你仍然要有自己的想法。而且最关键的是，你要决定是听自己的还是听别人的。\n","slug":"simplify-work","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xa00042zvr3fyjh982r","content":"<p>再一次吐槽这个书名，翻译得实在太俗了~</p>\n<p>我觉得应该叫《提高工作效率大全》，哈哈，貌似也很俗；</p>\n<p>其实真是一本工具书，里面提到很多会影响我们工作效率的东西，怎么样把它们抛弃掉或者阻挡来自它们的影响，是一门艺术~</p>\n<a id=\"more\"></a>\n<p>下面是在阅读过程中，我觉得比较干货的一些摘录：</p>\n<hr>\n<p>一、简单 —— 人生的真谛</p>\n<p>谨以爱因斯坦的一句名言作为本章的开篇：“一切都要尽可能地简单，但不要太简单。”这也是本书要向读者传达的人生真谛。</p>\n<hr>\n<p>二、简单从丢掉9个包袱开始</p>\n<ol>\n<li><p>完美主义</p>\n<ul>\n<li>为了更充分地发挥潜力，就必须将完美主义和事必躬亲的包袱彻底扔掉！</li>\n</ul>\n</li>\n<li><p>老好人</p>\n<ul>\n<li>老好人的共同特点是缺乏自信，当他们看到那些我行我素的人按照自己的方式工作时，总会发出羡慕的感慨。诚然，我们没有必要故意与他人为敌，但是如果一味迎合别人，反而容易迷失自己。</li>\n</ul>\n</li>\n<li><p>拖延症</p>\n<ul>\n<li>临时抱佛脚，敷衍了事的“拖延症”患者绝不会收到满意的工作效果。</li>\n</ul>\n</li>\n<li><p>过度不安和担心</p>\n<ul>\n<li>每个人都有不安或者担心的情绪，但是一旦过度就会成为人生的绊脚石。</li>\n</ul>\n</li>\n<li><p>糊涂账、无计划</p>\n<ul>\n<li>在现实生活中，计划确实有时赶不上变化快，但是如果因此就放任不管，不做任何计划，则更容易导致“损失”、“错误”、“失败”和“浪费”。</li>\n</ul>\n</li>\n<li><p>过于努力</p>\n<ul>\n<li>学会团队合作，不要执着于单靠一人之力。</li>\n<li>过于努力的人就像是原地打转的陀螺，再怎么转也只是原地打转。</li>\n</ul>\n</li>\n<li><p>急性子</p>\n<ul>\n<li>急性子的人总是没等到正确地了解状况就忙于下结论，他们还经常没等对方把话说完就中途打断，还自以为是地认为自己的结论是正确的。</li>\n</ul>\n</li>\n<li><p>没有用的物品</p>\n<ul>\n<li>万事从清理、清扫开始。</li>\n<li>首先，看一下你的桌面和抽屉，是不是已经充斥了杂乱无章的、没有用的物品？</li>\n<li>其次，再看一下你的电脑桌面，是不是几个星期前下载的东西还没有删除？</li>\n</ul>\n</li>\n<li><p>曾经的自己</p>\n<ul>\n<li>无论自己曾经多么辉煌，或多么失败，都没有必要与过去的经历纠缠。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>三、工作需要张弛有度</p>\n<p>把工作分为重要和非重要两类，对于重要的工作，他们会集中所有的精力和能量重点处理，这样能够大幅度地提高工作效率，自然容易出业绩。</p>\n<ol>\n<li><p>二八定律</p>\n<ul>\n<li>努力分辨出占比两成的重要工作，然后把剩下的八成舍弃，这就是工作中的二八定律——把工作化繁为简，运用它一定能够收到绝好效果的工作方法</li>\n</ul>\n</li>\n<li><p>按重要程度把工作分成三类</p>\n<ul>\n<li><p>必须亲自处理的工作</p>\n<p>一般与自身利益密切相关，关乎工作成果或业绩。</p>\n</li>\n<li><p>让别人代为处理</p>\n<p>作为一个步入社会的职场人，很多时候自己的力量是有限的，必须懂得借用他人的力量，通过分工合作达成一个共同的目标，也就是所谓的团队合作。</p>\n<p>弄清楚谁擅长什么，谁不擅长什么，准确地把握每个人的特质才谈得上合理分工。</p>\n</li>\n<li><p>拒绝做的工作</p>\n<p>把一些不重要的、可能会影响重要工作的事情先搁置一段时间。</p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>四、时间管理术</p>\n<ol>\n<li><p>不要轻易改变“工作计划”</p>\n<ul>\n<li>提前安排，并且要按计划严格执行，绝对不能“轻易改变计划”</li>\n</ul>\n</li>\n<li><p>留下空闲时间很重要</p>\n<ul>\n<li>懂得简单工作的人，都知道“空闲”的重要性，因为一旦出现了能够出成果的重要机会，有“空闲”就意味着能够马上行动，从而将机会牢牢地抓在手中。</li>\n</ul>\n</li>\n<li><p>如何对付无意义的“打岔”？</p>\n<ul>\n<li>简单工作、高效工作就是要向周围宣告“我要忙了，不要打扰我”。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>五、周一汇报工作的窍门</p>\n<ol>\n<li>最先汇报“坏消息”。</li>\n<li>尽量缩短汇报内容（以后会有详述的机会）。</li>\n<li>只说结论，被问到时再回答。</li>\n<li>不用邮件，口头汇报（这是当然的）。5.  汇报时间根据汇报内容的重要程度决定。6.  汇报重要信息时，要提前到达公司等候上司，争取第一时间汇报。7.  不重要的事情利用空闲时间汇报。</li>\n</ol>\n<hr>\n<p>六、写书面报告的顺序：先结论后原因</p>\n<ol>\n<li>标题鲜明。</li>\n<li>先写结论。</li>\n<li>再写原因，逐条阐述。</li>\n<li>说明背景。</li>\n<li>如果还有时间，可以附上数据、照片、报道等。</li>\n</ol>\n<hr>\n<p>七、高效会议的几个共同点：</p>\n<ol>\n<li>有决断权的人参加会议，而且当场决断。</li>\n<li>即断即决是基础</li>\n<li>不能决断时指示搜索相关信息</li>\n<li>明确指示谁去做、做什么、什么时候提交等</li>\n<li>明确截止日期</li>\n<li>早晨开会</li>\n<li>短时间、集中精神进行</li>\n</ol>\n<hr>\n<p>八、擅长工作的人都是“思考者”加“行动派”</p>\n<p>计划指的是为在规定时间内完成工作而确定的工作方法和程序。</p>\n<p>工作必须设定完成期限，比如几小时内完成、几日内完成等。</p>\n<p>计划与完成期限有着密不可分的关系。</p>\n<ol>\n<li><p>需要明确的问题</p>\n<ul>\n<li>什么时候开始？</li>\n<li>什么时候能结束？</li>\n</ul>\n</li>\n<li><p>接下来要抓住如下要点：</p>\n<ul>\n<li>采用什么样的方法？</li>\n<li>和谁一起做？</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>九、头脑风暴</p>\n<ol>\n<li><p>头脑风暴的目的：</p>\n<ul>\n<li>得到灵感。</li>\n<li>获得意料之外的灵感。</li>\n</ul>\n</li>\n<li><p>头脑风暴的功效：</p>\n<ul>\n<li>了解能激发创意的思维习惯。</li>\n<li>了解大家的想法。</li>\n</ul>\n</li>\n<li><p>头脑风暴的方法：</p>\n<ul>\n<li>事先只确定主题。</li>\n<li>自由发表意见。</li>\n<li>重视大家的想法。</li>\n<li>不批评。头脑风暴的最大敌人是否定的意见。如果有一人提出否定意见，大家就会争论不休，以致最后无法达成统一意见。</li>\n<li>鼓励跑题。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>十、对任何问题都要有自己的想法</p>\n<p>   也许你的周围都是知识丰富、决断力强的人，这些人可以成为你的智囊团，但是你仍然要有自己的想法。而且最关键的是，你要决定是听自己的还是听别人的。</p>\n","site":{"data":{}},"excerpt":"<p>再一次吐槽这个书名，翻译得实在太俗了~</p>\n<p>我觉得应该叫《提高工作效率大全》，哈哈，貌似也很俗；</p>\n<p>其实真是一本工具书，里面提到很多会影响我们工作效率的东西，怎么样把它们抛弃掉或者阻挡来自它们的影响，是一门艺术~</p>","more":"<p>下面是在阅读过程中，我觉得比较干货的一些摘录：</p>\n<hr>\n<p>一、简单 —— 人生的真谛</p>\n<p>谨以爱因斯坦的一句名言作为本章的开篇：“一切都要尽可能地简单，但不要太简单。”这也是本书要向读者传达的人生真谛。</p>\n<hr>\n<p>二、简单从丢掉9个包袱开始</p>\n<ol>\n<li><p>完美主义</p>\n<ul>\n<li>为了更充分地发挥潜力，就必须将完美主义和事必躬亲的包袱彻底扔掉！</li>\n</ul>\n</li>\n<li><p>老好人</p>\n<ul>\n<li>老好人的共同特点是缺乏自信，当他们看到那些我行我素的人按照自己的方式工作时，总会发出羡慕的感慨。诚然，我们没有必要故意与他人为敌，但是如果一味迎合别人，反而容易迷失自己。</li>\n</ul>\n</li>\n<li><p>拖延症</p>\n<ul>\n<li>临时抱佛脚，敷衍了事的“拖延症”患者绝不会收到满意的工作效果。</li>\n</ul>\n</li>\n<li><p>过度不安和担心</p>\n<ul>\n<li>每个人都有不安或者担心的情绪，但是一旦过度就会成为人生的绊脚石。</li>\n</ul>\n</li>\n<li><p>糊涂账、无计划</p>\n<ul>\n<li>在现实生活中，计划确实有时赶不上变化快，但是如果因此就放任不管，不做任何计划，则更容易导致“损失”、“错误”、“失败”和“浪费”。</li>\n</ul>\n</li>\n<li><p>过于努力</p>\n<ul>\n<li>学会团队合作，不要执着于单靠一人之力。</li>\n<li>过于努力的人就像是原地打转的陀螺，再怎么转也只是原地打转。</li>\n</ul>\n</li>\n<li><p>急性子</p>\n<ul>\n<li>急性子的人总是没等到正确地了解状况就忙于下结论，他们还经常没等对方把话说完就中途打断，还自以为是地认为自己的结论是正确的。</li>\n</ul>\n</li>\n<li><p>没有用的物品</p>\n<ul>\n<li>万事从清理、清扫开始。</li>\n<li>首先，看一下你的桌面和抽屉，是不是已经充斥了杂乱无章的、没有用的物品？</li>\n<li>其次，再看一下你的电脑桌面，是不是几个星期前下载的东西还没有删除？</li>\n</ul>\n</li>\n<li><p>曾经的自己</p>\n<ul>\n<li>无论自己曾经多么辉煌，或多么失败，都没有必要与过去的经历纠缠。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>三、工作需要张弛有度</p>\n<p>把工作分为重要和非重要两类，对于重要的工作，他们会集中所有的精力和能量重点处理，这样能够大幅度地提高工作效率，自然容易出业绩。</p>\n<ol>\n<li><p>二八定律</p>\n<ul>\n<li>努力分辨出占比两成的重要工作，然后把剩下的八成舍弃，这就是工作中的二八定律——把工作化繁为简，运用它一定能够收到绝好效果的工作方法</li>\n</ul>\n</li>\n<li><p>按重要程度把工作分成三类</p>\n<ul>\n<li><p>必须亲自处理的工作</p>\n<p>一般与自身利益密切相关，关乎工作成果或业绩。</p>\n</li>\n<li><p>让别人代为处理</p>\n<p>作为一个步入社会的职场人，很多时候自己的力量是有限的，必须懂得借用他人的力量，通过分工合作达成一个共同的目标，也就是所谓的团队合作。</p>\n<p>弄清楚谁擅长什么，谁不擅长什么，准确地把握每个人的特质才谈得上合理分工。</p>\n</li>\n<li><p>拒绝做的工作</p>\n<p>把一些不重要的、可能会影响重要工作的事情先搁置一段时间。</p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>四、时间管理术</p>\n<ol>\n<li><p>不要轻易改变“工作计划”</p>\n<ul>\n<li>提前安排，并且要按计划严格执行，绝对不能“轻易改变计划”</li>\n</ul>\n</li>\n<li><p>留下空闲时间很重要</p>\n<ul>\n<li>懂得简单工作的人，都知道“空闲”的重要性，因为一旦出现了能够出成果的重要机会，有“空闲”就意味着能够马上行动，从而将机会牢牢地抓在手中。</li>\n</ul>\n</li>\n<li><p>如何对付无意义的“打岔”？</p>\n<ul>\n<li>简单工作、高效工作就是要向周围宣告“我要忙了，不要打扰我”。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>五、周一汇报工作的窍门</p>\n<ol>\n<li>最先汇报“坏消息”。</li>\n<li>尽量缩短汇报内容（以后会有详述的机会）。</li>\n<li>只说结论，被问到时再回答。</li>\n<li>不用邮件，口头汇报（这是当然的）。5.  汇报时间根据汇报内容的重要程度决定。6.  汇报重要信息时，要提前到达公司等候上司，争取第一时间汇报。7.  不重要的事情利用空闲时间汇报。</li>\n</ol>\n<hr>\n<p>六、写书面报告的顺序：先结论后原因</p>\n<ol>\n<li>标题鲜明。</li>\n<li>先写结论。</li>\n<li>再写原因，逐条阐述。</li>\n<li>说明背景。</li>\n<li>如果还有时间，可以附上数据、照片、报道等。</li>\n</ol>\n<hr>\n<p>七、高效会议的几个共同点：</p>\n<ol>\n<li>有决断权的人参加会议，而且当场决断。</li>\n<li>即断即决是基础</li>\n<li>不能决断时指示搜索相关信息</li>\n<li>明确指示谁去做、做什么、什么时候提交等</li>\n<li>明确截止日期</li>\n<li>早晨开会</li>\n<li>短时间、集中精神进行</li>\n</ol>\n<hr>\n<p>八、擅长工作的人都是“思考者”加“行动派”</p>\n<p>计划指的是为在规定时间内完成工作而确定的工作方法和程序。</p>\n<p>工作必须设定完成期限，比如几小时内完成、几日内完成等。</p>\n<p>计划与完成期限有着密不可分的关系。</p>\n<ol>\n<li><p>需要明确的问题</p>\n<ul>\n<li>什么时候开始？</li>\n<li>什么时候能结束？</li>\n</ul>\n</li>\n<li><p>接下来要抓住如下要点：</p>\n<ul>\n<li>采用什么样的方法？</li>\n<li>和谁一起做？</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>九、头脑风暴</p>\n<ol>\n<li><p>头脑风暴的目的：</p>\n<ul>\n<li>得到灵感。</li>\n<li>获得意料之外的灵感。</li>\n</ul>\n</li>\n<li><p>头脑风暴的功效：</p>\n<ul>\n<li>了解能激发创意的思维习惯。</li>\n<li>了解大家的想法。</li>\n</ul>\n</li>\n<li><p>头脑风暴的方法：</p>\n<ul>\n<li>事先只确定主题。</li>\n<li>自由发表意见。</li>\n<li>重视大家的想法。</li>\n<li>不批评。头脑风暴的最大敌人是否定的意见。如果有一人提出否定意见，大家就会争论不休，以致最后无法达成统一意见。</li>\n<li>鼓励跑题。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>十、对任何问题都要有自己的想法</p>\n<p>   也许你的周围都是知识丰富、决断力强的人，这些人可以成为你的智囊团，但是你仍然要有自己的想法。而且最关键的是，你要决定是听自己的还是听别人的。</p>"},{"title":"2014 - 年度总结","id":"72","date":"2015-01-02T12:09:23.000Z","type":"title","_content":"\n### 一、工作\n\n*   比较大的项目，做了25个，小的就不算了，更多就不讲了，说了大家也没兴趣，今年我最引以为豪的页面是[知道9周年](http://zhidao.baidu.com/s/9-year/)PC页面，谢谢大家\n*   今年成长了很多，从小小菜鸟，到hold得住一点点，充满机遇和挑战，硬扛下来了\n\n### 二、理财\n\n*   基金，收益 +16.72%\n*   P2P，收益 +9.9%\n*   股票，不懂算收益，因为账目实在太凌乱，明年再算吧，今年大致还是亏的，哈哈\n*   开通A股、美股账户\n*   完成[长投网](http://www.ichangtou.net/)的初级课程，对股市、财报有了初步的了解\n*   关于理财的最大收获，接触到[神奇公式](http://www.magicformulainvesting.com)，可以通过看书《股市稳赚》了解哈\n\n### 三、旅行\n\n*   苏州\n\n    *   交通很凌乱，很多小摩托在到处飞\n    *   面很好吃，鳝糊很棒！\n    *   园林很美，拍照超好看~\n    *   当地的嗜甜口味，比较扛不住，尤其加糖浆的煲仔饭，我整个人都不好了~\n\n*   大连\n\n    *   交通也很乱，很多红绿灯比较奇怪\n    *   坐的公交居然撞车，第一次碰到bus撞bus的case，也是醉了\n    *   去的时候天气不好，几乎3天都是雾霾，完全拍不了照\n    *   以为去大连看海，结果海边栈道在山上，变成爬山，太锻炼人啦 T_T\n    *   海鲜超便宜超新鲜，就冲着吃海鲜，我还是愿意去第二次\n\n### 四、读书\n\n2014年共计读了46本书，今年看的关于理财和产品/设计的书可能比较多，下面是我最喜欢/最受益的3本：\n\n*   [幸福的方法](http://book.douban.com/subject/20480823/)\n\n    *   这本书教你怎么追求幸福的生活，里面有很多实践的方法，不仅仅是纸上谈兵，读完这本书我都觉得自己幸福了很多，哈哈 :)\n    *   我也写过一段时间的[《感恩十事》](/2014/12/06/touching10/)系列，决定不写出来啦，自己收好，各人都有自己的感恩十事，哈哈，足以感动自己即可；\n\n*   [解忧杂货店](http://book.douban.com/subject/25862578/)\n\n    *   一个个的走心小故事，很温暖\n\n*   [股市稳赚](http://book.douban.com/subject/2045899/)\n\n    *   一个很特别的选股方式，就是不选，机器选，每年只操作一次；\n    *   不要看这是很小白的投资方法，过去20多年，年化收益有20+%，贵在坚持，我要实验一下\n\n### 五、话剧\n\n跟着 @猩爷 看话剧，各种类型都尝试一下，感觉还没有找到合适的戏路~\n\n*   Q大道\n\n    *   百老汇音乐剧，边演边跳边唱，实在入不了戏，有种看印度电影的感觉\n\n*   顾不上\n\n    *   悲闹剧，小伙伴给的票，觉得不太适合看这种红色背景比较强烈的戏\n\n*   两只狗的生活意见\n\n    *   搞笑鸡汤，还是get不到\n\n### 六、电影\n\n2014年看的电影，51部，应该电视剧偏多，尤其是tvb的：\n\n*   最喜欢的3部电影：\n\n    *   [楚门的世界](http://movie.douban.com/subject/1292064/)\n    *   [星际穿越](http://movie.douban.com/subject/1889243/)\n    *   [移动迷宫](http://movie.douban.com/subject/21349345/)\n\n*   最烂的3部：\n\n    *   海扁王2\n    *   临时同居\n    *   猩球崛起2\n\n* * *\n\n关于2015年的计划，其实已经写了一部分，但是没想好，就暂时不放出来了，明年我们再看多少实现了多少拖延了~","source":"_posts/summary-2014.md","raw":"---\ntitle: 2014 - 年度总结\ntags:\n  - life\n  - 总结\nid: 72\ncategories:\n  - life\ndate: 2015-01-02 20:09:23\ntype: title\n---\n\n### 一、工作\n\n*   比较大的项目，做了25个，小的就不算了，更多就不讲了，说了大家也没兴趣，今年我最引以为豪的页面是[知道9周年](http://zhidao.baidu.com/s/9-year/)PC页面，谢谢大家\n*   今年成长了很多，从小小菜鸟，到hold得住一点点，充满机遇和挑战，硬扛下来了\n\n### 二、理财\n\n*   基金，收益 +16.72%\n*   P2P，收益 +9.9%\n*   股票，不懂算收益，因为账目实在太凌乱，明年再算吧，今年大致还是亏的，哈哈\n*   开通A股、美股账户\n*   完成[长投网](http://www.ichangtou.net/)的初级课程，对股市、财报有了初步的了解\n*   关于理财的最大收获，接触到[神奇公式](http://www.magicformulainvesting.com)，可以通过看书《股市稳赚》了解哈\n\n### 三、旅行\n\n*   苏州\n\n    *   交通很凌乱，很多小摩托在到处飞\n    *   面很好吃，鳝糊很棒！\n    *   园林很美，拍照超好看~\n    *   当地的嗜甜口味，比较扛不住，尤其加糖浆的煲仔饭，我整个人都不好了~\n\n*   大连\n\n    *   交通也很乱，很多红绿灯比较奇怪\n    *   坐的公交居然撞车，第一次碰到bus撞bus的case，也是醉了\n    *   去的时候天气不好，几乎3天都是雾霾，完全拍不了照\n    *   以为去大连看海，结果海边栈道在山上，变成爬山，太锻炼人啦 T_T\n    *   海鲜超便宜超新鲜，就冲着吃海鲜，我还是愿意去第二次\n\n### 四、读书\n\n2014年共计读了46本书，今年看的关于理财和产品/设计的书可能比较多，下面是我最喜欢/最受益的3本：\n\n*   [幸福的方法](http://book.douban.com/subject/20480823/)\n\n    *   这本书教你怎么追求幸福的生活，里面有很多实践的方法，不仅仅是纸上谈兵，读完这本书我都觉得自己幸福了很多，哈哈 :)\n    *   我也写过一段时间的[《感恩十事》](/2014/12/06/touching10/)系列，决定不写出来啦，自己收好，各人都有自己的感恩十事，哈哈，足以感动自己即可；\n\n*   [解忧杂货店](http://book.douban.com/subject/25862578/)\n\n    *   一个个的走心小故事，很温暖\n\n*   [股市稳赚](http://book.douban.com/subject/2045899/)\n\n    *   一个很特别的选股方式，就是不选，机器选，每年只操作一次；\n    *   不要看这是很小白的投资方法，过去20多年，年化收益有20+%，贵在坚持，我要实验一下\n\n### 五、话剧\n\n跟着 @猩爷 看话剧，各种类型都尝试一下，感觉还没有找到合适的戏路~\n\n*   Q大道\n\n    *   百老汇音乐剧，边演边跳边唱，实在入不了戏，有种看印度电影的感觉\n\n*   顾不上\n\n    *   悲闹剧，小伙伴给的票，觉得不太适合看这种红色背景比较强烈的戏\n\n*   两只狗的生活意见\n\n    *   搞笑鸡汤，还是get不到\n\n### 六、电影\n\n2014年看的电影，51部，应该电视剧偏多，尤其是tvb的：\n\n*   最喜欢的3部电影：\n\n    *   [楚门的世界](http://movie.douban.com/subject/1292064/)\n    *   [星际穿越](http://movie.douban.com/subject/1889243/)\n    *   [移动迷宫](http://movie.douban.com/subject/21349345/)\n\n*   最烂的3部：\n\n    *   海扁王2\n    *   临时同居\n    *   猩球崛起2\n\n* * *\n\n关于2015年的计划，其实已经写了一部分，但是没想好，就暂时不放出来了，明年我们再看多少实现了多少拖延了~","slug":"summary-2014","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xa20047zvr3kgpjjf10","content":"<h3 id=\"一、工作\"><a href=\"#一、工作\" class=\"headerlink\" title=\"一、工作\"></a>一、工作</h3><ul>\n<li>比较大的项目，做了25个，小的就不算了，更多就不讲了，说了大家也没兴趣，今年我最引以为豪的页面是<a href=\"http://zhidao.baidu.com/s/9-year/\" target=\"_blank\" rel=\"noopener\">知道9周年</a>PC页面，谢谢大家</li>\n<li>今年成长了很多，从小小菜鸟，到hold得住一点点，充满机遇和挑战，硬扛下来了</li>\n</ul>\n<h3 id=\"二、理财\"><a href=\"#二、理财\" class=\"headerlink\" title=\"二、理财\"></a>二、理财</h3><ul>\n<li>基金，收益 +16.72%</li>\n<li>P2P，收益 +9.9%</li>\n<li>股票，不懂算收益，因为账目实在太凌乱，明年再算吧，今年大致还是亏的，哈哈</li>\n<li>开通A股、美股账户</li>\n<li>完成<a href=\"http://www.ichangtou.net/\" target=\"_blank\" rel=\"noopener\">长投网</a>的初级课程，对股市、财报有了初步的了解</li>\n<li>关于理财的最大收获，接触到<a href=\"http://www.magicformulainvesting.com\" target=\"_blank\" rel=\"noopener\">神奇公式</a>，可以通过看书《股市稳赚》了解哈</li>\n</ul>\n<h3 id=\"三、旅行\"><a href=\"#三、旅行\" class=\"headerlink\" title=\"三、旅行\"></a>三、旅行</h3><ul>\n<li><p>苏州</p>\n<ul>\n<li>交通很凌乱，很多小摩托在到处飞</li>\n<li>面很好吃，鳝糊很棒！</li>\n<li>园林很美，拍照超好看~</li>\n<li>当地的嗜甜口味，比较扛不住，尤其加糖浆的煲仔饭，我整个人都不好了~</li>\n</ul>\n</li>\n<li><p>大连</p>\n<ul>\n<li>交通也很乱，很多红绿灯比较奇怪</li>\n<li>坐的公交居然撞车，第一次碰到bus撞bus的case，也是醉了</li>\n<li>去的时候天气不好，几乎3天都是雾霾，完全拍不了照</li>\n<li>以为去大连看海，结果海边栈道在山上，变成爬山，太锻炼人啦 T_T</li>\n<li>海鲜超便宜超新鲜，就冲着吃海鲜，我还是愿意去第二次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四、读书\"><a href=\"#四、读书\" class=\"headerlink\" title=\"四、读书\"></a>四、读书</h3><p>2014年共计读了46本书，今年看的关于理财和产品/设计的书可能比较多，下面是我最喜欢/最受益的3本：</p>\n<ul>\n<li><p><a href=\"http://book.douban.com/subject/20480823/\" target=\"_blank\" rel=\"noopener\">幸福的方法</a></p>\n<ul>\n<li>这本书教你怎么追求幸福的生活，里面有很多实践的方法，不仅仅是纸上谈兵，读完这本书我都觉得自己幸福了很多，哈哈 :)</li>\n<li>我也写过一段时间的<a href=\"/2014/12/06/touching10/\">《感恩十事》</a>系列，决定不写出来啦，自己收好，各人都有自己的感恩十事，哈哈，足以感动自己即可；</li>\n</ul>\n</li>\n<li><p><a href=\"http://book.douban.com/subject/25862578/\" target=\"_blank\" rel=\"noopener\">解忧杂货店</a></p>\n<ul>\n<li>一个个的走心小故事，很温暖</li>\n</ul>\n</li>\n<li><p><a href=\"http://book.douban.com/subject/2045899/\" target=\"_blank\" rel=\"noopener\">股市稳赚</a></p>\n<ul>\n<li>一个很特别的选股方式，就是不选，机器选，每年只操作一次；</li>\n<li>不要看这是很小白的投资方法，过去20多年，年化收益有20+%，贵在坚持，我要实验一下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、话剧\"><a href=\"#五、话剧\" class=\"headerlink\" title=\"五、话剧\"></a>五、话剧</h3><p>跟着 @猩爷 看话剧，各种类型都尝试一下，感觉还没有找到合适的戏路~</p>\n<ul>\n<li><p>Q大道</p>\n<ul>\n<li>百老汇音乐剧，边演边跳边唱，实在入不了戏，有种看印度电影的感觉</li>\n</ul>\n</li>\n<li><p>顾不上</p>\n<ul>\n<li>悲闹剧，小伙伴给的票，觉得不太适合看这种红色背景比较强烈的戏</li>\n</ul>\n</li>\n<li><p>两只狗的生活意见</p>\n<ul>\n<li>搞笑鸡汤，还是get不到</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、电影\"><a href=\"#六、电影\" class=\"headerlink\" title=\"六、电影\"></a>六、电影</h3><p>2014年看的电影，51部，应该电视剧偏多，尤其是tvb的：</p>\n<ul>\n<li><p>最喜欢的3部电影：</p>\n<ul>\n<li><a href=\"http://movie.douban.com/subject/1292064/\" target=\"_blank\" rel=\"noopener\">楚门的世界</a></li>\n<li><a href=\"http://movie.douban.com/subject/1889243/\" target=\"_blank\" rel=\"noopener\">星际穿越</a></li>\n<li><a href=\"http://movie.douban.com/subject/21349345/\" target=\"_blank\" rel=\"noopener\">移动迷宫</a></li>\n</ul>\n</li>\n<li><p>最烂的3部：</p>\n<ul>\n<li>海扁王2</li>\n<li>临时同居</li>\n<li>猩球崛起2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>关于2015年的计划，其实已经写了一部分，但是没想好，就暂时不放出来了，明年我们再看多少实现了多少拖延了~</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、工作\"><a href=\"#一、工作\" class=\"headerlink\" title=\"一、工作\"></a>一、工作</h3><ul>\n<li>比较大的项目，做了25个，小的就不算了，更多就不讲了，说了大家也没兴趣，今年我最引以为豪的页面是<a href=\"http://zhidao.baidu.com/s/9-year/\" target=\"_blank\" rel=\"noopener\">知道9周年</a>PC页面，谢谢大家</li>\n<li>今年成长了很多，从小小菜鸟，到hold得住一点点，充满机遇和挑战，硬扛下来了</li>\n</ul>\n<h3 id=\"二、理财\"><a href=\"#二、理财\" class=\"headerlink\" title=\"二、理财\"></a>二、理财</h3><ul>\n<li>基金，收益 +16.72%</li>\n<li>P2P，收益 +9.9%</li>\n<li>股票，不懂算收益，因为账目实在太凌乱，明年再算吧，今年大致还是亏的，哈哈</li>\n<li>开通A股、美股账户</li>\n<li>完成<a href=\"http://www.ichangtou.net/\" target=\"_blank\" rel=\"noopener\">长投网</a>的初级课程，对股市、财报有了初步的了解</li>\n<li>关于理财的最大收获，接触到<a href=\"http://www.magicformulainvesting.com\" target=\"_blank\" rel=\"noopener\">神奇公式</a>，可以通过看书《股市稳赚》了解哈</li>\n</ul>\n<h3 id=\"三、旅行\"><a href=\"#三、旅行\" class=\"headerlink\" title=\"三、旅行\"></a>三、旅行</h3><ul>\n<li><p>苏州</p>\n<ul>\n<li>交通很凌乱，很多小摩托在到处飞</li>\n<li>面很好吃，鳝糊很棒！</li>\n<li>园林很美，拍照超好看~</li>\n<li>当地的嗜甜口味，比较扛不住，尤其加糖浆的煲仔饭，我整个人都不好了~</li>\n</ul>\n</li>\n<li><p>大连</p>\n<ul>\n<li>交通也很乱，很多红绿灯比较奇怪</li>\n<li>坐的公交居然撞车，第一次碰到bus撞bus的case，也是醉了</li>\n<li>去的时候天气不好，几乎3天都是雾霾，完全拍不了照</li>\n<li>以为去大连看海，结果海边栈道在山上，变成爬山，太锻炼人啦 T_T</li>\n<li>海鲜超便宜超新鲜，就冲着吃海鲜，我还是愿意去第二次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四、读书\"><a href=\"#四、读书\" class=\"headerlink\" title=\"四、读书\"></a>四、读书</h3><p>2014年共计读了46本书，今年看的关于理财和产品/设计的书可能比较多，下面是我最喜欢/最受益的3本：</p>\n<ul>\n<li><p><a href=\"http://book.douban.com/subject/20480823/\" target=\"_blank\" rel=\"noopener\">幸福的方法</a></p>\n<ul>\n<li>这本书教你怎么追求幸福的生活，里面有很多实践的方法，不仅仅是纸上谈兵，读完这本书我都觉得自己幸福了很多，哈哈 :)</li>\n<li>我也写过一段时间的<a href=\"/2014/12/06/touching10/\">《感恩十事》</a>系列，决定不写出来啦，自己收好，各人都有自己的感恩十事，哈哈，足以感动自己即可；</li>\n</ul>\n</li>\n<li><p><a href=\"http://book.douban.com/subject/25862578/\" target=\"_blank\" rel=\"noopener\">解忧杂货店</a></p>\n<ul>\n<li>一个个的走心小故事，很温暖</li>\n</ul>\n</li>\n<li><p><a href=\"http://book.douban.com/subject/2045899/\" target=\"_blank\" rel=\"noopener\">股市稳赚</a></p>\n<ul>\n<li>一个很特别的选股方式，就是不选，机器选，每年只操作一次；</li>\n<li>不要看这是很小白的投资方法，过去20多年，年化收益有20+%，贵在坚持，我要实验一下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、话剧\"><a href=\"#五、话剧\" class=\"headerlink\" title=\"五、话剧\"></a>五、话剧</h3><p>跟着 @猩爷 看话剧，各种类型都尝试一下，感觉还没有找到合适的戏路~</p>\n<ul>\n<li><p>Q大道</p>\n<ul>\n<li>百老汇音乐剧，边演边跳边唱，实在入不了戏，有种看印度电影的感觉</li>\n</ul>\n</li>\n<li><p>顾不上</p>\n<ul>\n<li>悲闹剧，小伙伴给的票，觉得不太适合看这种红色背景比较强烈的戏</li>\n</ul>\n</li>\n<li><p>两只狗的生活意见</p>\n<ul>\n<li>搞笑鸡汤，还是get不到</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、电影\"><a href=\"#六、电影\" class=\"headerlink\" title=\"六、电影\"></a>六、电影</h3><p>2014年看的电影，51部，应该电视剧偏多，尤其是tvb的：</p>\n<ul>\n<li><p>最喜欢的3部电影：</p>\n<ul>\n<li><a href=\"http://movie.douban.com/subject/1292064/\" target=\"_blank\" rel=\"noopener\">楚门的世界</a></li>\n<li><a href=\"http://movie.douban.com/subject/1889243/\" target=\"_blank\" rel=\"noopener\">星际穿越</a></li>\n<li><a href=\"http://movie.douban.com/subject/21349345/\" target=\"_blank\" rel=\"noopener\">移动迷宫</a></li>\n</ul>\n</li>\n<li><p>最烂的3部：</p>\n<ul>\n<li>海扁王2</li>\n<li>临时同居</li>\n<li>猩球崛起2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>关于2015年的计划，其实已经写了一部分，但是没想好，就暂时不放出来了，明年我们再看多少实现了多少拖延了~</p>\n"},{"title":"关于「自由态职业」","date":"2018-04-30T15:37:19.000Z","_content":"\n最近读了萧秋水和剽悍一只猫的[《知识变现》](https://book.douban.com/subject/27177491/)，准确的来说，这本书不全是讲如何变现你的知识，而是从多方面去解释什么是“斜杠青年”和“自由职业”，而“自由态职业”又是什么，个人觉得此书应该改名为《国内斜杠青年/自由工作者的生活/工作现状》。\n\n<!-- more -->\n\n想起在新西兰working holiday的时候，曾经遇到一个Airbnb的房东Chris，是个自由职业的程序员。一次偶然的机会看到他的书房，看到3个屏幕，我就问他是不是IT行业的，没想到Chris是为IBM远程工作的，他在新西兰，团队base在美国还是加拿大，做的是后端开发相关工作。\n\n这次我第一次面基自由职业者的工程师，非常好奇，就趁机问了一直很感兴趣的几个问题。\n\n`WYY: ` 为什么会选择自由职业？  \n`Chris: ` 我有两个孩子，希望多一点时间陪伴家人，如果出国工作的话，可能一年就没多少时间可以在家里陪伴家人了。（注：新西兰的IT工作机会一般在奥克兰、惠灵顿这样的大城市，不过相对没有像美国或者中国一样有各式各样的top IT companies哈）\n\n`WYY: ` 那日常你是怎么工作的呢？  \n`Chris: ` 早上6点起床，趁着孩子们还没起床，就开始锻炼和工作，有个独立的书房，可以安静的做自己的事情。然后到点了送孩子们去上学，回来继续工作，那么到孩子们放学之后，我就有自由的时间可以陪伴他们了。\n\n`WYY: ` remote的工作，是怎么找到工作的？不会沟通成本比较高吗？  \n`Chris: ` 我之前就在IBM工作的，比较熟悉工作流程，后来我因为家庭原因，选择回来新西兰，我的前老板问我有没有兴趣远程工作，我就答应了，跟团队的合作、沟通还算流畅。\n\n其实从跟Chris的对话里面可以发现，自由职业者的生活有可能比正常朝九晚五还困难些，需要自律，也需要具备很好的时间管理的能力，才能在工作和生活的时间打乱的情况，还能做到很好的平衡。专业能力以外，你可能还需要做一些自我销售、运营等等的工作以外的事情，让更多人知道你和信任你。\n\n“自由职业”不是一种职业，而是你本身具备专业能力，有选择的“自由”。\n\n正如书中说的：\n\n> 成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。\n\n整体来说，如果想了解斜杠青年/自由职业者的工作生活状态的话，还是可以看看这本书哈。更多书摘如下。\n\n## 斜杠青年和自由职业，职业定位新趋势\n\n“斜杠青年”来源于英文“Slash”，《纽约时报》\b专栏作家麦瑞克·阿尔伯撰写了一本书，叫作《双重职业》（One Person/Multiple Careers: A New Model for Work/Life Success）。\n\n### 你认为普通人如何修炼才能成为斜杠青年？\n（from 吉吉）\n\n#### 第一，知道自己为什么要成为斜杠青年再开始：\n\n1. 不要赶流行，不要因为别人说斜杠青年好，就盲目地加入，这应该是一种有目标的主动选择，而且知道需要大量的投入，其实很辛苦；\n2. 有深层次的需求，像我说的安全感，还有一些契机，比如年龄、家庭变故、工作瓶颈等；\n3. 摆清斜杠和单杠的关系，斜杠不是单杠做不好就逃避，单杠没解决的问题没踩过的坑，斜杠一样会掉进去重补这一课，所以应该把单杠做好，打一个比较稳的地基，培养核心技能，就算不喜欢，单杠也可以修炼你把不喜欢的事做好的能力。\n\n#### 第二，斜杠青年的四阶段：\n\n1. 照妖镜：认知自己，找到精进的方向。\n\n    * 更多维度地去了解自己，通过各种各样的工具，比如性格测试、行为风格测试、生活态度取向测试、价值观梳理，去认知自己，知道自己是什么样的人，为什么同样是探索，速度、节奏、心态会有不同。\n\n    * 知道自己喜欢什么，找到兴趣和天命。排除钱、时间等因素，最想做什么，梳理过往成就事件，找到一些共性，发现自己真正喜欢的是什么。\n\n    * 认知现实、遥望理想，将愿景描绘出来并固化，找到差距和努力的方向。\n\n2. 默练剑：通过持续行动，修炼技能\n    * 划分能力矩阵，喜欢与擅长的优势区是核心技能，需要不断打磨；\n    * 喜欢但是不擅长的，是潜能的部分，应该加强，培育发芽的小种子；\n    * 不喜欢也不擅长的盲区，不要做，回避不了的，死磕到不扯后腿。\n\n3. 等风来：外化自己，扩大圈子，告诉别人自己准备好了，积极地站在风口处等待机会的来临，甚至主动出击。\n\n4. 滚雪球：依托一个平台和身份，斜杠身份的数量会不断地拓展，然后要具有把多重身份整合在一起打组合拳的能力。\n\n#### 第三，斜杠青年要注意的：\n\n1. 要围绕个人品牌，这样单个身份或者平台如果失去了势能，大家还会因为认可这个人而追随。\n2. 所有的积累都有价值，不一定马上兑换成显性的名利，但是这当中积累的经验、可迁移的能力都是弥足珍贵的，人走的每一步，都有价值。\n3. 要有多个维度的平衡：阶段性专注、身体保障、家人情感的支持、时常审视初心。\n\n## 你适合成为自由职业者吗\n\n成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。\n\n自由职业的自由，不是辞职的自由，而是选择的自由，这个选择背后，是能力的自由。\n\n要想在自己的自由职业生涯中最大限度地降低风险，有几项原则：\n\n第一，要把握好“市场需要、我最擅长、能者不多”的定位原则，使自己或自己的产品具有市场性、竞争性和独特性；不要试图山寨别人，靠拷贝别人现买现卖是没有竞争力的。同样的道理，如果你的产品或服务能够被别人轻易拷贝，那也说明你并没有别人不能取代的核心竞争力。\n\n第二，为了防止自己知识和技能的老化，你必须具有不断学习和创造的能力，而不是试图“一招鲜，吃遍天”。这在知识更新速度日益加快的今天，已经行不通了。学习能力已经演变成为新的生存能力。\n\n第三，增强自己的法律意识和风险意识，在与人合作的过程中要有维权意识，注意用法律和规则保护自己，以防“客大欺店”和遭小人暗算。\n\n第四，尽早地为自己在医疗、意外和养老方面投入必要的保险资金，做到晴天也防连阴雨。\n\n## 互联网时代的雇佣关系\n\n里德·霍夫曼的《联盟》开章明义，给出了这样的观点。\n\n在里德看来，用联盟的方式重建雇主和员工的关系非常必要。“商业世界需要有利于相互信任、相互投资、共同受益的新雇佣关系框架。理想的雇佣关系框架鼓励员工发展个人人脉、勇于开拓实干，而不是成为唯利是图的跳槽专业户。”\n\n如何建立联盟，书中有几个最重要的观点：\n\n1. 相互坦诚\n2. 相互尊重对方的价值观和梦想，并一起努力。\n3. 制定互惠互利的任期计划，包含双方的权利、义务和利益，并有明确的目标和时间（据书中的意思，就好像足球俱乐部的模式一样，队员干满一个赛季就可以转会，也可以继续留在球队干）。\n4. 帮助员工个人的职业发展。\n5. 鼓励和支持员工发展个人人脉，并保持与离职员工的相互关注和长久合作。\n\n## K.K.的1000付费用户理论\n\n读凯文·凯利的《技术元素》，里面提到了1000人付费理论。主要的观点是，如果有1000人愿意给你一天自己的收入，那独立手艺人就可以依靠这个专门生产工作。\n\n## 时间管理\n\n《搞定1》  \n《小强升职记》\n\n## 每个人都可以是自己的人生设计师\n\n《游牧东京》：作者米田智彦做的“生活实践项目” —— 不住在家里，也没有固定的办公室里工作，而是仅依靠一个拉杆箱在东京游走，与他人共享大都市的所有功能。\n\n## 如何提升基础能力\n\n### 一、如何锻炼阅读能力\n\n《如何阅读一本书》  \n《这样读书就够了》  \n《拆出你的沟通力I》  \n《拆出你的沟通力II》\n\n### 二、如何锻炼思考能力\n\n[豆瓣书单](https://www.douban.com/doulist/44255360/) from 萧秋水\n\n1. 《麦肯锡入职培训第一课》\n2. 《轻松学会独立思考》\n3. 《思考的技术》\n4. 《思考，快与慢》\n5. 《比知识还多》（最后一本比较难，可以先从作者的另外一本书《六顶思考帽》开始）\n\n### 三、如何提升写作能力\n\n刻意练习第一条就得确定你练习要达到的目标。\n\n你写哪个方向？准备用怎样的类型写作？对标的高手是谁？你计划通过多少篇的练习达到何种水平的输出质量？达到怎样输出质量的文章你才对外分享？\n\n想好写什么文章，可以先写，也可以看别人怎样写再模仿写，都可以。但无论如何一定要多看。\n\n比方写影评，先想想自己怎样写，好选一个不同的点切入。然后带着构思去翻别人写的影评，看看别人的立意、切入点、选图、联系的案例，还有金句，包括整体的框架，对比后发现不足，然后就知道改进的方向。\n\n看完你要能说出一篇文章好在哪里，不好在哪里，要能看出你和作者在阅读面、阅历面上的差距在哪里。这样的看才能帮助自己找到差距，进而通过有追赶目标的写作来提升自己的写作质量。\n\n#### 多看还要解决两个问题\n\n第一，看真正好的文字，看真正优秀写作者的文字。\n第二，看不同类型的写作者的好文字，避免形成写作路径的依赖，广义的多看也包括看电影、听音乐，一切艺术都可以激发写作的灵感。\n\n这也是多看的另外一个价值，帮助自己找到写作灵感，打开写作思路。\n\n#### 今天的问题\n\n什么是写作？什么是有质量的写作？什么是长期保持有质量的写作？\n\n要提升能力，只读书是不够的，需要反复训练，才能真正提升，比如阅读能力，如果阅读的速度和质量上不去，那么学习能力也谈不上很高。而思考和写作更是需要练习的事情，这些练习，其实可以结合工作一起进行，即：根据自己的职业生涯规划和人生目标来确定阅读范围，并注重实践。\n\n除了读书训练以外，接受培训、包括系统的成人教育，比如MBA等也是有效的，现在在线课程和学习社群也很发达，系统地学习课程和参与课程也是吸收知识的好途径。\n\n### 四、如何提升专业能力\n\n构建专业知识地图（知识树）。\n\n《全新思维》一书里讲过，未来最重要的六种技能是：\n\n* 设计感：每个人都必须培养一种艺术感，好的设计可以改变世界，不管从事什么样的工作，都可以像艺术家一样工作。\n\n* 故事感：会讲故事，用故事的形式表达自己、与人沟通，故事性会越来越成为商品和服务在拥挤的市场中脱颖而出的一件法宝。如果你对故事感的理解还不够，可以去了解一下戚泽明的故事，他从故事里看到商机，自称“首席故事官”。\n\n* 交响能力：可以理解为整合事物的能力、跨界能力，善于找出看上去毫不相干的领域之间的联系，善于组合别人所不在意的要素，实现创新。\n\n* 共情能力：可以理解为同理心，能够设身处地体验他人处境，从而达到感受和理解他人情感的能力。\n\n* 娱乐感：简单说来就是会玩，人需要具备适当的幽默感（可千万别误解为会说黄段子！），不仅会玩，更要玩出水平。\n\n* 探寻意义：能够寻找生存的意义，认真对待精神追求，寻找真正的幸福。\n\n简单的来说，就是：\n\n要有品位、懂艺术、要会讲故事，能跨界，有同理心，会玩出花样来，而且要有追求，会探寻事物的意义。","source":"_posts/slash.md","raw":"---\ntitle: 关于「自由态职业」\ncategories:\n  - reading\ndate: 2018-04-30 23:37:19\n---\n\n最近读了萧秋水和剽悍一只猫的[《知识变现》](https://book.douban.com/subject/27177491/)，准确的来说，这本书不全是讲如何变现你的知识，而是从多方面去解释什么是“斜杠青年”和“自由职业”，而“自由态职业”又是什么，个人觉得此书应该改名为《国内斜杠青年/自由工作者的生活/工作现状》。\n\n<!-- more -->\n\n想起在新西兰working holiday的时候，曾经遇到一个Airbnb的房东Chris，是个自由职业的程序员。一次偶然的机会看到他的书房，看到3个屏幕，我就问他是不是IT行业的，没想到Chris是为IBM远程工作的，他在新西兰，团队base在美国还是加拿大，做的是后端开发相关工作。\n\n这次我第一次面基自由职业者的工程师，非常好奇，就趁机问了一直很感兴趣的几个问题。\n\n`WYY: ` 为什么会选择自由职业？  \n`Chris: ` 我有两个孩子，希望多一点时间陪伴家人，如果出国工作的话，可能一年就没多少时间可以在家里陪伴家人了。（注：新西兰的IT工作机会一般在奥克兰、惠灵顿这样的大城市，不过相对没有像美国或者中国一样有各式各样的top IT companies哈）\n\n`WYY: ` 那日常你是怎么工作的呢？  \n`Chris: ` 早上6点起床，趁着孩子们还没起床，就开始锻炼和工作，有个独立的书房，可以安静的做自己的事情。然后到点了送孩子们去上学，回来继续工作，那么到孩子们放学之后，我就有自由的时间可以陪伴他们了。\n\n`WYY: ` remote的工作，是怎么找到工作的？不会沟通成本比较高吗？  \n`Chris: ` 我之前就在IBM工作的，比较熟悉工作流程，后来我因为家庭原因，选择回来新西兰，我的前老板问我有没有兴趣远程工作，我就答应了，跟团队的合作、沟通还算流畅。\n\n其实从跟Chris的对话里面可以发现，自由职业者的生活有可能比正常朝九晚五还困难些，需要自律，也需要具备很好的时间管理的能力，才能在工作和生活的时间打乱的情况，还能做到很好的平衡。专业能力以外，你可能还需要做一些自我销售、运营等等的工作以外的事情，让更多人知道你和信任你。\n\n“自由职业”不是一种职业，而是你本身具备专业能力，有选择的“自由”。\n\n正如书中说的：\n\n> 成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。\n\n整体来说，如果想了解斜杠青年/自由职业者的工作生活状态的话，还是可以看看这本书哈。更多书摘如下。\n\n## 斜杠青年和自由职业，职业定位新趋势\n\n“斜杠青年”来源于英文“Slash”，《纽约时报》\b专栏作家麦瑞克·阿尔伯撰写了一本书，叫作《双重职业》（One Person/Multiple Careers: A New Model for Work/Life Success）。\n\n### 你认为普通人如何修炼才能成为斜杠青年？\n（from 吉吉）\n\n#### 第一，知道自己为什么要成为斜杠青年再开始：\n\n1. 不要赶流行，不要因为别人说斜杠青年好，就盲目地加入，这应该是一种有目标的主动选择，而且知道需要大量的投入，其实很辛苦；\n2. 有深层次的需求，像我说的安全感，还有一些契机，比如年龄、家庭变故、工作瓶颈等；\n3. 摆清斜杠和单杠的关系，斜杠不是单杠做不好就逃避，单杠没解决的问题没踩过的坑，斜杠一样会掉进去重补这一课，所以应该把单杠做好，打一个比较稳的地基，培养核心技能，就算不喜欢，单杠也可以修炼你把不喜欢的事做好的能力。\n\n#### 第二，斜杠青年的四阶段：\n\n1. 照妖镜：认知自己，找到精进的方向。\n\n    * 更多维度地去了解自己，通过各种各样的工具，比如性格测试、行为风格测试、生活态度取向测试、价值观梳理，去认知自己，知道自己是什么样的人，为什么同样是探索，速度、节奏、心态会有不同。\n\n    * 知道自己喜欢什么，找到兴趣和天命。排除钱、时间等因素，最想做什么，梳理过往成就事件，找到一些共性，发现自己真正喜欢的是什么。\n\n    * 认知现实、遥望理想，将愿景描绘出来并固化，找到差距和努力的方向。\n\n2. 默练剑：通过持续行动，修炼技能\n    * 划分能力矩阵，喜欢与擅长的优势区是核心技能，需要不断打磨；\n    * 喜欢但是不擅长的，是潜能的部分，应该加强，培育发芽的小种子；\n    * 不喜欢也不擅长的盲区，不要做，回避不了的，死磕到不扯后腿。\n\n3. 等风来：外化自己，扩大圈子，告诉别人自己准备好了，积极地站在风口处等待机会的来临，甚至主动出击。\n\n4. 滚雪球：依托一个平台和身份，斜杠身份的数量会不断地拓展，然后要具有把多重身份整合在一起打组合拳的能力。\n\n#### 第三，斜杠青年要注意的：\n\n1. 要围绕个人品牌，这样单个身份或者平台如果失去了势能，大家还会因为认可这个人而追随。\n2. 所有的积累都有价值，不一定马上兑换成显性的名利，但是这当中积累的经验、可迁移的能力都是弥足珍贵的，人走的每一步，都有价值。\n3. 要有多个维度的平衡：阶段性专注、身体保障、家人情感的支持、时常审视初心。\n\n## 你适合成为自由职业者吗\n\n成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。\n\n自由职业的自由，不是辞职的自由，而是选择的自由，这个选择背后，是能力的自由。\n\n要想在自己的自由职业生涯中最大限度地降低风险，有几项原则：\n\n第一，要把握好“市场需要、我最擅长、能者不多”的定位原则，使自己或自己的产品具有市场性、竞争性和独特性；不要试图山寨别人，靠拷贝别人现买现卖是没有竞争力的。同样的道理，如果你的产品或服务能够被别人轻易拷贝，那也说明你并没有别人不能取代的核心竞争力。\n\n第二，为了防止自己知识和技能的老化，你必须具有不断学习和创造的能力，而不是试图“一招鲜，吃遍天”。这在知识更新速度日益加快的今天，已经行不通了。学习能力已经演变成为新的生存能力。\n\n第三，增强自己的法律意识和风险意识，在与人合作的过程中要有维权意识，注意用法律和规则保护自己，以防“客大欺店”和遭小人暗算。\n\n第四，尽早地为自己在医疗、意外和养老方面投入必要的保险资金，做到晴天也防连阴雨。\n\n## 互联网时代的雇佣关系\n\n里德·霍夫曼的《联盟》开章明义，给出了这样的观点。\n\n在里德看来，用联盟的方式重建雇主和员工的关系非常必要。“商业世界需要有利于相互信任、相互投资、共同受益的新雇佣关系框架。理想的雇佣关系框架鼓励员工发展个人人脉、勇于开拓实干，而不是成为唯利是图的跳槽专业户。”\n\n如何建立联盟，书中有几个最重要的观点：\n\n1. 相互坦诚\n2. 相互尊重对方的价值观和梦想，并一起努力。\n3. 制定互惠互利的任期计划，包含双方的权利、义务和利益，并有明确的目标和时间（据书中的意思，就好像足球俱乐部的模式一样，队员干满一个赛季就可以转会，也可以继续留在球队干）。\n4. 帮助员工个人的职业发展。\n5. 鼓励和支持员工发展个人人脉，并保持与离职员工的相互关注和长久合作。\n\n## K.K.的1000付费用户理论\n\n读凯文·凯利的《技术元素》，里面提到了1000人付费理论。主要的观点是，如果有1000人愿意给你一天自己的收入，那独立手艺人就可以依靠这个专门生产工作。\n\n## 时间管理\n\n《搞定1》  \n《小强升职记》\n\n## 每个人都可以是自己的人生设计师\n\n《游牧东京》：作者米田智彦做的“生活实践项目” —— 不住在家里，也没有固定的办公室里工作，而是仅依靠一个拉杆箱在东京游走，与他人共享大都市的所有功能。\n\n## 如何提升基础能力\n\n### 一、如何锻炼阅读能力\n\n《如何阅读一本书》  \n《这样读书就够了》  \n《拆出你的沟通力I》  \n《拆出你的沟通力II》\n\n### 二、如何锻炼思考能力\n\n[豆瓣书单](https://www.douban.com/doulist/44255360/) from 萧秋水\n\n1. 《麦肯锡入职培训第一课》\n2. 《轻松学会独立思考》\n3. 《思考的技术》\n4. 《思考，快与慢》\n5. 《比知识还多》（最后一本比较难，可以先从作者的另外一本书《六顶思考帽》开始）\n\n### 三、如何提升写作能力\n\n刻意练习第一条就得确定你练习要达到的目标。\n\n你写哪个方向？准备用怎样的类型写作？对标的高手是谁？你计划通过多少篇的练习达到何种水平的输出质量？达到怎样输出质量的文章你才对外分享？\n\n想好写什么文章，可以先写，也可以看别人怎样写再模仿写，都可以。但无论如何一定要多看。\n\n比方写影评，先想想自己怎样写，好选一个不同的点切入。然后带着构思去翻别人写的影评，看看别人的立意、切入点、选图、联系的案例，还有金句，包括整体的框架，对比后发现不足，然后就知道改进的方向。\n\n看完你要能说出一篇文章好在哪里，不好在哪里，要能看出你和作者在阅读面、阅历面上的差距在哪里。这样的看才能帮助自己找到差距，进而通过有追赶目标的写作来提升自己的写作质量。\n\n#### 多看还要解决两个问题\n\n第一，看真正好的文字，看真正优秀写作者的文字。\n第二，看不同类型的写作者的好文字，避免形成写作路径的依赖，广义的多看也包括看电影、听音乐，一切艺术都可以激发写作的灵感。\n\n这也是多看的另外一个价值，帮助自己找到写作灵感，打开写作思路。\n\n#### 今天的问题\n\n什么是写作？什么是有质量的写作？什么是长期保持有质量的写作？\n\n要提升能力，只读书是不够的，需要反复训练，才能真正提升，比如阅读能力，如果阅读的速度和质量上不去，那么学习能力也谈不上很高。而思考和写作更是需要练习的事情，这些练习，其实可以结合工作一起进行，即：根据自己的职业生涯规划和人生目标来确定阅读范围，并注重实践。\n\n除了读书训练以外，接受培训、包括系统的成人教育，比如MBA等也是有效的，现在在线课程和学习社群也很发达，系统地学习课程和参与课程也是吸收知识的好途径。\n\n### 四、如何提升专业能力\n\n构建专业知识地图（知识树）。\n\n《全新思维》一书里讲过，未来最重要的六种技能是：\n\n* 设计感：每个人都必须培养一种艺术感，好的设计可以改变世界，不管从事什么样的工作，都可以像艺术家一样工作。\n\n* 故事感：会讲故事，用故事的形式表达自己、与人沟通，故事性会越来越成为商品和服务在拥挤的市场中脱颖而出的一件法宝。如果你对故事感的理解还不够，可以去了解一下戚泽明的故事，他从故事里看到商机，自称“首席故事官”。\n\n* 交响能力：可以理解为整合事物的能力、跨界能力，善于找出看上去毫不相干的领域之间的联系，善于组合别人所不在意的要素，实现创新。\n\n* 共情能力：可以理解为同理心，能够设身处地体验他人处境，从而达到感受和理解他人情感的能力。\n\n* 娱乐感：简单说来就是会玩，人需要具备适当的幽默感（可千万别误解为会说黄段子！），不仅会玩，更要玩出水平。\n\n* 探寻意义：能够寻找生存的意义，认真对待精神追求，寻找真正的幸福。\n\n简单的来说，就是：\n\n要有品位、懂艺术、要会讲故事，能跨界，有同理心，会玩出花样来，而且要有追求，会探寻事物的意义。","slug":"slash","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xa3004azvr3u3ohhni7","content":"<p>最近读了萧秋水和剽悍一只猫的<a href=\"https://book.douban.com/subject/27177491/\" target=\"_blank\" rel=\"noopener\">《知识变现》</a>，准确的来说，这本书不全是讲如何变现你的知识，而是从多方面去解释什么是“斜杠青年”和“自由职业”，而“自由态职业”又是什么，个人觉得此书应该改名为《国内斜杠青年/自由工作者的生活/工作现状》。</p>\n<a id=\"more\"></a>\n<p>想起在新西兰working holiday的时候，曾经遇到一个Airbnb的房东Chris，是个自由职业的程序员。一次偶然的机会看到他的书房，看到3个屏幕，我就问他是不是IT行业的，没想到Chris是为IBM远程工作的，他在新西兰，团队base在美国还是加拿大，做的是后端开发相关工作。</p>\n<p>这次我第一次面基自由职业者的工程师，非常好奇，就趁机问了一直很感兴趣的几个问题。</p>\n<p><code>WYY:</code> 为什么会选择自由职业？<br><code>Chris:</code> 我有两个孩子，希望多一点时间陪伴家人，如果出国工作的话，可能一年就没多少时间可以在家里陪伴家人了。（注：新西兰的IT工作机会一般在奥克兰、惠灵顿这样的大城市，不过相对没有像美国或者中国一样有各式各样的top IT companies哈）</p>\n<p><code>WYY:</code> 那日常你是怎么工作的呢？<br><code>Chris:</code> 早上6点起床，趁着孩子们还没起床，就开始锻炼和工作，有个独立的书房，可以安静的做自己的事情。然后到点了送孩子们去上学，回来继续工作，那么到孩子们放学之后，我就有自由的时间可以陪伴他们了。</p>\n<p><code>WYY:</code> remote的工作，是怎么找到工作的？不会沟通成本比较高吗？<br><code>Chris:</code> 我之前就在IBM工作的，比较熟悉工作流程，后来我因为家庭原因，选择回来新西兰，我的前老板问我有没有兴趣远程工作，我就答应了，跟团队的合作、沟通还算流畅。</p>\n<p>其实从跟Chris的对话里面可以发现，自由职业者的生活有可能比正常朝九晚五还困难些，需要自律，也需要具备很好的时间管理的能力，才能在工作和生活的时间打乱的情况，还能做到很好的平衡。专业能力以外，你可能还需要做一些自我销售、运营等等的工作以外的事情，让更多人知道你和信任你。</p>\n<p>“自由职业”不是一种职业，而是你本身具备专业能力，有选择的“自由”。</p>\n<p>正如书中说的：</p>\n<blockquote>\n<p>成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。</p>\n</blockquote>\n<p>整体来说，如果想了解斜杠青年/自由职业者的工作生活状态的话，还是可以看看这本书哈。更多书摘如下。</p>\n<h2 id=\"斜杠青年和自由职业，职业定位新趋势\"><a href=\"#斜杠青年和自由职业，职业定位新趋势\" class=\"headerlink\" title=\"斜杠青年和自由职业，职业定位新趋势\"></a>斜杠青年和自由职业，职业定位新趋势</h2><p>“斜杠青年”来源于英文“Slash”，《纽约时报》\b专栏作家麦瑞克·阿尔伯撰写了一本书，叫作《双重职业》（One Person/Multiple Careers: A New Model for Work/Life Success）。</p>\n<h3 id=\"你认为普通人如何修炼才能成为斜杠青年？\"><a href=\"#你认为普通人如何修炼才能成为斜杠青年？\" class=\"headerlink\" title=\"你认为普通人如何修炼才能成为斜杠青年？\"></a>你认为普通人如何修炼才能成为斜杠青年？</h3><p>（from 吉吉）</p>\n<h4 id=\"第一，知道自己为什么要成为斜杠青年再开始：\"><a href=\"#第一，知道自己为什么要成为斜杠青年再开始：\" class=\"headerlink\" title=\"第一，知道自己为什么要成为斜杠青年再开始：\"></a>第一，知道自己为什么要成为斜杠青年再开始：</h4><ol>\n<li>不要赶流行，不要因为别人说斜杠青年好，就盲目地加入，这应该是一种有目标的主动选择，而且知道需要大量的投入，其实很辛苦；</li>\n<li>有深层次的需求，像我说的安全感，还有一些契机，比如年龄、家庭变故、工作瓶颈等；</li>\n<li>摆清斜杠和单杠的关系，斜杠不是单杠做不好就逃避，单杠没解决的问题没踩过的坑，斜杠一样会掉进去重补这一课，所以应该把单杠做好，打一个比较稳的地基，培养核心技能，就算不喜欢，单杠也可以修炼你把不喜欢的事做好的能力。</li>\n</ol>\n<h4 id=\"第二，斜杠青年的四阶段：\"><a href=\"#第二，斜杠青年的四阶段：\" class=\"headerlink\" title=\"第二，斜杠青年的四阶段：\"></a>第二，斜杠青年的四阶段：</h4><ol>\n<li><p>照妖镜：认知自己，找到精进的方向。</p>\n<ul>\n<li><p>更多维度地去了解自己，通过各种各样的工具，比如性格测试、行为风格测试、生活态度取向测试、价值观梳理，去认知自己，知道自己是什么样的人，为什么同样是探索，速度、节奏、心态会有不同。</p>\n</li>\n<li><p>知道自己喜欢什么，找到兴趣和天命。排除钱、时间等因素，最想做什么，梳理过往成就事件，找到一些共性，发现自己真正喜欢的是什么。</p>\n</li>\n<li><p>认知现实、遥望理想，将愿景描绘出来并固化，找到差距和努力的方向。</p>\n</li>\n</ul>\n</li>\n<li><p>默练剑：通过持续行动，修炼技能</p>\n<ul>\n<li>划分能力矩阵，喜欢与擅长的优势区是核心技能，需要不断打磨；</li>\n<li>喜欢但是不擅长的，是潜能的部分，应该加强，培育发芽的小种子；</li>\n<li>不喜欢也不擅长的盲区，不要做，回避不了的，死磕到不扯后腿。</li>\n</ul>\n</li>\n<li><p>等风来：外化自己，扩大圈子，告诉别人自己准备好了，积极地站在风口处等待机会的来临，甚至主动出击。</p>\n</li>\n<li><p>滚雪球：依托一个平台和身份，斜杠身份的数量会不断地拓展，然后要具有把多重身份整合在一起打组合拳的能力。</p>\n</li>\n</ol>\n<h4 id=\"第三，斜杠青年要注意的：\"><a href=\"#第三，斜杠青年要注意的：\" class=\"headerlink\" title=\"第三，斜杠青年要注意的：\"></a>第三，斜杠青年要注意的：</h4><ol>\n<li>要围绕个人品牌，这样单个身份或者平台如果失去了势能，大家还会因为认可这个人而追随。</li>\n<li>所有的积累都有价值，不一定马上兑换成显性的名利，但是这当中积累的经验、可迁移的能力都是弥足珍贵的，人走的每一步，都有价值。</li>\n<li>要有多个维度的平衡：阶段性专注、身体保障、家人情感的支持、时常审视初心。</li>\n</ol>\n<h2 id=\"你适合成为自由职业者吗\"><a href=\"#你适合成为自由职业者吗\" class=\"headerlink\" title=\"你适合成为自由职业者吗\"></a>你适合成为自由职业者吗</h2><p>成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。</p>\n<p>自由职业的自由，不是辞职的自由，而是选择的自由，这个选择背后，是能力的自由。</p>\n<p>要想在自己的自由职业生涯中最大限度地降低风险，有几项原则：</p>\n<p>第一，要把握好“市场需要、我最擅长、能者不多”的定位原则，使自己或自己的产品具有市场性、竞争性和独特性；不要试图山寨别人，靠拷贝别人现买现卖是没有竞争力的。同样的道理，如果你的产品或服务能够被别人轻易拷贝，那也说明你并没有别人不能取代的核心竞争力。</p>\n<p>第二，为了防止自己知识和技能的老化，你必须具有不断学习和创造的能力，而不是试图“一招鲜，吃遍天”。这在知识更新速度日益加快的今天，已经行不通了。学习能力已经演变成为新的生存能力。</p>\n<p>第三，增强自己的法律意识和风险意识，在与人合作的过程中要有维权意识，注意用法律和规则保护自己，以防“客大欺店”和遭小人暗算。</p>\n<p>第四，尽早地为自己在医疗、意外和养老方面投入必要的保险资金，做到晴天也防连阴雨。</p>\n<h2 id=\"互联网时代的雇佣关系\"><a href=\"#互联网时代的雇佣关系\" class=\"headerlink\" title=\"互联网时代的雇佣关系\"></a>互联网时代的雇佣关系</h2><p>里德·霍夫曼的《联盟》开章明义，给出了这样的观点。</p>\n<p>在里德看来，用联盟的方式重建雇主和员工的关系非常必要。“商业世界需要有利于相互信任、相互投资、共同受益的新雇佣关系框架。理想的雇佣关系框架鼓励员工发展个人人脉、勇于开拓实干，而不是成为唯利是图的跳槽专业户。”</p>\n<p>如何建立联盟，书中有几个最重要的观点：</p>\n<ol>\n<li>相互坦诚</li>\n<li>相互尊重对方的价值观和梦想，并一起努力。</li>\n<li>制定互惠互利的任期计划，包含双方的权利、义务和利益，并有明确的目标和时间（据书中的意思，就好像足球俱乐部的模式一样，队员干满一个赛季就可以转会，也可以继续留在球队干）。</li>\n<li>帮助员工个人的职业发展。</li>\n<li>鼓励和支持员工发展个人人脉，并保持与离职员工的相互关注和长久合作。</li>\n</ol>\n<h2 id=\"K-K-的1000付费用户理论\"><a href=\"#K-K-的1000付费用户理论\" class=\"headerlink\" title=\"K.K.的1000付费用户理论\"></a>K.K.的1000付费用户理论</h2><p>读凯文·凯利的《技术元素》，里面提到了1000人付费理论。主要的观点是，如果有1000人愿意给你一天自己的收入，那独立手艺人就可以依靠这个专门生产工作。</p>\n<h2 id=\"时间管理\"><a href=\"#时间管理\" class=\"headerlink\" title=\"时间管理\"></a>时间管理</h2><p>《搞定1》<br>《小强升职记》</p>\n<h2 id=\"每个人都可以是自己的人生设计师\"><a href=\"#每个人都可以是自己的人生设计师\" class=\"headerlink\" title=\"每个人都可以是自己的人生设计师\"></a>每个人都可以是自己的人生设计师</h2><p>《游牧东京》：作者米田智彦做的“生活实践项目” —— 不住在家里，也没有固定的办公室里工作，而是仅依靠一个拉杆箱在东京游走，与他人共享大都市的所有功能。</p>\n<h2 id=\"如何提升基础能力\"><a href=\"#如何提升基础能力\" class=\"headerlink\" title=\"如何提升基础能力\"></a>如何提升基础能力</h2><h3 id=\"一、如何锻炼阅读能力\"><a href=\"#一、如何锻炼阅读能力\" class=\"headerlink\" title=\"一、如何锻炼阅读能力\"></a>一、如何锻炼阅读能力</h3><p>《如何阅读一本书》<br>《这样读书就够了》<br>《拆出你的沟通力I》<br>《拆出你的沟通力II》</p>\n<h3 id=\"二、如何锻炼思考能力\"><a href=\"#二、如何锻炼思考能力\" class=\"headerlink\" title=\"二、如何锻炼思考能力\"></a>二、如何锻炼思考能力</h3><p><a href=\"https://www.douban.com/doulist/44255360/\" target=\"_blank\" rel=\"noopener\">豆瓣书单</a> from 萧秋水</p>\n<ol>\n<li>《麦肯锡入职培训第一课》</li>\n<li>《轻松学会独立思考》</li>\n<li>《思考的技术》</li>\n<li>《思考，快与慢》</li>\n<li>《比知识还多》（最后一本比较难，可以先从作者的另外一本书《六顶思考帽》开始）</li>\n</ol>\n<h3 id=\"三、如何提升写作能力\"><a href=\"#三、如何提升写作能力\" class=\"headerlink\" title=\"三、如何提升写作能力\"></a>三、如何提升写作能力</h3><p>刻意练习第一条就得确定你练习要达到的目标。</p>\n<p>你写哪个方向？准备用怎样的类型写作？对标的高手是谁？你计划通过多少篇的练习达到何种水平的输出质量？达到怎样输出质量的文章你才对外分享？</p>\n<p>想好写什么文章，可以先写，也可以看别人怎样写再模仿写，都可以。但无论如何一定要多看。</p>\n<p>比方写影评，先想想自己怎样写，好选一个不同的点切入。然后带着构思去翻别人写的影评，看看别人的立意、切入点、选图、联系的案例，还有金句，包括整体的框架，对比后发现不足，然后就知道改进的方向。</p>\n<p>看完你要能说出一篇文章好在哪里，不好在哪里，要能看出你和作者在阅读面、阅历面上的差距在哪里。这样的看才能帮助自己找到差距，进而通过有追赶目标的写作来提升自己的写作质量。</p>\n<h4 id=\"多看还要解决两个问题\"><a href=\"#多看还要解决两个问题\" class=\"headerlink\" title=\"多看还要解决两个问题\"></a>多看还要解决两个问题</h4><p>第一，看真正好的文字，看真正优秀写作者的文字。<br>第二，看不同类型的写作者的好文字，避免形成写作路径的依赖，广义的多看也包括看电影、听音乐，一切艺术都可以激发写作的灵感。</p>\n<p>这也是多看的另外一个价值，帮助自己找到写作灵感，打开写作思路。</p>\n<h4 id=\"今天的问题\"><a href=\"#今天的问题\" class=\"headerlink\" title=\"今天的问题\"></a>今天的问题</h4><p>什么是写作？什么是有质量的写作？什么是长期保持有质量的写作？</p>\n<p>要提升能力，只读书是不够的，需要反复训练，才能真正提升，比如阅读能力，如果阅读的速度和质量上不去，那么学习能力也谈不上很高。而思考和写作更是需要练习的事情，这些练习，其实可以结合工作一起进行，即：根据自己的职业生涯规划和人生目标来确定阅读范围，并注重实践。</p>\n<p>除了读书训练以外，接受培训、包括系统的成人教育，比如MBA等也是有效的，现在在线课程和学习社群也很发达，系统地学习课程和参与课程也是吸收知识的好途径。</p>\n<h3 id=\"四、如何提升专业能力\"><a href=\"#四、如何提升专业能力\" class=\"headerlink\" title=\"四、如何提升专业能力\"></a>四、如何提升专业能力</h3><p>构建专业知识地图（知识树）。</p>\n<p>《全新思维》一书里讲过，未来最重要的六种技能是：</p>\n<ul>\n<li><p>设计感：每个人都必须培养一种艺术感，好的设计可以改变世界，不管从事什么样的工作，都可以像艺术家一样工作。</p>\n</li>\n<li><p>故事感：会讲故事，用故事的形式表达自己、与人沟通，故事性会越来越成为商品和服务在拥挤的市场中脱颖而出的一件法宝。如果你对故事感的理解还不够，可以去了解一下戚泽明的故事，他从故事里看到商机，自称“首席故事官”。</p>\n</li>\n<li><p>交响能力：可以理解为整合事物的能力、跨界能力，善于找出看上去毫不相干的领域之间的联系，善于组合别人所不在意的要素，实现创新。</p>\n</li>\n<li><p>共情能力：可以理解为同理心，能够设身处地体验他人处境，从而达到感受和理解他人情感的能力。</p>\n</li>\n<li><p>娱乐感：简单说来就是会玩，人需要具备适当的幽默感（可千万别误解为会说黄段子！），不仅会玩，更要玩出水平。</p>\n</li>\n<li><p>探寻意义：能够寻找生存的意义，认真对待精神追求，寻找真正的幸福。</p>\n</li>\n</ul>\n<p>简单的来说，就是：</p>\n<p>要有品位、懂艺术、要会讲故事，能跨界，有同理心，会玩出花样来，而且要有追求，会探寻事物的意义。</p>\n","site":{"data":{}},"excerpt":"<p>最近读了萧秋水和剽悍一只猫的<a href=\"https://book.douban.com/subject/27177491/\" target=\"_blank\" rel=\"noopener\">《知识变现》</a>，准确的来说，这本书不全是讲如何变现你的知识，而是从多方面去解释什么是“斜杠青年”和“自由职业”，而“自由态职业”又是什么，个人觉得此书应该改名为《国内斜杠青年/自由工作者的生活/工作现状》。</p>","more":"<p>想起在新西兰working holiday的时候，曾经遇到一个Airbnb的房东Chris，是个自由职业的程序员。一次偶然的机会看到他的书房，看到3个屏幕，我就问他是不是IT行业的，没想到Chris是为IBM远程工作的，他在新西兰，团队base在美国还是加拿大，做的是后端开发相关工作。</p>\n<p>这次我第一次面基自由职业者的工程师，非常好奇，就趁机问了一直很感兴趣的几个问题。</p>\n<p><code>WYY:</code> 为什么会选择自由职业？<br><code>Chris:</code> 我有两个孩子，希望多一点时间陪伴家人，如果出国工作的话，可能一年就没多少时间可以在家里陪伴家人了。（注：新西兰的IT工作机会一般在奥克兰、惠灵顿这样的大城市，不过相对没有像美国或者中国一样有各式各样的top IT companies哈）</p>\n<p><code>WYY:</code> 那日常你是怎么工作的呢？<br><code>Chris:</code> 早上6点起床，趁着孩子们还没起床，就开始锻炼和工作，有个独立的书房，可以安静的做自己的事情。然后到点了送孩子们去上学，回来继续工作，那么到孩子们放学之后，我就有自由的时间可以陪伴他们了。</p>\n<p><code>WYY:</code> remote的工作，是怎么找到工作的？不会沟通成本比较高吗？<br><code>Chris:</code> 我之前就在IBM工作的，比较熟悉工作流程，后来我因为家庭原因，选择回来新西兰，我的前老板问我有没有兴趣远程工作，我就答应了，跟团队的合作、沟通还算流畅。</p>\n<p>其实从跟Chris的对话里面可以发现，自由职业者的生活有可能比正常朝九晚五还困难些，需要自律，也需要具备很好的时间管理的能力，才能在工作和生活的时间打乱的情况，还能做到很好的平衡。专业能力以外，你可能还需要做一些自我销售、运营等等的工作以外的事情，让更多人知道你和信任你。</p>\n<p>“自由职业”不是一种职业，而是你本身具备专业能力，有选择的“自由”。</p>\n<p>正如书中说的：</p>\n<blockquote>\n<p>成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。</p>\n</blockquote>\n<p>整体来说，如果想了解斜杠青年/自由职业者的工作生活状态的话，还是可以看看这本书哈。更多书摘如下。</p>\n<h2 id=\"斜杠青年和自由职业，职业定位新趋势\"><a href=\"#斜杠青年和自由职业，职业定位新趋势\" class=\"headerlink\" title=\"斜杠青年和自由职业，职业定位新趋势\"></a>斜杠青年和自由职业，职业定位新趋势</h2><p>“斜杠青年”来源于英文“Slash”，《纽约时报》\b专栏作家麦瑞克·阿尔伯撰写了一本书，叫作《双重职业》（One Person/Multiple Careers: A New Model for Work/Life Success）。</p>\n<h3 id=\"你认为普通人如何修炼才能成为斜杠青年？\"><a href=\"#你认为普通人如何修炼才能成为斜杠青年？\" class=\"headerlink\" title=\"你认为普通人如何修炼才能成为斜杠青年？\"></a>你认为普通人如何修炼才能成为斜杠青年？</h3><p>（from 吉吉）</p>\n<h4 id=\"第一，知道自己为什么要成为斜杠青年再开始：\"><a href=\"#第一，知道自己为什么要成为斜杠青年再开始：\" class=\"headerlink\" title=\"第一，知道自己为什么要成为斜杠青年再开始：\"></a>第一，知道自己为什么要成为斜杠青年再开始：</h4><ol>\n<li>不要赶流行，不要因为别人说斜杠青年好，就盲目地加入，这应该是一种有目标的主动选择，而且知道需要大量的投入，其实很辛苦；</li>\n<li>有深层次的需求，像我说的安全感，还有一些契机，比如年龄、家庭变故、工作瓶颈等；</li>\n<li>摆清斜杠和单杠的关系，斜杠不是单杠做不好就逃避，单杠没解决的问题没踩过的坑，斜杠一样会掉进去重补这一课，所以应该把单杠做好，打一个比较稳的地基，培养核心技能，就算不喜欢，单杠也可以修炼你把不喜欢的事做好的能力。</li>\n</ol>\n<h4 id=\"第二，斜杠青年的四阶段：\"><a href=\"#第二，斜杠青年的四阶段：\" class=\"headerlink\" title=\"第二，斜杠青年的四阶段：\"></a>第二，斜杠青年的四阶段：</h4><ol>\n<li><p>照妖镜：认知自己，找到精进的方向。</p>\n<ul>\n<li><p>更多维度地去了解自己，通过各种各样的工具，比如性格测试、行为风格测试、生活态度取向测试、价值观梳理，去认知自己，知道自己是什么样的人，为什么同样是探索，速度、节奏、心态会有不同。</p>\n</li>\n<li><p>知道自己喜欢什么，找到兴趣和天命。排除钱、时间等因素，最想做什么，梳理过往成就事件，找到一些共性，发现自己真正喜欢的是什么。</p>\n</li>\n<li><p>认知现实、遥望理想，将愿景描绘出来并固化，找到差距和努力的方向。</p>\n</li>\n</ul>\n</li>\n<li><p>默练剑：通过持续行动，修炼技能</p>\n<ul>\n<li>划分能力矩阵，喜欢与擅长的优势区是核心技能，需要不断打磨；</li>\n<li>喜欢但是不擅长的，是潜能的部分，应该加强，培育发芽的小种子；</li>\n<li>不喜欢也不擅长的盲区，不要做，回避不了的，死磕到不扯后腿。</li>\n</ul>\n</li>\n<li><p>等风来：外化自己，扩大圈子，告诉别人自己准备好了，积极地站在风口处等待机会的来临，甚至主动出击。</p>\n</li>\n<li><p>滚雪球：依托一个平台和身份，斜杠身份的数量会不断地拓展，然后要具有把多重身份整合在一起打组合拳的能力。</p>\n</li>\n</ol>\n<h4 id=\"第三，斜杠青年要注意的：\"><a href=\"#第三，斜杠青年要注意的：\" class=\"headerlink\" title=\"第三，斜杠青年要注意的：\"></a>第三，斜杠青年要注意的：</h4><ol>\n<li>要围绕个人品牌，这样单个身份或者平台如果失去了势能，大家还会因为认可这个人而追随。</li>\n<li>所有的积累都有价值，不一定马上兑换成显性的名利，但是这当中积累的经验、可迁移的能力都是弥足珍贵的，人走的每一步，都有价值。</li>\n<li>要有多个维度的平衡：阶段性专注、身体保障、家人情感的支持、时常审视初心。</li>\n</ol>\n<h2 id=\"你适合成为自由职业者吗\"><a href=\"#你适合成为自由职业者吗\" class=\"headerlink\" title=\"你适合成为自由职业者吗\"></a>你适合成为自由职业者吗</h2><p>成为自由职业者并不是一件容易的事，要成为自由职业者，必须是具有一定的专业知识与技能，要有社会生存能力，还要有坚强的意志。</p>\n<p>自由职业的自由，不是辞职的自由，而是选择的自由，这个选择背后，是能力的自由。</p>\n<p>要想在自己的自由职业生涯中最大限度地降低风险，有几项原则：</p>\n<p>第一，要把握好“市场需要、我最擅长、能者不多”的定位原则，使自己或自己的产品具有市场性、竞争性和独特性；不要试图山寨别人，靠拷贝别人现买现卖是没有竞争力的。同样的道理，如果你的产品或服务能够被别人轻易拷贝，那也说明你并没有别人不能取代的核心竞争力。</p>\n<p>第二，为了防止自己知识和技能的老化，你必须具有不断学习和创造的能力，而不是试图“一招鲜，吃遍天”。这在知识更新速度日益加快的今天，已经行不通了。学习能力已经演变成为新的生存能力。</p>\n<p>第三，增强自己的法律意识和风险意识，在与人合作的过程中要有维权意识，注意用法律和规则保护自己，以防“客大欺店”和遭小人暗算。</p>\n<p>第四，尽早地为自己在医疗、意外和养老方面投入必要的保险资金，做到晴天也防连阴雨。</p>\n<h2 id=\"互联网时代的雇佣关系\"><a href=\"#互联网时代的雇佣关系\" class=\"headerlink\" title=\"互联网时代的雇佣关系\"></a>互联网时代的雇佣关系</h2><p>里德·霍夫曼的《联盟》开章明义，给出了这样的观点。</p>\n<p>在里德看来，用联盟的方式重建雇主和员工的关系非常必要。“商业世界需要有利于相互信任、相互投资、共同受益的新雇佣关系框架。理想的雇佣关系框架鼓励员工发展个人人脉、勇于开拓实干，而不是成为唯利是图的跳槽专业户。”</p>\n<p>如何建立联盟，书中有几个最重要的观点：</p>\n<ol>\n<li>相互坦诚</li>\n<li>相互尊重对方的价值观和梦想，并一起努力。</li>\n<li>制定互惠互利的任期计划，包含双方的权利、义务和利益，并有明确的目标和时间（据书中的意思，就好像足球俱乐部的模式一样，队员干满一个赛季就可以转会，也可以继续留在球队干）。</li>\n<li>帮助员工个人的职业发展。</li>\n<li>鼓励和支持员工发展个人人脉，并保持与离职员工的相互关注和长久合作。</li>\n</ol>\n<h2 id=\"K-K-的1000付费用户理论\"><a href=\"#K-K-的1000付费用户理论\" class=\"headerlink\" title=\"K.K.的1000付费用户理论\"></a>K.K.的1000付费用户理论</h2><p>读凯文·凯利的《技术元素》，里面提到了1000人付费理论。主要的观点是，如果有1000人愿意给你一天自己的收入，那独立手艺人就可以依靠这个专门生产工作。</p>\n<h2 id=\"时间管理\"><a href=\"#时间管理\" class=\"headerlink\" title=\"时间管理\"></a>时间管理</h2><p>《搞定1》<br>《小强升职记》</p>\n<h2 id=\"每个人都可以是自己的人生设计师\"><a href=\"#每个人都可以是自己的人生设计师\" class=\"headerlink\" title=\"每个人都可以是自己的人生设计师\"></a>每个人都可以是自己的人生设计师</h2><p>《游牧东京》：作者米田智彦做的“生活实践项目” —— 不住在家里，也没有固定的办公室里工作，而是仅依靠一个拉杆箱在东京游走，与他人共享大都市的所有功能。</p>\n<h2 id=\"如何提升基础能力\"><a href=\"#如何提升基础能力\" class=\"headerlink\" title=\"如何提升基础能力\"></a>如何提升基础能力</h2><h3 id=\"一、如何锻炼阅读能力\"><a href=\"#一、如何锻炼阅读能力\" class=\"headerlink\" title=\"一、如何锻炼阅读能力\"></a>一、如何锻炼阅读能力</h3><p>《如何阅读一本书》<br>《这样读书就够了》<br>《拆出你的沟通力I》<br>《拆出你的沟通力II》</p>\n<h3 id=\"二、如何锻炼思考能力\"><a href=\"#二、如何锻炼思考能力\" class=\"headerlink\" title=\"二、如何锻炼思考能力\"></a>二、如何锻炼思考能力</h3><p><a href=\"https://www.douban.com/doulist/44255360/\" target=\"_blank\" rel=\"noopener\">豆瓣书单</a> from 萧秋水</p>\n<ol>\n<li>《麦肯锡入职培训第一课》</li>\n<li>《轻松学会独立思考》</li>\n<li>《思考的技术》</li>\n<li>《思考，快与慢》</li>\n<li>《比知识还多》（最后一本比较难，可以先从作者的另外一本书《六顶思考帽》开始）</li>\n</ol>\n<h3 id=\"三、如何提升写作能力\"><a href=\"#三、如何提升写作能力\" class=\"headerlink\" title=\"三、如何提升写作能力\"></a>三、如何提升写作能力</h3><p>刻意练习第一条就得确定你练习要达到的目标。</p>\n<p>你写哪个方向？准备用怎样的类型写作？对标的高手是谁？你计划通过多少篇的练习达到何种水平的输出质量？达到怎样输出质量的文章你才对外分享？</p>\n<p>想好写什么文章，可以先写，也可以看别人怎样写再模仿写，都可以。但无论如何一定要多看。</p>\n<p>比方写影评，先想想自己怎样写，好选一个不同的点切入。然后带着构思去翻别人写的影评，看看别人的立意、切入点、选图、联系的案例，还有金句，包括整体的框架，对比后发现不足，然后就知道改进的方向。</p>\n<p>看完你要能说出一篇文章好在哪里，不好在哪里，要能看出你和作者在阅读面、阅历面上的差距在哪里。这样的看才能帮助自己找到差距，进而通过有追赶目标的写作来提升自己的写作质量。</p>\n<h4 id=\"多看还要解决两个问题\"><a href=\"#多看还要解决两个问题\" class=\"headerlink\" title=\"多看还要解决两个问题\"></a>多看还要解决两个问题</h4><p>第一，看真正好的文字，看真正优秀写作者的文字。<br>第二，看不同类型的写作者的好文字，避免形成写作路径的依赖，广义的多看也包括看电影、听音乐，一切艺术都可以激发写作的灵感。</p>\n<p>这也是多看的另外一个价值，帮助自己找到写作灵感，打开写作思路。</p>\n<h4 id=\"今天的问题\"><a href=\"#今天的问题\" class=\"headerlink\" title=\"今天的问题\"></a>今天的问题</h4><p>什么是写作？什么是有质量的写作？什么是长期保持有质量的写作？</p>\n<p>要提升能力，只读书是不够的，需要反复训练，才能真正提升，比如阅读能力，如果阅读的速度和质量上不去，那么学习能力也谈不上很高。而思考和写作更是需要练习的事情，这些练习，其实可以结合工作一起进行，即：根据自己的职业生涯规划和人生目标来确定阅读范围，并注重实践。</p>\n<p>除了读书训练以外，接受培训、包括系统的成人教育，比如MBA等也是有效的，现在在线课程和学习社群也很发达，系统地学习课程和参与课程也是吸收知识的好途径。</p>\n<h3 id=\"四、如何提升专业能力\"><a href=\"#四、如何提升专业能力\" class=\"headerlink\" title=\"四、如何提升专业能力\"></a>四、如何提升专业能力</h3><p>构建专业知识地图（知识树）。</p>\n<p>《全新思维》一书里讲过，未来最重要的六种技能是：</p>\n<ul>\n<li><p>设计感：每个人都必须培养一种艺术感，好的设计可以改变世界，不管从事什么样的工作，都可以像艺术家一样工作。</p>\n</li>\n<li><p>故事感：会讲故事，用故事的形式表达自己、与人沟通，故事性会越来越成为商品和服务在拥挤的市场中脱颖而出的一件法宝。如果你对故事感的理解还不够，可以去了解一下戚泽明的故事，他从故事里看到商机，自称“首席故事官”。</p>\n</li>\n<li><p>交响能力：可以理解为整合事物的能力、跨界能力，善于找出看上去毫不相干的领域之间的联系，善于组合别人所不在意的要素，实现创新。</p>\n</li>\n<li><p>共情能力：可以理解为同理心，能够设身处地体验他人处境，从而达到感受和理解他人情感的能力。</p>\n</li>\n<li><p>娱乐感：简单说来就是会玩，人需要具备适当的幽默感（可千万别误解为会说黄段子！），不仅会玩，更要玩出水平。</p>\n</li>\n<li><p>探寻意义：能够寻找生存的意义，认真对待精神追求，寻找真正的幸福。</p>\n</li>\n</ul>\n<p>简单的来说，就是：</p>\n<p>要有品位、懂艺术、要会讲故事，能跨界，有同理心，会玩出花样来，而且要有追求，会探寻事物的意义。</p>"},{"title":"年轻就要造起来","date":"2017-07-11T14:48:07.000Z","type":"photo","cover":"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-2.jpg","_content":"\n<figure>\n<img alt=\"大门口\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-1.jpg\" />\n<figcaption>大门口</figcaption>\n</figure>\n\n2017淘宝造物节 —— 年轻就要造起来！\n\n我之前不知道有造物节，可能是因为我不在杭州，又或者媒体报道得也不多。今年的邀请函太吸引了，还有阿里内网、朋友圈、淘宝多个渠道以及各种公号的报道，尤其是黑科技浓浓的Tao Cafe无人便利店（我老爸都来问我知不知道这个店，宣传得太到位了），想不感兴趣都不行，拿到今天的票，就请假跑来“造”一下。\n\n一进来有种夜店feel有木有，恰逢汪涵过来主持，中间舞台被包围了，人超多，远远的拍照好了。\n\n<figure>\n<img alt=\"舞台\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-2.jpg\" />\n<figcaption>舞台</figcaption>\n</figure>\n\n<figure>\n<img alt=\"地上投射的造物节logo\" \n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-3.jpg\" />\n<figcaption>地上投射的造物节logo</figcaption>\n</figure>\n\n进来以后，走了半圈，找不到我最想去的无人店呀……路盲找小二问，才发现Tao Cafe在刚才检票入口的旁边，白排队进来了，还绕了大半圈，简直惊呆了，你们感受一下这条长龙，我在队尾。以前我看到排队买喜茶的人很傻，没有好喝到让我等N个小时，现在发现如果有我很想要的东西的时候，虽然不太乐意，但还是等一下吧，Tao Cafe，我来了。\n\n<figure>\n<img alt=\"无人便利店的排队长龙\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting.jpg\" />\n<figcaption>无人便利店的排队长龙</figcaption>\n</figure>\n\n半小时后，我在这~ 请看大屏幕，这个妹子在出门结账的时候，就是那么自信，自带光芒的，笑死 >3<\n\n<figure>\n<img alt=\"无人便利店的排队长龙（半小时后）\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting-2.jpg\" />\n<figcaption>无人便利店的排队长龙（半小时后）</figcaption>\n</figure>\n\n足足一小时，我终于要刷脸进来无人便利店，这个门禁，很犀利，除了刷淘宝二维码之外，可能还需要刷脸，我看有的妹子进来之前，要把头发扎起来，不然过不了。\n\n<figure>\n<img alt=\"无人便利店的门禁\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-entry.jpg\" />\n<figcaption>无人便利店的门禁</figcaption>\n</figure>\n\n进来后，直奔小卖部，这里招牌是”招牌淘咖啡“，呃，不推荐啦，我没有喝过混一点果酱（貌似是黄桃味）的咖啡，虽然味道还可以，但是总有种”黑暗料理“的感觉，还是点普通咖啡吧。\n\n<figure>\n<img alt=\"搬砖的排队去买咖啡\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-wu.jpg\" />\n<figcaption>搬砖的排队去买咖啡</figcaption>\n</figure>\n\n<figure>\n<img alt=\"淘公仔\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-figure.jpg\" />\n<figcaption>淘公仔</figcaption>\n</figure>\n\n无人便利店的概念很好，门禁、进门后的用户信息都可以捕抓到，真的非常有科技感、未来感。不过貌似暂未满足商用需求，我去买咖啡时，虽然有刷脸有AR，但是最后我是用支付宝码付款的；小伙伴买了个环保袋，走了两次付款通道，第一次说订单没下，第二次还是没有订单，最后在出口人工结账。两个情况的理由都是人太多，网络响应比较慢。[ 以上谨属本次体验的个人观点。我相信不久的未来，阿里的无人店会推广落地，再一次改变我们的生活 ]\n\n呼呼，等了半天，进去逛了十分钟就出来了，满足好奇心。出来之后，找到一只大型淘公仔，还是要求合照啦~\n\n<figure>\n<img alt=\"淘公仔合照\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tao-smile.jpg\" />\n<figcaption>淘公仔合照</figcaption>\n</figure>\n\n再次进场，逛各种店噜。各种名店、潮店都装修得很有心思，比较有特色。\n\n我来之前，以为只是个小集市（一个淘宝店铺的展览会），逛逛就完事了。事实上不是这样的，人手一本小册子，上面有各种任务，大家除了逛逛逛、买买买、拍拍怕，还可以到各个店做任务、集印章、拿奖品。个人感觉很好，明年还想再来。\n\n废话不多说，上图。\n\n天猫精灵，智能音箱，小二给我们演示，大致还是灵敏的，哈哈，感兴趣的大家可以上天猫看看。\n\n<figure>\n<img alt=\"天猫精灵的平板支撑\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tmall-plank.jpg\" />\n<figcaption>天猫精灵的平板支撑</figcaption>\n</figure>\n\n<figure>\n<img alt=\"环保的快递盒\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/green-action.jpg\" />\n<figcaption>环保的快递盒</figcaption>\n</figure>\n\nOne的展台……木有发现这个展馆跟”一个“有啥关系。\n\n<figure>\n<img alt=\"红\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/wu-hong.jpg\" />\n<figcaption>红</figcaption>\n</figure>\n\n<figure>\n<img alt=\"卖包的小店\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bag-store.jpg\" />\n<figcaption>卖包的小店</figcaption>\n</figure>\n\n<figure>\n<img alt=\"卖书的小罐头\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bookshop.jpg\" />\n<figcaption>卖书的小罐头</figcaption>\n</figure>\n\n这位苏州的老奶奶说，黑布上的每一个图案，她都要绣一天，店里都是各种各样的刺绣品，真是不容易啊~\n\n<figure>\n<img alt=\"刺绣的老奶奶\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/grandma.jpg\" />\n<figcaption>刺绣的老奶奶</figcaption>\n</figure>\n\n<figure>\n<img alt=\"另外一个手工的小锦囊\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/little-bag.jpg\" />\n<figcaption>另外一个手工的小锦囊</figcaption>\n</figure>\n\n<figure>\n<img alt=\"小灯\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/light.jpg\" />\n<figcaption>小灯</figcaption>\n</figure>\n\n逛完西市，我们来到了北街，这边的店有比较科技感的也有比较怀旧的。\n\n<figure>\n<img alt=\"北街\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/north-area.jpg\" />\n<figcaption>北街</figcaption>\n</figure>\n\n<figure>\n<img alt=\"杂货铺\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-else.jpg\" />\n<figcaption>杂货铺</figcaption>\n</figure>\n\n<figure>\n<img alt=\"匠心\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/workshop.jpg\" />\n<figcaption>匠心</figcaption>\n</figure>\n\n<figure>\n<img alt=\"电影院\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cinema.jpg\" />\n<figcaption>电影院</figcaption>\n</figure>\n\n<figure>\n<img alt=\"猫大王\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cat.jpg\" />\n<figcaption>猫大王</figcaption>\n</figure>\n\n哎，由于时间关系，我们只逛了舞台左边的西市和北街，左边的东市和南街根本没逛……好可惜，最后被广播赶走了，才5点半，说好的开到6点呢~\n\n最后，po两张我比较喜欢的比较有感觉的，再一次读一下今年造物节的slogan，这也应该是我们生活的态度：\n\n> 年轻就要造！！！\n\n<figure>\n<img alt=\"毒鸡汤\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/black-white.jpg\" />\n<figcaption>毒鸡汤</figcaption>\n</figure>\n\n<figure>\n<img alt=\"造\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/zao.jpg\" />\n<figcaption>造</figcaption>\n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/taobao-maker-festival-2017.md","raw":"---\ntitle: 年轻就要造起来\ndate: 2017-07-11 22:48:07\ntags:\n- life\ntype: photo\ncover: http://sinacloud.net/woodysblog/taobao-maker-festival/entry-2.jpg\n---\n\n<figure>\n<img alt=\"大门口\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-1.jpg\" />\n<figcaption>大门口</figcaption>\n</figure>\n\n2017淘宝造物节 —— 年轻就要造起来！\n\n我之前不知道有造物节，可能是因为我不在杭州，又或者媒体报道得也不多。今年的邀请函太吸引了，还有阿里内网、朋友圈、淘宝多个渠道以及各种公号的报道，尤其是黑科技浓浓的Tao Cafe无人便利店（我老爸都来问我知不知道这个店，宣传得太到位了），想不感兴趣都不行，拿到今天的票，就请假跑来“造”一下。\n\n一进来有种夜店feel有木有，恰逢汪涵过来主持，中间舞台被包围了，人超多，远远的拍照好了。\n\n<figure>\n<img alt=\"舞台\"\n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-2.jpg\" />\n<figcaption>舞台</figcaption>\n</figure>\n\n<figure>\n<img alt=\"地上投射的造物节logo\" \n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-3.jpg\" />\n<figcaption>地上投射的造物节logo</figcaption>\n</figure>\n\n进来以后，走了半圈，找不到我最想去的无人店呀……路盲找小二问，才发现Tao Cafe在刚才检票入口的旁边，白排队进来了，还绕了大半圈，简直惊呆了，你们感受一下这条长龙，我在队尾。以前我看到排队买喜茶的人很傻，没有好喝到让我等N个小时，现在发现如果有我很想要的东西的时候，虽然不太乐意，但还是等一下吧，Tao Cafe，我来了。\n\n<figure>\n<img alt=\"无人便利店的排队长龙\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n    data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting.jpg\" />\n<figcaption>无人便利店的排队长龙</figcaption>\n</figure>\n\n半小时后，我在这~ 请看大屏幕，这个妹子在出门结账的时候，就是那么自信，自带光芒的，笑死 >3<\n\n<figure>\n<img alt=\"无人便利店的排队长龙（半小时后）\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting-2.jpg\" />\n<figcaption>无人便利店的排队长龙（半小时后）</figcaption>\n</figure>\n\n足足一小时，我终于要刷脸进来无人便利店，这个门禁，很犀利，除了刷淘宝二维码之外，可能还需要刷脸，我看有的妹子进来之前，要把头发扎起来，不然过不了。\n\n<figure>\n<img alt=\"无人便利店的门禁\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-entry.jpg\" />\n<figcaption>无人便利店的门禁</figcaption>\n</figure>\n\n进来后，直奔小卖部，这里招牌是”招牌淘咖啡“，呃，不推荐啦，我没有喝过混一点果酱（貌似是黄桃味）的咖啡，虽然味道还可以，但是总有种”黑暗料理“的感觉，还是点普通咖啡吧。\n\n<figure>\n<img alt=\"搬砖的排队去买咖啡\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-wu.jpg\" />\n<figcaption>搬砖的排队去买咖啡</figcaption>\n</figure>\n\n<figure>\n<img alt=\"淘公仔\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-figure.jpg\" />\n<figcaption>淘公仔</figcaption>\n</figure>\n\n无人便利店的概念很好，门禁、进门后的用户信息都可以捕抓到，真的非常有科技感、未来感。不过貌似暂未满足商用需求，我去买咖啡时，虽然有刷脸有AR，但是最后我是用支付宝码付款的；小伙伴买了个环保袋，走了两次付款通道，第一次说订单没下，第二次还是没有订单，最后在出口人工结账。两个情况的理由都是人太多，网络响应比较慢。[ 以上谨属本次体验的个人观点。我相信不久的未来，阿里的无人店会推广落地，再一次改变我们的生活 ]\n\n呼呼，等了半天，进去逛了十分钟就出来了，满足好奇心。出来之后，找到一只大型淘公仔，还是要求合照啦~\n\n<figure>\n<img alt=\"淘公仔合照\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tao-smile.jpg\" />\n<figcaption>淘公仔合照</figcaption>\n</figure>\n\n再次进场，逛各种店噜。各种名店、潮店都装修得很有心思，比较有特色。\n\n我来之前，以为只是个小集市（一个淘宝店铺的展览会），逛逛就完事了。事实上不是这样的，人手一本小册子，上面有各种任务，大家除了逛逛逛、买买买、拍拍怕，还可以到各个店做任务、集印章、拿奖品。个人感觉很好，明年还想再来。\n\n废话不多说，上图。\n\n天猫精灵，智能音箱，小二给我们演示，大致还是灵敏的，哈哈，感兴趣的大家可以上天猫看看。\n\n<figure>\n<img alt=\"天猫精灵的平板支撑\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tmall-plank.jpg\" />\n<figcaption>天猫精灵的平板支撑</figcaption>\n</figure>\n\n<figure>\n<img alt=\"环保的快递盒\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/green-action.jpg\" />\n<figcaption>环保的快递盒</figcaption>\n</figure>\n\nOne的展台……木有发现这个展馆跟”一个“有啥关系。\n\n<figure>\n<img alt=\"红\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/wu-hong.jpg\" />\n<figcaption>红</figcaption>\n</figure>\n\n<figure>\n<img alt=\"卖包的小店\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bag-store.jpg\" />\n<figcaption>卖包的小店</figcaption>\n</figure>\n\n<figure>\n<img alt=\"卖书的小罐头\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bookshop.jpg\" />\n<figcaption>卖书的小罐头</figcaption>\n</figure>\n\n这位苏州的老奶奶说，黑布上的每一个图案，她都要绣一天，店里都是各种各样的刺绣品，真是不容易啊~\n\n<figure>\n<img alt=\"刺绣的老奶奶\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/grandma.jpg\" />\n<figcaption>刺绣的老奶奶</figcaption>\n</figure>\n\n<figure>\n<img alt=\"另外一个手工的小锦囊\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/little-bag.jpg\" />\n<figcaption>另外一个手工的小锦囊</figcaption>\n</figure>\n\n<figure>\n<img alt=\"小灯\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/light.jpg\" />\n<figcaption>小灯</figcaption>\n</figure>\n\n逛完西市，我们来到了北街，这边的店有比较科技感的也有比较怀旧的。\n\n<figure>\n<img alt=\"北街\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/north-area.jpg\" />\n<figcaption>北街</figcaption>\n</figure>\n\n<figure>\n<img alt=\"杂货铺\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-else.jpg\" />\n<figcaption>杂货铺</figcaption>\n</figure>\n\n<figure>\n<img alt=\"匠心\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/workshop.jpg\" />\n<figcaption>匠心</figcaption>\n</figure>\n\n<figure>\n<img alt=\"电影院\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cinema.jpg\" />\n<figcaption>电影院</figcaption>\n</figure>\n\n<figure>\n<img alt=\"猫大王\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cat.jpg\" />\n<figcaption>猫大王</figcaption>\n</figure>\n\n哎，由于时间关系，我们只逛了舞台左边的西市和北街，左边的东市和南街根本没逛……好可惜，最后被广播赶走了，才5点半，说好的开到6点呢~\n\n最后，po两张我比较喜欢的比较有感觉的，再一次读一下今年造物节的slogan，这也应该是我们生活的态度：\n\n> 年轻就要造！！！\n\n<figure>\n<img alt=\"毒鸡汤\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/black-white.jpg\" />\n<figcaption>毒鸡汤</figcaption>\n</figure>\n\n<figure>\n<img alt=\"造\" \n\tsrc=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\"\n     data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/zao.jpg\" />\n<figcaption>造</figcaption>\n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"taobao-maker-festival-2017","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xa5004ezvr3lp3qsi9y","content":"<figure><br><img alt=\"大门口\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-1.jpg\"><br><figcaption>大门口</figcaption><br></figure>\n\n<p>2017淘宝造物节 —— 年轻就要造起来！</p>\n<p>我之前不知道有造物节，可能是因为我不在杭州，又或者媒体报道得也不多。今年的邀请函太吸引了，还有阿里内网、朋友圈、淘宝多个渠道以及各种公号的报道，尤其是黑科技浓浓的Tao Cafe无人便利店（我老爸都来问我知不知道这个店，宣传得太到位了），想不感兴趣都不行，拿到今天的票，就请假跑来“造”一下。</p>\n<p>一进来有种夜店feel有木有，恰逢汪涵过来主持，中间舞台被包围了，人超多，远远的拍照好了。</p>\n<figure><br><img alt=\"舞台\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-2.jpg\"><br><figcaption>舞台</figcaption><br></figure>\n\n<figure><br><img alt=\"地上投射的造物节logo\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-3.jpg\"><br><figcaption>地上投射的造物节logo</figcaption><br></figure>\n\n<p>进来以后，走了半圈，找不到我最想去的无人店呀……路盲找小二问，才发现Tao Cafe在刚才检票入口的旁边，白排队进来了，还绕了大半圈，简直惊呆了，你们感受一下这条长龙，我在队尾。以前我看到排队买喜茶的人很傻，没有好喝到让我等N个小时，现在发现如果有我很想要的东西的时候，虽然不太乐意，但还是等一下吧，Tao Cafe，我来了。</p>\n<figure><br><img alt=\"无人便利店的排队长龙\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting.jpg\"><br><figcaption>无人便利店的排队长龙</figcaption><br></figure>\n\n<p>半小时后，我在这~ 请看大屏幕，这个妹子在出门结账的时候，就是那么自信，自带光芒的，笑死 &gt;3&lt;</p>\n<figure><br><img alt=\"无人便利店的排队长龙（半小时后）\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting-2.jpg\"><br><figcaption>无人便利店的排队长龙（半小时后）</figcaption><br></figure>\n\n<p>足足一小时，我终于要刷脸进来无人便利店，这个门禁，很犀利，除了刷淘宝二维码之外，可能还需要刷脸，我看有的妹子进来之前，要把头发扎起来，不然过不了。</p>\n<figure><br><img alt=\"无人便利店的门禁\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-entry.jpg\"><br><figcaption>无人便利店的门禁</figcaption><br></figure>\n\n<p>进来后，直奔小卖部，这里招牌是”招牌淘咖啡“，呃，不推荐啦，我没有喝过混一点果酱（貌似是黄桃味）的咖啡，虽然味道还可以，但是总有种”黑暗料理“的感觉，还是点普通咖啡吧。</p>\n<figure><br><img alt=\"搬砖的排队去买咖啡\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-wu.jpg\"><br><figcaption>搬砖的排队去买咖啡</figcaption><br></figure>\n\n<figure><br><img alt=\"淘公仔\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-figure.jpg\"><br><figcaption>淘公仔</figcaption><br></figure>\n\n<p>无人便利店的概念很好，门禁、进门后的用户信息都可以捕抓到，真的非常有科技感、未来感。不过貌似暂未满足商用需求，我去买咖啡时，虽然有刷脸有AR，但是最后我是用支付宝码付款的；小伙伴买了个环保袋，走了两次付款通道，第一次说订单没下，第二次还是没有订单，最后在出口人工结账。两个情况的理由都是人太多，网络响应比较慢。[ 以上谨属本次体验的个人观点。我相信不久的未来，阿里的无人店会推广落地，再一次改变我们的生活 ]</p>\n<p>呼呼，等了半天，进去逛了十分钟就出来了，满足好奇心。出来之后，找到一只大型淘公仔，还是要求合照啦~</p>\n<figure><br><img alt=\"淘公仔合照\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tao-smile.jpg\"><br><figcaption>淘公仔合照</figcaption><br></figure>\n\n<p>再次进场，逛各种店噜。各种名店、潮店都装修得很有心思，比较有特色。</p>\n<p>我来之前，以为只是个小集市（一个淘宝店铺的展览会），逛逛就完事了。事实上不是这样的，人手一本小册子，上面有各种任务，大家除了逛逛逛、买买买、拍拍怕，还可以到各个店做任务、集印章、拿奖品。个人感觉很好，明年还想再来。</p>\n<p>废话不多说，上图。</p>\n<p>天猫精灵，智能音箱，小二给我们演示，大致还是灵敏的，哈哈，感兴趣的大家可以上天猫看看。</p>\n<figure><br><img alt=\"天猫精灵的平板支撑\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tmall-plank.jpg\"><br><figcaption>天猫精灵的平板支撑</figcaption><br></figure>\n\n<figure><br><img alt=\"环保的快递盒\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/green-action.jpg\"><br><figcaption>环保的快递盒</figcaption><br></figure>\n\n<p>One的展台……木有发现这个展馆跟”一个“有啥关系。</p>\n<figure><br><img alt=\"红\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/wu-hong.jpg\"><br><figcaption>红</figcaption><br></figure>\n\n<figure><br><img alt=\"卖包的小店\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bag-store.jpg\"><br><figcaption>卖包的小店</figcaption><br></figure>\n\n<figure><br><img alt=\"卖书的小罐头\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bookshop.jpg\"><br><figcaption>卖书的小罐头</figcaption><br></figure>\n\n<p>这位苏州的老奶奶说，黑布上的每一个图案，她都要绣一天，店里都是各种各样的刺绣品，真是不容易啊~</p>\n<figure><br><img alt=\"刺绣的老奶奶\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/grandma.jpg\"><br><figcaption>刺绣的老奶奶</figcaption><br></figure>\n\n<figure><br><img alt=\"另外一个手工的小锦囊\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/little-bag.jpg\"><br><figcaption>另外一个手工的小锦囊</figcaption><br></figure>\n\n<figure><br><img alt=\"小灯\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/light.jpg\"><br><figcaption>小灯</figcaption><br></figure>\n\n<p>逛完西市，我们来到了北街，这边的店有比较科技感的也有比较怀旧的。</p>\n<figure><br><img alt=\"北街\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/north-area.jpg\"><br><figcaption>北街</figcaption><br></figure>\n\n<figure><br><img alt=\"杂货铺\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-else.jpg\"><br><figcaption>杂货铺</figcaption><br></figure>\n\n<figure><br><img alt=\"匠心\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/workshop.jpg\"><br><figcaption>匠心</figcaption><br></figure>\n\n<figure><br><img alt=\"电影院\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cinema.jpg\"><br><figcaption>电影院</figcaption><br></figure>\n\n<figure><br><img alt=\"猫大王\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cat.jpg\"><br><figcaption>猫大王</figcaption><br></figure>\n\n<p>哎，由于时间关系，我们只逛了舞台左边的西市和北街，左边的东市和南街根本没逛……好可惜，最后被广播赶走了，才5点半，说好的开到6点呢~</p>\n<p>最后，po两张我比较喜欢的比较有感觉的，再一次读一下今年造物节的slogan，这也应该是我们生活的态度：</p>\n<blockquote>\n<p>年轻就要造！！！</p>\n</blockquote>\n<figure><br><img alt=\"毒鸡汤\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/black-white.jpg\"><br><figcaption>毒鸡汤</figcaption><br></figure>\n\n<figure><br><img alt=\"造\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/zao.jpg\"><br><figcaption>造</figcaption><br></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<figure><br><img alt=\"大门口\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-1.jpg\"><br><figcaption>大门口</figcaption><br></figure>\n\n<p>2017淘宝造物节 —— 年轻就要造起来！</p>\n<p>我之前不知道有造物节，可能是因为我不在杭州，又或者媒体报道得也不多。今年的邀请函太吸引了，还有阿里内网、朋友圈、淘宝多个渠道以及各种公号的报道，尤其是黑科技浓浓的Tao Cafe无人便利店（我老爸都来问我知不知道这个店，宣传得太到位了），想不感兴趣都不行，拿到今天的票，就请假跑来“造”一下。</p>\n<p>一进来有种夜店feel有木有，恰逢汪涵过来主持，中间舞台被包围了，人超多，远远的拍照好了。</p>\n<figure><br><img alt=\"舞台\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-2.jpg\"><br><figcaption>舞台</figcaption><br></figure>\n\n<figure><br><img alt=\"地上投射的造物节logo\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/entry-3.jpg\"><br><figcaption>地上投射的造物节logo</figcaption><br></figure>\n\n<p>进来以后，走了半圈，找不到我最想去的无人店呀……路盲找小二问，才发现Tao Cafe在刚才检票入口的旁边，白排队进来了，还绕了大半圈，简直惊呆了，你们感受一下这条长龙，我在队尾。以前我看到排队买喜茶的人很傻，没有好喝到让我等N个小时，现在发现如果有我很想要的东西的时候，虽然不太乐意，但还是等一下吧，Tao Cafe，我来了。</p>\n<figure><br><img alt=\"无人便利店的排队长龙\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting.jpg\"><br><figcaption>无人便利店的排队长龙</figcaption><br></figure>\n\n<p>半小时后，我在这~ 请看大屏幕，这个妹子在出门结账的时候，就是那么自信，自带光芒的，笑死 &gt;3&lt;</p>\n<figure><br><img alt=\"无人便利店的排队长龙（半小时后）\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-waiting-2.jpg\"><br><figcaption>无人便利店的排队长龙（半小时后）</figcaption><br></figure>\n\n<p>足足一小时，我终于要刷脸进来无人便利店，这个门禁，很犀利，除了刷淘宝二维码之外，可能还需要刷脸，我看有的妹子进来之前，要把头发扎起来，不然过不了。</p>\n<figure><br><img alt=\"无人便利店的门禁\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-entry.jpg\"><br><figcaption>无人便利店的门禁</figcaption><br></figure>\n\n<p>进来后，直奔小卖部，这里招牌是”招牌淘咖啡“，呃，不推荐啦，我没有喝过混一点果酱（貌似是黄桃味）的咖啡，虽然味道还可以，但是总有种”黑暗料理“的感觉，还是点普通咖啡吧。</p>\n<figure><br><img alt=\"搬砖的排队去买咖啡\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-wu.jpg\"><br><figcaption>搬砖的排队去买咖啡</figcaption><br></figure>\n\n<figure><br><img alt=\"淘公仔\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-figure.jpg\"><br><figcaption>淘公仔</figcaption><br></figure>\n\n<p>无人便利店的概念很好，门禁、进门后的用户信息都可以捕抓到，真的非常有科技感、未来感。不过貌似暂未满足商用需求，我去买咖啡时，虽然有刷脸有AR，但是最后我是用支付宝码付款的；小伙伴买了个环保袋，走了两次付款通道，第一次说订单没下，第二次还是没有订单，最后在出口人工结账。两个情况的理由都是人太多，网络响应比较慢。[ 以上谨属本次体验的个人观点。我相信不久的未来，阿里的无人店会推广落地，再一次改变我们的生活 ]</p>\n<p>呼呼，等了半天，进去逛了十分钟就出来了，满足好奇心。出来之后，找到一只大型淘公仔，还是要求合照啦~</p>\n<figure><br><img alt=\"淘公仔合照\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tao-smile.jpg\"><br><figcaption>淘公仔合照</figcaption><br></figure>\n\n<p>再次进场，逛各种店噜。各种名店、潮店都装修得很有心思，比较有特色。</p>\n<p>我来之前，以为只是个小集市（一个淘宝店铺的展览会），逛逛就完事了。事实上不是这样的，人手一本小册子，上面有各种任务，大家除了逛逛逛、买买买、拍拍怕，还可以到各个店做任务、集印章、拿奖品。个人感觉很好，明年还想再来。</p>\n<p>废话不多说，上图。</p>\n<p>天猫精灵，智能音箱，小二给我们演示，大致还是灵敏的，哈哈，感兴趣的大家可以上天猫看看。</p>\n<figure><br><img alt=\"天猫精灵的平板支撑\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/tmall-plank.jpg\"><br><figcaption>天猫精灵的平板支撑</figcaption><br></figure>\n\n<figure><br><img alt=\"环保的快递盒\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/green-action.jpg\"><br><figcaption>环保的快递盒</figcaption><br></figure>\n\n<p>One的展台……木有发现这个展馆跟”一个“有啥关系。</p>\n<figure><br><img alt=\"红\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/wu-hong.jpg\"><br><figcaption>红</figcaption><br></figure>\n\n<figure><br><img alt=\"卖包的小店\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bag-store.jpg\"><br><figcaption>卖包的小店</figcaption><br></figure>\n\n<figure><br><img alt=\"卖书的小罐头\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/bookshop.jpg\"><br><figcaption>卖书的小罐头</figcaption><br></figure>\n\n<p>这位苏州的老奶奶说，黑布上的每一个图案，她都要绣一天，店里都是各种各样的刺绣品，真是不容易啊~</p>\n<figure><br><img alt=\"刺绣的老奶奶\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/grandma.jpg\"><br><figcaption>刺绣的老奶奶</figcaption><br></figure>\n\n<figure><br><img alt=\"另外一个手工的小锦囊\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/little-bag.jpg\"><br><figcaption>另外一个手工的小锦囊</figcaption><br></figure>\n\n<figure><br><img alt=\"小灯\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/light.jpg\"><br><figcaption>小灯</figcaption><br></figure>\n\n<p>逛完西市，我们来到了北街，这边的店有比较科技感的也有比较怀旧的。</p>\n<figure><br><img alt=\"北街\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/north-area.jpg\"><br><figcaption>北街</figcaption><br></figure>\n\n<figure><br><img alt=\"杂货铺\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/store-else.jpg\"><br><figcaption>杂货铺</figcaption><br></figure>\n\n<figure><br><img alt=\"匠心\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/workshop.jpg\"><br><figcaption>匠心</figcaption><br></figure>\n\n<figure><br><img alt=\"电影院\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cinema.jpg\"><br><figcaption>电影院</figcaption><br></figure>\n\n<figure><br><img alt=\"猫大王\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/cat.jpg\"><br><figcaption>猫大王</figcaption><br></figure>\n\n<p>哎，由于时间关系，我们只逛了舞台左边的西市和北街，左边的东市和南街根本没逛……好可惜，最后被广播赶走了，才5点半，说好的开到6点呢~</p>\n<p>最后，po两张我比较喜欢的比较有感觉的，再一次读一下今年造物节的slogan，这也应该是我们生活的态度：</p>\n<blockquote>\n<p>年轻就要造！！！</p>\n</blockquote>\n<figure><br><img alt=\"毒鸡汤\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/black-white.jpg\"><br><figcaption>毒鸡汤</figcaption><br></figure>\n\n<figure><br><img alt=\"造\" src=\"http://sinacloud.net/woodysblog/blog/img-placeholder.jpg\" data-src=\"http://sinacloud.net/woodysblog/taobao-maker-festival/zao.jpg\"><br><figcaption>造</figcaption><br></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"我们始终牵手旅行","id":"78","date":"2015-02-22T12:13:25.000Z","_content":"\n之前看过一遍，多年以后再看，还是很想和喜欢的人出去旅游，哈哈 :)\n<!--more-->\n### 书摘：\n\n一、目的地\n\n1.  婺源\n\n    *   婺源的美总有它的道理：幢幢斑驳不一的老屋，密密地依水而立；青石板的曲径，沿着溪流和街巷铺陈开去；河溪曲折蜿蜒，河边便是一块块洗衣的青石板。村妇们打开后门，拾级而下，在水中淘米、洗菜、浣衣。空气中充满了江南湿润的水草味道。妇女们聊着天，捶着衣物。她们每天劳作在浣衣石上，从日出到日暮，从青丝到白鬓。\n\n2.  尼泊尔\n\n    *   那时候，一心想去尼泊尔，钟情于它充满人文气息的神秘感和神圣感。世界很大，可是只要走出小小的一步，也许就是完全不同的境界。\n    *   尼泊尔算是很入门级的开始，但是至今还是我心中东南亚地区的No.1。每当有人问我关于尼泊尔的一切时，我总是眉飞色舞，不能自已。\n\n3.  土耳其\n\n    *   土耳其人喜欢拍照和被拍，这点也是我来之前始料未及的。 原以为包着头巾的伊斯兰教人可能会忌讳拍摄，多少有些亚洲人特有的害羞和拘谨，但事实上却截然相反！自从这对姐妹花轮流和我合影后，我便发现了这点。接着，有父亲要求我们和他一岁的孩子合影的，有带着女儿的少妇想给我们拍照的，还有一老头给我们看他的数码相机中留下的其他中国游客的照片……\n\n* * *\n\n二、旅行是一个挑战自己的过程\n\n旅行是一个挑战自己的过程。比如一些以为不可能完成的任务、未知世界的学习和探索、意外事件的发生……无一不是在帮助形成更强大的你。人生没有地图，只有靠着梦想，朝着有光的地方去。很多年后回想起来，发现自己还在原地，高度却已不同，就像盘旋上升。没人做过并不代表不会成功。走出去一步才知道世界说大不大，说小不小。 而你的另一半，也许只是给了你一个眼神、一句鼓励，却能为你打开新的天地。\n\n* * *\n\n三、我们在生命中和很多人相遇。有些人是镜子，在他们身上，你能看到自己；而在有些人身上，你看到的却是你缺失的那部分。\n\n* * *\n\n四、关于摄影的自我超越\n\n要想超越，首先要保持好奇心和不断学习，其次就是要具有将中意的画面通过相机转换成照片的能力。这个世界上有无数的人，相机技术也在不断发展，谁都可能拍出一两张好看的照片，但只有很少的一部分人能够通过照片讲述故事。这就像在写一部小说，比如，我能写很多优美的文字，但不代表我能写出一部优秀的小说。摄影师能拍摄很多照片，但这些照片是否有力量？是否能表达些什么？是否能讲故事？所以，我要大量阅读，多思考周围的世界，多考虑照片背后的情节，而不是仅仅停留在拍摄出有视觉感的照片。那些伟大的摄影师，如罗伯特·卡帕、卡蒂埃·布列松，都是讲故事的高手。每张照片都是一个非常有力的故事。从技术的角度来讲，可能照片并不完美，但从讲述的故事来说非常吸引人。我喜欢研究摄影书，当我翻开这些书时，我会想，如果是我，我会怎么拍？\n\n然而支撑我去做没有固定收入的自由摄影师的，不仅仅是一往无前的勇气。许多朋友也曾和我交流过如何为自己的梦想努力这类问题。我认为，首先自己要有这样的能力。在做编辑时，我时常给自己设定一些选题，和左手一起利用业余时间去拍摄采访。也许会花很长的时间去完成这样一个项目，然后把它整理好，最后也许会发表，也许什么都不是。但这样做的好处是有一个命题作文，我必须要想办法去让这篇作文看起来有意思些。这样的事做多了，自然就对命题作文式的摄影师工作不犯怵了。\n\n* * *\n\n五、关于辞职去旅行\n\n一直期待一场间隔年，和千里一起辞职去西藏呆几个月。 可是，辞职这件事，并不是所有人都有勇气和能力去做，我们也是一样。我在一个期待已久的公司上班，马上就可以升到编辑部主任，而他也即将成为国内最年轻的专业相机测试领域人员之一。如何放弃已经唾手可得的职位，又如何保证在辞职后依然可以拥有维持生活质量的经济来源，都是我们需要面对的问题。\n\n因此，尽管我想过要辞职，但是我从未真正尝试过。我能做的只是在有限的假期里，利用长假和年假，在力所能及的范围内走一走。\n\n2006年的国庆，公司上层人事调动，影响了编辑部的正常运作，老板也在放假前郑重声明，今年国庆任何人都不允许多请一天假，而我们已将西班牙签证和机票备齐，整装待发地期待着我们的又一次旅行。\n\n辞职总是有着这样那样的因缘巧合。对我们这样理性的人来说，一心一意去旅行必然不是最核心考虑的因素。我从不鼓励身边的朋友为了旅行这个理由任性地辞职和休学。听起来是一件勇敢和美好的事情，可背后需要担当的责任却一点也未减少。只有当你有能力平衡这些事情的时候，才有资格辞职上路。\n\n因此，辞职虽然是件听起来很酷的事，我们却依然无法做出决定。\n\n面临的问题有很多。比如，钱。如果不能养活自己，不能解决最基本的生存问题，那么一切都是白搭。有这个勇气最根本的原因是作为一个有摄影技术的人来说，无论在哪里工作，拍摄都可以成为最基本的经济来源。加上我并没有和他一起辞职，而是继续了几个月的编辑工作，以维持稳定的月收入。同时，我手上还有两个固定写作的专栏，保证每个月支付固定的房贷、水电等家庭开销。再加上当时已有工作六年的经验，千里在圈内也具有了一定知名度，如果辞职后不能过得更自由，那么回到这个行业找一份朝九晚五的类似工作想必也不难。\n\n再比如，如何与父母沟通。不管是爱情、婚姻、事业或者梦想，他们都是你最强大的后盾，也可能是最大的阻拦者。不管怎样，如果不能取得父母的体谅，即使我们坚持做了，也不会幸福。\n\n* * *\n\n六、关于自由职业\n\n自由职业并不代表没有职业，我们甚至比以往更为用心地工作。事业上的攀登和家庭的完整是一个人生命中不可或缺的一部分，这是旅行所无法代替的。因此平衡成为最重要的事情。事业有所成就奠定一定的经济基础、取得父母的体谅和支持、结婚生子过正常人的生活、心中始终存有梦想并逐渐接近，四者相统一，是一生最大的挑战。每个人的人生都是一张画，从空白到充满色彩，涂上什么样的颜色都取决于你手中的画笔。不让自己后悔没有照顾父母，没有追求事业，没有生儿育女，也不让自己后悔没有在有生的岁月里站出来，追寻内心的召唤，去看一看精彩无限的世界。对我来说，最勇敢的事情不是辞职，而是决定用所有的精力来充实自己的人生，哪怕辛苦，哪怕疲累。 如此多的顾虑，让我们最终没有选择间隔年，即便已经辞职，即便还没有孩子。 有人说，这才是人生啊，和爱的人环游世界。但是我想说，是的，这才是人生，各种曲折和妥协交织才是真实存在的生活。\n\n* * *\n\n七、环游世界不仅仅是梦想\n\n旅行对有些人来说是奢侈品，家中一切物质需求都得以满足的时候，才会考虑旅行度假，以放松心情；可是对有些人来说却是必需品，除去正常的必要开支以外，存款中的80%都可以被允许用作旅行。自然的，享受型的开销也不得不缩减。\n\n旅行还可以给人带来无形的东西，比如旅行中获得的见闻、感悟和看过的世界、认识的人。对有些人来说，无形的就是无价值的，那的确不如买一个电视机或者名牌包包来得实在；而对有些人来说，只有这些无形的东西，才是生命中最珍贵的记忆。当我们的生命即将终结，卧于病榻时，我想不起来这一生中曾有过多少荣华富贵，也想不起来家里还有多少名贵的物品，我能享受的只有记忆。只有温情的记忆才值得唏嘘，而旅行便是丰富记忆的重要载体。\n\n我的确敬佩可以随时随地停下来安静生活的人，能割舍最重要的东西并忍受寂寞，这绝对是很多人的软肋——口口声声说羡慕你到处奔走，却宁可买一件和收入不成正比的奢侈品也不舍得花钱买一张机票。\n\n因此，旅行到底对你意味着什么，要付出多少代价，因人而异。适合自己的，就是最好的。不必羡慕，也不必妒忌，你付出了多少，就会获得多少。 而这一切，也只是相对而言。\n\n* * *\n\n八、两个人的旅行团\n\n好的伴侣未必可以是旅伴，但好的旅伴也许会适合长久地在一起——无论是朋友、爱人，在旅行中几乎都可以遵循这一条。\n\n热恋是荷尔蒙分泌后的本能吸引，而白头到老则是浸透着柴米油盐的琐碎生活。漂泊不是生活本身，旅行也不是维持爱情的唯一方式。不管是如父母般平凡平淡地度过一生的爱人们，还是到老都依然牵手走在路上的陈伯伯夫妇们，都有着最浪漫的爱情，最真实的生活。这是多么美好的场景：不再是仗剑走天涯的豪情万丈，而是在喜欢的地方住下，慢节奏地生活、读书、听音乐，在最松弛的状态下拍照。等我们老了，满头银丝，不再貌美，也不再帅气，哪儿也去不了，什么也吃不了，但是瞳孔却依然散发着清澈的光芒。我们可以坐在阳台的摇椅上，回味这一路收藏的点滴欢笑，在阳光下慢慢聊。 那时候，才有资格说，执子之手，与子偕老。\n\n* * *\n\n九、和你一起认识这个世界\n\n从在一起的那天起，我们就从未停止学习。包括旅行，也包括其他的一切技能和生活经验。常常觉得对伴侣更好的定义是“相知相伴的搭档”。\n\n有一段时间，我常看宗教书籍，每每把我感悟到的哲理和事例和他分享时，他总是安静地倾听。而这种分享通常会在旅途中发生，一切交通工具都是谈话的最佳场所。 很多人喜欢随遇而安的旅行方式，到了那里找当地人搭讪聊天询问，或者边走边看。而我们两个热衷于出发前预习、做功课，就像学生时期一样，头碰头，托着下巴，相互解答和讲述。在去一个地方之前，我们会对当地的几种情况进行分析和考量：一是历史，二是文化，三是电影书籍的观后感和读后感，四是照片的拍摄角度和攻略。\n\n“旅行是最劳顿、最麻烦、叫人本相毕现的时候……一个月舟车仆仆以后，双方还没有彼此看破，彼此厌恶，还没有吵嘴翻脸，还要维持原来的婚约，这种夫妇保证不会离婚。” —— 钱钟书","source":"_posts/travel-with-love.md","raw":"---\ntitle: 我们始终牵手旅行\ntags:\n  - reading\n  - travel\nid: 78\ncategories:\n  - reading\ndate: 2015-02-22 20:13:25\n---\n\n之前看过一遍，多年以后再看，还是很想和喜欢的人出去旅游，哈哈 :)\n<!--more-->\n### 书摘：\n\n一、目的地\n\n1.  婺源\n\n    *   婺源的美总有它的道理：幢幢斑驳不一的老屋，密密地依水而立；青石板的曲径，沿着溪流和街巷铺陈开去；河溪曲折蜿蜒，河边便是一块块洗衣的青石板。村妇们打开后门，拾级而下，在水中淘米、洗菜、浣衣。空气中充满了江南湿润的水草味道。妇女们聊着天，捶着衣物。她们每天劳作在浣衣石上，从日出到日暮，从青丝到白鬓。\n\n2.  尼泊尔\n\n    *   那时候，一心想去尼泊尔，钟情于它充满人文气息的神秘感和神圣感。世界很大，可是只要走出小小的一步，也许就是完全不同的境界。\n    *   尼泊尔算是很入门级的开始，但是至今还是我心中东南亚地区的No.1。每当有人问我关于尼泊尔的一切时，我总是眉飞色舞，不能自已。\n\n3.  土耳其\n\n    *   土耳其人喜欢拍照和被拍，这点也是我来之前始料未及的。 原以为包着头巾的伊斯兰教人可能会忌讳拍摄，多少有些亚洲人特有的害羞和拘谨，但事实上却截然相反！自从这对姐妹花轮流和我合影后，我便发现了这点。接着，有父亲要求我们和他一岁的孩子合影的，有带着女儿的少妇想给我们拍照的，还有一老头给我们看他的数码相机中留下的其他中国游客的照片……\n\n* * *\n\n二、旅行是一个挑战自己的过程\n\n旅行是一个挑战自己的过程。比如一些以为不可能完成的任务、未知世界的学习和探索、意外事件的发生……无一不是在帮助形成更强大的你。人生没有地图，只有靠着梦想，朝着有光的地方去。很多年后回想起来，发现自己还在原地，高度却已不同，就像盘旋上升。没人做过并不代表不会成功。走出去一步才知道世界说大不大，说小不小。 而你的另一半，也许只是给了你一个眼神、一句鼓励，却能为你打开新的天地。\n\n* * *\n\n三、我们在生命中和很多人相遇。有些人是镜子，在他们身上，你能看到自己；而在有些人身上，你看到的却是你缺失的那部分。\n\n* * *\n\n四、关于摄影的自我超越\n\n要想超越，首先要保持好奇心和不断学习，其次就是要具有将中意的画面通过相机转换成照片的能力。这个世界上有无数的人，相机技术也在不断发展，谁都可能拍出一两张好看的照片，但只有很少的一部分人能够通过照片讲述故事。这就像在写一部小说，比如，我能写很多优美的文字，但不代表我能写出一部优秀的小说。摄影师能拍摄很多照片，但这些照片是否有力量？是否能表达些什么？是否能讲故事？所以，我要大量阅读，多思考周围的世界，多考虑照片背后的情节，而不是仅仅停留在拍摄出有视觉感的照片。那些伟大的摄影师，如罗伯特·卡帕、卡蒂埃·布列松，都是讲故事的高手。每张照片都是一个非常有力的故事。从技术的角度来讲，可能照片并不完美，但从讲述的故事来说非常吸引人。我喜欢研究摄影书，当我翻开这些书时，我会想，如果是我，我会怎么拍？\n\n然而支撑我去做没有固定收入的自由摄影师的，不仅仅是一往无前的勇气。许多朋友也曾和我交流过如何为自己的梦想努力这类问题。我认为，首先自己要有这样的能力。在做编辑时，我时常给自己设定一些选题，和左手一起利用业余时间去拍摄采访。也许会花很长的时间去完成这样一个项目，然后把它整理好，最后也许会发表，也许什么都不是。但这样做的好处是有一个命题作文，我必须要想办法去让这篇作文看起来有意思些。这样的事做多了，自然就对命题作文式的摄影师工作不犯怵了。\n\n* * *\n\n五、关于辞职去旅行\n\n一直期待一场间隔年，和千里一起辞职去西藏呆几个月。 可是，辞职这件事，并不是所有人都有勇气和能力去做，我们也是一样。我在一个期待已久的公司上班，马上就可以升到编辑部主任，而他也即将成为国内最年轻的专业相机测试领域人员之一。如何放弃已经唾手可得的职位，又如何保证在辞职后依然可以拥有维持生活质量的经济来源，都是我们需要面对的问题。\n\n因此，尽管我想过要辞职，但是我从未真正尝试过。我能做的只是在有限的假期里，利用长假和年假，在力所能及的范围内走一走。\n\n2006年的国庆，公司上层人事调动，影响了编辑部的正常运作，老板也在放假前郑重声明，今年国庆任何人都不允许多请一天假，而我们已将西班牙签证和机票备齐，整装待发地期待着我们的又一次旅行。\n\n辞职总是有着这样那样的因缘巧合。对我们这样理性的人来说，一心一意去旅行必然不是最核心考虑的因素。我从不鼓励身边的朋友为了旅行这个理由任性地辞职和休学。听起来是一件勇敢和美好的事情，可背后需要担当的责任却一点也未减少。只有当你有能力平衡这些事情的时候，才有资格辞职上路。\n\n因此，辞职虽然是件听起来很酷的事，我们却依然无法做出决定。\n\n面临的问题有很多。比如，钱。如果不能养活自己，不能解决最基本的生存问题，那么一切都是白搭。有这个勇气最根本的原因是作为一个有摄影技术的人来说，无论在哪里工作，拍摄都可以成为最基本的经济来源。加上我并没有和他一起辞职，而是继续了几个月的编辑工作，以维持稳定的月收入。同时，我手上还有两个固定写作的专栏，保证每个月支付固定的房贷、水电等家庭开销。再加上当时已有工作六年的经验，千里在圈内也具有了一定知名度，如果辞职后不能过得更自由，那么回到这个行业找一份朝九晚五的类似工作想必也不难。\n\n再比如，如何与父母沟通。不管是爱情、婚姻、事业或者梦想，他们都是你最强大的后盾，也可能是最大的阻拦者。不管怎样，如果不能取得父母的体谅，即使我们坚持做了，也不会幸福。\n\n* * *\n\n六、关于自由职业\n\n自由职业并不代表没有职业，我们甚至比以往更为用心地工作。事业上的攀登和家庭的完整是一个人生命中不可或缺的一部分，这是旅行所无法代替的。因此平衡成为最重要的事情。事业有所成就奠定一定的经济基础、取得父母的体谅和支持、结婚生子过正常人的生活、心中始终存有梦想并逐渐接近，四者相统一，是一生最大的挑战。每个人的人生都是一张画，从空白到充满色彩，涂上什么样的颜色都取决于你手中的画笔。不让自己后悔没有照顾父母，没有追求事业，没有生儿育女，也不让自己后悔没有在有生的岁月里站出来，追寻内心的召唤，去看一看精彩无限的世界。对我来说，最勇敢的事情不是辞职，而是决定用所有的精力来充实自己的人生，哪怕辛苦，哪怕疲累。 如此多的顾虑，让我们最终没有选择间隔年，即便已经辞职，即便还没有孩子。 有人说，这才是人生啊，和爱的人环游世界。但是我想说，是的，这才是人生，各种曲折和妥协交织才是真实存在的生活。\n\n* * *\n\n七、环游世界不仅仅是梦想\n\n旅行对有些人来说是奢侈品，家中一切物质需求都得以满足的时候，才会考虑旅行度假，以放松心情；可是对有些人来说却是必需品，除去正常的必要开支以外，存款中的80%都可以被允许用作旅行。自然的，享受型的开销也不得不缩减。\n\n旅行还可以给人带来无形的东西，比如旅行中获得的见闻、感悟和看过的世界、认识的人。对有些人来说，无形的就是无价值的，那的确不如买一个电视机或者名牌包包来得实在；而对有些人来说，只有这些无形的东西，才是生命中最珍贵的记忆。当我们的生命即将终结，卧于病榻时，我想不起来这一生中曾有过多少荣华富贵，也想不起来家里还有多少名贵的物品，我能享受的只有记忆。只有温情的记忆才值得唏嘘，而旅行便是丰富记忆的重要载体。\n\n我的确敬佩可以随时随地停下来安静生活的人，能割舍最重要的东西并忍受寂寞，这绝对是很多人的软肋——口口声声说羡慕你到处奔走，却宁可买一件和收入不成正比的奢侈品也不舍得花钱买一张机票。\n\n因此，旅行到底对你意味着什么，要付出多少代价，因人而异。适合自己的，就是最好的。不必羡慕，也不必妒忌，你付出了多少，就会获得多少。 而这一切，也只是相对而言。\n\n* * *\n\n八、两个人的旅行团\n\n好的伴侣未必可以是旅伴，但好的旅伴也许会适合长久地在一起——无论是朋友、爱人，在旅行中几乎都可以遵循这一条。\n\n热恋是荷尔蒙分泌后的本能吸引，而白头到老则是浸透着柴米油盐的琐碎生活。漂泊不是生活本身，旅行也不是维持爱情的唯一方式。不管是如父母般平凡平淡地度过一生的爱人们，还是到老都依然牵手走在路上的陈伯伯夫妇们，都有着最浪漫的爱情，最真实的生活。这是多么美好的场景：不再是仗剑走天涯的豪情万丈，而是在喜欢的地方住下，慢节奏地生活、读书、听音乐，在最松弛的状态下拍照。等我们老了，满头银丝，不再貌美，也不再帅气，哪儿也去不了，什么也吃不了，但是瞳孔却依然散发着清澈的光芒。我们可以坐在阳台的摇椅上，回味这一路收藏的点滴欢笑，在阳光下慢慢聊。 那时候，才有资格说，执子之手，与子偕老。\n\n* * *\n\n九、和你一起认识这个世界\n\n从在一起的那天起，我们就从未停止学习。包括旅行，也包括其他的一切技能和生活经验。常常觉得对伴侣更好的定义是“相知相伴的搭档”。\n\n有一段时间，我常看宗教书籍，每每把我感悟到的哲理和事例和他分享时，他总是安静地倾听。而这种分享通常会在旅途中发生，一切交通工具都是谈话的最佳场所。 很多人喜欢随遇而安的旅行方式，到了那里找当地人搭讪聊天询问，或者边走边看。而我们两个热衷于出发前预习、做功课，就像学生时期一样，头碰头，托着下巴，相互解答和讲述。在去一个地方之前，我们会对当地的几种情况进行分析和考量：一是历史，二是文化，三是电影书籍的观后感和读后感，四是照片的拍摄角度和攻略。\n\n“旅行是最劳顿、最麻烦、叫人本相毕现的时候……一个月舟车仆仆以后，双方还没有彼此看破，彼此厌恶，还没有吵嘴翻脸，还要维持原来的婚约，这种夫妇保证不会离婚。” —— 钱钟书","slug":"travel-with-love","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xa6004hzvr3zx722vdr","content":"<p>之前看过一遍，多年以后再看，还是很想和喜欢的人出去旅游，哈哈 :)<br><a id=\"more\"></a></p>\n<h3 id=\"书摘：\"><a href=\"#书摘：\" class=\"headerlink\" title=\"书摘：\"></a>书摘：</h3><p>一、目的地</p>\n<ol>\n<li><p>婺源</p>\n<ul>\n<li>婺源的美总有它的道理：幢幢斑驳不一的老屋，密密地依水而立；青石板的曲径，沿着溪流和街巷铺陈开去；河溪曲折蜿蜒，河边便是一块块洗衣的青石板。村妇们打开后门，拾级而下，在水中淘米、洗菜、浣衣。空气中充满了江南湿润的水草味道。妇女们聊着天，捶着衣物。她们每天劳作在浣衣石上，从日出到日暮，从青丝到白鬓。</li>\n</ul>\n</li>\n<li><p>尼泊尔</p>\n<ul>\n<li>那时候，一心想去尼泊尔，钟情于它充满人文气息的神秘感和神圣感。世界很大，可是只要走出小小的一步，也许就是完全不同的境界。</li>\n<li>尼泊尔算是很入门级的开始，但是至今还是我心中东南亚地区的No.1。每当有人问我关于尼泊尔的一切时，我总是眉飞色舞，不能自已。</li>\n</ul>\n</li>\n<li><p>土耳其</p>\n<ul>\n<li>土耳其人喜欢拍照和被拍，这点也是我来之前始料未及的。 原以为包着头巾的伊斯兰教人可能会忌讳拍摄，多少有些亚洲人特有的害羞和拘谨，但事实上却截然相反！自从这对姐妹花轮流和我合影后，我便发现了这点。接着，有父亲要求我们和他一岁的孩子合影的，有带着女儿的少妇想给我们拍照的，还有一老头给我们看他的数码相机中留下的其他中国游客的照片……</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>二、旅行是一个挑战自己的过程</p>\n<p>旅行是一个挑战自己的过程。比如一些以为不可能完成的任务、未知世界的学习和探索、意外事件的发生……无一不是在帮助形成更强大的你。人生没有地图，只有靠着梦想，朝着有光的地方去。很多年后回想起来，发现自己还在原地，高度却已不同，就像盘旋上升。没人做过并不代表不会成功。走出去一步才知道世界说大不大，说小不小。 而你的另一半，也许只是给了你一个眼神、一句鼓励，却能为你打开新的天地。</p>\n<hr>\n<p>三、我们在生命中和很多人相遇。有些人是镜子，在他们身上，你能看到自己；而在有些人身上，你看到的却是你缺失的那部分。</p>\n<hr>\n<p>四、关于摄影的自我超越</p>\n<p>要想超越，首先要保持好奇心和不断学习，其次就是要具有将中意的画面通过相机转换成照片的能力。这个世界上有无数的人，相机技术也在不断发展，谁都可能拍出一两张好看的照片，但只有很少的一部分人能够通过照片讲述故事。这就像在写一部小说，比如，我能写很多优美的文字，但不代表我能写出一部优秀的小说。摄影师能拍摄很多照片，但这些照片是否有力量？是否能表达些什么？是否能讲故事？所以，我要大量阅读，多思考周围的世界，多考虑照片背后的情节，而不是仅仅停留在拍摄出有视觉感的照片。那些伟大的摄影师，如罗伯特·卡帕、卡蒂埃·布列松，都是讲故事的高手。每张照片都是一个非常有力的故事。从技术的角度来讲，可能照片并不完美，但从讲述的故事来说非常吸引人。我喜欢研究摄影书，当我翻开这些书时，我会想，如果是我，我会怎么拍？</p>\n<p>然而支撑我去做没有固定收入的自由摄影师的，不仅仅是一往无前的勇气。许多朋友也曾和我交流过如何为自己的梦想努力这类问题。我认为，首先自己要有这样的能力。在做编辑时，我时常给自己设定一些选题，和左手一起利用业余时间去拍摄采访。也许会花很长的时间去完成这样一个项目，然后把它整理好，最后也许会发表，也许什么都不是。但这样做的好处是有一个命题作文，我必须要想办法去让这篇作文看起来有意思些。这样的事做多了，自然就对命题作文式的摄影师工作不犯怵了。</p>\n<hr>\n<p>五、关于辞职去旅行</p>\n<p>一直期待一场间隔年，和千里一起辞职去西藏呆几个月。 可是，辞职这件事，并不是所有人都有勇气和能力去做，我们也是一样。我在一个期待已久的公司上班，马上就可以升到编辑部主任，而他也即将成为国内最年轻的专业相机测试领域人员之一。如何放弃已经唾手可得的职位，又如何保证在辞职后依然可以拥有维持生活质量的经济来源，都是我们需要面对的问题。</p>\n<p>因此，尽管我想过要辞职，但是我从未真正尝试过。我能做的只是在有限的假期里，利用长假和年假，在力所能及的范围内走一走。</p>\n<p>2006年的国庆，公司上层人事调动，影响了编辑部的正常运作，老板也在放假前郑重声明，今年国庆任何人都不允许多请一天假，而我们已将西班牙签证和机票备齐，整装待发地期待着我们的又一次旅行。</p>\n<p>辞职总是有着这样那样的因缘巧合。对我们这样理性的人来说，一心一意去旅行必然不是最核心考虑的因素。我从不鼓励身边的朋友为了旅行这个理由任性地辞职和休学。听起来是一件勇敢和美好的事情，可背后需要担当的责任却一点也未减少。只有当你有能力平衡这些事情的时候，才有资格辞职上路。</p>\n<p>因此，辞职虽然是件听起来很酷的事，我们却依然无法做出决定。</p>\n<p>面临的问题有很多。比如，钱。如果不能养活自己，不能解决最基本的生存问题，那么一切都是白搭。有这个勇气最根本的原因是作为一个有摄影技术的人来说，无论在哪里工作，拍摄都可以成为最基本的经济来源。加上我并没有和他一起辞职，而是继续了几个月的编辑工作，以维持稳定的月收入。同时，我手上还有两个固定写作的专栏，保证每个月支付固定的房贷、水电等家庭开销。再加上当时已有工作六年的经验，千里在圈内也具有了一定知名度，如果辞职后不能过得更自由，那么回到这个行业找一份朝九晚五的类似工作想必也不难。</p>\n<p>再比如，如何与父母沟通。不管是爱情、婚姻、事业或者梦想，他们都是你最强大的后盾，也可能是最大的阻拦者。不管怎样，如果不能取得父母的体谅，即使我们坚持做了，也不会幸福。</p>\n<hr>\n<p>六、关于自由职业</p>\n<p>自由职业并不代表没有职业，我们甚至比以往更为用心地工作。事业上的攀登和家庭的完整是一个人生命中不可或缺的一部分，这是旅行所无法代替的。因此平衡成为最重要的事情。事业有所成就奠定一定的经济基础、取得父母的体谅和支持、结婚生子过正常人的生活、心中始终存有梦想并逐渐接近，四者相统一，是一生最大的挑战。每个人的人生都是一张画，从空白到充满色彩，涂上什么样的颜色都取决于你手中的画笔。不让自己后悔没有照顾父母，没有追求事业，没有生儿育女，也不让自己后悔没有在有生的岁月里站出来，追寻内心的召唤，去看一看精彩无限的世界。对我来说，最勇敢的事情不是辞职，而是决定用所有的精力来充实自己的人生，哪怕辛苦，哪怕疲累。 如此多的顾虑，让我们最终没有选择间隔年，即便已经辞职，即便还没有孩子。 有人说，这才是人生啊，和爱的人环游世界。但是我想说，是的，这才是人生，各种曲折和妥协交织才是真实存在的生活。</p>\n<hr>\n<p>七、环游世界不仅仅是梦想</p>\n<p>旅行对有些人来说是奢侈品，家中一切物质需求都得以满足的时候，才会考虑旅行度假，以放松心情；可是对有些人来说却是必需品，除去正常的必要开支以外，存款中的80%都可以被允许用作旅行。自然的，享受型的开销也不得不缩减。</p>\n<p>旅行还可以给人带来无形的东西，比如旅行中获得的见闻、感悟和看过的世界、认识的人。对有些人来说，无形的就是无价值的，那的确不如买一个电视机或者名牌包包来得实在；而对有些人来说，只有这些无形的东西，才是生命中最珍贵的记忆。当我们的生命即将终结，卧于病榻时，我想不起来这一生中曾有过多少荣华富贵，也想不起来家里还有多少名贵的物品，我能享受的只有记忆。只有温情的记忆才值得唏嘘，而旅行便是丰富记忆的重要载体。</p>\n<p>我的确敬佩可以随时随地停下来安静生活的人，能割舍最重要的东西并忍受寂寞，这绝对是很多人的软肋——口口声声说羡慕你到处奔走，却宁可买一件和收入不成正比的奢侈品也不舍得花钱买一张机票。</p>\n<p>因此，旅行到底对你意味着什么，要付出多少代价，因人而异。适合自己的，就是最好的。不必羡慕，也不必妒忌，你付出了多少，就会获得多少。 而这一切，也只是相对而言。</p>\n<hr>\n<p>八、两个人的旅行团</p>\n<p>好的伴侣未必可以是旅伴，但好的旅伴也许会适合长久地在一起——无论是朋友、爱人，在旅行中几乎都可以遵循这一条。</p>\n<p>热恋是荷尔蒙分泌后的本能吸引，而白头到老则是浸透着柴米油盐的琐碎生活。漂泊不是生活本身，旅行也不是维持爱情的唯一方式。不管是如父母般平凡平淡地度过一生的爱人们，还是到老都依然牵手走在路上的陈伯伯夫妇们，都有着最浪漫的爱情，最真实的生活。这是多么美好的场景：不再是仗剑走天涯的豪情万丈，而是在喜欢的地方住下，慢节奏地生活、读书、听音乐，在最松弛的状态下拍照。等我们老了，满头银丝，不再貌美，也不再帅气，哪儿也去不了，什么也吃不了，但是瞳孔却依然散发着清澈的光芒。我们可以坐在阳台的摇椅上，回味这一路收藏的点滴欢笑，在阳光下慢慢聊。 那时候，才有资格说，执子之手，与子偕老。</p>\n<hr>\n<p>九、和你一起认识这个世界</p>\n<p>从在一起的那天起，我们就从未停止学习。包括旅行，也包括其他的一切技能和生活经验。常常觉得对伴侣更好的定义是“相知相伴的搭档”。</p>\n<p>有一段时间，我常看宗教书籍，每每把我感悟到的哲理和事例和他分享时，他总是安静地倾听。而这种分享通常会在旅途中发生，一切交通工具都是谈话的最佳场所。 很多人喜欢随遇而安的旅行方式，到了那里找当地人搭讪聊天询问，或者边走边看。而我们两个热衷于出发前预习、做功课，就像学生时期一样，头碰头，托着下巴，相互解答和讲述。在去一个地方之前，我们会对当地的几种情况进行分析和考量：一是历史，二是文化，三是电影书籍的观后感和读后感，四是照片的拍摄角度和攻略。</p>\n<p>“旅行是最劳顿、最麻烦、叫人本相毕现的时候……一个月舟车仆仆以后，双方还没有彼此看破，彼此厌恶，还没有吵嘴翻脸，还要维持原来的婚约，这种夫妇保证不会离婚。” —— 钱钟书</p>\n","site":{"data":{}},"excerpt":"<p>之前看过一遍，多年以后再看，还是很想和喜欢的人出去旅游，哈哈 :)<br>","more":"</p>\n<h3 id=\"书摘：\"><a href=\"#书摘：\" class=\"headerlink\" title=\"书摘：\"></a>书摘：</h3><p>一、目的地</p>\n<ol>\n<li><p>婺源</p>\n<ul>\n<li>婺源的美总有它的道理：幢幢斑驳不一的老屋，密密地依水而立；青石板的曲径，沿着溪流和街巷铺陈开去；河溪曲折蜿蜒，河边便是一块块洗衣的青石板。村妇们打开后门，拾级而下，在水中淘米、洗菜、浣衣。空气中充满了江南湿润的水草味道。妇女们聊着天，捶着衣物。她们每天劳作在浣衣石上，从日出到日暮，从青丝到白鬓。</li>\n</ul>\n</li>\n<li><p>尼泊尔</p>\n<ul>\n<li>那时候，一心想去尼泊尔，钟情于它充满人文气息的神秘感和神圣感。世界很大，可是只要走出小小的一步，也许就是完全不同的境界。</li>\n<li>尼泊尔算是很入门级的开始，但是至今还是我心中东南亚地区的No.1。每当有人问我关于尼泊尔的一切时，我总是眉飞色舞，不能自已。</li>\n</ul>\n</li>\n<li><p>土耳其</p>\n<ul>\n<li>土耳其人喜欢拍照和被拍，这点也是我来之前始料未及的。 原以为包着头巾的伊斯兰教人可能会忌讳拍摄，多少有些亚洲人特有的害羞和拘谨，但事实上却截然相反！自从这对姐妹花轮流和我合影后，我便发现了这点。接着，有父亲要求我们和他一岁的孩子合影的，有带着女儿的少妇想给我们拍照的，还有一老头给我们看他的数码相机中留下的其他中国游客的照片……</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>二、旅行是一个挑战自己的过程</p>\n<p>旅行是一个挑战自己的过程。比如一些以为不可能完成的任务、未知世界的学习和探索、意外事件的发生……无一不是在帮助形成更强大的你。人生没有地图，只有靠着梦想，朝着有光的地方去。很多年后回想起来，发现自己还在原地，高度却已不同，就像盘旋上升。没人做过并不代表不会成功。走出去一步才知道世界说大不大，说小不小。 而你的另一半，也许只是给了你一个眼神、一句鼓励，却能为你打开新的天地。</p>\n<hr>\n<p>三、我们在生命中和很多人相遇。有些人是镜子，在他们身上，你能看到自己；而在有些人身上，你看到的却是你缺失的那部分。</p>\n<hr>\n<p>四、关于摄影的自我超越</p>\n<p>要想超越，首先要保持好奇心和不断学习，其次就是要具有将中意的画面通过相机转换成照片的能力。这个世界上有无数的人，相机技术也在不断发展，谁都可能拍出一两张好看的照片，但只有很少的一部分人能够通过照片讲述故事。这就像在写一部小说，比如，我能写很多优美的文字，但不代表我能写出一部优秀的小说。摄影师能拍摄很多照片，但这些照片是否有力量？是否能表达些什么？是否能讲故事？所以，我要大量阅读，多思考周围的世界，多考虑照片背后的情节，而不是仅仅停留在拍摄出有视觉感的照片。那些伟大的摄影师，如罗伯特·卡帕、卡蒂埃·布列松，都是讲故事的高手。每张照片都是一个非常有力的故事。从技术的角度来讲，可能照片并不完美，但从讲述的故事来说非常吸引人。我喜欢研究摄影书，当我翻开这些书时，我会想，如果是我，我会怎么拍？</p>\n<p>然而支撑我去做没有固定收入的自由摄影师的，不仅仅是一往无前的勇气。许多朋友也曾和我交流过如何为自己的梦想努力这类问题。我认为，首先自己要有这样的能力。在做编辑时，我时常给自己设定一些选题，和左手一起利用业余时间去拍摄采访。也许会花很长的时间去完成这样一个项目，然后把它整理好，最后也许会发表，也许什么都不是。但这样做的好处是有一个命题作文，我必须要想办法去让这篇作文看起来有意思些。这样的事做多了，自然就对命题作文式的摄影师工作不犯怵了。</p>\n<hr>\n<p>五、关于辞职去旅行</p>\n<p>一直期待一场间隔年，和千里一起辞职去西藏呆几个月。 可是，辞职这件事，并不是所有人都有勇气和能力去做，我们也是一样。我在一个期待已久的公司上班，马上就可以升到编辑部主任，而他也即将成为国内最年轻的专业相机测试领域人员之一。如何放弃已经唾手可得的职位，又如何保证在辞职后依然可以拥有维持生活质量的经济来源，都是我们需要面对的问题。</p>\n<p>因此，尽管我想过要辞职，但是我从未真正尝试过。我能做的只是在有限的假期里，利用长假和年假，在力所能及的范围内走一走。</p>\n<p>2006年的国庆，公司上层人事调动，影响了编辑部的正常运作，老板也在放假前郑重声明，今年国庆任何人都不允许多请一天假，而我们已将西班牙签证和机票备齐，整装待发地期待着我们的又一次旅行。</p>\n<p>辞职总是有着这样那样的因缘巧合。对我们这样理性的人来说，一心一意去旅行必然不是最核心考虑的因素。我从不鼓励身边的朋友为了旅行这个理由任性地辞职和休学。听起来是一件勇敢和美好的事情，可背后需要担当的责任却一点也未减少。只有当你有能力平衡这些事情的时候，才有资格辞职上路。</p>\n<p>因此，辞职虽然是件听起来很酷的事，我们却依然无法做出决定。</p>\n<p>面临的问题有很多。比如，钱。如果不能养活自己，不能解决最基本的生存问题，那么一切都是白搭。有这个勇气最根本的原因是作为一个有摄影技术的人来说，无论在哪里工作，拍摄都可以成为最基本的经济来源。加上我并没有和他一起辞职，而是继续了几个月的编辑工作，以维持稳定的月收入。同时，我手上还有两个固定写作的专栏，保证每个月支付固定的房贷、水电等家庭开销。再加上当时已有工作六年的经验，千里在圈内也具有了一定知名度，如果辞职后不能过得更自由，那么回到这个行业找一份朝九晚五的类似工作想必也不难。</p>\n<p>再比如，如何与父母沟通。不管是爱情、婚姻、事业或者梦想，他们都是你最强大的后盾，也可能是最大的阻拦者。不管怎样，如果不能取得父母的体谅，即使我们坚持做了，也不会幸福。</p>\n<hr>\n<p>六、关于自由职业</p>\n<p>自由职业并不代表没有职业，我们甚至比以往更为用心地工作。事业上的攀登和家庭的完整是一个人生命中不可或缺的一部分，这是旅行所无法代替的。因此平衡成为最重要的事情。事业有所成就奠定一定的经济基础、取得父母的体谅和支持、结婚生子过正常人的生活、心中始终存有梦想并逐渐接近，四者相统一，是一生最大的挑战。每个人的人生都是一张画，从空白到充满色彩，涂上什么样的颜色都取决于你手中的画笔。不让自己后悔没有照顾父母，没有追求事业，没有生儿育女，也不让自己后悔没有在有生的岁月里站出来，追寻内心的召唤，去看一看精彩无限的世界。对我来说，最勇敢的事情不是辞职，而是决定用所有的精力来充实自己的人生，哪怕辛苦，哪怕疲累。 如此多的顾虑，让我们最终没有选择间隔年，即便已经辞职，即便还没有孩子。 有人说，这才是人生啊，和爱的人环游世界。但是我想说，是的，这才是人生，各种曲折和妥协交织才是真实存在的生活。</p>\n<hr>\n<p>七、环游世界不仅仅是梦想</p>\n<p>旅行对有些人来说是奢侈品，家中一切物质需求都得以满足的时候，才会考虑旅行度假，以放松心情；可是对有些人来说却是必需品，除去正常的必要开支以外，存款中的80%都可以被允许用作旅行。自然的，享受型的开销也不得不缩减。</p>\n<p>旅行还可以给人带来无形的东西，比如旅行中获得的见闻、感悟和看过的世界、认识的人。对有些人来说，无形的就是无价值的，那的确不如买一个电视机或者名牌包包来得实在；而对有些人来说，只有这些无形的东西，才是生命中最珍贵的记忆。当我们的生命即将终结，卧于病榻时，我想不起来这一生中曾有过多少荣华富贵，也想不起来家里还有多少名贵的物品，我能享受的只有记忆。只有温情的记忆才值得唏嘘，而旅行便是丰富记忆的重要载体。</p>\n<p>我的确敬佩可以随时随地停下来安静生活的人，能割舍最重要的东西并忍受寂寞，这绝对是很多人的软肋——口口声声说羡慕你到处奔走，却宁可买一件和收入不成正比的奢侈品也不舍得花钱买一张机票。</p>\n<p>因此，旅行到底对你意味着什么，要付出多少代价，因人而异。适合自己的，就是最好的。不必羡慕，也不必妒忌，你付出了多少，就会获得多少。 而这一切，也只是相对而言。</p>\n<hr>\n<p>八、两个人的旅行团</p>\n<p>好的伴侣未必可以是旅伴，但好的旅伴也许会适合长久地在一起——无论是朋友、爱人，在旅行中几乎都可以遵循这一条。</p>\n<p>热恋是荷尔蒙分泌后的本能吸引，而白头到老则是浸透着柴米油盐的琐碎生活。漂泊不是生活本身，旅行也不是维持爱情的唯一方式。不管是如父母般平凡平淡地度过一生的爱人们，还是到老都依然牵手走在路上的陈伯伯夫妇们，都有着最浪漫的爱情，最真实的生活。这是多么美好的场景：不再是仗剑走天涯的豪情万丈，而是在喜欢的地方住下，慢节奏地生活、读书、听音乐，在最松弛的状态下拍照。等我们老了，满头银丝，不再貌美，也不再帅气，哪儿也去不了，什么也吃不了，但是瞳孔却依然散发着清澈的光芒。我们可以坐在阳台的摇椅上，回味这一路收藏的点滴欢笑，在阳光下慢慢聊。 那时候，才有资格说，执子之手，与子偕老。</p>\n<hr>\n<p>九、和你一起认识这个世界</p>\n<p>从在一起的那天起，我们就从未停止学习。包括旅行，也包括其他的一切技能和生活经验。常常觉得对伴侣更好的定义是“相知相伴的搭档”。</p>\n<p>有一段时间，我常看宗教书籍，每每把我感悟到的哲理和事例和他分享时，他总是安静地倾听。而这种分享通常会在旅途中发生，一切交通工具都是谈话的最佳场所。 很多人喜欢随遇而安的旅行方式，到了那里找当地人搭讪聊天询问，或者边走边看。而我们两个热衷于出发前预习、做功课，就像学生时期一样，头碰头，托着下巴，相互解答和讲述。在去一个地方之前，我们会对当地的几种情况进行分析和考量：一是历史，二是文化，三是电影书籍的观后感和读后感，四是照片的拍摄角度和攻略。</p>\n<p>“旅行是最劳顿、最麻烦、叫人本相毕现的时候……一个月舟车仆仆以后，双方还没有彼此看破，彼此厌恶，还没有吵嘴翻脸，还要维持原来的婚约，这种夫妇保证不会离婚。” —— 钱钟书</p>"},{"title":"UC浏览器调试无线页面","date":"2016-04-19T06:20:54.000Z","_content":"\n上次写了篇[《Safari调试无线页面》](/archives/safari-web-debug/)，有小伙伴进来的第一反应是，需要一台MacBook和iPhone，臣妾做不到呀！\n\n让使用安卓设备的小伙伴情何以堪，于是有了姐妹篇，也就是本文《UC浏览器调试无线页面》\n\n准备：\n\n1. Android设备和[UC浏览器开发者版](http://www.uc.cn/business/developer/)\n2. 浏览器（小编用的[Chrome](http://www.google.cn/chrome/browser/)，真的不要再用低版本IE了好吗~）\n\n概要步骤：\n\n```\nWifi条件下，PC浏览器输入手机ip:9998打开UC浏览器的调试界面\n```\n<!-- more -->\n***\n\n## Android手机配置\n1. 准备：在手机上安装UC浏览器开发者版本\n2. 使用UC浏览器开发版打开需要调试的页面\n3. 查看手机IP\n\n```\n设置 - WLAN - 选中连接中的WiFi - IP地址\n```\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/ip.png)\n\n## 浏览器端\n\n在WiFi环境下，保持手机与PC处于同一个无线网段即可（连接同一个WiFi）\n浏览器的访问地址：\n\n```\n访问地址: 手机IP:9998\n```\n\n## 授权访问\n\n电脑浏览器访问该地址时，UC浏览器会弹窗提示“是否允许远端设备的调试请求？” 确定即可。\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/authorize.png)\n\n在PC调试界面中，选中你需要调试的tab，就会出现console的界面，enjoy你的调试过程吧！\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_index.png)  \n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_debug.png)\n","source":"_posts/uc-web-debug.md","raw":"---\ntitle: UC浏览器调试无线页面\ntags:\n  - tech\n  - web\n  - mobile deug\ndate: 2016-04-19 14:20:54\n---\n\n上次写了篇[《Safari调试无线页面》](/archives/safari-web-debug/)，有小伙伴进来的第一反应是，需要一台MacBook和iPhone，臣妾做不到呀！\n\n让使用安卓设备的小伙伴情何以堪，于是有了姐妹篇，也就是本文《UC浏览器调试无线页面》\n\n准备：\n\n1. Android设备和[UC浏览器开发者版](http://www.uc.cn/business/developer/)\n2. 浏览器（小编用的[Chrome](http://www.google.cn/chrome/browser/)，真的不要再用低版本IE了好吗~）\n\n概要步骤：\n\n```\nWifi条件下，PC浏览器输入手机ip:9998打开UC浏览器的调试界面\n```\n<!-- more -->\n***\n\n## Android手机配置\n1. 准备：在手机上安装UC浏览器开发者版本\n2. 使用UC浏览器开发版打开需要调试的页面\n3. 查看手机IP\n\n```\n设置 - WLAN - 选中连接中的WiFi - IP地址\n```\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/ip.png)\n\n## 浏览器端\n\n在WiFi环境下，保持手机与PC处于同一个无线网段即可（连接同一个WiFi）\n浏览器的访问地址：\n\n```\n访问地址: 手机IP:9998\n```\n\n## 授权访问\n\n电脑浏览器访问该地址时，UC浏览器会弹窗提示“是否允许远端设备的调试请求？” 确定即可。\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/authorize.png)\n\n在PC调试界面中，选中你需要调试的tab，就会出现console的界面，enjoy你的调试过程吧！\n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_index.png)  \n\n![](http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_debug.png)\n","slug":"uc-web-debug","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xa7004lzvr3td7xgv4k","content":"<p>上次写了篇<a href=\"/archives/safari-web-debug/\">《Safari调试无线页面》</a>，有小伙伴进来的第一反应是，需要一台MacBook和iPhone，臣妾做不到呀！</p>\n<p>让使用安卓设备的小伙伴情何以堪，于是有了姐妹篇，也就是本文《UC浏览器调试无线页面》</p>\n<p>准备：</p>\n<ol>\n<li>Android设备和<a href=\"http://www.uc.cn/business/developer/\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></li>\n<li>浏览器（小编用的<a href=\"http://www.google.cn/chrome/browser/\" target=\"_blank\" rel=\"noopener\">Chrome</a>，真的不要再用低版本IE了好吗~）</li>\n</ol>\n<p>概要步骤：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Wifi</span>条件下，<span class=\"built_in\">PC</span>浏览器输入手机<span class=\"built_in\">ip</span>:<span class=\"number\">9998</span>打开UC浏览器的调试界面</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"Android手机配置\"><a href=\"#Android手机配置\" class=\"headerlink\" title=\"Android手机配置\"></a>Android手机配置</h2><ol>\n<li>准备：在手机上安装UC浏览器开发者版本</li>\n<li>使用UC浏览器开发版打开需要调试的页面</li>\n<li>查看手机IP</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置 - WLAN - 选中连接中的<span class=\"built_in\">WiFi</span> - IP地址</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/ip.png\" alt=\"\"></p>\n<h2 id=\"浏览器端\"><a href=\"#浏览器端\" class=\"headerlink\" title=\"浏览器端\"></a>浏览器端</h2><p>在WiFi环境下，保持手机与PC处于同一个无线网段即可（连接同一个WiFi）<br>浏览器的访问地址：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问地址: 手机<span class=\"built_in\">IP</span>:<span class=\"number\">9998</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"授权访问\"><a href=\"#授权访问\" class=\"headerlink\" title=\"授权访问\"></a>授权访问</h2><p>电脑浏览器访问该地址时，UC浏览器会弹窗提示“是否允许远端设备的调试请求？” 确定即可。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/authorize.png\" alt=\"\"></p>\n<p>在PC调试界面中，选中你需要调试的tab，就会出现console的界面，enjoy你的调试过程吧！</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_index.png\" alt=\"\">  </p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_debug.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>上次写了篇<a href=\"/archives/safari-web-debug/\">《Safari调试无线页面》</a>，有小伙伴进来的第一反应是，需要一台MacBook和iPhone，臣妾做不到呀！</p>\n<p>让使用安卓设备的小伙伴情何以堪，于是有了姐妹篇，也就是本文《UC浏览器调试无线页面》</p>\n<p>准备：</p>\n<ol>\n<li>Android设备和<a href=\"http://www.uc.cn/business/developer/\" target=\"_blank\" rel=\"noopener\">UC浏览器开发者版</a></li>\n<li>浏览器（小编用的<a href=\"http://www.google.cn/chrome/browser/\" target=\"_blank\" rel=\"noopener\">Chrome</a>，真的不要再用低版本IE了好吗~）</li>\n</ol>\n<p>概要步骤：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Wifi</span>条件下，<span class=\"built_in\">PC</span>浏览器输入手机<span class=\"built_in\">ip</span>:<span class=\"number\">9998</span>打开UC浏览器的调试界面</span><br></pre></td></tr></table></figure>","more":"<hr>\n<h2 id=\"Android手机配置\"><a href=\"#Android手机配置\" class=\"headerlink\" title=\"Android手机配置\"></a>Android手机配置</h2><ol>\n<li>准备：在手机上安装UC浏览器开发者版本</li>\n<li>使用UC浏览器开发版打开需要调试的页面</li>\n<li>查看手机IP</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置 - WLAN - 选中连接中的<span class=\"built_in\">WiFi</span> - IP地址</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/ip.png\" alt=\"\"></p>\n<h2 id=\"浏览器端\"><a href=\"#浏览器端\" class=\"headerlink\" title=\"浏览器端\"></a>浏览器端</h2><p>在WiFi环境下，保持手机与PC处于同一个无线网段即可（连接同一个WiFi）<br>浏览器的访问地址：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问地址: 手机<span class=\"built_in\">IP</span>:<span class=\"number\">9998</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"授权访问\"><a href=\"#授权访问\" class=\"headerlink\" title=\"授权访问\"></a>授权访问</h2><p>电脑浏览器访问该地址时，UC浏览器会弹窗提示“是否允许远端设备的调试请求？” 确定即可。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/authorize.png\" alt=\"\"></p>\n<p>在PC调试界面中，选中你需要调试的tab，就会出现console的界面，enjoy你的调试过程吧！</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_index.png\" alt=\"\">  </p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/safari-web-debug/uc_debug.png\" alt=\"\"></p>"},{"title":"什么是价值投资","id":"80","date":"2015-02-18T12:14:40.000Z","_content":"\n作者：劳伦斯•坎宁安\n译者：王勇、董方鹏\n本书的传送门：\n[豆瓣](http://book.douban.com/subject/25788096/)\n[多看](http://www.duokan.com/book/51661)\n<!--more-->\n* * *\n\n文中提到Benjamin Graham的两本巨著：\n\n*   [《证券分析》](http://book.douban.com/subject/1013378/)\n*   [聪明的投资者](http://book.douban.com/subject/5243775/)\n\n* * *\n\n### 书摘：\n\n一、价值投资策略源自三个信条\n\n*   第一个信条是本杰明·格雷厄姆的“安全边际”原则。该原则要求保证将要买入股票的价格显著低于其大致的价值。要明确这一点，投资者需对公司的业务进行全面的分析。首先，价值型投资者要做的是筛选潜在的投资对象，筛选的大致原则是投资者能够理解公司业务运作并能对其做出评估[通常我们把筛选后的范围称做“能力范围”（circle of competence）]。\n*   约翰·波尔·威廉姆斯（John Burr Williams）提炼了价值投资的第二个核心信条。这一定量化的信条要求按照现有数据，保守地估计出公司未来的现金流，并计算出当前的价值，即公司的内在价值。这一原则把握了一个直观的逻辑，即今天投资者手中握着的一元钱在将来的价值应该高于一元。\n*   菲利普·费雪贡献了价值投资的第三个信条。该定性化的信条要求投资者孜孜不倦地寻找那些展示了良好长期前景的公司。\n二、市盈率作为一个筛选条件\n\n*   格雷厄姆避免买入那些在5年内市盈率过高的股票。\n*   另一个条件是盈利回报与股价的比（现时盈利除以股价，也就是市盈率的倒数）至少应是目前高评级企业债券的回报率的两倍。","source":"_posts/value-investing.md","raw":"---\ntitle: 什么是价值投资\ntags:\n  - finance\n  - reading\nid: 80\ncategories:\n  - finance\n  - reading\ndate: 2015-02-18 20:14:40\n---\n\n作者：劳伦斯•坎宁安\n译者：王勇、董方鹏\n本书的传送门：\n[豆瓣](http://book.douban.com/subject/25788096/)\n[多看](http://www.duokan.com/book/51661)\n<!--more-->\n* * *\n\n文中提到Benjamin Graham的两本巨著：\n\n*   [《证券分析》](http://book.douban.com/subject/1013378/)\n*   [聪明的投资者](http://book.douban.com/subject/5243775/)\n\n* * *\n\n### 书摘：\n\n一、价值投资策略源自三个信条\n\n*   第一个信条是本杰明·格雷厄姆的“安全边际”原则。该原则要求保证将要买入股票的价格显著低于其大致的价值。要明确这一点，投资者需对公司的业务进行全面的分析。首先，价值型投资者要做的是筛选潜在的投资对象，筛选的大致原则是投资者能够理解公司业务运作并能对其做出评估[通常我们把筛选后的范围称做“能力范围”（circle of competence）]。\n*   约翰·波尔·威廉姆斯（John Burr Williams）提炼了价值投资的第二个核心信条。这一定量化的信条要求按照现有数据，保守地估计出公司未来的现金流，并计算出当前的价值，即公司的内在价值。这一原则把握了一个直观的逻辑，即今天投资者手中握着的一元钱在将来的价值应该高于一元。\n*   菲利普·费雪贡献了价值投资的第三个信条。该定性化的信条要求投资者孜孜不倦地寻找那些展示了良好长期前景的公司。\n二、市盈率作为一个筛选条件\n\n*   格雷厄姆避免买入那些在5年内市盈率过高的股票。\n*   另一个条件是盈利回报与股价的比（现时盈利除以股价，也就是市盈率的倒数）至少应是目前高评级企业债券的回报率的两倍。","slug":"value-investing","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xa8004ozvr3zb5tc24q","content":"<p>作者：劳伦斯•坎宁安<br>译者：王勇、董方鹏<br>本书的传送门：<br><a href=\"http://book.douban.com/subject/25788096/\" target=\"_blank\" rel=\"noopener\">豆瓣</a><br><a href=\"http://www.duokan.com/book/51661\" target=\"_blank\" rel=\"noopener\">多看</a><br><a id=\"more\"></a></p>\n<hr>\n<p>文中提到Benjamin Graham的两本巨著：</p>\n<ul>\n<li><a href=\"http://book.douban.com/subject/1013378/\" target=\"_blank\" rel=\"noopener\">《证券分析》</a></li>\n<li><a href=\"http://book.douban.com/subject/5243775/\" target=\"_blank\" rel=\"noopener\">聪明的投资者</a></li>\n</ul>\n<hr>\n<h3 id=\"书摘：\"><a href=\"#书摘：\" class=\"headerlink\" title=\"书摘：\"></a>书摘：</h3><p>一、价值投资策略源自三个信条</p>\n<ul>\n<li>第一个信条是本杰明·格雷厄姆的“安全边际”原则。该原则要求保证将要买入股票的价格显著低于其大致的价值。要明确这一点，投资者需对公司的业务进行全面的分析。首先，价值型投资者要做的是筛选潜在的投资对象，筛选的大致原则是投资者能够理解公司业务运作并能对其做出评估[通常我们把筛选后的范围称做“能力范围”（circle of competence）]。</li>\n<li>约翰·波尔·威廉姆斯（John Burr Williams）提炼了价值投资的第二个核心信条。这一定量化的信条要求按照现有数据，保守地估计出公司未来的现金流，并计算出当前的价值，即公司的内在价值。这一原则把握了一个直观的逻辑，即今天投资者手中握着的一元钱在将来的价值应该高于一元。</li>\n<li><p>菲利普·费雪贡献了价值投资的第三个信条。该定性化的信条要求投资者孜孜不倦地寻找那些展示了良好长期前景的公司。<br>二、市盈率作为一个筛选条件</p>\n</li>\n<li><p>格雷厄姆避免买入那些在5年内市盈率过高的股票。</p>\n</li>\n<li>另一个条件是盈利回报与股价的比（现时盈利除以股价，也就是市盈率的倒数）至少应是目前高评级企业债券的回报率的两倍。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>作者：劳伦斯•坎宁安<br>译者：王勇、董方鹏<br>本书的传送门：<br><a href=\"http://book.douban.com/subject/25788096/\" target=\"_blank\" rel=\"noopener\">豆瓣</a><br><a href=\"http://www.duokan.com/book/51661\" target=\"_blank\" rel=\"noopener\">多看</a><br>","more":"</p>\n<hr>\n<p>文中提到Benjamin Graham的两本巨著：</p>\n<ul>\n<li><a href=\"http://book.douban.com/subject/1013378/\" target=\"_blank\" rel=\"noopener\">《证券分析》</a></li>\n<li><a href=\"http://book.douban.com/subject/5243775/\" target=\"_blank\" rel=\"noopener\">聪明的投资者</a></li>\n</ul>\n<hr>\n<h3 id=\"书摘：\"><a href=\"#书摘：\" class=\"headerlink\" title=\"书摘：\"></a>书摘：</h3><p>一、价值投资策略源自三个信条</p>\n<ul>\n<li>第一个信条是本杰明·格雷厄姆的“安全边际”原则。该原则要求保证将要买入股票的价格显著低于其大致的价值。要明确这一点，投资者需对公司的业务进行全面的分析。首先，价值型投资者要做的是筛选潜在的投资对象，筛选的大致原则是投资者能够理解公司业务运作并能对其做出评估[通常我们把筛选后的范围称做“能力范围”（circle of competence）]。</li>\n<li>约翰·波尔·威廉姆斯（John Burr Williams）提炼了价值投资的第二个核心信条。这一定量化的信条要求按照现有数据，保守地估计出公司未来的现金流，并计算出当前的价值，即公司的内在价值。这一原则把握了一个直观的逻辑，即今天投资者手中握着的一元钱在将来的价值应该高于一元。</li>\n<li><p>菲利普·费雪贡献了价值投资的第三个信条。该定性化的信条要求投资者孜孜不倦地寻找那些展示了良好长期前景的公司。<br>二、市盈率作为一个筛选条件</p>\n</li>\n<li><p>格雷厄姆避免买入那些在5年内市盈率过高的股票。</p>\n</li>\n<li>另一个条件是盈利回报与股价的比（现时盈利除以股价，也就是市盈率的倒数）至少应是目前高评级企业债券的回报率的两倍。</li>\n</ul>"},{"title":"当临时工1周，我买了辆车-伍酱在纽村","date":"2016-09-01T12:06:18.000Z","_content":"\n有小伙伴肯定会说，当临时工一周能买辆车！？我怎么就不信了！\n\n<!-- more -->\n\n真不是标题党，主要因为这里的二手车超便宜，背包客买的车一般不会太贵，$1500-$3000的都有，我碰到一辆手动柴油车最低才$1100，像我们的旅行车2000 Year Subaru Legacy只花了$1800，两个人赚钱，按最低时薪工作8小时一天，一周工作6天，完全可以实现哈！（月薪2w RMB[税后]也不是梦，有很多外国小伙伴是专门来赚钱寄回家的。）\n\n不过标题真的只是个噱头，这篇文章主要想记录一下打工度假中“打工”这种打开方式。\n\n[有空我还会补充换宿、旅游两种打开方式的日志，只是目前特别想写这篇关于“打工”的 :) ]\n\n![](http://cdn.sinacloud.net/woodysblog/whv-work/opotiki-sunrise.jpg)\n\n（本来想放很多好看的照片，但是最后决定，本文的配图只想放一张：工作日早上6点半的朝霞。那天早上，我洗漱好准备去上班，不知道多少年没有起那么早过，还开开心心地去上班。看到窗外的朝霞，应该是正在日出，很美。“你忘掉理想只能忙于生活吗？” 我觉得不是的，非常感恩有这样的经历，如果没有过，可能我还是不懂什么叫“心存感激”）\n\n## 想打工需要什么？\n* 打工签证 work visa（working holiday visa也包含了有效的打工签证）\n* 本地银行账户 bank account（拿着地址证明去各大银行开户，很方便）\n* IRD（税号，合法打工必须有IRD，算工资、打税和以后退税用的）\n* 一份靠谱的工作\n\n## 找工作需要注意什么？(seasonal jobs)\n* 最低时薪？$15.25 （目前汇率是$1 = ￥4.842）\n* holiday pay，基本工资 + 8%\n* 多久发一次工资？每周weekly/每2周fornightly/每月monthly\n* 怎么支付？一定要通过银行账户，不能接受现金支付，给现金说明雇主想非法逃税\n* 签合同contract/工资单payslips，有效的权益保证，有什么事也有文件证明\n* 最好找kiwi/洋人老板……江湖传闻很多小伙伴受骗是被华人老板骗，传说中的不熟不吃\n\n## 找工作的途径\n* Facebook小组\n\t* [Backpacking New Zealand](https://www.facebook.com/groups/156881077702841/)\n\t* [backpacker board]( Backpacking New Zealand Travel Guide, Backpacker Hostels, Jobs, Tours, Working Holiday )\n* 豆瓣小组\n\t* [Working Holiday](https://www.douban.com/group/WHV/)\n* 各大backpacker hotel/homestay的介绍\n\n## 做什么？\n由于working holiday visa是有工作限制的，怎么说它不算正式的工作签证，规定是不能为同一个雇主工作超过6个月的时间，所以对WHVer来说，找一份对口的工作不容易，因为你不能稳定的长期的工作（当然在3个月转成正式工作签 work visa，那就没问题了）。\n\n于是很多小伙伴都去果园、农场、工厂等当临时工，一般按最低时薪，按工作时间拿工资。像我们现在，就在一家包装厂里面做repacking，主要工作就是根据不同的订单，把冰库雪藏的包装好的奇异果拿出来检查（软的、不好看的、发霉的扔掉），重新合上包装，很轻松也很无聊。\n\n## 关于“工作”这件小事\n\n但这份工作却给我带来前所未有的震撼和思考，关于“工作”这件小事。\n\n大学还没有毕业，我就去了度厂实习（再一次感谢[大百度](https://www.baidu.com/)、[百度知道]( 百度知道 - 全球最大中文互动问答平台 )和[百度经验]( 百度经验——实用生活指南 )），转正后过来工作，算上实习时间，一做就是三年多，虽然工作期间不断有猎头告诉我这样那样的工作机会。但我只做过一份工作，一切来得自然而然，不觉得有一份工作对我的生活有怎么样的影响，只是工作而已，有一份好的工作也没什么值得一提，甚至有时会抱怨工作怎么怎么样。（当然，我是发自内心热爱我的工作 —— 当一个安静的美FE，所以拖到签证过期前的最后一刻才离职）\n\n对于“工作”的想法，在一周前发生了改变。\n\n来到纽村后，狂拽酷炫浪炸天的玩了一个多月，租车自驾玩遍北岛（North Island）的各大目的地，一直在烧钱（最多时一周烧掉$1200），后来还任性的买了辆车（因为租车太贵了，租车一个月的钱够买一辆车），预算直接爆了，又不想卖掉股票基金啥的继续加钱进来烧，没办法，要对自己狠一点，我只能硬着头皮去找季节工作。\n\n不得不提，来之前没考虑过冬天的问题，我没想过找季节工那么看天气看大自然吃饭（不然呢？以为还会在办公室工作吗！）要在对的季节找，现在这里是冬天，工作机会很少，妈蛋，又冷又下雨，户外季节工如剪枝啥的，太辛苦啦，我肯定受不了，放弃。要不，还是投FE岗位吧~于是整理了一份英文简历，在SEEK上投简历，bala bala，可能是打工旅游签证的问题，或者非本地学历，也没有本地工作经历，更没有推荐人，anyway，我看起来并不靠谱，发了几封邮件，并没有回应。\n\n食宿天天都在花钱，钱快烧完了，这样不是办法，要谈理想谈梦想不想吃苦可以，首先要能够独立生存、养活自己，不能一味的眼高手低等合适的工作来找我，不想变卖资产也不能伸手啃老，我决定去找季节工作。苦和累都不是事儿，我的滑板鞋居然在换宿时，因为工作太累太脏直接弄坏了，第一次把鞋子穿坏，小伙伴的回力小布鞋依然坚挺，我已经习惯了这边村民分裂的生活，**一会穿脏衣服在农场搬运，一会穿好干净的衣服坐在火炉旁锯牛排喝奶茶聊人生**，太分裂了有木有！\n\n又过了大半周，我还是没有找到工作，如果没有赚钱我又不肯加钱补仓的话，再过两个礼拜，我就得卖车回国了，what a shame! 小伙伴有找到一份冬季剪枝的工作，很辛苦的，但她打算去做，去试工了半天之后，华人工头居然不给最低工资，坑！说什么contract rate，但是明显她的体力和经验不够，如果计件不计时，她很可能每天辛苦工作却拿不到最低工资。我劝她放弃，太黑了，于是我们继续找~\n\n找工作找得挺沮丧的，原来就算愿意出卖自己的劳力也不容易，因为冬季工作机会本来就少，当时想，天哪，给我一份工作吧，做什么都可以。很幸运的是，后来在一次非常偶然的情况下，我找到一份工作。\n\n你们猜我现在的工作怎么找到的？在村里找工作的方式就是那么不一样！**我简历都没有，直接开车去人家office，踩进去求职**，good afternoon, I am wondering, are you hiring some workers?\n\n在微信群里看到有人说隔壁小镇的packhouse在招人，我想，对啊，干嘛一定要找农场工作！我可以把目标放在packhouse（包装厂，因为室内工作，比较轻松），住的这个小镇总共有3家packhouse，早上打电话去问，每家都说不招人。反正没啥事又有车，我表示不服，决定踩进办公室让他们看着我的眼睛说为什么不招我，于是我真的这么干的。结果Eastpack和OPAC的前台妹纸真的看着我的眼睛说，我们短时间内真的不招人 T_T\n\n好桑心，最后一家比较远，距离镇中心有6、7公里，在考虑要不要去，死就死吧，去去去，顶多白开12公里来回。这家叫Riverlock，周边特荒凉，感觉就像一家工厂建在一片未开发过的草地上，空气中弥漫着浓浓的牛粑粑味，特新鲜。跑进去办公室，没有人，好尴尬~后来看到内屋有人，管不了那么多了，我大胆的走进去问。有个小老太，短发帅帅的，沉思了一会，说，yes, can you come on Monday? remember to bring your passports, Blah Blah 说到要带护照来签合同，我就知道，求职成功了！真的是纯运气，原来小老太是packhouse的老大，招不招人她说了算，刚好我去的时候碰到她了，如果只是问前台姐姐，估计会直接拒绝我。\n\n今天我去了超市买生活食粮，现在银行户口还剩$18，如果到现在我没有找到工作，我下周就会卖车买机票回国。很高兴我找到了一份可以养活自己的工作，跟国内的最低工资不一样，在这边拿最低工资完全可以过着很okay的生活，现在住在一间$100/pw的house，2房一厅，还有个很有感觉的火炉，条件比我在北京大回龙观的大开间要好，估计每天工资是$150，也就是说工作一天，就可以cover一周的食宿开支，剩下的钱可以存起来，希望老大不要那么快炒鱿鱼，让我可以存够可以在夏天去海边小镇浪~\n\n（我没打算在这边长驻和找FE工作，玩够就回国）\n\n[关于临时工的生存现状，我有空会再写一篇详细的，关于拿着最低工资的居住、生活、娱乐情况]\n\n`\n在这次旅途中，我才发现，一份工作，除了满足我的个人成就感以外（这是我以前觉得求职唯一考虑的因素），还为我提供了住宿和食物，这是最基本的生存物质需求，甚至还让我有了可以享受高品质生活的权利，我根本没有注意过这一点，也许是因为没有在那么漂泊的条件下生活过。我现在觉得，不管是在工厂流水线靠劳力工作的果农，还是在办公室烧脑的码农，都应该对工作本身心存感激，因为经济独立后，我们才够独立，才能生存，才有资格谈人生谈理想。有了面包之后，理想、人生、爱情都会有的~\n`\n\n以上的这一段，也送给刚开始工作的 @小白 、对工作持续迷茫的 @晓敏 和其他小伙伴们，希望有一天你们可以找到，既可以支持高品质生活支持理想，又做得很开心的工作 :)\n\n2016.08.20\nOpotiki, Bay of Plenty, New Zealand\n\n","source":"_posts/work-whv.md","raw":"---\ntitle: 当临时工1周，我买了辆车-伍酱在纽村\ntags:\n  - whv\n  - working holiday\n  - New Zealand\ndate: 2016-09-01 20:06:18\n---\n\n有小伙伴肯定会说，当临时工一周能买辆车！？我怎么就不信了！\n\n<!-- more -->\n\n真不是标题党，主要因为这里的二手车超便宜，背包客买的车一般不会太贵，$1500-$3000的都有，我碰到一辆手动柴油车最低才$1100，像我们的旅行车2000 Year Subaru Legacy只花了$1800，两个人赚钱，按最低时薪工作8小时一天，一周工作6天，完全可以实现哈！（月薪2w RMB[税后]也不是梦，有很多外国小伙伴是专门来赚钱寄回家的。）\n\n不过标题真的只是个噱头，这篇文章主要想记录一下打工度假中“打工”这种打开方式。\n\n[有空我还会补充换宿、旅游两种打开方式的日志，只是目前特别想写这篇关于“打工”的 :) ]\n\n![](http://cdn.sinacloud.net/woodysblog/whv-work/opotiki-sunrise.jpg)\n\n（本来想放很多好看的照片，但是最后决定，本文的配图只想放一张：工作日早上6点半的朝霞。那天早上，我洗漱好准备去上班，不知道多少年没有起那么早过，还开开心心地去上班。看到窗外的朝霞，应该是正在日出，很美。“你忘掉理想只能忙于生活吗？” 我觉得不是的，非常感恩有这样的经历，如果没有过，可能我还是不懂什么叫“心存感激”）\n\n## 想打工需要什么？\n* 打工签证 work visa（working holiday visa也包含了有效的打工签证）\n* 本地银行账户 bank account（拿着地址证明去各大银行开户，很方便）\n* IRD（税号，合法打工必须有IRD，算工资、打税和以后退税用的）\n* 一份靠谱的工作\n\n## 找工作需要注意什么？(seasonal jobs)\n* 最低时薪？$15.25 （目前汇率是$1 = ￥4.842）\n* holiday pay，基本工资 + 8%\n* 多久发一次工资？每周weekly/每2周fornightly/每月monthly\n* 怎么支付？一定要通过银行账户，不能接受现金支付，给现金说明雇主想非法逃税\n* 签合同contract/工资单payslips，有效的权益保证，有什么事也有文件证明\n* 最好找kiwi/洋人老板……江湖传闻很多小伙伴受骗是被华人老板骗，传说中的不熟不吃\n\n## 找工作的途径\n* Facebook小组\n\t* [Backpacking New Zealand](https://www.facebook.com/groups/156881077702841/)\n\t* [backpacker board]( Backpacking New Zealand Travel Guide, Backpacker Hostels, Jobs, Tours, Working Holiday )\n* 豆瓣小组\n\t* [Working Holiday](https://www.douban.com/group/WHV/)\n* 各大backpacker hotel/homestay的介绍\n\n## 做什么？\n由于working holiday visa是有工作限制的，怎么说它不算正式的工作签证，规定是不能为同一个雇主工作超过6个月的时间，所以对WHVer来说，找一份对口的工作不容易，因为你不能稳定的长期的工作（当然在3个月转成正式工作签 work visa，那就没问题了）。\n\n于是很多小伙伴都去果园、农场、工厂等当临时工，一般按最低时薪，按工作时间拿工资。像我们现在，就在一家包装厂里面做repacking，主要工作就是根据不同的订单，把冰库雪藏的包装好的奇异果拿出来检查（软的、不好看的、发霉的扔掉），重新合上包装，很轻松也很无聊。\n\n## 关于“工作”这件小事\n\n但这份工作却给我带来前所未有的震撼和思考，关于“工作”这件小事。\n\n大学还没有毕业，我就去了度厂实习（再一次感谢[大百度](https://www.baidu.com/)、[百度知道]( 百度知道 - 全球最大中文互动问答平台 )和[百度经验]( 百度经验——实用生活指南 )），转正后过来工作，算上实习时间，一做就是三年多，虽然工作期间不断有猎头告诉我这样那样的工作机会。但我只做过一份工作，一切来得自然而然，不觉得有一份工作对我的生活有怎么样的影响，只是工作而已，有一份好的工作也没什么值得一提，甚至有时会抱怨工作怎么怎么样。（当然，我是发自内心热爱我的工作 —— 当一个安静的美FE，所以拖到签证过期前的最后一刻才离职）\n\n对于“工作”的想法，在一周前发生了改变。\n\n来到纽村后，狂拽酷炫浪炸天的玩了一个多月，租车自驾玩遍北岛（North Island）的各大目的地，一直在烧钱（最多时一周烧掉$1200），后来还任性的买了辆车（因为租车太贵了，租车一个月的钱够买一辆车），预算直接爆了，又不想卖掉股票基金啥的继续加钱进来烧，没办法，要对自己狠一点，我只能硬着头皮去找季节工作。\n\n不得不提，来之前没考虑过冬天的问题，我没想过找季节工那么看天气看大自然吃饭（不然呢？以为还会在办公室工作吗！）要在对的季节找，现在这里是冬天，工作机会很少，妈蛋，又冷又下雨，户外季节工如剪枝啥的，太辛苦啦，我肯定受不了，放弃。要不，还是投FE岗位吧~于是整理了一份英文简历，在SEEK上投简历，bala bala，可能是打工旅游签证的问题，或者非本地学历，也没有本地工作经历，更没有推荐人，anyway，我看起来并不靠谱，发了几封邮件，并没有回应。\n\n食宿天天都在花钱，钱快烧完了，这样不是办法，要谈理想谈梦想不想吃苦可以，首先要能够独立生存、养活自己，不能一味的眼高手低等合适的工作来找我，不想变卖资产也不能伸手啃老，我决定去找季节工作。苦和累都不是事儿，我的滑板鞋居然在换宿时，因为工作太累太脏直接弄坏了，第一次把鞋子穿坏，小伙伴的回力小布鞋依然坚挺，我已经习惯了这边村民分裂的生活，**一会穿脏衣服在农场搬运，一会穿好干净的衣服坐在火炉旁锯牛排喝奶茶聊人生**，太分裂了有木有！\n\n又过了大半周，我还是没有找到工作，如果没有赚钱我又不肯加钱补仓的话，再过两个礼拜，我就得卖车回国了，what a shame! 小伙伴有找到一份冬季剪枝的工作，很辛苦的，但她打算去做，去试工了半天之后，华人工头居然不给最低工资，坑！说什么contract rate，但是明显她的体力和经验不够，如果计件不计时，她很可能每天辛苦工作却拿不到最低工资。我劝她放弃，太黑了，于是我们继续找~\n\n找工作找得挺沮丧的，原来就算愿意出卖自己的劳力也不容易，因为冬季工作机会本来就少，当时想，天哪，给我一份工作吧，做什么都可以。很幸运的是，后来在一次非常偶然的情况下，我找到一份工作。\n\n你们猜我现在的工作怎么找到的？在村里找工作的方式就是那么不一样！**我简历都没有，直接开车去人家office，踩进去求职**，good afternoon, I am wondering, are you hiring some workers?\n\n在微信群里看到有人说隔壁小镇的packhouse在招人，我想，对啊，干嘛一定要找农场工作！我可以把目标放在packhouse（包装厂，因为室内工作，比较轻松），住的这个小镇总共有3家packhouse，早上打电话去问，每家都说不招人。反正没啥事又有车，我表示不服，决定踩进办公室让他们看着我的眼睛说为什么不招我，于是我真的这么干的。结果Eastpack和OPAC的前台妹纸真的看着我的眼睛说，我们短时间内真的不招人 T_T\n\n好桑心，最后一家比较远，距离镇中心有6、7公里，在考虑要不要去，死就死吧，去去去，顶多白开12公里来回。这家叫Riverlock，周边特荒凉，感觉就像一家工厂建在一片未开发过的草地上，空气中弥漫着浓浓的牛粑粑味，特新鲜。跑进去办公室，没有人，好尴尬~后来看到内屋有人，管不了那么多了，我大胆的走进去问。有个小老太，短发帅帅的，沉思了一会，说，yes, can you come on Monday? remember to bring your passports, Blah Blah 说到要带护照来签合同，我就知道，求职成功了！真的是纯运气，原来小老太是packhouse的老大，招不招人她说了算，刚好我去的时候碰到她了，如果只是问前台姐姐，估计会直接拒绝我。\n\n今天我去了超市买生活食粮，现在银行户口还剩$18，如果到现在我没有找到工作，我下周就会卖车买机票回国。很高兴我找到了一份可以养活自己的工作，跟国内的最低工资不一样，在这边拿最低工资完全可以过着很okay的生活，现在住在一间$100/pw的house，2房一厅，还有个很有感觉的火炉，条件比我在北京大回龙观的大开间要好，估计每天工资是$150，也就是说工作一天，就可以cover一周的食宿开支，剩下的钱可以存起来，希望老大不要那么快炒鱿鱼，让我可以存够可以在夏天去海边小镇浪~\n\n（我没打算在这边长驻和找FE工作，玩够就回国）\n\n[关于临时工的生存现状，我有空会再写一篇详细的，关于拿着最低工资的居住、生活、娱乐情况]\n\n`\n在这次旅途中，我才发现，一份工作，除了满足我的个人成就感以外（这是我以前觉得求职唯一考虑的因素），还为我提供了住宿和食物，这是最基本的生存物质需求，甚至还让我有了可以享受高品质生活的权利，我根本没有注意过这一点，也许是因为没有在那么漂泊的条件下生活过。我现在觉得，不管是在工厂流水线靠劳力工作的果农，还是在办公室烧脑的码农，都应该对工作本身心存感激，因为经济独立后，我们才够独立，才能生存，才有资格谈人生谈理想。有了面包之后，理想、人生、爱情都会有的~\n`\n\n以上的这一段，也送给刚开始工作的 @小白 、对工作持续迷茫的 @晓敏 和其他小伙伴们，希望有一天你们可以找到，既可以支持高品质生活支持理想，又做得很开心的工作 :)\n\n2016.08.20\nOpotiki, Bay of Plenty, New Zealand\n\n","slug":"work-whv","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xab004szvr3ytuo1oi6","content":"<p>有小伙伴肯定会说，当临时工一周能买辆车！？我怎么就不信了！</p>\n<a id=\"more\"></a>\n<p>真不是标题党，主要因为这里的二手车超便宜，背包客买的车一般不会太贵，$1500-$3000的都有，我碰到一辆手动柴油车最低才$1100，像我们的旅行车2000 Year Subaru Legacy只花了$1800，两个人赚钱，按最低时薪工作8小时一天，一周工作6天，完全可以实现哈！（月薪2w RMB[税后]也不是梦，有很多外国小伙伴是专门来赚钱寄回家的。）</p>\n<p>不过标题真的只是个噱头，这篇文章主要想记录一下打工度假中“打工”这种打开方式。</p>\n<p>[有空我还会补充换宿、旅游两种打开方式的日志，只是目前特别想写这篇关于“打工”的 :) ]</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/whv-work/opotiki-sunrise.jpg\" alt=\"\"></p>\n<p>（本来想放很多好看的照片，但是最后决定，本文的配图只想放一张：工作日早上6点半的朝霞。那天早上，我洗漱好准备去上班，不知道多少年没有起那么早过，还开开心心地去上班。看到窗外的朝霞，应该是正在日出，很美。“你忘掉理想只能忙于生活吗？” 我觉得不是的，非常感恩有这样的经历，如果没有过，可能我还是不懂什么叫“心存感激”）</p>\n<h2 id=\"想打工需要什么？\"><a href=\"#想打工需要什么？\" class=\"headerlink\" title=\"想打工需要什么？\"></a>想打工需要什么？</h2><ul>\n<li>打工签证 work visa（working holiday visa也包含了有效的打工签证）</li>\n<li>本地银行账户 bank account（拿着地址证明去各大银行开户，很方便）</li>\n<li>IRD（税号，合法打工必须有IRD，算工资、打税和以后退税用的）</li>\n<li>一份靠谱的工作</li>\n</ul>\n<h2 id=\"找工作需要注意什么？-seasonal-jobs\"><a href=\"#找工作需要注意什么？-seasonal-jobs\" class=\"headerlink\" title=\"找工作需要注意什么？(seasonal jobs)\"></a>找工作需要注意什么？(seasonal jobs)</h2><ul>\n<li>最低时薪？$15.25 （目前汇率是$1 = ￥4.842）</li>\n<li>holiday pay，基本工资 + 8%</li>\n<li>多久发一次工资？每周weekly/每2周fornightly/每月monthly</li>\n<li>怎么支付？一定要通过银行账户，不能接受现金支付，给现金说明雇主想非法逃税</li>\n<li>签合同contract/工资单payslips，有效的权益保证，有什么事也有文件证明</li>\n<li>最好找kiwi/洋人老板……江湖传闻很多小伙伴受骗是被华人老板骗，传说中的不熟不吃</li>\n</ul>\n<h2 id=\"找工作的途径\"><a href=\"#找工作的途径\" class=\"headerlink\" title=\"找工作的途径\"></a>找工作的途径</h2><ul>\n<li>Facebook小组<ul>\n<li><a href=\"https://www.facebook.com/groups/156881077702841/\" target=\"_blank\" rel=\"noopener\">Backpacking New Zealand</a></li>\n<li><a href=\"Backpacking New Zealand Travel Guide, Backpacker Hostels, Jobs, Tours, Working Holiday\">backpacker board</a></li>\n</ul>\n</li>\n<li>豆瓣小组<ul>\n<li><a href=\"https://www.douban.com/group/WHV/\" target=\"_blank\" rel=\"noopener\">Working Holiday</a></li>\n</ul>\n</li>\n<li>各大backpacker hotel/homestay的介绍</li>\n</ul>\n<h2 id=\"做什么？\"><a href=\"#做什么？\" class=\"headerlink\" title=\"做什么？\"></a>做什么？</h2><p>由于working holiday visa是有工作限制的，怎么说它不算正式的工作签证，规定是不能为同一个雇主工作超过6个月的时间，所以对WHVer来说，找一份对口的工作不容易，因为你不能稳定的长期的工作（当然在3个月转成正式工作签 work visa，那就没问题了）。</p>\n<p>于是很多小伙伴都去果园、农场、工厂等当临时工，一般按最低时薪，按工作时间拿工资。像我们现在，就在一家包装厂里面做repacking，主要工作就是根据不同的订单，把冰库雪藏的包装好的奇异果拿出来检查（软的、不好看的、发霉的扔掉），重新合上包装，很轻松也很无聊。</p>\n<h2 id=\"关于“工作”这件小事\"><a href=\"#关于“工作”这件小事\" class=\"headerlink\" title=\"关于“工作”这件小事\"></a>关于“工作”这件小事</h2><p>但这份工作却给我带来前所未有的震撼和思考，关于“工作”这件小事。</p>\n<p>大学还没有毕业，我就去了度厂实习（再一次感谢<a href=\"https://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">大百度</a>、<a href=\"百度知道 - 全球最大中文互动问答平台\">百度知道</a>和<a href=\"百度经验——实用生活指南\">百度经验</a>），转正后过来工作，算上实习时间，一做就是三年多，虽然工作期间不断有猎头告诉我这样那样的工作机会。但我只做过一份工作，一切来得自然而然，不觉得有一份工作对我的生活有怎么样的影响，只是工作而已，有一份好的工作也没什么值得一提，甚至有时会抱怨工作怎么怎么样。（当然，我是发自内心热爱我的工作 —— 当一个安静的美FE，所以拖到签证过期前的最后一刻才离职）</p>\n<p>对于“工作”的想法，在一周前发生了改变。</p>\n<p>来到纽村后，狂拽酷炫浪炸天的玩了一个多月，租车自驾玩遍北岛（North Island）的各大目的地，一直在烧钱（最多时一周烧掉$1200），后来还任性的买了辆车（因为租车太贵了，租车一个月的钱够买一辆车），预算直接爆了，又不想卖掉股票基金啥的继续加钱进来烧，没办法，要对自己狠一点，我只能硬着头皮去找季节工作。</p>\n<p>不得不提，来之前没考虑过冬天的问题，我没想过找季节工那么看天气看大自然吃饭（不然呢？以为还会在办公室工作吗！）要在对的季节找，现在这里是冬天，工作机会很少，妈蛋，又冷又下雨，户外季节工如剪枝啥的，太辛苦啦，我肯定受不了，放弃。要不，还是投FE岗位吧~于是整理了一份英文简历，在SEEK上投简历，bala bala，可能是打工旅游签证的问题，或者非本地学历，也没有本地工作经历，更没有推荐人，anyway，我看起来并不靠谱，发了几封邮件，并没有回应。</p>\n<p>食宿天天都在花钱，钱快烧完了，这样不是办法，要谈理想谈梦想不想吃苦可以，首先要能够独立生存、养活自己，不能一味的眼高手低等合适的工作来找我，不想变卖资产也不能伸手啃老，我决定去找季节工作。苦和累都不是事儿，我的滑板鞋居然在换宿时，因为工作太累太脏直接弄坏了，第一次把鞋子穿坏，小伙伴的回力小布鞋依然坚挺，我已经习惯了这边村民分裂的生活，<strong>一会穿脏衣服在农场搬运，一会穿好干净的衣服坐在火炉旁锯牛排喝奶茶聊人生</strong>，太分裂了有木有！</p>\n<p>又过了大半周，我还是没有找到工作，如果没有赚钱我又不肯加钱补仓的话，再过两个礼拜，我就得卖车回国了，what a shame! 小伙伴有找到一份冬季剪枝的工作，很辛苦的，但她打算去做，去试工了半天之后，华人工头居然不给最低工资，坑！说什么contract rate，但是明显她的体力和经验不够，如果计件不计时，她很可能每天辛苦工作却拿不到最低工资。我劝她放弃，太黑了，于是我们继续找~</p>\n<p>找工作找得挺沮丧的，原来就算愿意出卖自己的劳力也不容易，因为冬季工作机会本来就少，当时想，天哪，给我一份工作吧，做什么都可以。很幸运的是，后来在一次非常偶然的情况下，我找到一份工作。</p>\n<p>你们猜我现在的工作怎么找到的？在村里找工作的方式就是那么不一样！<strong>我简历都没有，直接开车去人家office，踩进去求职</strong>，good afternoon, I am wondering, are you hiring some workers?</p>\n<p>在微信群里看到有人说隔壁小镇的packhouse在招人，我想，对啊，干嘛一定要找农场工作！我可以把目标放在packhouse（包装厂，因为室内工作，比较轻松），住的这个小镇总共有3家packhouse，早上打电话去问，每家都说不招人。反正没啥事又有车，我表示不服，决定踩进办公室让他们看着我的眼睛说为什么不招我，于是我真的这么干的。结果Eastpack和OPAC的前台妹纸真的看着我的眼睛说，我们短时间内真的不招人 T_T</p>\n<p>好桑心，最后一家比较远，距离镇中心有6、7公里，在考虑要不要去，死就死吧，去去去，顶多白开12公里来回。这家叫Riverlock，周边特荒凉，感觉就像一家工厂建在一片未开发过的草地上，空气中弥漫着浓浓的牛粑粑味，特新鲜。跑进去办公室，没有人，好尴尬~后来看到内屋有人，管不了那么多了，我大胆的走进去问。有个小老太，短发帅帅的，沉思了一会，说，yes, can you come on Monday? remember to bring your passports, Blah Blah 说到要带护照来签合同，我就知道，求职成功了！真的是纯运气，原来小老太是packhouse的老大，招不招人她说了算，刚好我去的时候碰到她了，如果只是问前台姐姐，估计会直接拒绝我。</p>\n<p>今天我去了超市买生活食粮，现在银行户口还剩$18，如果到现在我没有找到工作，我下周就会卖车买机票回国。很高兴我找到了一份可以养活自己的工作，跟国内的最低工资不一样，在这边拿最低工资完全可以过着很okay的生活，现在住在一间$100/pw的house，2房一厅，还有个很有感觉的火炉，条件比我在北京大回龙观的大开间要好，估计每天工资是$150，也就是说工作一天，就可以cover一周的食宿开支，剩下的钱可以存起来，希望老大不要那么快炒鱿鱼，让我可以存够可以在夏天去海边小镇浪~</p>\n<p>（我没打算在这边长驻和找FE工作，玩够就回国）</p>\n<p>[关于临时工的生存现状，我有空会再写一篇详细的，关于拿着最低工资的居住、生活、娱乐情况]</p>\n<p><code>在这次旅途中，我才发现，一份工作，除了满足我的个人成就感以外（这是我以前觉得求职唯一考虑的因素），还为我提供了住宿和食物，这是最基本的生存物质需求，甚至还让我有了可以享受高品质生活的权利，我根本没有注意过这一点，也许是因为没有在那么漂泊的条件下生活过。我现在觉得，不管是在工厂流水线靠劳力工作的果农，还是在办公室烧脑的码农，都应该对工作本身心存感激，因为经济独立后，我们才够独立，才能生存，才有资格谈人生谈理想。有了面包之后，理想、人生、爱情都会有的~</code></p>\n<p>以上的这一段，也送给刚开始工作的 @小白 、对工作持续迷茫的 @晓敏 和其他小伙伴们，希望有一天你们可以找到，既可以支持高品质生活支持理想，又做得很开心的工作 :)</p>\n<p>2016.08.20<br>Opotiki, Bay of Plenty, New Zealand</p>\n","site":{"data":{}},"excerpt":"<p>有小伙伴肯定会说，当临时工一周能买辆车！？我怎么就不信了！</p>","more":"<p>真不是标题党，主要因为这里的二手车超便宜，背包客买的车一般不会太贵，$1500-$3000的都有，我碰到一辆手动柴油车最低才$1100，像我们的旅行车2000 Year Subaru Legacy只花了$1800，两个人赚钱，按最低时薪工作8小时一天，一周工作6天，完全可以实现哈！（月薪2w RMB[税后]也不是梦，有很多外国小伙伴是专门来赚钱寄回家的。）</p>\n<p>不过标题真的只是个噱头，这篇文章主要想记录一下打工度假中“打工”这种打开方式。</p>\n<p>[有空我还会补充换宿、旅游两种打开方式的日志，只是目前特别想写这篇关于“打工”的 :) ]</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/whv-work/opotiki-sunrise.jpg\" alt=\"\"></p>\n<p>（本来想放很多好看的照片，但是最后决定，本文的配图只想放一张：工作日早上6点半的朝霞。那天早上，我洗漱好准备去上班，不知道多少年没有起那么早过，还开开心心地去上班。看到窗外的朝霞，应该是正在日出，很美。“你忘掉理想只能忙于生活吗？” 我觉得不是的，非常感恩有这样的经历，如果没有过，可能我还是不懂什么叫“心存感激”）</p>\n<h2 id=\"想打工需要什么？\"><a href=\"#想打工需要什么？\" class=\"headerlink\" title=\"想打工需要什么？\"></a>想打工需要什么？</h2><ul>\n<li>打工签证 work visa（working holiday visa也包含了有效的打工签证）</li>\n<li>本地银行账户 bank account（拿着地址证明去各大银行开户，很方便）</li>\n<li>IRD（税号，合法打工必须有IRD，算工资、打税和以后退税用的）</li>\n<li>一份靠谱的工作</li>\n</ul>\n<h2 id=\"找工作需要注意什么？-seasonal-jobs\"><a href=\"#找工作需要注意什么？-seasonal-jobs\" class=\"headerlink\" title=\"找工作需要注意什么？(seasonal jobs)\"></a>找工作需要注意什么？(seasonal jobs)</h2><ul>\n<li>最低时薪？$15.25 （目前汇率是$1 = ￥4.842）</li>\n<li>holiday pay，基本工资 + 8%</li>\n<li>多久发一次工资？每周weekly/每2周fornightly/每月monthly</li>\n<li>怎么支付？一定要通过银行账户，不能接受现金支付，给现金说明雇主想非法逃税</li>\n<li>签合同contract/工资单payslips，有效的权益保证，有什么事也有文件证明</li>\n<li>最好找kiwi/洋人老板……江湖传闻很多小伙伴受骗是被华人老板骗，传说中的不熟不吃</li>\n</ul>\n<h2 id=\"找工作的途径\"><a href=\"#找工作的途径\" class=\"headerlink\" title=\"找工作的途径\"></a>找工作的途径</h2><ul>\n<li>Facebook小组<ul>\n<li><a href=\"https://www.facebook.com/groups/156881077702841/\" target=\"_blank\" rel=\"noopener\">Backpacking New Zealand</a></li>\n<li><a href=\"Backpacking New Zealand Travel Guide, Backpacker Hostels, Jobs, Tours, Working Holiday\">backpacker board</a></li>\n</ul>\n</li>\n<li>豆瓣小组<ul>\n<li><a href=\"https://www.douban.com/group/WHV/\" target=\"_blank\" rel=\"noopener\">Working Holiday</a></li>\n</ul>\n</li>\n<li>各大backpacker hotel/homestay的介绍</li>\n</ul>\n<h2 id=\"做什么？\"><a href=\"#做什么？\" class=\"headerlink\" title=\"做什么？\"></a>做什么？</h2><p>由于working holiday visa是有工作限制的，怎么说它不算正式的工作签证，规定是不能为同一个雇主工作超过6个月的时间，所以对WHVer来说，找一份对口的工作不容易，因为你不能稳定的长期的工作（当然在3个月转成正式工作签 work visa，那就没问题了）。</p>\n<p>于是很多小伙伴都去果园、农场、工厂等当临时工，一般按最低时薪，按工作时间拿工资。像我们现在，就在一家包装厂里面做repacking，主要工作就是根据不同的订单，把冰库雪藏的包装好的奇异果拿出来检查（软的、不好看的、发霉的扔掉），重新合上包装，很轻松也很无聊。</p>\n<h2 id=\"关于“工作”这件小事\"><a href=\"#关于“工作”这件小事\" class=\"headerlink\" title=\"关于“工作”这件小事\"></a>关于“工作”这件小事</h2><p>但这份工作却给我带来前所未有的震撼和思考，关于“工作”这件小事。</p>\n<p>大学还没有毕业，我就去了度厂实习（再一次感谢<a href=\"https://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">大百度</a>、<a href=\"百度知道 - 全球最大中文互动问答平台\">百度知道</a>和<a href=\"百度经验——实用生活指南\">百度经验</a>），转正后过来工作，算上实习时间，一做就是三年多，虽然工作期间不断有猎头告诉我这样那样的工作机会。但我只做过一份工作，一切来得自然而然，不觉得有一份工作对我的生活有怎么样的影响，只是工作而已，有一份好的工作也没什么值得一提，甚至有时会抱怨工作怎么怎么样。（当然，我是发自内心热爱我的工作 —— 当一个安静的美FE，所以拖到签证过期前的最后一刻才离职）</p>\n<p>对于“工作”的想法，在一周前发生了改变。</p>\n<p>来到纽村后，狂拽酷炫浪炸天的玩了一个多月，租车自驾玩遍北岛（North Island）的各大目的地，一直在烧钱（最多时一周烧掉$1200），后来还任性的买了辆车（因为租车太贵了，租车一个月的钱够买一辆车），预算直接爆了，又不想卖掉股票基金啥的继续加钱进来烧，没办法，要对自己狠一点，我只能硬着头皮去找季节工作。</p>\n<p>不得不提，来之前没考虑过冬天的问题，我没想过找季节工那么看天气看大自然吃饭（不然呢？以为还会在办公室工作吗！）要在对的季节找，现在这里是冬天，工作机会很少，妈蛋，又冷又下雨，户外季节工如剪枝啥的，太辛苦啦，我肯定受不了，放弃。要不，还是投FE岗位吧~于是整理了一份英文简历，在SEEK上投简历，bala bala，可能是打工旅游签证的问题，或者非本地学历，也没有本地工作经历，更没有推荐人，anyway，我看起来并不靠谱，发了几封邮件，并没有回应。</p>\n<p>食宿天天都在花钱，钱快烧完了，这样不是办法，要谈理想谈梦想不想吃苦可以，首先要能够独立生存、养活自己，不能一味的眼高手低等合适的工作来找我，不想变卖资产也不能伸手啃老，我决定去找季节工作。苦和累都不是事儿，我的滑板鞋居然在换宿时，因为工作太累太脏直接弄坏了，第一次把鞋子穿坏，小伙伴的回力小布鞋依然坚挺，我已经习惯了这边村民分裂的生活，<strong>一会穿脏衣服在农场搬运，一会穿好干净的衣服坐在火炉旁锯牛排喝奶茶聊人生</strong>，太分裂了有木有！</p>\n<p>又过了大半周，我还是没有找到工作，如果没有赚钱我又不肯加钱补仓的话，再过两个礼拜，我就得卖车回国了，what a shame! 小伙伴有找到一份冬季剪枝的工作，很辛苦的，但她打算去做，去试工了半天之后，华人工头居然不给最低工资，坑！说什么contract rate，但是明显她的体力和经验不够，如果计件不计时，她很可能每天辛苦工作却拿不到最低工资。我劝她放弃，太黑了，于是我们继续找~</p>\n<p>找工作找得挺沮丧的，原来就算愿意出卖自己的劳力也不容易，因为冬季工作机会本来就少，当时想，天哪，给我一份工作吧，做什么都可以。很幸运的是，后来在一次非常偶然的情况下，我找到一份工作。</p>\n<p>你们猜我现在的工作怎么找到的？在村里找工作的方式就是那么不一样！<strong>我简历都没有，直接开车去人家office，踩进去求职</strong>，good afternoon, I am wondering, are you hiring some workers?</p>\n<p>在微信群里看到有人说隔壁小镇的packhouse在招人，我想，对啊，干嘛一定要找农场工作！我可以把目标放在packhouse（包装厂，因为室内工作，比较轻松），住的这个小镇总共有3家packhouse，早上打电话去问，每家都说不招人。反正没啥事又有车，我表示不服，决定踩进办公室让他们看着我的眼睛说为什么不招我，于是我真的这么干的。结果Eastpack和OPAC的前台妹纸真的看着我的眼睛说，我们短时间内真的不招人 T_T</p>\n<p>好桑心，最后一家比较远，距离镇中心有6、7公里，在考虑要不要去，死就死吧，去去去，顶多白开12公里来回。这家叫Riverlock，周边特荒凉，感觉就像一家工厂建在一片未开发过的草地上，空气中弥漫着浓浓的牛粑粑味，特新鲜。跑进去办公室，没有人，好尴尬~后来看到内屋有人，管不了那么多了，我大胆的走进去问。有个小老太，短发帅帅的，沉思了一会，说，yes, can you come on Monday? remember to bring your passports, Blah Blah 说到要带护照来签合同，我就知道，求职成功了！真的是纯运气，原来小老太是packhouse的老大，招不招人她说了算，刚好我去的时候碰到她了，如果只是问前台姐姐，估计会直接拒绝我。</p>\n<p>今天我去了超市买生活食粮，现在银行户口还剩$18，如果到现在我没有找到工作，我下周就会卖车买机票回国。很高兴我找到了一份可以养活自己的工作，跟国内的最低工资不一样，在这边拿最低工资完全可以过着很okay的生活，现在住在一间$100/pw的house，2房一厅，还有个很有感觉的火炉，条件比我在北京大回龙观的大开间要好，估计每天工资是$150，也就是说工作一天，就可以cover一周的食宿开支，剩下的钱可以存起来，希望老大不要那么快炒鱿鱼，让我可以存够可以在夏天去海边小镇浪~</p>\n<p>（我没打算在这边长驻和找FE工作，玩够就回国）</p>\n<p>[关于临时工的生存现状，我有空会再写一篇详细的，关于拿着最低工资的居住、生活、娱乐情况]</p>\n<p><code>在这次旅途中，我才发现，一份工作，除了满足我的个人成就感以外（这是我以前觉得求职唯一考虑的因素），还为我提供了住宿和食物，这是最基本的生存物质需求，甚至还让我有了可以享受高品质生活的权利，我根本没有注意过这一点，也许是因为没有在那么漂泊的条件下生活过。我现在觉得，不管是在工厂流水线靠劳力工作的果农，还是在办公室烧脑的码农，都应该对工作本身心存感激，因为经济独立后，我们才够独立，才能生存，才有资格谈人生谈理想。有了面包之后，理想、人生、爱情都会有的~</code></p>\n<p>以上的这一段，也送给刚开始工作的 @小白 、对工作持续迷茫的 @晓敏 和其他小伙伴们，希望有一天你们可以找到，既可以支持高品质生活支持理想，又做得很开心的工作 :)</p>\n<p>2016.08.20<br>Opotiki, Bay of Plenty, New Zealand</p>"},{"title":"怎么给微信分享页面添加配图呢？","date":"2016-04-29T07:44:19.000Z","_content":"怎么给我们漂亮的移动页面添加微信分享的配图呢？  \n请看大屏幕：\n\n\n```\n<body>\n    <div id=\"wx_pic\" style=\"display:none;\">\n        <img src=\"http://jingyan.baidu.com/event/img/bdjy.png\" />\n    </div>\n    ...\n</body>\n```\n\n注意：\n\n* 用块元素标签（如p、div）包裹img标签\n* 图片大小限制，一般使用300*300(px)，太小了貌似也出不来\n\n<!-- more -->\n那么怎么检查页面在微信上的分享效果呢？\n\n1. 发布页面，在微信APP中访问（缺点没法实时调试）\n2. 微信开发神器 **微信web开发者工具**，熟悉的Chrome Devtools，棒棒哒~终于不用一直用微信扫扫扫啦！ \n\n![微信添加图片](http://cdn.sinacloud.net/woodysblog/wx-developer/wx-share.png)\n\n* [微信web开发者工具文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)\n* 下载地址：\n    * [Mac版本](https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&os=darwin)    \n    * [Windows 64位版本](https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&os=x64)\n    * [Windows 32位版本](https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&os=x86)\n","source":"_posts/wx-developer.md","raw":"---\ntitle: 怎么给微信分享页面添加配图呢？\ntags:\n  - tech\n  - weixin\ndate: 2016-04-29 15:44:19\n---\n怎么给我们漂亮的移动页面添加微信分享的配图呢？  \n请看大屏幕：\n\n\n```\n<body>\n    <div id=\"wx_pic\" style=\"display:none;\">\n        <img src=\"http://jingyan.baidu.com/event/img/bdjy.png\" />\n    </div>\n    ...\n</body>\n```\n\n注意：\n\n* 用块元素标签（如p、div）包裹img标签\n* 图片大小限制，一般使用300*300(px)，太小了貌似也出不来\n\n<!-- more -->\n那么怎么检查页面在微信上的分享效果呢？\n\n1. 发布页面，在微信APP中访问（缺点没法实时调试）\n2. 微信开发神器 **微信web开发者工具**，熟悉的Chrome Devtools，棒棒哒~终于不用一直用微信扫扫扫啦！ \n\n![微信添加图片](http://cdn.sinacloud.net/woodysblog/wx-developer/wx-share.png)\n\n* [微信web开发者工具文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)\n* 下载地址：\n    * [Mac版本](https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&os=darwin)    \n    * [Windows 64位版本](https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&os=x64)\n    * [Windows 32位版本](https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&os=x86)\n","slug":"wx-developer","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xad004wzvr3qj38r228","content":"<p>怎么给我们漂亮的移动页面添加微信分享的配图呢？<br>请看大屏幕：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"wx_pic\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;</span><br><span class=\"line\">        &lt;img src=<span class=\"string\">\"http://jingyan.baidu.com/event/img/bdjy.png\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>用块元素标签（如p、div）包裹img标签</li>\n<li>图片大小限制，一般使用300*300(px)，太小了貌似也出不来</li>\n</ul>\n<a id=\"more\"></a>\n<p>那么怎么检查页面在微信上的分享效果呢？</p>\n<ol>\n<li>发布页面，在微信APP中访问（缺点没法实时调试）</li>\n<li>微信开发神器 <strong>微信web开发者工具</strong>，熟悉的Chrome Devtools，棒棒哒~终于不用一直用微信扫扫扫啦！ </li>\n</ol>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/wx-developer/wx-share.png\" alt=\"微信添加图片\"></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140&amp;token=&amp;lang=zh_CN\" target=\"_blank\" rel=\"noopener\">微信web开发者工具文档</a></li>\n<li>下载地址：<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&amp;os=darwin\" target=\"_blank\" rel=\"noopener\">Mac版本</a>    </li>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&amp;os=x64\" target=\"_blank\" rel=\"noopener\">Windows 64位版本</a></li>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&amp;os=x86\" target=\"_blank\" rel=\"noopener\">Windows 32位版本</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>怎么给我们漂亮的移动页面添加微信分享的配图呢？<br>请看大屏幕：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"wx_pic\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;</span><br><span class=\"line\">        &lt;img src=<span class=\"string\">\"http://jingyan.baidu.com/event/img/bdjy.png\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>用块元素标签（如p、div）包裹img标签</li>\n<li>图片大小限制，一般使用300*300(px)，太小了貌似也出不来</li>\n</ul>","more":"<p>那么怎么检查页面在微信上的分享效果呢？</p>\n<ol>\n<li>发布页面，在微信APP中访问（缺点没法实时调试）</li>\n<li>微信开发神器 <strong>微信web开发者工具</strong>，熟悉的Chrome Devtools，棒棒哒~终于不用一直用微信扫扫扫啦！ </li>\n</ol>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/wx-developer/wx-share.png\" alt=\"微信添加图片\"></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140&amp;token=&amp;lang=zh_CN\" target=\"_blank\" rel=\"noopener\">微信web开发者工具文档</a></li>\n<li>下载地址：<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&amp;os=darwin\" target=\"_blank\" rel=\"noopener\">Mac版本</a>    </li>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&amp;os=x64\" target=\"_blank\" rel=\"noopener\">Windows 64位版本</a></li>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&amp;os=x86\" target=\"_blank\" rel=\"noopener\">Windows 32位版本</a></li>\n</ul>\n</li>\n</ul>"},{"title":"我的2015","date":"2016-01-01T14:38:44.000Z","type":"title","_content":"\n2015年年初计划，来看看实现详情：\n\n## 一、新西兰相关：\n\n* <i class=\"fa fa-check-square-o\"></i> IELTS\n* <i class=\"fa fa-check-square-o\"></i> 驾照\n* <i class=\"fa fa-check-square-o\"></i> whv visa\n\n## 二、技术沉淀\n\n### 历史项目抽象\n<i class=\"fa fa-check-square-o\"></i> fis专题开发框架\n\n### fork开源项目 >= 3\n\n* <i class=\"fa fa-check-square-o\"></i> ueditor\n* <i class=\"fa fa-check-square-o\"></i> be-fe/iSlider\n* <i class=\"fa fa-check-square-o\"></i> yanhaijing/zepto.fullpage\n* <i class=\"fa fa-check-square-o\"></i> zepto-onepage-scroll\n* <i class=\"fa fa-check-square-o\"></i> fullPage.js\n* <i class=\"fa fa-check-square-o\"></i> minimal-mistakes(jekyll theme)\n\n<i class=\"fa fa-square-o\"></i> ~~简历 【不需要找工作时没有动力写 ^_^ 】~~\n\n## 三、读书\n~~<i class=\"fa fa-square-o\"></i> 60本书~~\n不达标，**40本已读**，4本在读（其中10本技术/工作相关）\n\n## 四、理财\n收益 >= 10%\n<i class=\"fa fa-check-square-o\"></i> 达标，**+17.1%**\n\n## 五、计划外的成就：\n\n* <i class=\"fa fa-check-square-o\"></i> 在北京滑雪，还是不会，没有学过去滑雪好危险，摔到飞起来\n* <i class=\"fa fa-check-square-o\"></i> 出国一趟（去了越南），体验了出国流程，也体会到出国英语并不是万能的，事前准备也很重要\n* <i class=\"fa fa-check-square-o\"></i> 百度师傅项目的上线\n* <i class=\"fa fa-check-square-o\"></i> 在经验当了FE小组长，一点点的管理实践\n","source":"_posts/year-2015.md","raw":"---\ntitle: 我的2015\ndate: 2016-01-01 22:38:44\ntags:\n- 总结\ntype: title\n---\n\n2015年年初计划，来看看实现详情：\n\n## 一、新西兰相关：\n\n* <i class=\"fa fa-check-square-o\"></i> IELTS\n* <i class=\"fa fa-check-square-o\"></i> 驾照\n* <i class=\"fa fa-check-square-o\"></i> whv visa\n\n## 二、技术沉淀\n\n### 历史项目抽象\n<i class=\"fa fa-check-square-o\"></i> fis专题开发框架\n\n### fork开源项目 >= 3\n\n* <i class=\"fa fa-check-square-o\"></i> ueditor\n* <i class=\"fa fa-check-square-o\"></i> be-fe/iSlider\n* <i class=\"fa fa-check-square-o\"></i> yanhaijing/zepto.fullpage\n* <i class=\"fa fa-check-square-o\"></i> zepto-onepage-scroll\n* <i class=\"fa fa-check-square-o\"></i> fullPage.js\n* <i class=\"fa fa-check-square-o\"></i> minimal-mistakes(jekyll theme)\n\n<i class=\"fa fa-square-o\"></i> ~~简历 【不需要找工作时没有动力写 ^_^ 】~~\n\n## 三、读书\n~~<i class=\"fa fa-square-o\"></i> 60本书~~\n不达标，**40本已读**，4本在读（其中10本技术/工作相关）\n\n## 四、理财\n收益 >= 10%\n<i class=\"fa fa-check-square-o\"></i> 达标，**+17.1%**\n\n## 五、计划外的成就：\n\n* <i class=\"fa fa-check-square-o\"></i> 在北京滑雪，还是不会，没有学过去滑雪好危险，摔到飞起来\n* <i class=\"fa fa-check-square-o\"></i> 出国一趟（去了越南），体验了出国流程，也体会到出国英语并不是万能的，事前准备也很重要\n* <i class=\"fa fa-check-square-o\"></i> 百度师傅项目的上线\n* <i class=\"fa fa-check-square-o\"></i> 在经验当了FE小组长，一点点的管理实践\n","slug":"year-2015","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xaf0050zvr37wpwlu8f","content":"<p>2015年年初计划，来看看实现详情：</p>\n<h2 id=\"一、新西兰相关：\"><a href=\"#一、新西兰相关：\" class=\"headerlink\" title=\"一、新西兰相关：\"></a>一、新西兰相关：</h2><ul>\n<li><i class=\"fa fa-check-square-o\"></i> IELTS</li>\n<li><i class=\"fa fa-check-square-o\"></i> 驾照</li>\n<li><i class=\"fa fa-check-square-o\"></i> whv visa</li>\n</ul>\n<h2 id=\"二、技术沉淀\"><a href=\"#二、技术沉淀\" class=\"headerlink\" title=\"二、技术沉淀\"></a>二、技术沉淀</h2><h3 id=\"历史项目抽象\"><a href=\"#历史项目抽象\" class=\"headerlink\" title=\"历史项目抽象\"></a>历史项目抽象</h3><p><i class=\"fa fa-check-square-o\"></i> fis专题开发框架</p>\n<h3 id=\"fork开源项目-gt-3\"><a href=\"#fork开源项目-gt-3\" class=\"headerlink\" title=\"fork开源项目 &gt;= 3\"></a>fork开源项目 &gt;= 3</h3><ul>\n<li><i class=\"fa fa-check-square-o\"></i> ueditor</li>\n<li><i class=\"fa fa-check-square-o\"></i> be-fe/iSlider</li>\n<li><i class=\"fa fa-check-square-o\"></i> yanhaijing/zepto.fullpage</li>\n<li><i class=\"fa fa-check-square-o\"></i> zepto-onepage-scroll</li>\n<li><i class=\"fa fa-check-square-o\"></i> fullPage.js</li>\n<li><i class=\"fa fa-check-square-o\"></i> minimal-mistakes(jekyll theme)</li>\n</ul>\n<p><i class=\"fa fa-square-o\"></i> <del>简历 【不需要找工作时没有动力写 ^_^ 】</del></p>\n<h2 id=\"三、读书\"><a href=\"#三、读书\" class=\"headerlink\" title=\"三、读书\"></a>三、读书</h2><p><del><i class=\"fa fa-square-o\"></i> 60本书</del><br>不达标，<strong>40本已读</strong>，4本在读（其中10本技术/工作相关）</p>\n<h2 id=\"四、理财\"><a href=\"#四、理财\" class=\"headerlink\" title=\"四、理财\"></a>四、理财</h2><p>收益 &gt;= 10%<br><i class=\"fa fa-check-square-o\"></i> 达标，<strong>+17.1%</strong></p>\n<h2 id=\"五、计划外的成就：\"><a href=\"#五、计划外的成就：\" class=\"headerlink\" title=\"五、计划外的成就：\"></a>五、计划外的成就：</h2><ul>\n<li><i class=\"fa fa-check-square-o\"></i> 在北京滑雪，还是不会，没有学过去滑雪好危险，摔到飞起来</li>\n<li><i class=\"fa fa-check-square-o\"></i> 出国一趟（去了越南），体验了出国流程，也体会到出国英语并不是万能的，事前准备也很重要</li>\n<li><i class=\"fa fa-check-square-o\"></i> 百度师傅项目的上线</li>\n<li><i class=\"fa fa-check-square-o\"></i> 在经验当了FE小组长，一点点的管理实践</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>2015年年初计划，来看看实现详情：</p>\n<h2 id=\"一、新西兰相关：\"><a href=\"#一、新西兰相关：\" class=\"headerlink\" title=\"一、新西兰相关：\"></a>一、新西兰相关：</h2><ul>\n<li><i class=\"fa fa-check-square-o\"></i> IELTS</li>\n<li><i class=\"fa fa-check-square-o\"></i> 驾照</li>\n<li><i class=\"fa fa-check-square-o\"></i> whv visa</li>\n</ul>\n<h2 id=\"二、技术沉淀\"><a href=\"#二、技术沉淀\" class=\"headerlink\" title=\"二、技术沉淀\"></a>二、技术沉淀</h2><h3 id=\"历史项目抽象\"><a href=\"#历史项目抽象\" class=\"headerlink\" title=\"历史项目抽象\"></a>历史项目抽象</h3><p><i class=\"fa fa-check-square-o\"></i> fis专题开发框架</p>\n<h3 id=\"fork开源项目-gt-3\"><a href=\"#fork开源项目-gt-3\" class=\"headerlink\" title=\"fork开源项目 &gt;= 3\"></a>fork开源项目 &gt;= 3</h3><ul>\n<li><i class=\"fa fa-check-square-o\"></i> ueditor</li>\n<li><i class=\"fa fa-check-square-o\"></i> be-fe/iSlider</li>\n<li><i class=\"fa fa-check-square-o\"></i> yanhaijing/zepto.fullpage</li>\n<li><i class=\"fa fa-check-square-o\"></i> zepto-onepage-scroll</li>\n<li><i class=\"fa fa-check-square-o\"></i> fullPage.js</li>\n<li><i class=\"fa fa-check-square-o\"></i> minimal-mistakes(jekyll theme)</li>\n</ul>\n<p><i class=\"fa fa-square-o\"></i> <del>简历 【不需要找工作时没有动力写 ^_^ 】</del></p>\n<h2 id=\"三、读书\"><a href=\"#三、读书\" class=\"headerlink\" title=\"三、读书\"></a>三、读书</h2><p><del><i class=\"fa fa-square-o\"></i> 60本书</del><br>不达标，<strong>40本已读</strong>，4本在读（其中10本技术/工作相关）</p>\n<h2 id=\"四、理财\"><a href=\"#四、理财\" class=\"headerlink\" title=\"四、理财\"></a>四、理财</h2><p>收益 &gt;= 10%<br><i class=\"fa fa-check-square-o\"></i> 达标，<strong>+17.1%</strong></p>\n<h2 id=\"五、计划外的成就：\"><a href=\"#五、计划外的成就：\" class=\"headerlink\" title=\"五、计划外的成就：\"></a>五、计划外的成就：</h2><ul>\n<li><i class=\"fa fa-check-square-o\"></i> 在北京滑雪，还是不会，没有学过去滑雪好危险，摔到飞起来</li>\n<li><i class=\"fa fa-check-square-o\"></i> 出国一趟（去了越南），体验了出国流程，也体会到出国英语并不是万能的，事前准备也很重要</li>\n<li><i class=\"fa fa-check-square-o\"></i> 百度师傅项目的上线</li>\n<li><i class=\"fa fa-check-square-o\"></i> 在经验当了FE小组长，一点点的管理实践</li>\n</ul>\n"},{"title":"我的2016","date":"2017-01-19T16:11:18.000Z","type":"photo","cover":"http://cdn.sinacloud.net/woodysblog/2016/me.JPG","_content":"\n二零一六年，是对我来说非常不一样的一年。\n\n<!-- more -->\n\n![\"Cooks Beach\"](http://cdn.sinacloud.net/woodysblog/2016/me.JPG)\n\n## 例行总结\n\n* ~~<i class=\"fa fa-square-o\"></i> 读书，目标50~~，41本，**不达标**；\n* ~~<i class=\"fa fa-square-o\"></i> 理财，目标10%~~，实盘-7.17%，大盘沪指-12.31%，跑赢大盘，**不达标**；（出国期间管都没管，要什么自行车）\n* <i class=\"fa fa-check-square-o\"></i> 2016年的技术规划，在我离职时把我能做的都做完了，**get√**\n* <i class=\"fa fa-check-square-o\"></i> 新西兰环岛，**get√**\n\n搞siao，啥都不达标，总结啥！？哦~\n\n## 此处开始 —— 抒情随意总结\n\n2016年6月，结束了在大百度的工作，我贡献了3年多青春的\"初恋\"。上半年的故事，之前在[《离职这件小事》](/archives/resign-from-baidu/)里已经说得差不多了，姑且当做上半年总结吧。\n\n希望鸡神眷顾我找到靠谱的新工作~\n\n![](http://cdn.sinacloud.net/woodysblog/2016/chicken.JPG)\n\n随后，说走就走，开展了为期6个月的新西兰打工旅行。换宿、[打季节工](/archives/work-whv/)、半年换了3辆战车、以露营为主的自驾环南北岛……从来没有过那么颠沛流离、充满对未知的恐惧，当然也带着一丝对未来小刺激的期待，像我之前说的，每一天都需要勇气来生活。\n\n2016年下半年的生活的可能性和丰富度，时间只有半年，却比我以往的26年都要多，刺激得不行不行的。于是我变成了一个有故事的女同学，哈哈，故事、人物和感受太多，一时之间，不知从何说起。（让你懒惰之前不写日志！！）\n\n![\"Kerikeri Nursery\"](http://cdn.sinacloud.net/woodysblog/2016/farm.JPG)\n\n![\"Hitch hike in Paihia\"](http://cdn.sinacloud.net/woodysblog/2016/hitch-hike.JPG)\n\n![\"Fishing\"](http://cdn.sinacloud.net/woodysblog/2016/fishing.JPG)\n\n![\"Tongariro National Park\"](http://cdn.sinacloud.net/woodysblog/2016/Tongariro.JPG)\n\n![\"camping\"](http://cdn.sinacloud.net/woodysblog/2016/camp.JPG)\n\n原本有占据2页的篇幅（写于奥克兰机场），记录一个我精心挑选的年度最佳的故事，但是在跟我爸妈聊天后，我决定删掉。出来行走江湖，谁没有几个悲伤的故事，不用时刻拿出来卖惨，我重新认识一个**坚强和强悍抗压的自己**已经够了，哈哈，成长的代价。\n\n![](http://cdn.sinacloud.net/woodysblog/2016/deleted-post.JPG)\n\n很好奇发生了什么是不是？我就不说~ 简而言之，就是发生了一个（或者几个）小插曲，让我变得一无所有，差点没有办法回国，我崩溃了一小下，不过很快收拾好心情妥善处理好一切。这些我当时没有跟任何人说，几个小伙伴知道都是我事后说的，不想家人或者朋友干担心瞎着急。\n\n前几天，我跟爸妈说起我在新西兰经历的各种，也包括那些小插曲，并没有收到爸妈的安慰，那个瞬间我真怀疑自己到底是不是亲生的，哈哈。我遇到的“大麻烦”，在阅历丰富的爸妈眼里，不值一提。\n\n![](http://cdn.sinacloud.net/woodysblog/2016/car.JPG)\n\n爸妈说：\n\n>你以为自己有多大损失、多委屈，比起你能安全回国，根本不算事儿。你出发之前，我们劝你不要停留那么久，在那边玩2、3个礼拜就算了。但是你坚持要留那么久，我们也只能支持你。\n>\n>发生这样的事情，完全在我们意料之中，这就是为什么你出国前我们联系到奥克兰的阿姨，让你有事去找她帮忙。你在国外时，我们每天都在担心。你会不会开车冲下山？会不会撞到别人？会不会遇到坏人？会不会失联，从此人间蒸发？\n\n惊奇地发现，在我出发前后，他们说的话是一样的，但作为听众的我，感受却大不相同。真倒霉起来，老天爷要耍我的话，他们担心的事情是真会变成现实的，最坏情况是客死异乡，而我在途中真实遇到的若干次意外，跟死神擦身而过。细思极恐，他们的担心不无道理，真苦了他们天天为我担惊受怕。\n\n**感谢爸妈**，在那么担心的情况下，没有干预我的决定，尊重我的选择。\n**感谢老天**，我顺利安全回国了。\n\n![\"Auckland Airport\"](http://cdn.sinacloud.net/woodysblog/2016/airport.JPG)\n\n## 神秘的旅伴 —— 猩爷\n\n嗯，虽然我自认为找工作、沟通和抗压的技能指数爆表（了不起！）但是这一路走下来，我特别想**感谢我的旅伴 —— 猩爷**\n\n![\"猩爷的沙滩写真\"](http://cdn.sinacloud.net/woodysblog/2016/b-1.JPG)\n\n旅行是最能看清楚一个人的时候，因为大家会遇到各种难题各种令人崩溃的事情，变态、极端到你这辈子可能都不会再有机会遇到。我崩溃的时候，还是她把我拉回来的，真真了不起！\n\n* 吃苦耐劳\n* 一身洪荒之力无处释放\n* 做得一桌好菜\n* 搭得一顶好帐篷\n* 开得一手好车（自称“青秀山车神”）\n* 夕阳红爬山队的教练和打杂\n\n![\"悬崖边上的猩爷\"](http://cdn.sinacloud.net/woodysblog/2016/b-2.JPG)\n\n在那么艰苦的荒野求生中，我还是长胖了，真的要好好感谢她（咬牙切齿）\n\n（上述各种都是猩爷做，你做了什么？）噢~ 我一般什么都不做，在旁边做**鼓励师**和**卖萌机器人**，衬托能干的她，哈哈哈！\n\n## Q & A\n\n`问` 澳洲的WHV签证还申请吗？\n`答` 不要。这半年我感觉够够的，后悔得要死，跟我想的完全不一样。短期内也不想旅行了，哈哈。\n\n`问` 如果时光倒流，可以再选一次，还要去新西兰吗？\n`答` 去啊，说走还走！不去永远不知道，喜欢或者不喜欢，开心抑或不开心，总得经历过才知道，美不在天堂，而在前往天堂的路上，也许这就是成长的代价吧。\n","source":"_posts/year-2016.md","raw":"---\ntitle: 我的2016\ntags:\n  - 总结\ndate: 2017-01-20 00:11:18\ntype: photo\ncover: http://cdn.sinacloud.net/woodysblog/2016/me.JPG\n---\n\n二零一六年，是对我来说非常不一样的一年。\n\n<!-- more -->\n\n![\"Cooks Beach\"](http://cdn.sinacloud.net/woodysblog/2016/me.JPG)\n\n## 例行总结\n\n* ~~<i class=\"fa fa-square-o\"></i> 读书，目标50~~，41本，**不达标**；\n* ~~<i class=\"fa fa-square-o\"></i> 理财，目标10%~~，实盘-7.17%，大盘沪指-12.31%，跑赢大盘，**不达标**；（出国期间管都没管，要什么自行车）\n* <i class=\"fa fa-check-square-o\"></i> 2016年的技术规划，在我离职时把我能做的都做完了，**get√**\n* <i class=\"fa fa-check-square-o\"></i> 新西兰环岛，**get√**\n\n搞siao，啥都不达标，总结啥！？哦~\n\n## 此处开始 —— 抒情随意总结\n\n2016年6月，结束了在大百度的工作，我贡献了3年多青春的\"初恋\"。上半年的故事，之前在[《离职这件小事》](/archives/resign-from-baidu/)里已经说得差不多了，姑且当做上半年总结吧。\n\n希望鸡神眷顾我找到靠谱的新工作~\n\n![](http://cdn.sinacloud.net/woodysblog/2016/chicken.JPG)\n\n随后，说走就走，开展了为期6个月的新西兰打工旅行。换宿、[打季节工](/archives/work-whv/)、半年换了3辆战车、以露营为主的自驾环南北岛……从来没有过那么颠沛流离、充满对未知的恐惧，当然也带着一丝对未来小刺激的期待，像我之前说的，每一天都需要勇气来生活。\n\n2016年下半年的生活的可能性和丰富度，时间只有半年，却比我以往的26年都要多，刺激得不行不行的。于是我变成了一个有故事的女同学，哈哈，故事、人物和感受太多，一时之间，不知从何说起。（让你懒惰之前不写日志！！）\n\n![\"Kerikeri Nursery\"](http://cdn.sinacloud.net/woodysblog/2016/farm.JPG)\n\n![\"Hitch hike in Paihia\"](http://cdn.sinacloud.net/woodysblog/2016/hitch-hike.JPG)\n\n![\"Fishing\"](http://cdn.sinacloud.net/woodysblog/2016/fishing.JPG)\n\n![\"Tongariro National Park\"](http://cdn.sinacloud.net/woodysblog/2016/Tongariro.JPG)\n\n![\"camping\"](http://cdn.sinacloud.net/woodysblog/2016/camp.JPG)\n\n原本有占据2页的篇幅（写于奥克兰机场），记录一个我精心挑选的年度最佳的故事，但是在跟我爸妈聊天后，我决定删掉。出来行走江湖，谁没有几个悲伤的故事，不用时刻拿出来卖惨，我重新认识一个**坚强和强悍抗压的自己**已经够了，哈哈，成长的代价。\n\n![](http://cdn.sinacloud.net/woodysblog/2016/deleted-post.JPG)\n\n很好奇发生了什么是不是？我就不说~ 简而言之，就是发生了一个（或者几个）小插曲，让我变得一无所有，差点没有办法回国，我崩溃了一小下，不过很快收拾好心情妥善处理好一切。这些我当时没有跟任何人说，几个小伙伴知道都是我事后说的，不想家人或者朋友干担心瞎着急。\n\n前几天，我跟爸妈说起我在新西兰经历的各种，也包括那些小插曲，并没有收到爸妈的安慰，那个瞬间我真怀疑自己到底是不是亲生的，哈哈。我遇到的“大麻烦”，在阅历丰富的爸妈眼里，不值一提。\n\n![](http://cdn.sinacloud.net/woodysblog/2016/car.JPG)\n\n爸妈说：\n\n>你以为自己有多大损失、多委屈，比起你能安全回国，根本不算事儿。你出发之前，我们劝你不要停留那么久，在那边玩2、3个礼拜就算了。但是你坚持要留那么久，我们也只能支持你。\n>\n>发生这样的事情，完全在我们意料之中，这就是为什么你出国前我们联系到奥克兰的阿姨，让你有事去找她帮忙。你在国外时，我们每天都在担心。你会不会开车冲下山？会不会撞到别人？会不会遇到坏人？会不会失联，从此人间蒸发？\n\n惊奇地发现，在我出发前后，他们说的话是一样的，但作为听众的我，感受却大不相同。真倒霉起来，老天爷要耍我的话，他们担心的事情是真会变成现实的，最坏情况是客死异乡，而我在途中真实遇到的若干次意外，跟死神擦身而过。细思极恐，他们的担心不无道理，真苦了他们天天为我担惊受怕。\n\n**感谢爸妈**，在那么担心的情况下，没有干预我的决定，尊重我的选择。\n**感谢老天**，我顺利安全回国了。\n\n![\"Auckland Airport\"](http://cdn.sinacloud.net/woodysblog/2016/airport.JPG)\n\n## 神秘的旅伴 —— 猩爷\n\n嗯，虽然我自认为找工作、沟通和抗压的技能指数爆表（了不起！）但是这一路走下来，我特别想**感谢我的旅伴 —— 猩爷**\n\n![\"猩爷的沙滩写真\"](http://cdn.sinacloud.net/woodysblog/2016/b-1.JPG)\n\n旅行是最能看清楚一个人的时候，因为大家会遇到各种难题各种令人崩溃的事情，变态、极端到你这辈子可能都不会再有机会遇到。我崩溃的时候，还是她把我拉回来的，真真了不起！\n\n* 吃苦耐劳\n* 一身洪荒之力无处释放\n* 做得一桌好菜\n* 搭得一顶好帐篷\n* 开得一手好车（自称“青秀山车神”）\n* 夕阳红爬山队的教练和打杂\n\n![\"悬崖边上的猩爷\"](http://cdn.sinacloud.net/woodysblog/2016/b-2.JPG)\n\n在那么艰苦的荒野求生中，我还是长胖了，真的要好好感谢她（咬牙切齿）\n\n（上述各种都是猩爷做，你做了什么？）噢~ 我一般什么都不做，在旁边做**鼓励师**和**卖萌机器人**，衬托能干的她，哈哈哈！\n\n## Q & A\n\n`问` 澳洲的WHV签证还申请吗？\n`答` 不要。这半年我感觉够够的，后悔得要死，跟我想的完全不一样。短期内也不想旅行了，哈哈。\n\n`问` 如果时光倒流，可以再选一次，还要去新西兰吗？\n`答` 去啊，说走还走！不去永远不知道，喜欢或者不喜欢，开心抑或不开心，总得经历过才知道，美不在天堂，而在前往天堂的路上，也许这就是成长的代价吧。\n","slug":"year-2016","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xag0052zvr3k869ms0o","content":"<p>二零一六年，是对我来说非常不一样的一年。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/me.JPG\" alt=\"&quot;Cooks Beach&quot;\"></p>\n<h2 id=\"例行总结\"><a href=\"#例行总结\" class=\"headerlink\" title=\"例行总结\"></a>例行总结</h2><ul>\n<li><del><i class=\"fa fa-square-o\"></i> 读书，目标50</del>，41本，<strong>不达标</strong>；</li>\n<li><del><i class=\"fa fa-square-o\"></i> 理财，目标10%</del>，实盘-7.17%，大盘沪指-12.31%，跑赢大盘，<strong>不达标</strong>；（出国期间管都没管，要什么自行车）</li>\n<li><i class=\"fa fa-check-square-o\"></i> 2016年的技术规划，在我离职时把我能做的都做完了，<strong>get√</strong></li>\n<li><i class=\"fa fa-check-square-o\"></i> 新西兰环岛，<strong>get√</strong></li>\n</ul>\n<p>搞siao，啥都不达标，总结啥！？哦~</p>\n<h2 id=\"此处开始-——-抒情随意总结\"><a href=\"#此处开始-——-抒情随意总结\" class=\"headerlink\" title=\"此处开始 —— 抒情随意总结\"></a>此处开始 —— 抒情随意总结</h2><p>2016年6月，结束了在大百度的工作，我贡献了3年多青春的”初恋”。上半年的故事，之前在<a href=\"/archives/resign-from-baidu/\">《离职这件小事》</a>里已经说得差不多了，姑且当做上半年总结吧。</p>\n<p>希望鸡神眷顾我找到靠谱的新工作~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/chicken.JPG\" alt=\"\"></p>\n<p>随后，说走就走，开展了为期6个月的新西兰打工旅行。换宿、<a href=\"/archives/work-whv/\">打季节工</a>、半年换了3辆战车、以露营为主的自驾环南北岛……从来没有过那么颠沛流离、充满对未知的恐惧，当然也带着一丝对未来小刺激的期待，像我之前说的，每一天都需要勇气来生活。</p>\n<p>2016年下半年的生活的可能性和丰富度，时间只有半年，却比我以往的26年都要多，刺激得不行不行的。于是我变成了一个有故事的女同学，哈哈，故事、人物和感受太多，一时之间，不知从何说起。（让你懒惰之前不写日志！！）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/farm.JPG\" alt=\"&quot;Kerikeri Nursery&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/hitch-hike.JPG\" alt=\"&quot;Hitch hike in Paihia&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/fishing.JPG\" alt=\"&quot;Fishing&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/Tongariro.JPG\" alt=\"&quot;Tongariro National Park&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/camp.JPG\" alt=\"&quot;camping&quot;\"></p>\n<p>原本有占据2页的篇幅（写于奥克兰机场），记录一个我精心挑选的年度最佳的故事，但是在跟我爸妈聊天后，我决定删掉。出来行走江湖，谁没有几个悲伤的故事，不用时刻拿出来卖惨，我重新认识一个<strong>坚强和强悍抗压的自己</strong>已经够了，哈哈，成长的代价。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/deleted-post.JPG\" alt=\"\"></p>\n<p>很好奇发生了什么是不是？我就不说~ 简而言之，就是发生了一个（或者几个）小插曲，让我变得一无所有，差点没有办法回国，我崩溃了一小下，不过很快收拾好心情妥善处理好一切。这些我当时没有跟任何人说，几个小伙伴知道都是我事后说的，不想家人或者朋友干担心瞎着急。</p>\n<p>前几天，我跟爸妈说起我在新西兰经历的各种，也包括那些小插曲，并没有收到爸妈的安慰，那个瞬间我真怀疑自己到底是不是亲生的，哈哈。我遇到的“大麻烦”，在阅历丰富的爸妈眼里，不值一提。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/car.JPG\" alt=\"\"></p>\n<p>爸妈说：</p>\n<blockquote>\n<p>你以为自己有多大损失、多委屈，比起你能安全回国，根本不算事儿。你出发之前，我们劝你不要停留那么久，在那边玩2、3个礼拜就算了。但是你坚持要留那么久，我们也只能支持你。</p>\n<p>发生这样的事情，完全在我们意料之中，这就是为什么你出国前我们联系到奥克兰的阿姨，让你有事去找她帮忙。你在国外时，我们每天都在担心。你会不会开车冲下山？会不会撞到别人？会不会遇到坏人？会不会失联，从此人间蒸发？</p>\n</blockquote>\n<p>惊奇地发现，在我出发前后，他们说的话是一样的，但作为听众的我，感受却大不相同。真倒霉起来，老天爷要耍我的话，他们担心的事情是真会变成现实的，最坏情况是客死异乡，而我在途中真实遇到的若干次意外，跟死神擦身而过。细思极恐，他们的担心不无道理，真苦了他们天天为我担惊受怕。</p>\n<p><strong>感谢爸妈</strong>，在那么担心的情况下，没有干预我的决定，尊重我的选择。<br><strong>感谢老天</strong>，我顺利安全回国了。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/airport.JPG\" alt=\"&quot;Auckland Airport&quot;\"></p>\n<h2 id=\"神秘的旅伴-——-猩爷\"><a href=\"#神秘的旅伴-——-猩爷\" class=\"headerlink\" title=\"神秘的旅伴 —— 猩爷\"></a>神秘的旅伴 —— 猩爷</h2><p>嗯，虽然我自认为找工作、沟通和抗压的技能指数爆表（了不起！）但是这一路走下来，我特别想<strong>感谢我的旅伴 —— 猩爷</strong></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/b-1.JPG\" alt=\"&quot;猩爷的沙滩写真&quot;\"></p>\n<p>旅行是最能看清楚一个人的时候，因为大家会遇到各种难题各种令人崩溃的事情，变态、极端到你这辈子可能都不会再有机会遇到。我崩溃的时候，还是她把我拉回来的，真真了不起！</p>\n<ul>\n<li>吃苦耐劳</li>\n<li>一身洪荒之力无处释放</li>\n<li>做得一桌好菜</li>\n<li>搭得一顶好帐篷</li>\n<li>开得一手好车（自称“青秀山车神”）</li>\n<li>夕阳红爬山队的教练和打杂</li>\n</ul>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/b-2.JPG\" alt=\"&quot;悬崖边上的猩爷&quot;\"></p>\n<p>在那么艰苦的荒野求生中，我还是长胖了，真的要好好感谢她（咬牙切齿）</p>\n<p>（上述各种都是猩爷做，你做了什么？）噢~ 我一般什么都不做，在旁边做<strong>鼓励师</strong>和<strong>卖萌机器人</strong>，衬托能干的她，哈哈哈！</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><p><code>问</code> 澳洲的WHV签证还申请吗？<br><code>答</code> 不要。这半年我感觉够够的，后悔得要死，跟我想的完全不一样。短期内也不想旅行了，哈哈。</p>\n<p><code>问</code> 如果时光倒流，可以再选一次，还要去新西兰吗？<br><code>答</code> 去啊，说走还走！不去永远不知道，喜欢或者不喜欢，开心抑或不开心，总得经历过才知道，美不在天堂，而在前往天堂的路上，也许这就是成长的代价吧。</p>\n","site":{"data":{}},"excerpt":"<p>二零一六年，是对我来说非常不一样的一年。</p>","more":"<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/me.JPG\" alt=\"&quot;Cooks Beach&quot;\"></p>\n<h2 id=\"例行总结\"><a href=\"#例行总结\" class=\"headerlink\" title=\"例行总结\"></a>例行总结</h2><ul>\n<li><del><i class=\"fa fa-square-o\"></i> 读书，目标50</del>，41本，<strong>不达标</strong>；</li>\n<li><del><i class=\"fa fa-square-o\"></i> 理财，目标10%</del>，实盘-7.17%，大盘沪指-12.31%，跑赢大盘，<strong>不达标</strong>；（出国期间管都没管，要什么自行车）</li>\n<li><i class=\"fa fa-check-square-o\"></i> 2016年的技术规划，在我离职时把我能做的都做完了，<strong>get√</strong></li>\n<li><i class=\"fa fa-check-square-o\"></i> 新西兰环岛，<strong>get√</strong></li>\n</ul>\n<p>搞siao，啥都不达标，总结啥！？哦~</p>\n<h2 id=\"此处开始-——-抒情随意总结\"><a href=\"#此处开始-——-抒情随意总结\" class=\"headerlink\" title=\"此处开始 —— 抒情随意总结\"></a>此处开始 —— 抒情随意总结</h2><p>2016年6月，结束了在大百度的工作，我贡献了3年多青春的”初恋”。上半年的故事，之前在<a href=\"/archives/resign-from-baidu/\">《离职这件小事》</a>里已经说得差不多了，姑且当做上半年总结吧。</p>\n<p>希望鸡神眷顾我找到靠谱的新工作~</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/chicken.JPG\" alt=\"\"></p>\n<p>随后，说走就走，开展了为期6个月的新西兰打工旅行。换宿、<a href=\"/archives/work-whv/\">打季节工</a>、半年换了3辆战车、以露营为主的自驾环南北岛……从来没有过那么颠沛流离、充满对未知的恐惧，当然也带着一丝对未来小刺激的期待，像我之前说的，每一天都需要勇气来生活。</p>\n<p>2016年下半年的生活的可能性和丰富度，时间只有半年，却比我以往的26年都要多，刺激得不行不行的。于是我变成了一个有故事的女同学，哈哈，故事、人物和感受太多，一时之间，不知从何说起。（让你懒惰之前不写日志！！）</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/farm.JPG\" alt=\"&quot;Kerikeri Nursery&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/hitch-hike.JPG\" alt=\"&quot;Hitch hike in Paihia&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/fishing.JPG\" alt=\"&quot;Fishing&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/Tongariro.JPG\" alt=\"&quot;Tongariro National Park&quot;\"></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/camp.JPG\" alt=\"&quot;camping&quot;\"></p>\n<p>原本有占据2页的篇幅（写于奥克兰机场），记录一个我精心挑选的年度最佳的故事，但是在跟我爸妈聊天后，我决定删掉。出来行走江湖，谁没有几个悲伤的故事，不用时刻拿出来卖惨，我重新认识一个<strong>坚强和强悍抗压的自己</strong>已经够了，哈哈，成长的代价。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/deleted-post.JPG\" alt=\"\"></p>\n<p>很好奇发生了什么是不是？我就不说~ 简而言之，就是发生了一个（或者几个）小插曲，让我变得一无所有，差点没有办法回国，我崩溃了一小下，不过很快收拾好心情妥善处理好一切。这些我当时没有跟任何人说，几个小伙伴知道都是我事后说的，不想家人或者朋友干担心瞎着急。</p>\n<p>前几天，我跟爸妈说起我在新西兰经历的各种，也包括那些小插曲，并没有收到爸妈的安慰，那个瞬间我真怀疑自己到底是不是亲生的，哈哈。我遇到的“大麻烦”，在阅历丰富的爸妈眼里，不值一提。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/car.JPG\" alt=\"\"></p>\n<p>爸妈说：</p>\n<blockquote>\n<p>你以为自己有多大损失、多委屈，比起你能安全回国，根本不算事儿。你出发之前，我们劝你不要停留那么久，在那边玩2、3个礼拜就算了。但是你坚持要留那么久，我们也只能支持你。</p>\n<p>发生这样的事情，完全在我们意料之中，这就是为什么你出国前我们联系到奥克兰的阿姨，让你有事去找她帮忙。你在国外时，我们每天都在担心。你会不会开车冲下山？会不会撞到别人？会不会遇到坏人？会不会失联，从此人间蒸发？</p>\n</blockquote>\n<p>惊奇地发现，在我出发前后，他们说的话是一样的，但作为听众的我，感受却大不相同。真倒霉起来，老天爷要耍我的话，他们担心的事情是真会变成现实的，最坏情况是客死异乡，而我在途中真实遇到的若干次意外，跟死神擦身而过。细思极恐，他们的担心不无道理，真苦了他们天天为我担惊受怕。</p>\n<p><strong>感谢爸妈</strong>，在那么担心的情况下，没有干预我的决定，尊重我的选择。<br><strong>感谢老天</strong>，我顺利安全回国了。</p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/airport.JPG\" alt=\"&quot;Auckland Airport&quot;\"></p>\n<h2 id=\"神秘的旅伴-——-猩爷\"><a href=\"#神秘的旅伴-——-猩爷\" class=\"headerlink\" title=\"神秘的旅伴 —— 猩爷\"></a>神秘的旅伴 —— 猩爷</h2><p>嗯，虽然我自认为找工作、沟通和抗压的技能指数爆表（了不起！）但是这一路走下来，我特别想<strong>感谢我的旅伴 —— 猩爷</strong></p>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/b-1.JPG\" alt=\"&quot;猩爷的沙滩写真&quot;\"></p>\n<p>旅行是最能看清楚一个人的时候，因为大家会遇到各种难题各种令人崩溃的事情，变态、极端到你这辈子可能都不会再有机会遇到。我崩溃的时候，还是她把我拉回来的，真真了不起！</p>\n<ul>\n<li>吃苦耐劳</li>\n<li>一身洪荒之力无处释放</li>\n<li>做得一桌好菜</li>\n<li>搭得一顶好帐篷</li>\n<li>开得一手好车（自称“青秀山车神”）</li>\n<li>夕阳红爬山队的教练和打杂</li>\n</ul>\n<p><img src=\"http://cdn.sinacloud.net/woodysblog/2016/b-2.JPG\" alt=\"&quot;悬崖边上的猩爷&quot;\"></p>\n<p>在那么艰苦的荒野求生中，我还是长胖了，真的要好好感谢她（咬牙切齿）</p>\n<p>（上述各种都是猩爷做，你做了什么？）噢~ 我一般什么都不做，在旁边做<strong>鼓励师</strong>和<strong>卖萌机器人</strong>，衬托能干的她，哈哈哈！</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><p><code>问</code> 澳洲的WHV签证还申请吗？<br><code>答</code> 不要。这半年我感觉够够的，后悔得要死，跟我想的完全不一样。短期内也不想旅行了，哈哈。</p>\n<p><code>问</code> 如果时光倒流，可以再选一次，还要去新西兰吗？<br><code>答</code> 去啊，说走还走！不去永远不知道，喜欢或者不喜欢，开心抑或不开心，总得经历过才知道，美不在天堂，而在前往天堂的路上，也许这就是成长的代价吧。</p>"},{"title":"我的2017","date":"2018-01-01T10:23:28.000Z","type":"photo","cover":"http://sinacloud.net/woodysblog/year-2017/team1.jpg","_content":"\n![\"龙井路秋色\"](http://sinacloud.net/woodysblog/year-2017/DSC05035.jpg)\n（龙井路秋色 —— 摄于杭州龙井路 2017.12.03）\n\n## Personal Targets for 2017\n\n* √ 找一份好工作\n* √ 运动\n* √ 理财（跑赢大盘）\n* × 读书（40本）\n\n在2017年的尾巴，汇总了下今年都做了什么，KPI达标了没？讲真，在我工作的这几年间，今年的达标程度算非常的高，还蛮开心的。\n\n### 找一份好工作\n\n找工作的故事，之前写过一篇[《Begin again, 2017》](/blog/archives/begin-again-2017/)，在此就不再叙述了。\n\n相信很多小伙伴们都知道的，今年5月份，我来了杭州，来到职业生涯中的第二家公司 —— 阿里巴巴，供职于国内第一大B2B平台[1688](https://www.1688.com)。简而言之，我现在做批发的，要是有想跟1688合作的朋友们，尤其是大新塘做牛仔的土豪们，欢迎联系我 :)\n\n想入职阿里的靠谱前端朋友们，也欢迎把简历发给我：  \n\n`jiwu.wyy@alibaba-inc.com`\n\n![](http://sinacloud.net/woodysblog/year-2017/1688.jpg)\n\n好啦，广告打完，说回这项KPI吧，个人认为，确实是找到一份**好工作**的。\n\n我遇到了一个技术出身且很能talk、格局很高、EQ也非常高的老大 —— 重鱼，在融入新工作环境过程中，他给予我很多的帮助和建议。不过融入只是第一步，相信后续的发展，我能从他身上学到更多的东西。\n\n我遇到了一群很nice很有能力的小伙伴们，在这就不一一点名，你们懂的，从大家身上我也get到很多新技能，不仅仅有技术或者业务能力的提高，还看到程序猿的另一面，不仅会敲代码，还玩得了狼人杀、可以一起去泡吧。\n\n![](http://sinacloud.net/woodysblog/year-2017/team1.jpg)\n\n![](http://sinacloud.net/woodysblog/year-2017/team2.jpg)\n\n![](http://sinacloud.net/woodysblog/year-2017/team3.jpg)\n\n我看到了我想看到的阿里。我一直很想来阿里看看，想看看在马老师带领下的阿里巴巴是怎样的。我来的时间不长，且只在一个业务线，了解尚浅。\n\n在新人培训（百年阿里）中，我认识了一些来自不同部门、各种岗位的同学们，有刚刚从学校步入职场的“小学鸡”，有在职场打滚多年、拥有若干创业经验的“老司机”。我从他们身上，一样的是，能看到大家对于新环境的憧憬和激情，这就是我想看到的阿里。\n\n当然他们很多跟我一样，是马老师的粉丝，想来一睹马老师真容。在今年阿里巴巴B2B年会，还真看到马老师了，不过我是山顶的朋友，只能透过大屏幕远远的看他。\n\n![](http://sinacloud.net/woodysblog/year-2017/b2b-jack.jpg)\n\n![](http://sinacloud.net/woodysblog/year-2017/b2b.jpg)\n\n### 运动\n\n运动这一项，一直没有确定的kpi，一切随风，这几年，基本没有达标过（捂脸）\n\n今年在运动这一栏，万万没想到，居然有东西可以写：\n\n> 慢跑训练  \n> 从9.18开始，一周3次，持续了6周  \n> 最长时间 42 Mins，最远距离 4.82 KM，最快配速 8:02 min/KM\n\n![](http://sinacloud.net/woodysblog/year-2017/running.jpg)\n\n对于跑步，一开始我是拒绝的，哪有人喜欢这样的运动，累cry，又容易跑着跑着就肚子疼，简直懒得动，有木有！\n\n第1周，在公司的健身房，跑1分钟，走2分钟，8个回合，共24分钟2.6公里；\n第6周，在江边，跑5分钟，走1分钟，7个回合，共42分钟4.82公里。\n\n在这几个礼拜训练之后，感觉还是很不一样的。从一开始的拒绝，在健身房磨蹭，到后来每周在江边定期打卡，除了更加健康和学会了“呼呼呼、吸吸吸”的呼吸小窍门以外，还多了一些跟自己相处的时间。\n\n在跑步之后，和自己对话的场景加了一项：\n\n* 安静地看书\n* 在上班路上听电台/音乐\n* **跑步**\n\n在日常生活/工作中，我的大部分时间在写代码/学习写代码、玩手机、看电视剧，做这些事情也许我是一个人在做，但手上、脑子里都被各式各样的东东侵占着，没时间去想。\n\n还记得有一次跟同事们饭后遛弯，聊起“如何放松”。我们甚至聊到冥想，我就把慢跑介绍给他们，紧张的都市人尤其值得拥有。\n\n确实是这样的，有时候越睡越困，身体在休息，但思绪并没有释放，精神压力没有得到释放，还是一样的累。记得有一天心情不太舒畅，去江边跑步，刚开始我还是一样的没心情，但跑着跑着，当我把所有注意力放在呼吸和沿途的人和景上面，整个人放空地前进前进前进，跑完之后，我有种满血复活的感觉。\n\n![](http://sinacloud.net/woodysblog/year-2017/running2.jpg)\n\n最近杭州有点冷，最冷的时候零下了，实在没勇气出门，暖和点要继续跑起来，不要浪费杭州那么棒的江边跑道。\n\n### 理财\n\n理财这块，也是每年比较羞于启齿的，哈哈，因为这几年几乎每年都是跑输大盘的，没赢过。\n\n每年的理财KPI也只有一个 —— 能够跑赢大盘。\n\n感觉得跑赢大盘越来越难了，2017年大盘大概涨了6.56%（2016.12.25-2017.12.25），真是Holy Shxx!!!\n\n说回我自己的篮子吧，货基、股基、A股、美股、p2p啥都有点，就不细说了，12月份上车数字货币世界，Cardano给我打了个神助攻，一年下来终于没白玩了，哈哈。\n\n> 整个篮子浮盈10.24%\n\n2018年开始，放弃A股啦，每年都要用小基金赚得那点钱来补贴，左手倒右手，被割韭菜，年年白玩，今年做了一个艰难的决定，把深套的全都割了，不玩了！\n\n嘿嘿，不过我可以和新欢一起玩，指数基金和Bitcoin的一众后宫。\n\n### 读书\n\n每年的目标是40本。\n\n整理了一下，截至12.31，总共读了25本，其中跟工作/技术相关的有9本，经济/理财相关的4本。\n\n今年技术书比较多，毕竟今年最大的目标是找工作，在投简历前几个月，为了让自己不要太out，只能多读书了，哈哈。\n\n不过我的年度之书是这本，技术会过时，但经济概念不会，风趣易懂的经济故事书（其实后面概念理解起来也挺难的，哈哈，我打算二刷~）\n\n> [《小岛经济学：鱼、美元和经济的故事》](https://book.douban.com/subject/26985299/)\n\n### 写作\n\n今年2月份开始，写的一个专栏，记录我的新西兰生活 —— [《中土世界漂流记》](https://read.douban.com/column/6032026/)。讲真，更新频率不是很稳定，今年就写了7篇，这么更新到2019年肯定还在连载。那在2018年，还是希望隔周更新的，哈哈，我努力。\n\n![](http://sinacloud.net/woodysblog/year-2017/column.png)\n\n### 2017小结\n\n以上都是常规的计划内的目标，今年也有一些“小意外”。\n\n譬如遇见我家大王 —— 胖达。\n\n![\"小时候\"](http://sinacloud.net/woodysblog/year-2017/pangda.jpg)\n\n![\"小学鸡\"](http://sinacloud.net/woodysblog/year-2017/pangda-july.jpg)\n\n![\"一秒变大叔\"](http://sinacloud.net/woodysblog/year-2017/pangda-sep.jpg)\n\n没错，他就是一只丑萌的田园猫。\n\n## Personal Targets for 2018\n\n> Hi, 2018\n\n新的一年，个人目标的划分，还是类似的，不再这里铺开了，实现情况看明年show time ：）\n\n* 个人修养类\n* 运动\n* 理财（跑赢大盘）\n* 读书（40本）\n* 写作（专栏隔周更新）","source":"_posts/year-2017.md","raw":"---\ntitle: 我的2017\ndate: 2018-01-01 18:23:28\ntags:\n- 总结\ntype: photo\ncover: http://sinacloud.net/woodysblog/year-2017/team1.jpg\n---\n\n![\"龙井路秋色\"](http://sinacloud.net/woodysblog/year-2017/DSC05035.jpg)\n（龙井路秋色 —— 摄于杭州龙井路 2017.12.03）\n\n## Personal Targets for 2017\n\n* √ 找一份好工作\n* √ 运动\n* √ 理财（跑赢大盘）\n* × 读书（40本）\n\n在2017年的尾巴，汇总了下今年都做了什么，KPI达标了没？讲真，在我工作的这几年间，今年的达标程度算非常的高，还蛮开心的。\n\n### 找一份好工作\n\n找工作的故事，之前写过一篇[《Begin again, 2017》](/blog/archives/begin-again-2017/)，在此就不再叙述了。\n\n相信很多小伙伴们都知道的，今年5月份，我来了杭州，来到职业生涯中的第二家公司 —— 阿里巴巴，供职于国内第一大B2B平台[1688](https://www.1688.com)。简而言之，我现在做批发的，要是有想跟1688合作的朋友们，尤其是大新塘做牛仔的土豪们，欢迎联系我 :)\n\n想入职阿里的靠谱前端朋友们，也欢迎把简历发给我：  \n\n`jiwu.wyy@alibaba-inc.com`\n\n![](http://sinacloud.net/woodysblog/year-2017/1688.jpg)\n\n好啦，广告打完，说回这项KPI吧，个人认为，确实是找到一份**好工作**的。\n\n我遇到了一个技术出身且很能talk、格局很高、EQ也非常高的老大 —— 重鱼，在融入新工作环境过程中，他给予我很多的帮助和建议。不过融入只是第一步，相信后续的发展，我能从他身上学到更多的东西。\n\n我遇到了一群很nice很有能力的小伙伴们，在这就不一一点名，你们懂的，从大家身上我也get到很多新技能，不仅仅有技术或者业务能力的提高，还看到程序猿的另一面，不仅会敲代码，还玩得了狼人杀、可以一起去泡吧。\n\n![](http://sinacloud.net/woodysblog/year-2017/team1.jpg)\n\n![](http://sinacloud.net/woodysblog/year-2017/team2.jpg)\n\n![](http://sinacloud.net/woodysblog/year-2017/team3.jpg)\n\n我看到了我想看到的阿里。我一直很想来阿里看看，想看看在马老师带领下的阿里巴巴是怎样的。我来的时间不长，且只在一个业务线，了解尚浅。\n\n在新人培训（百年阿里）中，我认识了一些来自不同部门、各种岗位的同学们，有刚刚从学校步入职场的“小学鸡”，有在职场打滚多年、拥有若干创业经验的“老司机”。我从他们身上，一样的是，能看到大家对于新环境的憧憬和激情，这就是我想看到的阿里。\n\n当然他们很多跟我一样，是马老师的粉丝，想来一睹马老师真容。在今年阿里巴巴B2B年会，还真看到马老师了，不过我是山顶的朋友，只能透过大屏幕远远的看他。\n\n![](http://sinacloud.net/woodysblog/year-2017/b2b-jack.jpg)\n\n![](http://sinacloud.net/woodysblog/year-2017/b2b.jpg)\n\n### 运动\n\n运动这一项，一直没有确定的kpi，一切随风，这几年，基本没有达标过（捂脸）\n\n今年在运动这一栏，万万没想到，居然有东西可以写：\n\n> 慢跑训练  \n> 从9.18开始，一周3次，持续了6周  \n> 最长时间 42 Mins，最远距离 4.82 KM，最快配速 8:02 min/KM\n\n![](http://sinacloud.net/woodysblog/year-2017/running.jpg)\n\n对于跑步，一开始我是拒绝的，哪有人喜欢这样的运动，累cry，又容易跑着跑着就肚子疼，简直懒得动，有木有！\n\n第1周，在公司的健身房，跑1分钟，走2分钟，8个回合，共24分钟2.6公里；\n第6周，在江边，跑5分钟，走1分钟，7个回合，共42分钟4.82公里。\n\n在这几个礼拜训练之后，感觉还是很不一样的。从一开始的拒绝，在健身房磨蹭，到后来每周在江边定期打卡，除了更加健康和学会了“呼呼呼、吸吸吸”的呼吸小窍门以外，还多了一些跟自己相处的时间。\n\n在跑步之后，和自己对话的场景加了一项：\n\n* 安静地看书\n* 在上班路上听电台/音乐\n* **跑步**\n\n在日常生活/工作中，我的大部分时间在写代码/学习写代码、玩手机、看电视剧，做这些事情也许我是一个人在做，但手上、脑子里都被各式各样的东东侵占着，没时间去想。\n\n还记得有一次跟同事们饭后遛弯，聊起“如何放松”。我们甚至聊到冥想，我就把慢跑介绍给他们，紧张的都市人尤其值得拥有。\n\n确实是这样的，有时候越睡越困，身体在休息，但思绪并没有释放，精神压力没有得到释放，还是一样的累。记得有一天心情不太舒畅，去江边跑步，刚开始我还是一样的没心情，但跑着跑着，当我把所有注意力放在呼吸和沿途的人和景上面，整个人放空地前进前进前进，跑完之后，我有种满血复活的感觉。\n\n![](http://sinacloud.net/woodysblog/year-2017/running2.jpg)\n\n最近杭州有点冷，最冷的时候零下了，实在没勇气出门，暖和点要继续跑起来，不要浪费杭州那么棒的江边跑道。\n\n### 理财\n\n理财这块，也是每年比较羞于启齿的，哈哈，因为这几年几乎每年都是跑输大盘的，没赢过。\n\n每年的理财KPI也只有一个 —— 能够跑赢大盘。\n\n感觉得跑赢大盘越来越难了，2017年大盘大概涨了6.56%（2016.12.25-2017.12.25），真是Holy Shxx!!!\n\n说回我自己的篮子吧，货基、股基、A股、美股、p2p啥都有点，就不细说了，12月份上车数字货币世界，Cardano给我打了个神助攻，一年下来终于没白玩了，哈哈。\n\n> 整个篮子浮盈10.24%\n\n2018年开始，放弃A股啦，每年都要用小基金赚得那点钱来补贴，左手倒右手，被割韭菜，年年白玩，今年做了一个艰难的决定，把深套的全都割了，不玩了！\n\n嘿嘿，不过我可以和新欢一起玩，指数基金和Bitcoin的一众后宫。\n\n### 读书\n\n每年的目标是40本。\n\n整理了一下，截至12.31，总共读了25本，其中跟工作/技术相关的有9本，经济/理财相关的4本。\n\n今年技术书比较多，毕竟今年最大的目标是找工作，在投简历前几个月，为了让自己不要太out，只能多读书了，哈哈。\n\n不过我的年度之书是这本，技术会过时，但经济概念不会，风趣易懂的经济故事书（其实后面概念理解起来也挺难的，哈哈，我打算二刷~）\n\n> [《小岛经济学：鱼、美元和经济的故事》](https://book.douban.com/subject/26985299/)\n\n### 写作\n\n今年2月份开始，写的一个专栏，记录我的新西兰生活 —— [《中土世界漂流记》](https://read.douban.com/column/6032026/)。讲真，更新频率不是很稳定，今年就写了7篇，这么更新到2019年肯定还在连载。那在2018年，还是希望隔周更新的，哈哈，我努力。\n\n![](http://sinacloud.net/woodysblog/year-2017/column.png)\n\n### 2017小结\n\n以上都是常规的计划内的目标，今年也有一些“小意外”。\n\n譬如遇见我家大王 —— 胖达。\n\n![\"小时候\"](http://sinacloud.net/woodysblog/year-2017/pangda.jpg)\n\n![\"小学鸡\"](http://sinacloud.net/woodysblog/year-2017/pangda-july.jpg)\n\n![\"一秒变大叔\"](http://sinacloud.net/woodysblog/year-2017/pangda-sep.jpg)\n\n没错，他就是一只丑萌的田园猫。\n\n## Personal Targets for 2018\n\n> Hi, 2018\n\n新的一年，个人目标的划分，还是类似的，不再这里铺开了，实现情况看明年show time ：）\n\n* 个人修养类\n* 运动\n* 理财（跑赢大盘）\n* 读书（40本）\n* 写作（专栏隔周更新）","slug":"year-2017","published":1,"updated":"2018-05-26T06:44:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm4n1xai0055zvr362d5ep13","content":"<p><img src=\"http://sinacloud.net/woodysblog/year-2017/DSC05035.jpg\" alt=\"&quot;龙井路秋色&quot;\"><br>（龙井路秋色 —— 摄于杭州龙井路 2017.12.03）</p>\n<h2 id=\"Personal-Targets-for-2017\"><a href=\"#Personal-Targets-for-2017\" class=\"headerlink\" title=\"Personal Targets for 2017\"></a>Personal Targets for 2017</h2><ul>\n<li>√ 找一份好工作</li>\n<li>√ 运动</li>\n<li>√ 理财（跑赢大盘）</li>\n<li>× 读书（40本）</li>\n</ul>\n<p>在2017年的尾巴，汇总了下今年都做了什么，KPI达标了没？讲真，在我工作的这几年间，今年的达标程度算非常的高，还蛮开心的。</p>\n<h3 id=\"找一份好工作\"><a href=\"#找一份好工作\" class=\"headerlink\" title=\"找一份好工作\"></a>找一份好工作</h3><p>找工作的故事，之前写过一篇<a href=\"/blog/archives/begin-again-2017/\">《Begin again, 2017》</a>，在此就不再叙述了。</p>\n<p>相信很多小伙伴们都知道的，今年5月份，我来了杭州，来到职业生涯中的第二家公司 —— 阿里巴巴，供职于国内第一大B2B平台<a href=\"https://www.1688.com\" target=\"_blank\" rel=\"noopener\">1688</a>。简而言之，我现在做批发的，要是有想跟1688合作的朋友们，尤其是大新塘做牛仔的土豪们，欢迎联系我 :)</p>\n<p>想入职阿里的靠谱前端朋友们，也欢迎把简历发给我：  </p>\n<p><a href=\"mailto:`jiwu.wyy@alibaba-inc.com\" target=\"_blank\" rel=\"noopener\">`jiwu.wyy@alibaba-inc.com</a>`</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/1688.jpg\" alt=\"\"></p>\n<p>好啦，广告打完，说回这项KPI吧，个人认为，确实是找到一份<strong>好工作</strong>的。</p>\n<p>我遇到了一个技术出身且很能talk、格局很高、EQ也非常高的老大 —— 重鱼，在融入新工作环境过程中，他给予我很多的帮助和建议。不过融入只是第一步，相信后续的发展，我能从他身上学到更多的东西。</p>\n<p>我遇到了一群很nice很有能力的小伙伴们，在这就不一一点名，你们懂的，从大家身上我也get到很多新技能，不仅仅有技术或者业务能力的提高，还看到程序猿的另一面，不仅会敲代码，还玩得了狼人杀、可以一起去泡吧。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/team1.jpg\" alt=\"\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/team2.jpg\" alt=\"\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/team3.jpg\" alt=\"\"></p>\n<p>我看到了我想看到的阿里。我一直很想来阿里看看，想看看在马老师带领下的阿里巴巴是怎样的。我来的时间不长，且只在一个业务线，了解尚浅。</p>\n<p>在新人培训（百年阿里）中，我认识了一些来自不同部门、各种岗位的同学们，有刚刚从学校步入职场的“小学鸡”，有在职场打滚多年、拥有若干创业经验的“老司机”。我从他们身上，一样的是，能看到大家对于新环境的憧憬和激情，这就是我想看到的阿里。</p>\n<p>当然他们很多跟我一样，是马老师的粉丝，想来一睹马老师真容。在今年阿里巴巴B2B年会，还真看到马老师了，不过我是山顶的朋友，只能透过大屏幕远远的看他。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/b2b-jack.jpg\" alt=\"\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/b2b.jpg\" alt=\"\"></p>\n<h3 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h3><p>运动这一项，一直没有确定的kpi，一切随风，这几年，基本没有达标过（捂脸）</p>\n<p>今年在运动这一栏，万万没想到，居然有东西可以写：</p>\n<blockquote>\n<p>慢跑训练<br>从9.18开始，一周3次，持续了6周<br>最长时间 42 Mins，最远距离 4.82 KM，最快配速 8:02 min/KM</p>\n</blockquote>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/running.jpg\" alt=\"\"></p>\n<p>对于跑步，一开始我是拒绝的，哪有人喜欢这样的运动，累cry，又容易跑着跑着就肚子疼，简直懒得动，有木有！</p>\n<p>第1周，在公司的健身房，跑1分钟，走2分钟，8个回合，共24分钟2.6公里；<br>第6周，在江边，跑5分钟，走1分钟，7个回合，共42分钟4.82公里。</p>\n<p>在这几个礼拜训练之后，感觉还是很不一样的。从一开始的拒绝，在健身房磨蹭，到后来每周在江边定期打卡，除了更加健康和学会了“呼呼呼、吸吸吸”的呼吸小窍门以外，还多了一些跟自己相处的时间。</p>\n<p>在跑步之后，和自己对话的场景加了一项：</p>\n<ul>\n<li>安静地看书</li>\n<li>在上班路上听电台/音乐</li>\n<li><strong>跑步</strong></li>\n</ul>\n<p>在日常生活/工作中，我的大部分时间在写代码/学习写代码、玩手机、看电视剧，做这些事情也许我是一个人在做，但手上、脑子里都被各式各样的东东侵占着，没时间去想。</p>\n<p>还记得有一次跟同事们饭后遛弯，聊起“如何放松”。我们甚至聊到冥想，我就把慢跑介绍给他们，紧张的都市人尤其值得拥有。</p>\n<p>确实是这样的，有时候越睡越困，身体在休息，但思绪并没有释放，精神压力没有得到释放，还是一样的累。记得有一天心情不太舒畅，去江边跑步，刚开始我还是一样的没心情，但跑着跑着，当我把所有注意力放在呼吸和沿途的人和景上面，整个人放空地前进前进前进，跑完之后，我有种满血复活的感觉。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/running2.jpg\" alt=\"\"></p>\n<p>最近杭州有点冷，最冷的时候零下了，实在没勇气出门，暖和点要继续跑起来，不要浪费杭州那么棒的江边跑道。</p>\n<h3 id=\"理财\"><a href=\"#理财\" class=\"headerlink\" title=\"理财\"></a>理财</h3><p>理财这块，也是每年比较羞于启齿的，哈哈，因为这几年几乎每年都是跑输大盘的，没赢过。</p>\n<p>每年的理财KPI也只有一个 —— 能够跑赢大盘。</p>\n<p>感觉得跑赢大盘越来越难了，2017年大盘大概涨了6.56%（2016.12.25-2017.12.25），真是Holy Shxx!!!</p>\n<p>说回我自己的篮子吧，货基、股基、A股、美股、p2p啥都有点，就不细说了，12月份上车数字货币世界，Cardano给我打了个神助攻，一年下来终于没白玩了，哈哈。</p>\n<blockquote>\n<p>整个篮子浮盈10.24%</p>\n</blockquote>\n<p>2018年开始，放弃A股啦，每年都要用小基金赚得那点钱来补贴，左手倒右手，被割韭菜，年年白玩，今年做了一个艰难的决定，把深套的全都割了，不玩了！</p>\n<p>嘿嘿，不过我可以和新欢一起玩，指数基金和Bitcoin的一众后宫。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>每年的目标是40本。</p>\n<p>整理了一下，截至12.31，总共读了25本，其中跟工作/技术相关的有9本，经济/理财相关的4本。</p>\n<p>今年技术书比较多，毕竟今年最大的目标是找工作，在投简历前几个月，为了让自己不要太out，只能多读书了，哈哈。</p>\n<p>不过我的年度之书是这本，技术会过时，但经济概念不会，风趣易懂的经济故事书（其实后面概念理解起来也挺难的，哈哈，我打算二刷~）</p>\n<blockquote>\n<p><a href=\"https://book.douban.com/subject/26985299/\" target=\"_blank\" rel=\"noopener\">《小岛经济学：鱼、美元和经济的故事》</a></p>\n</blockquote>\n<h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><p>今年2月份开始，写的一个专栏，记录我的新西兰生活 —— <a href=\"https://read.douban.com/column/6032026/\" target=\"_blank\" rel=\"noopener\">《中土世界漂流记》</a>。讲真，更新频率不是很稳定，今年就写了7篇，这么更新到2019年肯定还在连载。那在2018年，还是希望隔周更新的，哈哈，我努力。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/column.png\" alt=\"\"></p>\n<h3 id=\"2017小结\"><a href=\"#2017小结\" class=\"headerlink\" title=\"2017小结\"></a>2017小结</h3><p>以上都是常规的计划内的目标，今年也有一些“小意外”。</p>\n<p>譬如遇见我家大王 —— 胖达。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/pangda.jpg\" alt=\"&quot;小时候&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/pangda-july.jpg\" alt=\"&quot;小学鸡&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/pangda-sep.jpg\" alt=\"&quot;一秒变大叔&quot;\"></p>\n<p>没错，他就是一只丑萌的田园猫。</p>\n<h2 id=\"Personal-Targets-for-2018\"><a href=\"#Personal-Targets-for-2018\" class=\"headerlink\" title=\"Personal Targets for 2018\"></a>Personal Targets for 2018</h2><blockquote>\n<p>Hi, 2018</p>\n</blockquote>\n<p>新的一年，个人目标的划分，还是类似的，不再这里铺开了，实现情况看明年show time ：）</p>\n<ul>\n<li>个人修养类</li>\n<li>运动</li>\n<li>理财（跑赢大盘）</li>\n<li>读书（40本）</li>\n<li>写作（专栏隔周更新）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://sinacloud.net/woodysblog/year-2017/DSC05035.jpg\" alt=\"&quot;龙井路秋色&quot;\"><br>（龙井路秋色 —— 摄于杭州龙井路 2017.12.03）</p>\n<h2 id=\"Personal-Targets-for-2017\"><a href=\"#Personal-Targets-for-2017\" class=\"headerlink\" title=\"Personal Targets for 2017\"></a>Personal Targets for 2017</h2><ul>\n<li>√ 找一份好工作</li>\n<li>√ 运动</li>\n<li>√ 理财（跑赢大盘）</li>\n<li>× 读书（40本）</li>\n</ul>\n<p>在2017年的尾巴，汇总了下今年都做了什么，KPI达标了没？讲真，在我工作的这几年间，今年的达标程度算非常的高，还蛮开心的。</p>\n<h3 id=\"找一份好工作\"><a href=\"#找一份好工作\" class=\"headerlink\" title=\"找一份好工作\"></a>找一份好工作</h3><p>找工作的故事，之前写过一篇<a href=\"/blog/archives/begin-again-2017/\">《Begin again, 2017》</a>，在此就不再叙述了。</p>\n<p>相信很多小伙伴们都知道的，今年5月份，我来了杭州，来到职业生涯中的第二家公司 —— 阿里巴巴，供职于国内第一大B2B平台<a href=\"https://www.1688.com\" target=\"_blank\" rel=\"noopener\">1688</a>。简而言之，我现在做批发的，要是有想跟1688合作的朋友们，尤其是大新塘做牛仔的土豪们，欢迎联系我 :)</p>\n<p>想入职阿里的靠谱前端朋友们，也欢迎把简历发给我：  </p>\n<p><a href=\"mailto:`jiwu.wyy@alibaba-inc.com\" target=\"_blank\" rel=\"noopener\">`jiwu.wyy@alibaba-inc.com</a>`</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/1688.jpg\" alt=\"\"></p>\n<p>好啦，广告打完，说回这项KPI吧，个人认为，确实是找到一份<strong>好工作</strong>的。</p>\n<p>我遇到了一个技术出身且很能talk、格局很高、EQ也非常高的老大 —— 重鱼，在融入新工作环境过程中，他给予我很多的帮助和建议。不过融入只是第一步，相信后续的发展，我能从他身上学到更多的东西。</p>\n<p>我遇到了一群很nice很有能力的小伙伴们，在这就不一一点名，你们懂的，从大家身上我也get到很多新技能，不仅仅有技术或者业务能力的提高，还看到程序猿的另一面，不仅会敲代码，还玩得了狼人杀、可以一起去泡吧。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/team1.jpg\" alt=\"\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/team2.jpg\" alt=\"\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/team3.jpg\" alt=\"\"></p>\n<p>我看到了我想看到的阿里。我一直很想来阿里看看，想看看在马老师带领下的阿里巴巴是怎样的。我来的时间不长，且只在一个业务线，了解尚浅。</p>\n<p>在新人培训（百年阿里）中，我认识了一些来自不同部门、各种岗位的同学们，有刚刚从学校步入职场的“小学鸡”，有在职场打滚多年、拥有若干创业经验的“老司机”。我从他们身上，一样的是，能看到大家对于新环境的憧憬和激情，这就是我想看到的阿里。</p>\n<p>当然他们很多跟我一样，是马老师的粉丝，想来一睹马老师真容。在今年阿里巴巴B2B年会，还真看到马老师了，不过我是山顶的朋友，只能透过大屏幕远远的看他。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/b2b-jack.jpg\" alt=\"\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/b2b.jpg\" alt=\"\"></p>\n<h3 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h3><p>运动这一项，一直没有确定的kpi，一切随风，这几年，基本没有达标过（捂脸）</p>\n<p>今年在运动这一栏，万万没想到，居然有东西可以写：</p>\n<blockquote>\n<p>慢跑训练<br>从9.18开始，一周3次，持续了6周<br>最长时间 42 Mins，最远距离 4.82 KM，最快配速 8:02 min/KM</p>\n</blockquote>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/running.jpg\" alt=\"\"></p>\n<p>对于跑步，一开始我是拒绝的，哪有人喜欢这样的运动，累cry，又容易跑着跑着就肚子疼，简直懒得动，有木有！</p>\n<p>第1周，在公司的健身房，跑1分钟，走2分钟，8个回合，共24分钟2.6公里；<br>第6周，在江边，跑5分钟，走1分钟，7个回合，共42分钟4.82公里。</p>\n<p>在这几个礼拜训练之后，感觉还是很不一样的。从一开始的拒绝，在健身房磨蹭，到后来每周在江边定期打卡，除了更加健康和学会了“呼呼呼、吸吸吸”的呼吸小窍门以外，还多了一些跟自己相处的时间。</p>\n<p>在跑步之后，和自己对话的场景加了一项：</p>\n<ul>\n<li>安静地看书</li>\n<li>在上班路上听电台/音乐</li>\n<li><strong>跑步</strong></li>\n</ul>\n<p>在日常生活/工作中，我的大部分时间在写代码/学习写代码、玩手机、看电视剧，做这些事情也许我是一个人在做，但手上、脑子里都被各式各样的东东侵占着，没时间去想。</p>\n<p>还记得有一次跟同事们饭后遛弯，聊起“如何放松”。我们甚至聊到冥想，我就把慢跑介绍给他们，紧张的都市人尤其值得拥有。</p>\n<p>确实是这样的，有时候越睡越困，身体在休息，但思绪并没有释放，精神压力没有得到释放，还是一样的累。记得有一天心情不太舒畅，去江边跑步，刚开始我还是一样的没心情，但跑着跑着，当我把所有注意力放在呼吸和沿途的人和景上面，整个人放空地前进前进前进，跑完之后，我有种满血复活的感觉。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/running2.jpg\" alt=\"\"></p>\n<p>最近杭州有点冷，最冷的时候零下了，实在没勇气出门，暖和点要继续跑起来，不要浪费杭州那么棒的江边跑道。</p>\n<h3 id=\"理财\"><a href=\"#理财\" class=\"headerlink\" title=\"理财\"></a>理财</h3><p>理财这块，也是每年比较羞于启齿的，哈哈，因为这几年几乎每年都是跑输大盘的，没赢过。</p>\n<p>每年的理财KPI也只有一个 —— 能够跑赢大盘。</p>\n<p>感觉得跑赢大盘越来越难了，2017年大盘大概涨了6.56%（2016.12.25-2017.12.25），真是Holy Shxx!!!</p>\n<p>说回我自己的篮子吧，货基、股基、A股、美股、p2p啥都有点，就不细说了，12月份上车数字货币世界，Cardano给我打了个神助攻，一年下来终于没白玩了，哈哈。</p>\n<blockquote>\n<p>整个篮子浮盈10.24%</p>\n</blockquote>\n<p>2018年开始，放弃A股啦，每年都要用小基金赚得那点钱来补贴，左手倒右手，被割韭菜，年年白玩，今年做了一个艰难的决定，把深套的全都割了，不玩了！</p>\n<p>嘿嘿，不过我可以和新欢一起玩，指数基金和Bitcoin的一众后宫。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>每年的目标是40本。</p>\n<p>整理了一下，截至12.31，总共读了25本，其中跟工作/技术相关的有9本，经济/理财相关的4本。</p>\n<p>今年技术书比较多，毕竟今年最大的目标是找工作，在投简历前几个月，为了让自己不要太out，只能多读书了，哈哈。</p>\n<p>不过我的年度之书是这本，技术会过时，但经济概念不会，风趣易懂的经济故事书（其实后面概念理解起来也挺难的，哈哈，我打算二刷~）</p>\n<blockquote>\n<p><a href=\"https://book.douban.com/subject/26985299/\" target=\"_blank\" rel=\"noopener\">《小岛经济学：鱼、美元和经济的故事》</a></p>\n</blockquote>\n<h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><p>今年2月份开始，写的一个专栏，记录我的新西兰生活 —— <a href=\"https://read.douban.com/column/6032026/\" target=\"_blank\" rel=\"noopener\">《中土世界漂流记》</a>。讲真，更新频率不是很稳定，今年就写了7篇，这么更新到2019年肯定还在连载。那在2018年，还是希望隔周更新的，哈哈，我努力。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/column.png\" alt=\"\"></p>\n<h3 id=\"2017小结\"><a href=\"#2017小结\" class=\"headerlink\" title=\"2017小结\"></a>2017小结</h3><p>以上都是常规的计划内的目标，今年也有一些“小意外”。</p>\n<p>譬如遇见我家大王 —— 胖达。</p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/pangda.jpg\" alt=\"&quot;小时候&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/pangda-july.jpg\" alt=\"&quot;小学鸡&quot;\"></p>\n<p><img src=\"http://sinacloud.net/woodysblog/year-2017/pangda-sep.jpg\" alt=\"&quot;一秒变大叔&quot;\"></p>\n<p>没错，他就是一只丑萌的田园猫。</p>\n<h2 id=\"Personal-Targets-for-2018\"><a href=\"#Personal-Targets-for-2018\" class=\"headerlink\" title=\"Personal Targets for 2018\"></a>Personal Targets for 2018</h2><blockquote>\n<p>Hi, 2018</p>\n</blockquote>\n<p>新的一年，个人目标的划分，还是类似的，不再这里铺开了，实现情况看明年show time ：）</p>\n<ul>\n<li>个人修养类</li>\n<li>运动</li>\n<li>理财（跑赢大盘）</li>\n<li>读书（40本）</li>\n<li>写作（专栏隔周更新）</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjm4n1x7t0004zvr333bdsf78","category_id":"cjm4n1x7y0007zvr3agc7l8mo","_id":"cjm4n1x86000hzvr3kqurapqq"},{"post_id":"cjm4n1x81000czvr30rmmfnuj","category_id":"cjm4n1x82000dzvr3ae0p6b83","_id":"cjm4n1x8d000szvr35ru3amot"},{"post_id":"cjm4n1x7x0006zvr3t5rvbpoc","category_id":"cjm4n1x82000dzvr3ae0p6b83","_id":"cjm4n1x8f000yzvr3t9lru0w8"},{"post_id":"cjm4n1x7x0006zvr3t5rvbpoc","category_id":"cjm4n1x8a000ozvr3di8z1k2b","_id":"cjm4n1x8g0010zvr35sco10od"},{"post_id":"cjm4n1x8n001czvr3nuexppxq","category_id":"cjm4n1x82000dzvr3ae0p6b83","_id":"cjm4n1x8s001lzvr3s8wtj2ww"},{"post_id":"cjm4n1x8o001ezvr3p58rdjwy","category_id":"cjm4n1x8r001jzvr35tsy3ywb","_id":"cjm4n1x8x001wzvr3wivv6v8g"},{"post_id":"cjm4n1x8v001szvr3y4ucsteq","category_id":"cjm4n1x7y0007zvr3agc7l8mo","_id":"cjm4n1x900022zvr3nlu6093w"},{"post_id":"cjm4n1x8z0021zvr3a92gayqc","category_id":"cjm4n1x8r001jzvr35tsy3ywb","_id":"cjm4n1x930028zvr30i311zhv"},{"post_id":"cjm4n1x930027zvr3m2x3kqna","category_id":"cjm4n1x7y0007zvr3agc7l8mo","_id":"cjm4n1x9f002szvr37fium9do"},{"post_id":"cjm4n1x930027zvr3m2x3kqna","category_id":"cjm4n1x97002hzvr37162gzy9","_id":"cjm4n1x9h002wzvr36c33u7mp"},{"post_id":"cjm4n1x9b002pzvr3pd797rzy","category_id":"cjm4n1x8r001jzvr35tsy3ywb","_id":"cjm4n1x9i0030zvr3h41kyxqt"},{"post_id":"cjm4n1x920025zvr36uindsdb","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1x9k0033zvr3cakcgz43"},{"post_id":"cjm4n1x920025zvr36uindsdb","category_id":"cjm4n1x9b002nzvr3mnwgn4qy","_id":"cjm4n1x9m0036zvr3qulxjj9z"},{"post_id":"cjm4n1x9g002vzvr3h3to90b9","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1x9n0039zvr3hte9d5aj"},{"post_id":"cjm4n1x98002jzvr3ff33su87","category_id":"cjm4n1x9f002uzvr3rjyxbxz2","_id":"cjm4n1x9p003ezvr3le0dt9kg"},{"post_id":"cjm4n1x9j0032zvr3gdvodq46","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1x9q003gzvr3nc4rnzar"},{"post_id":"cjm4n1x9d002rzvr3b176q25b","category_id":"cjm4n1x9f002uzvr3rjyxbxz2","_id":"cjm4n1x9s003kzvr34l2fhp3o"},{"post_id":"cjm4n1x9o003dzvr35ohvtsno","category_id":"cjm4n1x82000dzvr3ae0p6b83","_id":"cjm4n1x9u003nzvr3nhc0aojv"},{"post_id":"cjm4n1x9k0035zvr3oo8cioa7","category_id":"cjm4n1x9o003czvr3bmqpbimj","_id":"cjm4n1x9w003rzvr3mxa2ezqt"},{"post_id":"cjm4n1x9r003jzvr3zv6sd8xb","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1x9x003vzvr3o8qkof8j"},{"post_id":"cjm4n1x9w003tzvr3ntrf8678","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1xa00043zvr38th260i2"},{"post_id":"cjm4n1x9y003yzvr3d624bmeh","category_id":"cjm4n1x82000dzvr3ae0p6b83","_id":"cjm4n1xa20048zvr30j8uzqq6"},{"post_id":"cjm4n1x9t003mzvr3sx9hurrs","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1xa4004bzvr300ly9ve5"},{"post_id":"cjm4n1x9t003mzvr3sx9hurrs","category_id":"cjm4n1x9x003uzvr3ultzocum","_id":"cjm4n1xa5004fzvr3khu72w8g"},{"post_id":"cjm4n1xa00042zvr3fyjh982r","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1xa6004izvr3mxgokntu"},{"post_id":"cjm4n1xa20047zvr3kgpjjf10","category_id":"cjm4n1x7y0007zvr3agc7l8mo","_id":"cjm4n1xa8004mzvr3yo26z424"},{"post_id":"cjm4n1xa3004azvr3u3ohhni7","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1xaa004pzvr3mr3y6i45"},{"post_id":"cjm4n1x9z0040zvr3qriyxjaz","category_id":"cjm4n1xa10045zvr3zmt5w9rj","_id":"cjm4n1xac004tzvr3rzqi3q3n"},{"post_id":"cjm4n1xa6004hzvr3zx722vdr","category_id":"cjm4n1x94002bzvr3p54bdx7m","_id":"cjm4n1xae004xzvr3xp3vpd97"},{"post_id":"cjm4n1xa8004ozvr3zb5tc24q","category_id":"cjm4n1xad004uzvr3ajkt4ynp","_id":"cjm4n1xak005dzvr349mi6ery"},{"post_id":"cjm4n1xa8004ozvr3zb5tc24q","category_id":"cjm4n1xaj0056zvr3h7ufjflz","_id":"cjm4n1xal005fzvr3jtf3ozf6"}],"PostTag":[{"post_id":"cjm4n1x7q0003zvr3rfkb21ws","tag_id":"cjm4n1x7v0005zvr353bjz4jt","_id":"cjm4n1x81000bzvr3pvtj7y9n"},{"post_id":"cjm4n1x7t0004zvr333bdsf78","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1x86000izvr3qpfwfof0"},{"post_id":"cjm4n1x85000gzvr3ejjs4oqx","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1x89000mzvr3aok3lhce"},{"post_id":"cjm4n1x7x0006zvr3t5rvbpoc","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x8d000tzvr3uwcc8rwy"},{"post_id":"cjm4n1x7x0006zvr3t5rvbpoc","tag_id":"cjm4n1x89000lzvr3ggj94it3","_id":"cjm4n1x8e000vzvr3riuibh4r"},{"post_id":"cjm4n1x8f000zzvr3ads2gn4v","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x8i0013zvr3qjczz32j"},{"post_id":"cjm4n1x8g0011zvr3sbrdbkzf","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1x8j0015zvr3enofm66p"},{"post_id":"cjm4n1x8j0016zvr3fmqn7uy6","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x8l0019zvr3rsv06s9u"},{"post_id":"cjm4n1x7z0008zvr3rlkyfuww","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x8o001dzvr38ya2i2wp"},{"post_id":"cjm4n1x7z0008zvr3rlkyfuww","tag_id":"cjm4n1x8f000xzvr31faieieg","_id":"cjm4n1x8p001fzvr3i7eoi28f"},{"post_id":"cjm4n1x7z0008zvr3rlkyfuww","tag_id":"cjm4n1x8h0012zvr3fubwk18j","_id":"cjm4n1x8r001izvr331li9te7"},{"post_id":"cjm4n1x7z0008zvr3rlkyfuww","tag_id":"cjm4n1x8k0017zvr3t9n8ylhp","_id":"cjm4n1x8s001mzvr3xmc7iozc"},{"post_id":"cjm4n1x8n001czvr3nuexppxq","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x8t001pzvr3matd26xf"},{"post_id":"cjm4n1x800009zvr3xcv2yf50","tag_id":"cjm4n1x8n001bzvr36mrx79c0","_id":"cjm4n1x8v001rzvr3w3ojls01"},{"post_id":"cjm4n1x800009zvr3xcv2yf50","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x8w001uzvr3bqwjob7r"},{"post_id":"cjm4n1x81000czvr30rmmfnuj","tag_id":"cjm4n1x8t001ozvr37q50emxj","_id":"cjm4n1x8y001xzvr3w53f4n9w"},{"post_id":"cjm4n1x8v001szvr3y4ucsteq","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1x8z0020zvr3c723ftnz"},{"post_id":"cjm4n1x83000ezvr35rk0v5ry","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x920026zvr3x9ka0m1s"},{"post_id":"cjm4n1x83000ezvr35rk0v5ry","tag_id":"cjm4n1x8t001ozvr37q50emxj","_id":"cjm4n1x940029zvr3yshse9rb"},{"post_id":"cjm4n1x94002czvr3z7sjnfyo","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x96002fzvr3t56fb5fb"},{"post_id":"cjm4n1x88000kzvr3z2mqcuc6","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x98002izvr3ihjl6ce9"},{"post_id":"cjm4n1x88000kzvr3z2mqcuc6","tag_id":"cjm4n1x94002azvr38kz7yhy7","_id":"cjm4n1x99002lzvr33r1tnl6c"},{"post_id":"cjm4n1x97002gzvr342v5rdui","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x9b002ozvr3y21jguu7"},{"post_id":"cjm4n1x89000nzvr351b6t3rc","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x9f002tzvr3r878yp4o"},{"post_id":"cjm4n1x89000nzvr351b6t3rc","tag_id":"cjm4n1x94002azvr38kz7yhy7","_id":"cjm4n1x9h002xzvr3t8iudcnj"},{"post_id":"cjm4n1x8b000pzvr3xo1f9fl9","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x9m0037zvr3o9w5c1wz"},{"post_id":"cjm4n1x8b000pzvr3xo1f9fl9","tag_id":"cjm4n1x94002azvr38kz7yhy7","_id":"cjm4n1x9n003azvr3ehsybc5o"},{"post_id":"cjm4n1x9o003dzvr35ohvtsno","tag_id":"cjm4n1x8t001ozvr37q50emxj","_id":"cjm4n1x9r003izvr33g5wngos"},{"post_id":"cjm4n1x9o003dzvr35ohvtsno","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1x9s003lzvr3cztfnqmg"},{"post_id":"cjm4n1x8c000rzvr3pnz6vv5d","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x9v003pzvr3113b6cg5"},{"post_id":"cjm4n1x8c000rzvr3pnz6vv5d","tag_id":"cjm4n1x94002azvr38kz7yhy7","_id":"cjm4n1x9w003szvr35atq0py2"},{"post_id":"cjm4n1x8d000uzvr343h90wu7","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x9x003wzvr3y1h2ktau"},{"post_id":"cjm4n1x8d000uzvr343h90wu7","tag_id":"cjm4n1x94002azvr38kz7yhy7","_id":"cjm4n1x9y003zzvr32hmgqk69"},{"post_id":"cjm4n1x9v003qzvr3hiltk7iz","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1x9z0041zvr3hyhxqxy9"},{"post_id":"cjm4n1x9v003qzvr3hiltk7iz","tag_id":"cjm4n1x8n001bzvr36mrx79c0","_id":"cjm4n1xa20046zvr3hwac546m"},{"post_id":"cjm4n1x9z0040zvr3qriyxjaz","tag_id":"cjm4n1x89000lzvr3ggj94it3","_id":"cjm4n1xa30049zvr3t8rv7dek"},{"post_id":"cjm4n1x8e000wzvr3v7n4h357","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1xa4004dzvr3ui4wxkfe"},{"post_id":"cjm4n1x8e000wzvr3v7n4h357","tag_id":"cjm4n1x9u003ozvr3dlyvk4du","_id":"cjm4n1xa6004gzvr39js29g86"},{"post_id":"cjm4n1x8e000wzvr3v7n4h357","tag_id":"cjm4n1x9x003xzvr3en5fxazu","_id":"cjm4n1xa7004kzvr3x0xyvfgd"},{"post_id":"cjm4n1xa5004ezvr3lp3qsi9y","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1xa8004nzvr3k3b2sr9y"},{"post_id":"cjm4n1x8i0014zvr3tdny2h2h","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xaa004rzvr353ukebwy"},{"post_id":"cjm4n1x8i0014zvr3tdny2h2h","tag_id":"cjm4n1x94002azvr38kz7yhy7","_id":"cjm4n1xad004vzvr326gvmyhj"},{"post_id":"cjm4n1xa6004hzvr3zx722vdr","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xae004zzvr3rmpaf68x"},{"post_id":"cjm4n1xa6004hzvr3zx722vdr","tag_id":"cjm4n1x7v0005zvr353bjz4jt","_id":"cjm4n1xag0051zvr3cyclr11f"},{"post_id":"cjm4n1x8k0018zvr34hneef21","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1xai0053zvr3frbpqrjv"},{"post_id":"cjm4n1x8k0018zvr34hneef21","tag_id":"cjm4n1xa6004jzvr3qk4p4vla","_id":"cjm4n1xaj0057zvr3976hplze"},{"post_id":"cjm4n1x8m001azvr3eb3euj87","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xak0058zvr380n2cw1q"},{"post_id":"cjm4n1x8m001azvr3eb3euj87","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1xak005azvr3ttrzfpxj"},{"post_id":"cjm4n1x8o001ezvr3p58rdjwy","tag_id":"cjm4n1xae004yzvr3086nzj3n","_id":"cjm4n1xak005bzvr3rduy7j70"},{"post_id":"cjm4n1x8o001ezvr3p58rdjwy","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xal005ezvr3meaicumi"},{"post_id":"cjm4n1x8p001gzvr3h8mu62bg","tag_id":"cjm4n1xak0059zvr37mzsn1fs","_id":"cjm4n1xal005hzvr3oqkuvsaj"},{"post_id":"cjm4n1x8p001gzvr3h8mu62bg","tag_id":"cjm4n1xak005czvr38ftvlrrt","_id":"cjm4n1xal005izvr3h9bk0vi2"},{"post_id":"cjm4n1x8r001kzvr3exdqz2c4","tag_id":"cjm4n1xal005gzvr3ktswhwp2","_id":"cjm4n1xal005kzvr3lfu7qxco"},{"post_id":"cjm4n1x8s001nzvr3ixbvpt2n","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1xam005mzvr3eblqacgg"},{"post_id":"cjm4n1x8s001nzvr3ixbvpt2n","tag_id":"cjm4n1xal005jzvr3bwxlvx4u","_id":"cjm4n1xam005nzvr3y47k9n19"},{"post_id":"cjm4n1x8u001qzvr3cpaxthu1","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xan005qzvr3lwke9plk"},{"post_id":"cjm4n1x8u001qzvr3cpaxthu1","tag_id":"cjm4n1xam005ozvr3yedwf2jr","_id":"cjm4n1xan005rzvr3u2sdg897"},{"post_id":"cjm4n1x8w001vzvr3mw5pk71g","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xao005uzvr3czkzm1jr"},{"post_id":"cjm4n1x8w001vzvr3mw5pk71g","tag_id":"cjm4n1xan005szvr39w8v7nxk","_id":"cjm4n1xao005vzvr3j21e3l9x"},{"post_id":"cjm4n1x8y001yzvr3qrsutnho","tag_id":"cjm4n1x8t001ozvr37q50emxj","_id":"cjm4n1xap005xzvr3ly1t8i8g"},{"post_id":"cjm4n1x8y001yzvr3qrsutnho","tag_id":"cjm4n1xan005tzvr3drv0lpu5","_id":"cjm4n1xap005yzvr3v23caavf"},{"post_id":"cjm4n1x8z0021zvr3a92gayqc","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xap0060zvr38ytoqko6"},{"post_id":"cjm4n1x8z0021zvr3a92gayqc","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1xaq0061zvr3h7w3q1yh"},{"post_id":"cjm4n1x900023zvr3758vwsvu","tag_id":"cjm4n1x8t001ozvr37q50emxj","_id":"cjm4n1xar0065zvr3q2i98sw7"},{"post_id":"cjm4n1x900023zvr3758vwsvu","tag_id":"cjm4n1xap005zzvr3amwa3zjc","_id":"cjm4n1xar0066zvr353ywxzch"},{"post_id":"cjm4n1x900023zvr3758vwsvu","tag_id":"cjm4n1xaq0062zvr37ubcx3yj","_id":"cjm4n1xas0068zvr3mwjolk0e"},{"post_id":"cjm4n1x900023zvr3758vwsvu","tag_id":"cjm4n1xaq0063zvr396kkqmo6","_id":"cjm4n1xas0069zvr3xlrxrrtr"},{"post_id":"cjm4n1x920025zvr36uindsdb","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xas006bzvr3ix9rhmqk"},{"post_id":"cjm4n1x920025zvr36uindsdb","tag_id":"cjm4n1x89000lzvr3ggj94it3","_id":"cjm4n1xas006czvr31b44ouvg"},{"post_id":"cjm4n1x930027zvr3m2x3kqna","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1xat006ezvr3uo68xuz6"},{"post_id":"cjm4n1x930027zvr3m2x3kqna","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xat006fzvr3ebjhzkfk"},{"post_id":"cjm4n1x95002dzvr3h6bpyygc","tag_id":"cjm4n1xas006azvr3qfwt5abp","_id":"cjm4n1xau006izvr3z1mqxtm0"},{"post_id":"cjm4n1x95002dzvr3h6bpyygc","tag_id":"cjm4n1xat006dzvr3r9d7zv2t","_id":"cjm4n1xau006jzvr3acg1lf34"},{"post_id":"cjm4n1x95002dzvr3h6bpyygc","tag_id":"cjm4n1xat006gzvr3ut1ey15w","_id":"cjm4n1xau006lzvr3il37dbwx"},{"post_id":"cjm4n1x98002jzvr3ff33su87","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1xav006nzvr3355dla49"},{"post_id":"cjm4n1x98002jzvr3ff33su87","tag_id":"cjm4n1xat006hzvr3lklymlik","_id":"cjm4n1xav006ozvr3r6e9u1xs"},{"post_id":"cjm4n1x98002jzvr3ff33su87","tag_id":"cjm4n1xau006kzvr32e9igpqv","_id":"cjm4n1xav006qzvr3zpnlpr6c"},{"post_id":"cjm4n1x9a002mzvr34gv0gj1u","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1xaw006uzvr38bjmp7v4"},{"post_id":"cjm4n1x9a002mzvr34gv0gj1u","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xaw006vzvr3i4a0y33r"},{"post_id":"cjm4n1x9a002mzvr34gv0gj1u","tag_id":"cjm4n1xav006pzvr3roicrk8d","_id":"cjm4n1xax006xzvr3ua8sqguu"},{"post_id":"cjm4n1x9a002mzvr34gv0gj1u","tag_id":"cjm4n1xav006rzvr3y6g0ins4","_id":"cjm4n1xax006yzvr36v9omctv"},{"post_id":"cjm4n1x9a002mzvr34gv0gj1u","tag_id":"cjm4n1xaw006szvr30sog88tv","_id":"cjm4n1xax0070zvr3qo9gk3qh"},{"post_id":"cjm4n1x9b002pzvr3pd797rzy","tag_id":"cjm4n1xaw006tzvr3p6zmj6k6","_id":"cjm4n1xay0072zvr34civews4"},{"post_id":"cjm4n1x9b002pzvr3pd797rzy","tag_id":"cjm4n1xaw006wzvr38h5vi7p7","_id":"cjm4n1xay0073zvr3eig2kjxb"},{"post_id":"cjm4n1x9b002pzvr3pd797rzy","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xaz0075zvr3wxq2aloe"},{"post_id":"cjm4n1x9d002rzvr3b176q25b","tag_id":"cjm4n1xau006kzvr32e9igpqv","_id":"cjm4n1xaz0076zvr31v4m635h"},{"post_id":"cjm4n1x9g002vzvr3h3to90b9","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xb00078zvr3fxmenc7o"},{"post_id":"cjm4n1x9i002zzvr3tzx8ni8y","tag_id":"cjm4n1x8t001ozvr37q50emxj","_id":"cjm4n1xb1007czvr3yayiqyhw"},{"post_id":"cjm4n1x9i002zzvr3tzx8ni8y","tag_id":"cjm4n1xaz0077zvr3ye1zfnt4","_id":"cjm4n1xb1007dzvr3j5pwyr64"},{"post_id":"cjm4n1x9i002zzvr3tzx8ni8y","tag_id":"cjm4n1xb00079zvr3h78h0nav","_id":"cjm4n1xb2007fzvr3inn9o0tg"},{"post_id":"cjm4n1x9i002zzvr3tzx8ni8y","tag_id":"cjm4n1xb0007azvr337y1et40","_id":"cjm4n1xb2007gzvr3psjeipx4"},{"post_id":"cjm4n1x9j0032zvr3gdvodq46","tag_id":"cjm4n1xb1007bzvr3hprrqf3z","_id":"cjm4n1xb3007izvr3qpd98kt8"},{"post_id":"cjm4n1x9j0032zvr3gdvodq46","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xb3007jzvr3u818878x"},{"post_id":"cjm4n1x9k0035zvr3oo8cioa7","tag_id":"cjm4n1xb2007hzvr3v4mke1vt","_id":"cjm4n1xb3007lzvr3uts3pzn1"},{"post_id":"cjm4n1x9m0038zvr3zrtfxglp","tag_id":"cjm4n1xb3007kzvr34b939klz","_id":"cjm4n1xb5007pzvr3sn7mvn8h"},{"post_id":"cjm4n1x9m0038zvr3zrtfxglp","tag_id":"cjm4n1xb3007mzvr3mieocwn4","_id":"cjm4n1xb5007qzvr33kwc66qt"},{"post_id":"cjm4n1x9m0038zvr3zrtfxglp","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1xb5007szvr37c67jomv"},{"post_id":"cjm4n1x9m0038zvr3zrtfxglp","tag_id":"cjm4n1xat006dzvr3r9d7zv2t","_id":"cjm4n1xb6007tzvr3s2zvyp3x"},{"post_id":"cjm4n1x9p003fzvr3uxqt2mxl","tag_id":"cjm4n1x8c000qzvr37y6pi6dk","_id":"cjm4n1xb7007wzvr36tvcrvlz"},{"post_id":"cjm4n1x9p003fzvr3uxqt2mxl","tag_id":"cjm4n1xb4007ozvr3h45ms4zj","_id":"cjm4n1xb7007xzvr36i65sepx"},{"post_id":"cjm4n1x9p003fzvr3uxqt2mxl","tag_id":"cjm4n1xb5007rzvr3tmjk2ogi","_id":"cjm4n1xb7007zzvr308eayktu"},{"post_id":"cjm4n1x9p003fzvr3uxqt2mxl","tag_id":"cjm4n1xb6007uzvr3n8gy52j5","_id":"cjm4n1xb80080zvr3yw8c8lhd"},{"post_id":"cjm4n1x9r003jzvr3zv6sd8xb","tag_id":"cjm4n1xb3007kzvr34b939klz","_id":"cjm4n1xb90083zvr354u1tu53"},{"post_id":"cjm4n1x9r003jzvr3zv6sd8xb","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xb90084zvr3fffufvtg"},{"post_id":"cjm4n1x9r003jzvr3zv6sd8xb","tag_id":"cjm4n1xb80081zvr35xnp8lep","_id":"cjm4n1xb90086zvr3b7q78ifl"},{"post_id":"cjm4n1x9t003mzvr3sx9hurrs","tag_id":"cjm4n1xb80082zvr30ezzppax","_id":"cjm4n1xba0088zvr3yi4x25yy"},{"post_id":"cjm4n1x9t003mzvr3sx9hurrs","tag_id":"cjm4n1xb90085zvr33kevpx34","_id":"cjm4n1xba0089zvr3jxgr8d37"},{"post_id":"cjm4n1x9w003tzvr3ntrf8678","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xbb008bzvr3qhwyq679"},{"post_id":"cjm4n1x9y003yzvr3d624bmeh","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1xbc008ezvr3sdmhjr8p"},{"post_id":"cjm4n1x9y003yzvr3d624bmeh","tag_id":"cjm4n1xba008azvr3odc3ssf5","_id":"cjm4n1xbc008fzvr3dayhv17s"},{"post_id":"cjm4n1x9y003yzvr3d624bmeh","tag_id":"cjm4n1xbb008czvr3spn624uf","_id":"cjm4n1xbc008hzvr3aolhc9lh"},{"post_id":"cjm4n1xa00042zvr3fyjh982r","tag_id":"cjm4n1xae004yzvr3086nzj3n","_id":"cjm4n1xbd008kzvr30zfusy0r"},{"post_id":"cjm4n1xa00042zvr3fyjh982r","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xbd008lzvr358y6fzpm"},{"post_id":"cjm4n1xa00042zvr3fyjh982r","tag_id":"cjm4n1xbc008izvr3xksw3sp3","_id":"cjm4n1xbe008nzvr330cxkhxp"},{"post_id":"cjm4n1xa00042zvr3fyjh982r","tag_id":"cjm4n1x89000lzvr3ggj94it3","_id":"cjm4n1xbe008ozvr3em7zhm5e"},{"post_id":"cjm4n1xa20047zvr3kgpjjf10","tag_id":"cjm4n1x81000azvr3lrziuvp2","_id":"cjm4n1xbe008qzvr32tfqr79c"},{"post_id":"cjm4n1xa20047zvr3kgpjjf10","tag_id":"cjm4n1xbc008jzvr37awlrnee","_id":"cjm4n1xbf008rzvr31ix95nnl"},{"post_id":"cjm4n1xa7004lzvr3td7xgv4k","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1xbf008tzvr3pxd0frh8"},{"post_id":"cjm4n1xa7004lzvr3td7xgv4k","tag_id":"cjm4n1xba008azvr3odc3ssf5","_id":"cjm4n1xbf008uzvr3581dv81j"},{"post_id":"cjm4n1xa7004lzvr3td7xgv4k","tag_id":"cjm4n1xbb008czvr3spn624uf","_id":"cjm4n1xbh008wzvr3a1xb10mw"},{"post_id":"cjm4n1xa8004ozvr3zb5tc24q","tag_id":"cjm4n1xbf008szvr3bi59gvbc","_id":"cjm4n1xbh008xzvr3ilwryqus"},{"post_id":"cjm4n1xa8004ozvr3zb5tc24q","tag_id":"cjm4n1xa10044zvr3ycudho7w","_id":"cjm4n1xbi008zzvr3tu5d338h"},{"post_id":"cjm4n1xab004szvr3ytuo1oi6","tag_id":"cjm4n1xat006dzvr3r9d7zv2t","_id":"cjm4n1xbl0092zvr340b2v9pr"},{"post_id":"cjm4n1xab004szvr3ytuo1oi6","tag_id":"cjm4n1xas006azvr3qfwt5abp","_id":"cjm4n1xbl0093zvr34motmsu3"},{"post_id":"cjm4n1xab004szvr3ytuo1oi6","tag_id":"cjm4n1xat006gzvr3ut1ey15w","_id":"cjm4n1xbm0095zvr3mhtoc4p6"},{"post_id":"cjm4n1xad004wzvr3qj38r228","tag_id":"cjm4n1x85000fzvr3k3n7mu2a","_id":"cjm4n1xbm0096zvr3apgl6x4w"},{"post_id":"cjm4n1xad004wzvr3qj38r228","tag_id":"cjm4n1xbi0091zvr3ra4cm8ia","_id":"cjm4n1xbn0098zvr3ldctvcmu"},{"post_id":"cjm4n1xaf0050zvr37wpwlu8f","tag_id":"cjm4n1xbc008jzvr37awlrnee","_id":"cjm4n1xbn0099zvr3pxh9xmcx"},{"post_id":"cjm4n1xag0052zvr3k869ms0o","tag_id":"cjm4n1xbc008jzvr37awlrnee","_id":"cjm4n1xbo009bzvr3t2nmu6sa"},{"post_id":"cjm4n1xai0055zvr362d5ep13","tag_id":"cjm4n1xbc008jzvr37awlrnee","_id":"cjm4n1xbo009czvr3gr1wvymg"}],"Tag":[{"name":"travel","_id":"cjm4n1x7v0005zvr353bjz4jt"},{"name":"life","_id":"cjm4n1x81000azvr3lrziuvp2"},{"name":"tech","_id":"cjm4n1x85000fzvr3k3n7mu2a"},{"name":"work","_id":"cjm4n1x89000lzvr3ggj94it3"},{"name":"front-end","_id":"cjm4n1x8c000qzvr37y6pi6dk"},{"name":"back-end","_id":"cjm4n1x8f000xzvr31faieieg"},{"name":"devops","_id":"cjm4n1x8h0012zvr3fubwk18j"},{"name":"roadmap","_id":"cjm4n1x8k0017zvr3t9n8ylhp"},{"name":"testing","_id":"cjm4n1x8n001bzvr36mrx79c0"},{"name":"blog","_id":"cjm4n1x8t001ozvr37q50emxj"},{"name":"css","_id":"cjm4n1x94002azvr38kz7yhy7"},{"name":"CSS","_id":"cjm4n1x9u003ozvr3dlyvk4du"},{"name":"CSS Variables","_id":"cjm4n1x9x003xzvr3en5fxazu"},{"name":"reading","_id":"cjm4n1xa10044zvr3ycudho7w"},{"name":"git","_id":"cjm4n1xa6004jzvr3qk4p4vla"},{"name":"efficiency","_id":"cjm4n1xae004yzvr3086nzj3n"},{"name":"Google Map","_id":"cjm4n1xak0059zvr37mzsn1fs"},{"name":"gpx","_id":"cjm4n1xak005czvr38ftvlrrt"},{"name":"GraphQL","_id":"cjm4n1xal005gzvr3ktswhwp2"},{"name":"graphql","_id":"cjm4n1xal005jzvr3bwxlvx4u"},{"name":"growth hacker","_id":"cjm4n1xam005ozvr3yedwf2jr"},{"name":"ab testing","_id":"cjm4n1xan005szvr39w8v7nxk"},{"name":"theme","_id":"cjm4n1xan005tzvr3drv0lpu5"},{"name":"travisCI","_id":"cjm4n1xap005zzvr3amwa3zjc"},{"name":"CI","_id":"cjm4n1xaq0062zvr37ubcx3yj"},{"name":"hexo","_id":"cjm4n1xaq0063zvr396kkqmo6"},{"name":"working holiday","_id":"cjm4n1xas006azvr3qfwt5abp"},{"name":"whv","_id":"cjm4n1xat006dzvr3r9d7zv2t"},{"name":"New Zealand","_id":"cjm4n1xat006gzvr3ut1ey15w"},{"name":"mac","_id":"cjm4n1xat006hzvr3lklymlik"},{"name":"study","_id":"cjm4n1xau006kzvr32e9igpqv"},{"name":"javascript animation","_id":"cjm4n1xav006pzvr3roicrk8d"},{"name":"animate","_id":"cjm4n1xav006rzvr3y6g0ins4"},{"name":"velocity.js","_id":"cjm4n1xaw006szvr30sog88tv"},{"name":"coder","_id":"cjm4n1xaw006tzvr3p6zmj6k6"},{"name":"mactalk","_id":"cjm4n1xaw006wzvr38h5vi7p7"},{"name":"hexo-generator-index-plus","_id":"cjm4n1xaz0077zvr3ye1zfnt4"},{"name":"hexo-plugin","_id":"cjm4n1xb00079zvr3h78h0nav"},{"name":"npm","_id":"cjm4n1xb0007azvr337y1et40"},{"name":"happiness","_id":"cjm4n1xb1007bzvr3hprrqf3z"},{"name":"photography","_id":"cjm4n1xb2007hzvr3v4mke1vt"},{"name":"job","_id":"cjm4n1xb3007kzvr34b939klz"},{"name":"baidu","_id":"cjm4n1xb3007mzvr3mieocwn4"},{"name":"performance","_id":"cjm4n1xb4007ozvr3h45ms4zj"},{"name":"reactjs","_id":"cjm4n1xb5007rzvr3tmjk2ogi"},{"name":"translation","_id":"cjm4n1xb6007uzvr3n8gy52j5"},{"name":"resume","_id":"cjm4n1xb80081zvr35xnp8lep"},{"name":"Responsive Web Design","_id":"cjm4n1xb80082zvr30ezzppax"},{"name":"rwd","_id":"cjm4n1xb90085zvr33kevpx34"},{"name":"web","_id":"cjm4n1xba008azvr3odc3ssf5"},{"name":"mobile deug","_id":"cjm4n1xbb008czvr3spn624uf"},{"name":"time management","_id":"cjm4n1xbc008izvr3xksw3sp3"},{"name":"总结","_id":"cjm4n1xbc008jzvr37awlrnee"},{"name":"finance","_id":"cjm4n1xbf008szvr3bi59gvbc"},{"name":"weixin","_id":"cjm4n1xbi0091zvr3ra4cm8ia"}]}}